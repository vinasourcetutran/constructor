
/*
	File Generated by NetTiers templates [www.nettiers.com]
	Generated on : Saturday, December 11, 2010
	Important: Do not modify this file. Edit the file SqlAdvanceRequestProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using RLM.Construction.Entities;
using RLM.Construction.Data;
using RLM.Construction.Data.Bases;

#endregion

namespace RLM.Construction.Data.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="AdvanceRequest"/> entity.
	///</summary>
	public partial class SqlAdvanceRequestProviderBase : AdvanceRequestProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlAdvanceRequestProviderBase"/> instance.
		/// </summary>
		public SqlAdvanceRequestProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlAdvanceRequestProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlAdvanceRequestProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="advanceRequestId">. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Int32 advanceRequestId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.AdvanceRequest_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@AdvanceRequestId", DbType.Int32, advanceRequestId);
			
			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(AdvanceRequest)
					,advanceRequestId);
				EntityManager.StopTracking(entityKey);
			}
			
			if (results == 0)
			{
				//throw new DataException("The record has been already deleted.");
				return false;
			}
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereclause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND)</remarks>
		/// <returns>Returns a typed collection of RLM.Construction.Entities.AdvanceRequest objects.</returns>
		public override RLM.Construction.Entities.TList<AdvanceRequest> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new RLM.Construction.Entities.TList<AdvanceRequest>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.AdvanceRequest_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@AdvanceRequestId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ContractId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@RequestContactorId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ResponseContactorId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@RequestDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ResponseDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@RequestAmount", DbType.Currency, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ResponseAmount", DbType.Currency, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CurrencyUnitId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@RequestComment", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ResponseComment", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Status", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Type", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CreationDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CreationUserId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LastModificationDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LastModifidationUserId", DbType.Int32, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("advancerequestid ") || clause.Trim().StartsWith("advancerequestid="))
				{
					database.SetParameterValue(commandWrapper, "@AdvanceRequestId", 
						clause.Replace("advancerequestid","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("contractid ") || clause.Trim().StartsWith("contractid="))
				{
					database.SetParameterValue(commandWrapper, "@ContractId", 
						clause.Replace("contractid","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("requestcontactorid ") || clause.Trim().StartsWith("requestcontactorid="))
				{
					database.SetParameterValue(commandWrapper, "@RequestContactorId", 
						clause.Replace("requestcontactorid","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("responsecontactorid ") || clause.Trim().StartsWith("responsecontactorid="))
				{
					database.SetParameterValue(commandWrapper, "@ResponseContactorId", 
						clause.Replace("responsecontactorid","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("requestdate ") || clause.Trim().StartsWith("requestdate="))
				{
					database.SetParameterValue(commandWrapper, "@RequestDate", 
						clause.Replace("requestdate","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("responsedate ") || clause.Trim().StartsWith("responsedate="))
				{
					database.SetParameterValue(commandWrapper, "@ResponseDate", 
						clause.Replace("responsedate","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("requestamount ") || clause.Trim().StartsWith("requestamount="))
				{
					database.SetParameterValue(commandWrapper, "@RequestAmount", 
						clause.Replace("requestamount","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("responseamount ") || clause.Trim().StartsWith("responseamount="))
				{
					database.SetParameterValue(commandWrapper, "@ResponseAmount", 
						clause.Replace("responseamount","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("currencyunitid ") || clause.Trim().StartsWith("currencyunitid="))
				{
					database.SetParameterValue(commandWrapper, "@CurrencyUnitId", 
						clause.Replace("currencyunitid","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("requestcomment ") || clause.Trim().StartsWith("requestcomment="))
				{
					database.SetParameterValue(commandWrapper, "@RequestComment", 
						clause.Replace("requestcomment","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("responsecomment ") || clause.Trim().StartsWith("responsecomment="))
				{
					database.SetParameterValue(commandWrapper, "@ResponseComment", 
						clause.Replace("responsecomment","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("status ") || clause.Trim().StartsWith("status="))
				{
					database.SetParameterValue(commandWrapper, "@Status", 
						clause.Replace("status","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("type ") || clause.Trim().StartsWith("type="))
				{
					database.SetParameterValue(commandWrapper, "@Type", 
						clause.Replace("type","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("creationdate ") || clause.Trim().StartsWith("creationdate="))
				{
					database.SetParameterValue(commandWrapper, "@CreationDate", 
						clause.Replace("creationdate","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("creationuserid ") || clause.Trim().StartsWith("creationuserid="))
				{
					database.SetParameterValue(commandWrapper, "@CreationUserId", 
						clause.Replace("creationuserid","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("lastmodificationdate ") || clause.Trim().StartsWith("lastmodificationdate="))
				{
					database.SetParameterValue(commandWrapper, "@LastModificationDate", 
						clause.Replace("lastmodificationdate","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("lastmodifidationuserid ") || clause.Trim().StartsWith("lastmodifidationuserid="))
				{
					database.SetParameterValue(commandWrapper, "@LastModifidationUserId", 
						clause.Replace("lastmodifidationuserid","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			RLM.Construction.Entities.TList<AdvanceRequest> rows = new RLM.Construction.Entities.TList<AdvanceRequest>();
	
				
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally
			{
				if (reader != null) 
					reader.Close();				
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of RLM.Construction.Entities.AdvanceRequest objects.</returns>
		public override RLM.Construction.Entities.TList<AdvanceRequest> Find(TransactionManager transactionManager, SqlFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.AdvanceRequest_Find_Dynamic", typeof(AdvanceRequestColumn), parameters, orderBy, start, pageLength);
			
			if ( parameters != null )
			{
				SqlFilterParameter param;

				for ( int i = 0; i < parameters.Count; i++ )
				{
					param = parameters[i];
					database.AddInParameter(commandWrapper, param.Name, param.DbType, param.Value);
				}
			}

			RLM.Construction.Entities.TList<AdvanceRequest> rows = new RLM.Construction.Entities.TList<AdvanceRequest>();
			IDataReader reader = null;
			
			try
			{
				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally
			{
				if ( reader != null )
					reader.Close();
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of RLM.Construction.Entities.AdvanceRequest objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override RLM.Construction.Entities.TList<AdvanceRequest> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.AdvanceRequest_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			RLM.Construction.Entities.TList<AdvanceRequest> rows = new RLM.Construction.Entities.TList<AdvanceRequest>();
			
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of RLM.Construction.Entities.AdvanceRequest objects.</returns>
		public override RLM.Construction.Entities.TList<AdvanceRequest> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.AdvanceRequest_GetPaged", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			RLM.Construction.Entities.TList<AdvanceRequest> rows = new RLM.Construction.Entities.TList<AdvanceRequest>();
			
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions
	#endregion
	
		#region Get By Index Functions

		#region GetByAdvanceRequestId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK_AdvanceRequest index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="advanceRequestId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="RLM.Construction.Entities.AdvanceRequest"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override RLM.Construction.Entities.AdvanceRequest GetByAdvanceRequestId(TransactionManager transactionManager, System.Int32 advanceRequestId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.AdvanceRequest_GetByAdvanceRequestId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AdvanceRequestId", DbType.Int32, advanceRequestId);
			
			IDataReader reader = null;
			RLM.Construction.Entities.TList<AdvanceRequest> tmp = new RLM.Construction.Entities.TList<AdvanceRequest>();
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk many entity to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the RLM.Construction.Entities.AdvanceRequest object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<RLM.Construction.Entities.AdvanceRequest> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "AdvanceRequest";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("AdvanceRequestId", typeof(System.Int32));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("ContractId", typeof(System.Int32));
			col1.AllowDBNull = true;		
			DataColumn col2 = dataTable.Columns.Add("RequestContactorId", typeof(System.Int32));
			col2.AllowDBNull = false;		
			DataColumn col3 = dataTable.Columns.Add("ResponseContactorId", typeof(System.Int32));
			col3.AllowDBNull = true;		
			DataColumn col4 = dataTable.Columns.Add("RequestDate", typeof(System.DateTime));
			col4.AllowDBNull = true;		
			DataColumn col5 = dataTable.Columns.Add("ResponseDate", typeof(System.DateTime));
			col5.AllowDBNull = true;		
			DataColumn col6 = dataTable.Columns.Add("RequestAmount", typeof(System.Decimal));
			col6.AllowDBNull = true;		
			DataColumn col7 = dataTable.Columns.Add("ResponseAmount", typeof(System.Decimal));
			col7.AllowDBNull = true;		
			DataColumn col8 = dataTable.Columns.Add("CurrencyUnitId", typeof(System.Int32));
			col8.AllowDBNull = true;		
			DataColumn col9 = dataTable.Columns.Add("RequestComment", typeof(System.String));
			col9.AllowDBNull = true;		
			DataColumn col10 = dataTable.Columns.Add("ResponseComment", typeof(System.String));
			col10.AllowDBNull = true;		
			DataColumn col11 = dataTable.Columns.Add("Status", typeof(System.Int32));
			col11.AllowDBNull = true;		
			DataColumn col12 = dataTable.Columns.Add("Type", typeof(System.Int32));
			col12.AllowDBNull = true;		
			DataColumn col13 = dataTable.Columns.Add("CreationDate", typeof(System.DateTime));
			col13.AllowDBNull = true;		
			DataColumn col14 = dataTable.Columns.Add("CreationUserId", typeof(System.Int32));
			col14.AllowDBNull = true;		
			DataColumn col15 = dataTable.Columns.Add("LastModificationDate", typeof(System.DateTime));
			col15.AllowDBNull = true;		
			DataColumn col16 = dataTable.Columns.Add("LastModifidationUserId", typeof(System.Int32));
			col16.AllowDBNull = true;		
			
			bulkCopy.ColumnMappings.Add("AdvanceRequestId", "AdvanceRequestId");
			bulkCopy.ColumnMappings.Add("ContractId", "ContractId");
			bulkCopy.ColumnMappings.Add("RequestContactorId", "RequestContactorId");
			bulkCopy.ColumnMappings.Add("ResponseContactorId", "ResponseContactorId");
			bulkCopy.ColumnMappings.Add("RequestDate", "RequestDate");
			bulkCopy.ColumnMappings.Add("ResponseDate", "ResponseDate");
			bulkCopy.ColumnMappings.Add("RequestAmount", "RequestAmount");
			bulkCopy.ColumnMappings.Add("ResponseAmount", "ResponseAmount");
			bulkCopy.ColumnMappings.Add("CurrencyUnitId", "CurrencyUnitId");
			bulkCopy.ColumnMappings.Add("RequestComment", "RequestComment");
			bulkCopy.ColumnMappings.Add("ResponseComment", "ResponseComment");
			bulkCopy.ColumnMappings.Add("Status", "Status");
			bulkCopy.ColumnMappings.Add("Type", "Type");
			bulkCopy.ColumnMappings.Add("CreationDate", "CreationDate");
			bulkCopy.ColumnMappings.Add("CreationUserId", "CreationUserId");
			bulkCopy.ColumnMappings.Add("LastModificationDate", "LastModificationDate");
			bulkCopy.ColumnMappings.Add("LastModifidationUserId", "LastModifidationUserId");
			
			foreach(RLM.Construction.Entities.AdvanceRequest entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["AdvanceRequestId"] = entity.AdvanceRequestId;
							
				
					row["ContractId"] = entity.ContractId.HasValue ? (object) entity.ContractId  : System.DBNull.Value;
							
				
					row["RequestContactorId"] = entity.RequestContactorId;
							
				
					row["ResponseContactorId"] = entity.ResponseContactorId.HasValue ? (object) entity.ResponseContactorId  : System.DBNull.Value;
							
				
					row["RequestDate"] = entity.RequestDate.HasValue ? (object) entity.RequestDate  : System.DBNull.Value;
							
				
					row["ResponseDate"] = entity.ResponseDate.HasValue ? (object) entity.ResponseDate  : System.DBNull.Value;
							
				
					row["RequestAmount"] = entity.RequestAmount.HasValue ? (object) entity.RequestAmount  : System.DBNull.Value;
							
				
					row["ResponseAmount"] = entity.ResponseAmount.HasValue ? (object) entity.ResponseAmount  : System.DBNull.Value;
							
				
					row["CurrencyUnitId"] = entity.CurrencyUnitId.HasValue ? (object) entity.CurrencyUnitId  : System.DBNull.Value;
							
				
					row["RequestComment"] = entity.RequestComment;
							
				
					row["ResponseComment"] = entity.ResponseComment;
							
				
					row["Status"] = entity.Status.HasValue ? (object) entity.Status  : System.DBNull.Value;
							
				
					row["Type"] = entity.Type.HasValue ? (object) entity.Type  : System.DBNull.Value;
							
				
					row["CreationDate"] = entity.CreationDate.HasValue ? (object) entity.CreationDate  : System.DBNull.Value;
							
				
					row["CreationUserId"] = entity.CreationUserId.HasValue ? (object) entity.CreationUserId  : System.DBNull.Value;
							
				
					row["LastModificationDate"] = entity.LastModificationDate.HasValue ? (object) entity.LastModificationDate  : System.DBNull.Value;
							
				
					row["LastModifidationUserId"] = entity.LastModifidationUserId.HasValue ? (object) entity.LastModifidationUserId  : System.DBNull.Value;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(RLM.Construction.Entities.AdvanceRequest entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a RLM.Construction.Entities.AdvanceRequest object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">RLM.Construction.Entities.AdvanceRequest object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the RLM.Construction.Entities.AdvanceRequest object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, RLM.Construction.Entities.AdvanceRequest entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.AdvanceRequest_Insert", _useStoredProcedure);
			
			database.AddOutParameter(commandWrapper, "@AdvanceRequestId", DbType.Int32, 4);
			database.AddInParameter(commandWrapper, "@ContractId", DbType.Int32, (entity.ContractId.HasValue ? (object) entity.ContractId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@RequestContactorId", DbType.Int32, entity.RequestContactorId );
			database.AddInParameter(commandWrapper, "@ResponseContactorId", DbType.Int32, (entity.ResponseContactorId.HasValue ? (object) entity.ResponseContactorId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@RequestDate", DbType.DateTime, (entity.RequestDate.HasValue ? (object) entity.RequestDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ResponseDate", DbType.DateTime, (entity.ResponseDate.HasValue ? (object) entity.ResponseDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@RequestAmount", DbType.Currency, (entity.RequestAmount.HasValue ? (object) entity.RequestAmount  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ResponseAmount", DbType.Currency, (entity.ResponseAmount.HasValue ? (object) entity.ResponseAmount  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@CurrencyUnitId", DbType.Int32, (entity.CurrencyUnitId.HasValue ? (object) entity.CurrencyUnitId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@RequestComment", DbType.String, entity.RequestComment );
			database.AddInParameter(commandWrapper, "@ResponseComment", DbType.String, entity.ResponseComment );
			database.AddInParameter(commandWrapper, "@Status", DbType.Int32, (entity.Status.HasValue ? (object) entity.Status  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Type", DbType.Int32, (entity.Type.HasValue ? (object) entity.Type  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@CreationDate", DbType.DateTime, (entity.CreationDate.HasValue ? (object) entity.CreationDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@CreationUserId", DbType.Int32, (entity.CreationUserId.HasValue ? (object) entity.CreationUserId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@LastModificationDate", DbType.DateTime, (entity.LastModificationDate.HasValue ? (object) entity.LastModificationDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@LastModifidationUserId", DbType.Int32, (entity.LastModifidationUserId.HasValue ? (object) entity.LastModifidationUserId  : System.DBNull.Value));
			
			int results = 0;
			
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					

			entity.AdvanceRequestId = (System.Int32) database.GetParameterValue(commandWrapper, "@AdvanceRequestId");						
			
			
			entity.AcceptChanges();
	
			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">RLM.Construction.Entities.AdvanceRequest object to update.</param>
		/// <remarks>
		///		After updating the datasource, the RLM.Construction.Entities.AdvanceRequest object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, RLM.Construction.Entities.AdvanceRequest entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.AdvanceRequest_Update", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@AdvanceRequestId", DbType.Int32, entity.AdvanceRequestId );
			database.AddInParameter(commandWrapper, "@ContractId", DbType.Int32, (entity.ContractId.HasValue ? (object) entity.ContractId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@RequestContactorId", DbType.Int32, entity.RequestContactorId );
			database.AddInParameter(commandWrapper, "@ResponseContactorId", DbType.Int32, (entity.ResponseContactorId.HasValue ? (object) entity.ResponseContactorId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@RequestDate", DbType.DateTime, (entity.RequestDate.HasValue ? (object) entity.RequestDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ResponseDate", DbType.DateTime, (entity.ResponseDate.HasValue ? (object) entity.ResponseDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@RequestAmount", DbType.Currency, (entity.RequestAmount.HasValue ? (object) entity.RequestAmount : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ResponseAmount", DbType.Currency, (entity.ResponseAmount.HasValue ? (object) entity.ResponseAmount : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@CurrencyUnitId", DbType.Int32, (entity.CurrencyUnitId.HasValue ? (object) entity.CurrencyUnitId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@RequestComment", DbType.String, entity.RequestComment );
			database.AddInParameter(commandWrapper, "@ResponseComment", DbType.String, entity.ResponseComment );
			database.AddInParameter(commandWrapper, "@Status", DbType.Int32, (entity.Status.HasValue ? (object) entity.Status : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Type", DbType.Int32, (entity.Type.HasValue ? (object) entity.Type : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@CreationDate", DbType.DateTime, (entity.CreationDate.HasValue ? (object) entity.CreationDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@CreationUserId", DbType.Int32, (entity.CreationUserId.HasValue ? (object) entity.CreationUserId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@LastModificationDate", DbType.DateTime, (entity.LastModificationDate.HasValue ? (object) entity.LastModificationDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@LastModifidationUserId", DbType.Int32, (entity.LastModifidationUserId.HasValue ? (object) entity.LastModifidationUserId : System.DBNull.Value) );
			
			int results = 0;
			
			
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
				EntityManager.StopTracking(entity.EntityTrackingKey);
			
			
			entity.AcceptChanges();
	
			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	
		#endregion
	}//end class
} // end namespace
