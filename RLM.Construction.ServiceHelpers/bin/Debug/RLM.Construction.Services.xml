<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RLM.Construction.Services</name>
    </assembly>
    <members>
        <member name="T:RLM.Construction.Services.RewardServiceBase">
            <summary>
             An object representation of the 'Reward' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Reward.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Construction.Entities.Reward"/> class.
             </remarks>
        </member>
        <member name="T:RLM.Construction.Services.ServiceBase`2">
            <summary>
            The base class that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.ServiceBaseCore`2">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.IComponentService">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="P:RLM.Construction.Services.IComponentService.ProcessorList">
             <summary>
            	Provides a List of Processors to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:RLM.Construction.Services.IComponentService.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:RLM.Construction.Services.IComponentService.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="E:RLM.Construction.Services.IComponentService.ProcessStarting">
            <summary>
            Event to indicate that a processor is about to begin.
            </summary>
        </member>
        <member name="E:RLM.Construction.Services.IComponentService.ProcessEnded">
            <summary>
            Event to indicate that a processor has just ended.
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.ServiceBaseCore`2.Execute">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:RLM.Construction.Services.ServiceBaseCore`2.Execute(System.Boolean)">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:RLM.Construction.Services.ServiceBaseCore`2.OnProcessStarting(RLM.Construction.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.ServiceBaseCore`2.OnProcessEnded(RLM.Construction.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.ServiceBaseCore`2.Get(`1)">
            <summary>
            Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ServiceBaseCore`2.GetAll">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ServiceBaseCore`2.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ServiceBaseCore`2.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ServiceBaseCore`2.Insert(`0)">
            <summary>
            Inserts a row into the DataSource.
            </summary>
            <param name="entity">The Entity object to insert.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ServiceBaseCore`2.BulkInsert(RLM.Construction.Entities.TList{`0})">
            <summary>
            Efficiently inserts multiple rows into the DataSource.
            </summary>
            <param name="entities">TList of Entity objects to insert.</param>
        </member>
        <member name="M:RLM.Construction.Services.ServiceBaseCore`2.Update(`0)">
            <summary>
            Updates an existing row in the DataSource.
            </summary>
            <param name="entity">The Entity object to update.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ServiceBaseCore`2.Delete(`0)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="entity">The Entity object to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ServiceBaseCore`2.DeepLoad(`0,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[],RLM.Construction.Data.Bases.ChildEntityTypesList)">
            <summary>
            Deep Load the entire Entity object with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entity">The Entity object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
            <param name="innerList">A collection of child types for easy access.</param>
        </member>
        <member name="M:RLM.Construction.Services.ServiceBaseCore`2.DeepLoad(RLM.Construction.Entities.TList{`0},System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entities">TList of Entity objects to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
        </member>
        <member name="M:RLM.Construction.Services.ServiceBaseCore`2.DeepSave(`0,RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="M:RLM.Construction.Services.ServiceBaseCore`2.DeepSave(`0,RLM.Construction.Data.DeepSaveType,System.Type[],System.Collections.Hashtable)">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <remarks>
            This method should be implemented by sub-classes to provide specific deep save functionality.
            </remarks>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="M:RLM.Construction.Services.ServiceBaseCore`2.DeepSave(RLM.Construction.Entities.TList{`0},RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the Entity objects with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="entities">TList of Entity objects to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="P:RLM.Construction.Services.ServiceBaseCore`2.ProcessorList">
             <summary>
            	Provides a List of Processors to execute external business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:RLM.Construction.Services.ServiceBaseCore`2.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:RLM.Construction.Services.ServiceBaseCore`2.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="P:RLM.Construction.Services.ServiceBaseCore`2.CurrentProcessor">
            <summary>
            Current Processor being executed
            </summary>
        </member>
        <member name="P:RLM.Construction.Services.ServiceBaseCore`2.ProcessCounter">
            <summary>
            Current Number of Processes completed thus far.
            </summary>
        </member>
        <member name="P:RLM.Construction.Services.ServiceBaseCore`2.CurrentProcessorIndex">
            <summary>
            Current index of the processor currently or last executed 
            </summary>
        </member>
        <member name="P:RLM.Construction.Services.ServiceBaseCore`2.TotalProcesses">
            <summary>
            Total Number of Processes currently enlisted in this service 
            </summary>
        </member>
        <member name="E:RLM.Construction.Services.ServiceBaseCore`2.ProcessStarting">
            <summary>
            Event to indicate that a processor has began.
            </summary>
        </member>
        <member name="E:RLM.Construction.Services.ServiceBaseCore`2.ProcessEnded">
            <summary>
            Event to indicate that a processor has ended.
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.RewardServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Construction.Entities.Reward"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.RewardServiceBase.CreateReward(System.Int32,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Construction.Entities.Reward"/> instance.
            </summary>
            <param name="staffId"></param>
            <param name="rewardTypeId"></param>
            <param name="rewardDate"></param>
            <param name="effectFrom"></param>
            <param name="rewardCode">so quyet dinh</param>
            <param name="rewardForm">hinh thuc: 1, thang chuc, 2: tien mat ....</param>
            <param name="reason"></param>
            <param name="comment"></param>
            <param name="issueLevel">Cap quyet dinh</param>
            <param name="fromLevelId"></param>
            <param name="toLevelId"></param>
            <param name="moneyAmount"></param>
            <param name="moneyUnitId"></param>
            <param name="exchangeRate"></param>
            <param name="creationDate"></param>
            <param name="creationUserId"></param>
            <param name="lastModificationDate"></param>
            <param name="lastModificationUserId"></param>
        </member>
        <member name="M:RLM.Construction.Services.RewardServiceBase.Get(RLM.Construction.Entities.RewardKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RewardServiceBase.GetByRewardId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_Reward index.
            </summary>
            <param name="rewardId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.Reward"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RewardServiceBase.GetByRewardId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_Reward index.
            </summary>
            <param name="rewardId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.Reward"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RewardServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Construction.Entities.Reward"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Construction.Services.RewardServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Construction.Entities.Reward"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Construction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Construction.Services.RewardServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Reward</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RewardServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Reward</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RewardServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Construction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Reward</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RewardServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RewardServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RewardServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Reward} of <c>Reward</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RewardServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Reward</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RewardServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Reward</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RewardServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Reward</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RewardServiceBase.Insert(RLM.Construction.Entities.Reward)">
            <summary>
            	public virtualmethod that Inserts a Reward object into the datasource using a transaction.
            </summary>
            <param name="entity">Reward object to Insert.</param>
            <remarks>After Inserting into the datasource, the Reward object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Reward entity = new Reward();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	RewardService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.RewardServiceBase.Insert(RLM.Construction.Entities.TList{RLM.Construction.Entities.Reward})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Reward</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Reward</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Reward.
             <code><![CDATA[
             TList<Reward> list = new TList<Reward>();
             Reward entity = new Reward();
             entity.StringProperty = "foo";
             Reward entity2 = new Reward();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	RewardService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.RewardServiceBase.Update(RLM.Construction.Entities.Reward)">
            <summary>
            	public virtualmethod that Updates a Reward object into the datasource using a transaction.
            </summary>
            <param name="entity">Reward object to Update.</param>
            <remarks>After Updateing into the datasource, the Reward object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Reward entity = RewardService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	RewardService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.RewardServiceBase.Update(RLM.Construction.Entities.TList{RLM.Construction.Entities.Reward})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Reward</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Reward</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Reward.
             <code><![CDATA[
             TList<Reward> list = new TList<Reward>();
             Reward entity = new Reward();
             entity.StringProperty = "foo";
             Reward entity2 = new Reward();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	RewardService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.RewardServiceBase.Save(RLM.Construction.Entities.Reward)">
            <summary>
            	public virtualmethod that Saves a Reward object into the datasource using a transaction.
            </summary>
            <param name="entity">Reward object to Save.</param>
            <remarks>After Saveing into the datasource, the Reward object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Reward entity = RewardService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	RewardService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.RewardServiceBase.Save(RLM.Construction.Entities.TList{RLM.Construction.Entities.Reward})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Reward</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Reward</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Reward.
             <code><![CDATA[
             TList<Reward> list = new TList<Reward>();
             Reward entity = new Reward();
             entity.StringProperty = "foo";
             Reward entity2 = new Reward();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	RewardService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.RewardServiceBase.Delete(RLM.Construction.Entities.Reward)">
            <summary>
            	public virtualmethod that Deletes a Reward object into the datasource using a transaction.
            </summary>
            <param name="entity">Reward object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Reward object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Reward entity = RewardService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	RewardService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.RewardServiceBase.Delete(RLM.Construction.Entities.TList{RLM.Construction.Entities.Reward})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Reward</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Reward</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Reward.
             <code><![CDATA[
             TList<Reward> list = new TList<Reward>();
             Reward entity = new Reward();
             entity.StringProperty = "foo";
             Reward entity2 = new Reward();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	RewardService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.RewardServiceBase.Delete(RLM.Construction.Entities.RewardKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RewardServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 rewardId
            </summary>
            <param name="rewardId">Reward pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RewardServiceBase.DeepLoadByRewardId(System.Int32,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Construction.Entities.Reward"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <param name="rewardId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Reward Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.Reward"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RewardServiceBase.DeepLoad(RLM.Construction.Entities.Reward)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Reward Object</param>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.RewardServiceBase.DeepLoad(RLM.Construction.Entities.Reward)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Construction.Services.RewardServiceBase.DeepLoad(RLM.Construction.Entities.Reward,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.RewardServiceBase.DeepLoad(RLM.Construction.Entities.Reward)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Reward Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.RewardServiceBase.DeepLoad(RLM.Construction.Entities.Reward,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Construction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Construction.Entities.Reward"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Reward Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.RewardServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.Reward})">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.RewardServiceBase.DeepLoad(RLM.Construction.Entities.Reward)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Construction.Services.RewardServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.Reward},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.RewardServiceBase.DeepLoad(RLM.Construction.Entities.Reward)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.RewardServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.Reward},System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Construction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Construction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Construction.Entities.Reward"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.RewardServiceBase.DeepSave(RLM.Construction.Entities.Reward)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Construction.Entities.Reward"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Reward Object</param>
        </member>
        <member name="M:RLM.Construction.Services.RewardServiceBase.DeepSave(RLM.Construction.Entities.Reward,RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Reward object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Reward Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Reward</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Construction.Services.RewardServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.Reward})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Reward} Object</param>
        </member>
        <member name="M:RLM.Construction.Services.RewardServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.Reward},RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Construction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Reward Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Construction.Services.RewardServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.ResourceDataServiceBase">
            <summary>
             An object representation of the 'ResourceData' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ResourceData.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Construction.Entities.ResourceData"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.ResourceDataServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Construction.Entities.ResourceData"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.ResourceDataServiceBase.CreateResourceData(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Construction.Entities.ResourceData"/> instance.
            </summary>
            <param name="name"></param>
            <param name="title"></param>
            <param name="content"></param>
            <param name="description"></param>
            <param name="other"></param>
            <param name="resourceType"></param>
            <param name="resourceId"></param>
            <param name="contentType"></param>
            <param name="subContentType"></param>
            <param name="xMLContent"></param>
            <param name="priority"></param>
            <param name="isActive"></param>
            <param name="creationDate"></param>
            <param name="creationUserId"></param>
            <param name="lastModificationDate"></param>
            <param name="lastModificationUserId"></param>
        </member>
        <member name="M:RLM.Construction.Services.ResourceDataServiceBase.Get(RLM.Construction.Entities.ResourceDataKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ResourceDataServiceBase.GetByResourceDataId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_ResourceData index.
            </summary>
            <param name="resourceDataId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.ResourceData"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ResourceDataServiceBase.GetByResourceDataId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_ResourceData index.
            </summary>
            <param name="resourceDataId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.ResourceData"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ResourceDataServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Construction.Entities.ResourceData"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Construction.Services.ResourceDataServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Construction.Entities.ResourceData"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Construction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Construction.Services.ResourceDataServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ResourceData</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ResourceDataServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ResourceData</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ResourceDataServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Construction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ResourceData</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ResourceDataServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ResourceDataServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ResourceDataServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ResourceData} of <c>ResourceData</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ResourceDataServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ResourceData</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ResourceDataServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ResourceData</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ResourceDataServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ResourceData</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ResourceDataServiceBase.Insert(RLM.Construction.Entities.ResourceData)">
            <summary>
            	public virtualmethod that Inserts a ResourceData object into the datasource using a transaction.
            </summary>
            <param name="entity">ResourceData object to Insert.</param>
            <remarks>After Inserting into the datasource, the ResourceData object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ResourceData entity = new ResourceData();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ResourceDataService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ResourceDataServiceBase.Insert(RLM.Construction.Entities.TList{RLM.Construction.Entities.ResourceData})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ResourceData</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ResourceData</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ResourceData.
             <code><![CDATA[
             TList<ResourceData> list = new TList<ResourceData>();
             ResourceData entity = new ResourceData();
             entity.StringProperty = "foo";
             ResourceData entity2 = new ResourceData();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ResourceDataService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ResourceDataServiceBase.Update(RLM.Construction.Entities.ResourceData)">
            <summary>
            	public virtualmethod that Updates a ResourceData object into the datasource using a transaction.
            </summary>
            <param name="entity">ResourceData object to Update.</param>
            <remarks>After Updateing into the datasource, the ResourceData object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ResourceData entity = ResourceDataService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ResourceDataService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ResourceDataServiceBase.Update(RLM.Construction.Entities.TList{RLM.Construction.Entities.ResourceData})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ResourceData</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ResourceData</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ResourceData.
             <code><![CDATA[
             TList<ResourceData> list = new TList<ResourceData>();
             ResourceData entity = new ResourceData();
             entity.StringProperty = "foo";
             ResourceData entity2 = new ResourceData();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ResourceDataService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ResourceDataServiceBase.Save(RLM.Construction.Entities.ResourceData)">
            <summary>
            	public virtualmethod that Saves a ResourceData object into the datasource using a transaction.
            </summary>
            <param name="entity">ResourceData object to Save.</param>
            <remarks>After Saveing into the datasource, the ResourceData object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ResourceData entity = ResourceDataService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ResourceDataService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ResourceDataServiceBase.Save(RLM.Construction.Entities.TList{RLM.Construction.Entities.ResourceData})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ResourceData</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ResourceData</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ResourceData.
             <code><![CDATA[
             TList<ResourceData> list = new TList<ResourceData>();
             ResourceData entity = new ResourceData();
             entity.StringProperty = "foo";
             ResourceData entity2 = new ResourceData();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ResourceDataService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ResourceDataServiceBase.Delete(RLM.Construction.Entities.ResourceData)">
            <summary>
            	public virtualmethod that Deletes a ResourceData object into the datasource using a transaction.
            </summary>
            <param name="entity">ResourceData object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ResourceData object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ResourceData entity = ResourceDataService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ResourceDataService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ResourceDataServiceBase.Delete(RLM.Construction.Entities.TList{RLM.Construction.Entities.ResourceData})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ResourceData</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ResourceData</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ResourceData.
             <code><![CDATA[
             TList<ResourceData> list = new TList<ResourceData>();
             ResourceData entity = new ResourceData();
             entity.StringProperty = "foo";
             ResourceData entity2 = new ResourceData();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ResourceDataService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ResourceDataServiceBase.Delete(RLM.Construction.Entities.ResourceDataKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ResourceDataServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 resourceDataId
            </summary>
            <param name="resourceDataId">ResourceData pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ResourceDataServiceBase.DeepLoadByResourceDataId(System.Int32,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Construction.Entities.ResourceData"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <param name="resourceDataId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ResourceData Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.ResourceData"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ResourceDataServiceBase.DeepLoad(RLM.Construction.Entities.ResourceData)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ResourceData Object</param>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ResourceDataServiceBase.DeepLoad(RLM.Construction.Entities.ResourceData)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Construction.Services.ResourceDataServiceBase.DeepLoad(RLM.Construction.Entities.ResourceData,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ResourceDataServiceBase.DeepLoad(RLM.Construction.Entities.ResourceData)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ResourceData Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.ResourceDataServiceBase.DeepLoad(RLM.Construction.Entities.ResourceData,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Construction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Construction.Entities.ResourceData"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ResourceData Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.ResourceDataServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.ResourceData})">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ResourceDataServiceBase.DeepLoad(RLM.Construction.Entities.ResourceData)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Construction.Services.ResourceDataServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.ResourceData},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ResourceDataServiceBase.DeepLoad(RLM.Construction.Entities.ResourceData)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.ResourceDataServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.ResourceData},System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Construction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Construction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Construction.Entities.ResourceData"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.ResourceDataServiceBase.DeepSave(RLM.Construction.Entities.ResourceData)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Construction.Entities.ResourceData"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ResourceData Object</param>
        </member>
        <member name="M:RLM.Construction.Services.ResourceDataServiceBase.DeepSave(RLM.Construction.Entities.ResourceData,RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ResourceData object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ResourceData Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ResourceData</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Construction.Services.ResourceDataServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.ResourceData})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ResourceData} Object</param>
        </member>
        <member name="M:RLM.Construction.Services.ResourceDataServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.ResourceData},RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Construction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ResourceData Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Construction.Services.ResourceDataServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.RepositoryService">
            <summary>
             An component type implementation of the 'Repository' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:RLM.Construction.Services.RepositoryServiceBase">
            <summary>
             An object representation of the 'Repository' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Repository.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Construction.Entities.Repository"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.RepositoryServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Construction.Entities.Repository"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.RepositoryServiceBase.CreateRepository(System.Nullable{System.Int32},System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Construction.Entities.Repository"/> instance.
            </summary>
            <param name="repositoryManagerStaffId">Id of staff who manage this store</param>
            <param name="code"></param>
            <param name="name"></param>
            <param name="address">Address of store</param>
            <param name="provinceId">Province of store</param>
            <param name="isActive"></param>
            <param name="priority"></param>
            <param name="creationDate"></param>
            <param name="creationUserId"></param>
            <param name="lastModificationDate"></param>
            <param name="lastModificationUserId"></param>
        </member>
        <member name="M:RLM.Construction.Services.RepositoryServiceBase.Get(RLM.Construction.Entities.RepositoryKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RepositoryServiceBase.GetByRepositoryId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_RepositoryGroups index.
            </summary>
            <param name="repositoryId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.Repository"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RepositoryServiceBase.GetByRepositoryId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_RepositoryGroups index.
            </summary>
            <param name="repositoryId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.Repository"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RepositoryServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Construction.Entities.Repository"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Construction.Services.RepositoryServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Construction.Entities.Repository"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Construction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Construction.Services.RepositoryServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Repository</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RepositoryServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Repository</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RepositoryServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Construction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Repository</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RepositoryServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RepositoryServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RepositoryServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Repository} of <c>Repository</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RepositoryServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Repository</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RepositoryServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Repository</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RepositoryServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Repository</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RepositoryServiceBase.Insert(RLM.Construction.Entities.Repository)">
            <summary>
            	public virtualmethod that Inserts a Repository object into the datasource using a transaction.
            </summary>
            <param name="entity">Repository object to Insert.</param>
            <remarks>After Inserting into the datasource, the Repository object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Repository entity = new Repository();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	RepositoryService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.RepositoryServiceBase.Insert(RLM.Construction.Entities.TList{RLM.Construction.Entities.Repository})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Repository</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Repository</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Repository.
             <code><![CDATA[
             TList<Repository> list = new TList<Repository>();
             Repository entity = new Repository();
             entity.StringProperty = "foo";
             Repository entity2 = new Repository();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	RepositoryService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.RepositoryServiceBase.Update(RLM.Construction.Entities.Repository)">
            <summary>
            	public virtualmethod that Updates a Repository object into the datasource using a transaction.
            </summary>
            <param name="entity">Repository object to Update.</param>
            <remarks>After Updateing into the datasource, the Repository object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Repository entity = RepositoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	RepositoryService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.RepositoryServiceBase.Update(RLM.Construction.Entities.TList{RLM.Construction.Entities.Repository})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Repository</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Repository</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Repository.
             <code><![CDATA[
             TList<Repository> list = new TList<Repository>();
             Repository entity = new Repository();
             entity.StringProperty = "foo";
             Repository entity2 = new Repository();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	RepositoryService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.RepositoryServiceBase.Save(RLM.Construction.Entities.Repository)">
            <summary>
            	public virtualmethod that Saves a Repository object into the datasource using a transaction.
            </summary>
            <param name="entity">Repository object to Save.</param>
            <remarks>After Saveing into the datasource, the Repository object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Repository entity = RepositoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	RepositoryService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.RepositoryServiceBase.Save(RLM.Construction.Entities.TList{RLM.Construction.Entities.Repository})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Repository</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Repository</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Repository.
             <code><![CDATA[
             TList<Repository> list = new TList<Repository>();
             Repository entity = new Repository();
             entity.StringProperty = "foo";
             Repository entity2 = new Repository();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	RepositoryService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.RepositoryServiceBase.Delete(RLM.Construction.Entities.Repository)">
            <summary>
            	public virtualmethod that Deletes a Repository object into the datasource using a transaction.
            </summary>
            <param name="entity">Repository object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Repository object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Repository entity = RepositoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	RepositoryService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.RepositoryServiceBase.Delete(RLM.Construction.Entities.TList{RLM.Construction.Entities.Repository})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Repository</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Repository</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Repository.
             <code><![CDATA[
             TList<Repository> list = new TList<Repository>();
             Repository entity = new Repository();
             entity.StringProperty = "foo";
             Repository entity2 = new Repository();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	RepositoryService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.RepositoryServiceBase.Delete(RLM.Construction.Entities.RepositoryKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RepositoryServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 repositoryId
            </summary>
            <param name="repositoryId">Repository pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RepositoryServiceBase.GetByItemIdFromItemInRepository(System.Int64)">
            <summary>
            	Gets Repository objects from the datasource by ItemId in the
            	ItemInRepository table. Table Repository is related to table Item
            	through the (M:N) relationship defined in the ItemInRepository table.
            </summary>
            <param name="itemId"></param>
            <returns>Returns a typed collection of Repository objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RepositoryServiceBase.GetByItemIdFromItemInRepository(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Repository objects from the datasource by ItemId in the
            	ItemInRepository table. Table Repository is related to table Item
            	through the (M:N) relationship defined in the ItemInRepository table.
            </summary>
            <param name="itemId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Repository objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RepositoryServiceBase.DeepLoadByRepositoryId(System.Int32,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Construction.Entities.Repository"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <param name="repositoryId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Repository Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.Repository"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RepositoryServiceBase.DeepLoad(RLM.Construction.Entities.Repository)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Repository Object</param>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.RepositoryServiceBase.DeepLoad(RLM.Construction.Entities.Repository)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Construction.Services.RepositoryServiceBase.DeepLoad(RLM.Construction.Entities.Repository,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.RepositoryServiceBase.DeepLoad(RLM.Construction.Entities.Repository)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Repository Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.RepositoryServiceBase.DeepLoad(RLM.Construction.Entities.Repository,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Construction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Construction.Entities.Repository"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Repository Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.RepositoryServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.Repository})">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.RepositoryServiceBase.DeepLoad(RLM.Construction.Entities.Repository)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Construction.Services.RepositoryServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.Repository},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.RepositoryServiceBase.DeepLoad(RLM.Construction.Entities.Repository)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.RepositoryServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.Repository},System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Construction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Construction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Construction.Entities.Repository"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.RepositoryServiceBase.DeepSave(RLM.Construction.Entities.Repository)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Construction.Entities.Repository"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Repository Object</param>
        </member>
        <member name="M:RLM.Construction.Services.RepositoryServiceBase.DeepSave(RLM.Construction.Entities.Repository,RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Repository object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Repository Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Repository</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Construction.Services.RepositoryServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.Repository})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Repository} Object</param>
        </member>
        <member name="M:RLM.Construction.Services.RepositoryServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.Repository},RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Construction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Repository Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Construction.Services.RepositoryServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.RepositoryService.#ctor">
            <summary>
            Initializes a new instance of the RepositoryService class.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.ProcessorBase">
            <summary>
            The interface that each complex business unit of work processor will use.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.IProcessor">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.IProcessor.Process">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:RLM.Construction.Services.IProcessor.ChangeProcessorState(RLM.Construction.Services.ProcessorState)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="P:RLM.Construction.Services.IProcessor.ProcessName">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:RLM.Construction.Services.IProcessor.CurrentProcessorState">
            <summary>
            Provides the current process state of operation.
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.ProcessorBase.Process">
             <summary>
            	Provides a List of Processors to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:RLM.Construction.Services.ProcessorBase.ChangeProcessorState(RLM.Construction.Services.ProcessorState)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.ProcessorBase.OnNotifyProcessorStateChanging(RLM.Construction.Services.ProcessorState)">
            <summary>
            Raises the ProcessorStateChanging event.
            </summary>
            <param name="newProcessorState"></param>
        </member>
        <member name="P:RLM.Construction.Services.ProcessorBase.ProcessResult">
            <summary>
            Provides the current process result of it's operation.
            </summary>
        </member>
        <member name="P:RLM.Construction.Services.ProcessorBase.ProcessName">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>The name of the type of the processors to execute</value>
        </member>
        <member name="P:RLM.Construction.Services.ProcessorBase.CurrentProcessorState">
            <summary>
            Provides the current process state of operation.
            </summary>
        </member>
        <member name="E:RLM.Construction.Services.ProcessorBase.ProcessorStateChanging">
            <summary>
            The ProcessorStateChanging event.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.ProcessorBase.ProcessorStateChangingEventHandler">
            <summary>
            The ProcessorStateChangingEventHandler event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:RLM.Construction.Services.FamilyService">
            <summary>
             An component type implementation of the 'Family' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:RLM.Construction.Services.FamilyServiceBase">
            <summary>
             An object representation of the 'Family' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Family.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Construction.Entities.Family"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.FamilyServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Construction.Entities.Family"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.FamilyServiceBase.CreateFamily(System.Int32,System.Int32,System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Construction.Entities.Family"/> instance.
            </summary>
            <param name="staffId"></param>
            <param name="familySideType">ben vo, chong</param>
            <param name="firstName"></param>
            <param name="lastName"></param>
            <param name="birthDate"></param>
            <param name="cardIdNumber"></param>
            <param name="address"></param>
            <param name="phone"></param>
            <param name="mobile"></param>
            <param name="sex"></param>
            <param name="isTheSameCompany"></param>
            <param name="isDepend"></param>
            <param name="comment"></param>
            <param name="creationDate"></param>
            <param name="creationUserId"></param>
            <param name="lastModificationDate"></param>
            <param name="lastModificationUserId"></param>
        </member>
        <member name="M:RLM.Construction.Services.FamilyServiceBase.Get(RLM.Construction.Entities.FamilyKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.FamilyServiceBase.GetByFamilyId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_Family index.
            </summary>
            <param name="familyId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.Family"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.FamilyServiceBase.GetByFamilyId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_Family index.
            </summary>
            <param name="familyId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.Family"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.FamilyServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Construction.Entities.Family"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Construction.Services.FamilyServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Construction.Entities.Family"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Construction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Construction.Services.FamilyServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Family</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.FamilyServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Family</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.FamilyServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Construction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Family</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.FamilyServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Construction.Services.FamilyServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.FamilyServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Family} of <c>Family</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.FamilyServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Family</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.FamilyServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Family</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.FamilyServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Family</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.FamilyServiceBase.Insert(RLM.Construction.Entities.Family)">
            <summary>
            	public virtualmethod that Inserts a Family object into the datasource using a transaction.
            </summary>
            <param name="entity">Family object to Insert.</param>
            <remarks>After Inserting into the datasource, the Family object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Family entity = new Family();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	FamilyService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.FamilyServiceBase.Insert(RLM.Construction.Entities.TList{RLM.Construction.Entities.Family})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Family</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Family</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Family.
             <code><![CDATA[
             TList<Family> list = new TList<Family>();
             Family entity = new Family();
             entity.StringProperty = "foo";
             Family entity2 = new Family();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	FamilyService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.FamilyServiceBase.Update(RLM.Construction.Entities.Family)">
            <summary>
            	public virtualmethod that Updates a Family object into the datasource using a transaction.
            </summary>
            <param name="entity">Family object to Update.</param>
            <remarks>After Updateing into the datasource, the Family object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Family entity = FamilyService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	FamilyService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.FamilyServiceBase.Update(RLM.Construction.Entities.TList{RLM.Construction.Entities.Family})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Family</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Family</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Family.
             <code><![CDATA[
             TList<Family> list = new TList<Family>();
             Family entity = new Family();
             entity.StringProperty = "foo";
             Family entity2 = new Family();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	FamilyService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.FamilyServiceBase.Save(RLM.Construction.Entities.Family)">
            <summary>
            	public virtualmethod that Saves a Family object into the datasource using a transaction.
            </summary>
            <param name="entity">Family object to Save.</param>
            <remarks>After Saveing into the datasource, the Family object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Family entity = FamilyService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	FamilyService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.FamilyServiceBase.Save(RLM.Construction.Entities.TList{RLM.Construction.Entities.Family})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Family</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Family</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Family.
             <code><![CDATA[
             TList<Family> list = new TList<Family>();
             Family entity = new Family();
             entity.StringProperty = "foo";
             Family entity2 = new Family();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	FamilyService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.FamilyServiceBase.Delete(RLM.Construction.Entities.Family)">
            <summary>
            	public virtualmethod that Deletes a Family object into the datasource using a transaction.
            </summary>
            <param name="entity">Family object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Family object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Family entity = FamilyService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	FamilyService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.FamilyServiceBase.Delete(RLM.Construction.Entities.TList{RLM.Construction.Entities.Family})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Family</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Family</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Family.
             <code><![CDATA[
             TList<Family> list = new TList<Family>();
             Family entity = new Family();
             entity.StringProperty = "foo";
             Family entity2 = new Family();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	FamilyService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.FamilyServiceBase.Delete(RLM.Construction.Entities.FamilyKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.FamilyServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 familyId
            </summary>
            <param name="familyId">Family pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.FamilyServiceBase.DeepLoadByFamilyId(System.Int32,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Construction.Entities.Family"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <param name="familyId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Family Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.Family"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.FamilyServiceBase.DeepLoad(RLM.Construction.Entities.Family)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Family Object</param>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.FamilyServiceBase.DeepLoad(RLM.Construction.Entities.Family)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Construction.Services.FamilyServiceBase.DeepLoad(RLM.Construction.Entities.Family,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.FamilyServiceBase.DeepLoad(RLM.Construction.Entities.Family)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Family Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.FamilyServiceBase.DeepLoad(RLM.Construction.Entities.Family,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Construction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Construction.Entities.Family"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Family Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.FamilyServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.Family})">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.FamilyServiceBase.DeepLoad(RLM.Construction.Entities.Family)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Construction.Services.FamilyServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.Family},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.FamilyServiceBase.DeepLoad(RLM.Construction.Entities.Family)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.FamilyServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.Family},System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Construction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Construction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Construction.Entities.Family"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.FamilyServiceBase.DeepSave(RLM.Construction.Entities.Family)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Construction.Entities.Family"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Family Object</param>
        </member>
        <member name="M:RLM.Construction.Services.FamilyServiceBase.DeepSave(RLM.Construction.Entities.Family,RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Family object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Family Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Family</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Construction.Services.FamilyServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.Family})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Family} Object</param>
        </member>
        <member name="M:RLM.Construction.Services.FamilyServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.Family},RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Construction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Family Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Construction.Services.FamilyServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.FamilyService.#ctor">
            <summary>
            Initializes a new instance of the FamilyService class.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.UserGroupServiceBase">
            <summary>
             An object representation of the 'UserGroup' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the UserGroup.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Construction.Entities.UserGroup"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.UserGroupServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Construction.Entities.UserGroup"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.UserGroupServiceBase.CreateUserGroup(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Construction.Entities.UserGroup"/> instance.
            </summary>
            <param name="userGroupName"></param>
            <param name="isActive"></param>
            <param name="isDeletable"></param>
            <param name="priority"></param>
            <param name="creationDate"></param>
            <param name="creationUserId"></param>
            <param name="lastModificationDate"></param>
            <param name="lastModificationUserId"></param>
        </member>
        <member name="M:RLM.Construction.Services.UserGroupServiceBase.Get(RLM.Construction.Entities.UserGroupKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UserGroupServiceBase.GetByUserGroupId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_UserGroups index.
            </summary>
            <param name="userGroupId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.UserGroup"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UserGroupServiceBase.GetByUserGroupId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_UserGroups index.
            </summary>
            <param name="userGroupId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.UserGroup"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UserGroupServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Construction.Entities.UserGroup"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Construction.Services.UserGroupServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Construction.Entities.UserGroup"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Construction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Construction.Services.UserGroupServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>UserGroup</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UserGroupServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>UserGroup</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UserGroupServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Construction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>UserGroup</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UserGroupServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UserGroupServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UserGroupServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{UserGroup} of <c>UserGroup</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UserGroupServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>UserGroup</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UserGroupServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>UserGroup</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UserGroupServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>UserGroup</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UserGroupServiceBase.Insert(RLM.Construction.Entities.UserGroup)">
            <summary>
            	public virtualmethod that Inserts a UserGroup object into the datasource using a transaction.
            </summary>
            <param name="entity">UserGroup object to Insert.</param>
            <remarks>After Inserting into the datasource, the UserGroup object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            UserGroup entity = new UserGroup();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	UserGroupService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.UserGroupServiceBase.Insert(RLM.Construction.Entities.TList{RLM.Construction.Entities.UserGroup})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>UserGroup</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>UserGroup</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of UserGroup.
             <code><![CDATA[
             TList<UserGroup> list = new TList<UserGroup>();
             UserGroup entity = new UserGroup();
             entity.StringProperty = "foo";
             UserGroup entity2 = new UserGroup();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UserGroupService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.UserGroupServiceBase.Update(RLM.Construction.Entities.UserGroup)">
            <summary>
            	public virtualmethod that Updates a UserGroup object into the datasource using a transaction.
            </summary>
            <param name="entity">UserGroup object to Update.</param>
            <remarks>After Updateing into the datasource, the UserGroup object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            UserGroup entity = UserGroupService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	UserGroupService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.UserGroupServiceBase.Update(RLM.Construction.Entities.TList{RLM.Construction.Entities.UserGroup})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>UserGroup</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>UserGroup</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of UserGroup.
             <code><![CDATA[
             TList<UserGroup> list = new TList<UserGroup>();
             UserGroup entity = new UserGroup();
             entity.StringProperty = "foo";
             UserGroup entity2 = new UserGroup();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UserGroupService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.UserGroupServiceBase.Save(RLM.Construction.Entities.UserGroup)">
            <summary>
            	public virtualmethod that Saves a UserGroup object into the datasource using a transaction.
            </summary>
            <param name="entity">UserGroup object to Save.</param>
            <remarks>After Saveing into the datasource, the UserGroup object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            UserGroup entity = UserGroupService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	UserGroupService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.UserGroupServiceBase.Save(RLM.Construction.Entities.TList{RLM.Construction.Entities.UserGroup})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>UserGroup</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>UserGroup</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of UserGroup.
             <code><![CDATA[
             TList<UserGroup> list = new TList<UserGroup>();
             UserGroup entity = new UserGroup();
             entity.StringProperty = "foo";
             UserGroup entity2 = new UserGroup();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UserGroupService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.UserGroupServiceBase.Delete(RLM.Construction.Entities.UserGroup)">
            <summary>
            	public virtualmethod that Deletes a UserGroup object into the datasource using a transaction.
            </summary>
            <param name="entity">UserGroup object to Delete.</param>
            <remarks>After Deleteing into the datasource, the UserGroup object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            UserGroup entity = UserGroupService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	UserGroupService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.UserGroupServiceBase.Delete(RLM.Construction.Entities.TList{RLM.Construction.Entities.UserGroup})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>UserGroup</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>UserGroup</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of UserGroup.
             <code><![CDATA[
             TList<UserGroup> list = new TList<UserGroup>();
             UserGroup entity = new UserGroup();
             entity.StringProperty = "foo";
             UserGroup entity2 = new UserGroup();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UserGroupService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.UserGroupServiceBase.Delete(RLM.Construction.Entities.UserGroupKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UserGroupServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 userGroupId
            </summary>
            <param name="userGroupId">UserGroup pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UserGroupServiceBase.DeepLoadByUserGroupId(System.Int32,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Construction.Entities.UserGroup"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <param name="userGroupId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">UserGroup Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.UserGroup"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UserGroupServiceBase.DeepLoad(RLM.Construction.Entities.UserGroup)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">UserGroup Object</param>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.UserGroupServiceBase.DeepLoad(RLM.Construction.Entities.UserGroup)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Construction.Services.UserGroupServiceBase.DeepLoad(RLM.Construction.Entities.UserGroup,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.UserGroupServiceBase.DeepLoad(RLM.Construction.Entities.UserGroup)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">UserGroup Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.UserGroupServiceBase.DeepLoad(RLM.Construction.Entities.UserGroup,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Construction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Construction.Entities.UserGroup"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">UserGroup Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.UserGroupServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.UserGroup})">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.UserGroupServiceBase.DeepLoad(RLM.Construction.Entities.UserGroup)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Construction.Services.UserGroupServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.UserGroup},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.UserGroupServiceBase.DeepLoad(RLM.Construction.Entities.UserGroup)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.UserGroupServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.UserGroup},System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Construction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Construction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Construction.Entities.UserGroup"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.UserGroupServiceBase.DeepSave(RLM.Construction.Entities.UserGroup)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Construction.Entities.UserGroup"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">UserGroup Object</param>
        </member>
        <member name="M:RLM.Construction.Services.UserGroupServiceBase.DeepSave(RLM.Construction.Entities.UserGroup,RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the UserGroup object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">UserGroup Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>UserGroup</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Construction.Services.UserGroupServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.UserGroup})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{UserGroup} Object</param>
        </member>
        <member name="M:RLM.Construction.Services.UserGroupServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.UserGroup},RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Construction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">UserGroup Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Construction.Services.UserGroupServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.RewardService">
            <summary>
             An component type implementation of the 'Reward' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.RewardService.#ctor">
            <summary>
            Initializes a new instance of the RewardService class.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.IdentificationInfomationServiceBase">
            <summary>
             An object representation of the 'IdentificationInfomation' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the IdentificationInfomation.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Construction.Entities.IdentificationInfomation"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.IdentificationInfomationServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Construction.Entities.IdentificationInfomation"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.IdentificationInfomationServiceBase.CreateIdentificationInfomation(System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Construction.Entities.IdentificationInfomation"/> instance.
            </summary>
            <param name="staffId"></param>
            <param name="infoType">1: CMND, 2: bang lai xe, ...</param>
            <param name="countryId"></param>
            <param name="districtId"></param>
            <param name="expiredDate"></param>
            <param name="number"></param>
            <param name="issuedProvinceId"></param>
            <param name="issuedDate"></param>
            <param name="issuedPersonName"></param>
            <param name="comment"></param>
            <param name="creationDate"></param>
            <param name="creationUserId"></param>
            <param name="lastModificationDate"></param>
            <param name="lastModificationUserId"></param>
        </member>
        <member name="M:RLM.Construction.Services.IdentificationInfomationServiceBase.Get(RLM.Construction.Entities.IdentificationInfomationKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.IdentificationInfomationServiceBase.GetByIdentificationInfomationId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_IdentificationInfomation index.
            </summary>
            <param name="identificationInfomationId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.IdentificationInfomation"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.IdentificationInfomationServiceBase.GetByIdentificationInfomationId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_IdentificationInfomation index.
            </summary>
            <param name="identificationInfomationId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.IdentificationInfomation"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.IdentificationInfomationServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Construction.Entities.IdentificationInfomation"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Construction.Services.IdentificationInfomationServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Construction.Entities.IdentificationInfomation"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Construction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Construction.Services.IdentificationInfomationServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>IdentificationInfomation</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.IdentificationInfomationServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>IdentificationInfomation</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.IdentificationInfomationServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Construction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>IdentificationInfomation</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.IdentificationInfomationServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Construction.Services.IdentificationInfomationServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.IdentificationInfomationServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{IdentificationInfomation} of <c>IdentificationInfomation</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.IdentificationInfomationServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>IdentificationInfomation</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.IdentificationInfomationServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>IdentificationInfomation</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.IdentificationInfomationServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>IdentificationInfomation</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.IdentificationInfomationServiceBase.Insert(RLM.Construction.Entities.IdentificationInfomation)">
            <summary>
            	public virtualmethod that Inserts a IdentificationInfomation object into the datasource using a transaction.
            </summary>
            <param name="entity">IdentificationInfomation object to Insert.</param>
            <remarks>After Inserting into the datasource, the IdentificationInfomation object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            IdentificationInfomation entity = new IdentificationInfomation();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	IdentificationInfomationService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.IdentificationInfomationServiceBase.Insert(RLM.Construction.Entities.TList{RLM.Construction.Entities.IdentificationInfomation})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>IdentificationInfomation</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>IdentificationInfomation</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of IdentificationInfomation.
             <code><![CDATA[
             TList<IdentificationInfomation> list = new TList<IdentificationInfomation>();
             IdentificationInfomation entity = new IdentificationInfomation();
             entity.StringProperty = "foo";
             IdentificationInfomation entity2 = new IdentificationInfomation();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	IdentificationInfomationService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.IdentificationInfomationServiceBase.Update(RLM.Construction.Entities.IdentificationInfomation)">
            <summary>
            	public virtualmethod that Updates a IdentificationInfomation object into the datasource using a transaction.
            </summary>
            <param name="entity">IdentificationInfomation object to Update.</param>
            <remarks>After Updateing into the datasource, the IdentificationInfomation object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            IdentificationInfomation entity = IdentificationInfomationService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	IdentificationInfomationService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.IdentificationInfomationServiceBase.Update(RLM.Construction.Entities.TList{RLM.Construction.Entities.IdentificationInfomation})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>IdentificationInfomation</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>IdentificationInfomation</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of IdentificationInfomation.
             <code><![CDATA[
             TList<IdentificationInfomation> list = new TList<IdentificationInfomation>();
             IdentificationInfomation entity = new IdentificationInfomation();
             entity.StringProperty = "foo";
             IdentificationInfomation entity2 = new IdentificationInfomation();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	IdentificationInfomationService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.IdentificationInfomationServiceBase.Save(RLM.Construction.Entities.IdentificationInfomation)">
            <summary>
            	public virtualmethod that Saves a IdentificationInfomation object into the datasource using a transaction.
            </summary>
            <param name="entity">IdentificationInfomation object to Save.</param>
            <remarks>After Saveing into the datasource, the IdentificationInfomation object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            IdentificationInfomation entity = IdentificationInfomationService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	IdentificationInfomationService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.IdentificationInfomationServiceBase.Save(RLM.Construction.Entities.TList{RLM.Construction.Entities.IdentificationInfomation})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>IdentificationInfomation</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>IdentificationInfomation</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of IdentificationInfomation.
             <code><![CDATA[
             TList<IdentificationInfomation> list = new TList<IdentificationInfomation>();
             IdentificationInfomation entity = new IdentificationInfomation();
             entity.StringProperty = "foo";
             IdentificationInfomation entity2 = new IdentificationInfomation();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	IdentificationInfomationService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.IdentificationInfomationServiceBase.Delete(RLM.Construction.Entities.IdentificationInfomation)">
            <summary>
            	public virtualmethod that Deletes a IdentificationInfomation object into the datasource using a transaction.
            </summary>
            <param name="entity">IdentificationInfomation object to Delete.</param>
            <remarks>After Deleteing into the datasource, the IdentificationInfomation object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            IdentificationInfomation entity = IdentificationInfomationService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	IdentificationInfomationService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.IdentificationInfomationServiceBase.Delete(RLM.Construction.Entities.TList{RLM.Construction.Entities.IdentificationInfomation})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>IdentificationInfomation</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>IdentificationInfomation</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of IdentificationInfomation.
             <code><![CDATA[
             TList<IdentificationInfomation> list = new TList<IdentificationInfomation>();
             IdentificationInfomation entity = new IdentificationInfomation();
             entity.StringProperty = "foo";
             IdentificationInfomation entity2 = new IdentificationInfomation();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	IdentificationInfomationService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.IdentificationInfomationServiceBase.Delete(RLM.Construction.Entities.IdentificationInfomationKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.IdentificationInfomationServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 identificationInfomationId
            </summary>
            <param name="identificationInfomationId">IdentificationInfomation pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.IdentificationInfomationServiceBase.DeepLoadByIdentificationInfomationId(System.Int32,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Construction.Entities.IdentificationInfomation"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <param name="identificationInfomationId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">IdentificationInfomation Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.IdentificationInfomation"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.IdentificationInfomationServiceBase.DeepLoad(RLM.Construction.Entities.IdentificationInfomation)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">IdentificationInfomation Object</param>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.IdentificationInfomationServiceBase.DeepLoad(RLM.Construction.Entities.IdentificationInfomation)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Construction.Services.IdentificationInfomationServiceBase.DeepLoad(RLM.Construction.Entities.IdentificationInfomation,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.IdentificationInfomationServiceBase.DeepLoad(RLM.Construction.Entities.IdentificationInfomation)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">IdentificationInfomation Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.IdentificationInfomationServiceBase.DeepLoad(RLM.Construction.Entities.IdentificationInfomation,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Construction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Construction.Entities.IdentificationInfomation"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">IdentificationInfomation Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.IdentificationInfomationServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.IdentificationInfomation})">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.IdentificationInfomationServiceBase.DeepLoad(RLM.Construction.Entities.IdentificationInfomation)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Construction.Services.IdentificationInfomationServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.IdentificationInfomation},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.IdentificationInfomationServiceBase.DeepLoad(RLM.Construction.Entities.IdentificationInfomation)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.IdentificationInfomationServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.IdentificationInfomation},System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Construction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Construction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Construction.Entities.IdentificationInfomation"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.IdentificationInfomationServiceBase.DeepSave(RLM.Construction.Entities.IdentificationInfomation)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Construction.Entities.IdentificationInfomation"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">IdentificationInfomation Object</param>
        </member>
        <member name="M:RLM.Construction.Services.IdentificationInfomationServiceBase.DeepSave(RLM.Construction.Entities.IdentificationInfomation,RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the IdentificationInfomation object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">IdentificationInfomation Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>IdentificationInfomation</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Construction.Services.IdentificationInfomationServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.IdentificationInfomation})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{IdentificationInfomation} Object</param>
        </member>
        <member name="M:RLM.Construction.Services.IdentificationInfomationServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.IdentificationInfomation},RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Construction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">IdentificationInfomation Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Construction.Services.IdentificationInfomationServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.SecurityContext`1">
            <summary>
            The class that is available in case role based security is required at runtime.  
            It will be made availabe through the entities themselves.
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.SecurityContext`1.#ctor">
            <summary>
            Initializes a new instance of the SecurityContext class.
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.SecurityContext`1.IsAuthorized(System.String)">
            <summary>
            Determine whether user is authorized for the rule based on the rule provider
            </summary>
        </member>
        <member name="P:RLM.Construction.Services.SecurityContext`1.Identity">
            <summary>
            The Current IIdentity .
            </summary>
        </member>
        <member name="P:RLM.Construction.Services.SecurityContext`1.Profile">
            <summary>
            The Current Profile .
            </summary>
        </member>
        <member name="P:RLM.Construction.Services.SecurityContext`1.Principal">
            <summary>
             The Current IPrincipal .
            </summary>
        </member>
        <member name="P:RLM.Construction.Services.SecurityContext`1.RuleProvider">
            <summary>
             The Current Authorization Rule Provider
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.ContextView`2">
            <summary>
            Used to create a general view of the current context.  
            Useful for firing events and giving the UI a picture of 
            current State of Operation.
            </summary>
            <typeparam name="Entity">The Entity object</typeparam>
            <typeparam name="Domain">Type that holds </typeparam>
        </member>
        <member name="M:RLM.Construction.Services.ContextView`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RLM.Construction.Services.ContextView`2"/> class.
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.ContextView`2.#ctor(`0,RLM.Construction.Services.SecurityContext{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:RLM.Construction.Services.ContextView`2"/> class.
            </summary>
            <param name="persistingObject">The persisting object.</param>
            <param name="securityContext">The security context.</param>
        </member>
        <member name="M:RLM.Construction.Services.ContextView`2.#ctor(`0,RLM.Construction.Services.SecurityContext{`0},RLM.Construction.Data.TransactionManager)">
            <summary>
            Initializes a new instance of the <see cref="T:RLM.Construction.Services.ContextView`2"/> class.
            </summary>
            <param name="persistingObject">The persisting object.</param>
            <param name="securityContext">The security context.</param>
            <param name="transactionManager">The transaction manager.</param>
        </member>
        <member name="P:RLM.Construction.Services.ContextView`2.PersistingObject">
            <summary>
            Gets or sets the persisting object.
            </summary>
            <value>The persisting object.</value>
        </member>
        <member name="P:RLM.Construction.Services.ContextView`2.SecurityContext">
            <summary>
            Gets or sets the security context.
            </summary>
            <value>The security context.</value>
        </member>
        <member name="P:RLM.Construction.Services.ContextView`2.TransactionManager">
            <summary>
            Gets or sets the transaction manager.
            </summary>
            <value>The transaction manager.</value>
        </member>
        <member name="T:RLM.Construction.Services.ItemMovementService">
            <summary>
             An component type implementation of the 'ItemMovement' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:RLM.Construction.Services.ItemMovementServiceBase">
            <summary>
             An object representation of the 'ItemMovement' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ItemMovement.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Construction.Entities.ItemMovement"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.ItemMovementServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Construction.Entities.ItemMovement"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.ItemMovementServiceBase.CreateItemMovement(System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Decimal},System.Nullable{System.Int64},System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Construction.Entities.ItemMovement"/> instance.
            </summary>
            <param name="itemId"></param>
            <param name="fromRepositoryId"></param>
            <param name="toRepositoryId"></param>
            <param name="fromRepositoryManagerId"></param>
            <param name="toRepositoryManagerId"></param>
            <param name="transferUserId"></param>
            <param name="receiverUserId"></param>
            <param name="unitPrice"></param>
            <param name="totalQuantity"></param>
            <param name="totalAmount"></param>
            <param name="status"></param>
            <param name="isActive"></param>
            <param name="isApprove"></param>
            <param name="deliveryDate">Date of delivery items</param>
            <param name="receivedDate">Date that receiver receive items</param>
            <param name="creationDate"></param>
            <param name="creationUserId"></param>
            <param name="lastModificationDate"></param>
            <param name="lastModificationUserId"></param>
        </member>
        <member name="M:RLM.Construction.Services.ItemMovementServiceBase.GetByItemId(System.Nullable{System.Int64})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_ItemMovements_Items key.
            	FK_ItemMovements_Items Description: 
            </summary>
            <param name="itemId"></param>
            <returns>Returns a generic collection of ItemMovement objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemMovementServiceBase.GetByItemId(System.Nullable{System.Int64},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_ItemMovements_Items key.
            	FK_ItemMovements_Items Description: 
            </summary>
            <param name="itemId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Construction.Entities.TList`1"/> of <c>ItemMovement</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemMovementServiceBase.GetByFromRepositoryId(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_ItemMovements_Repositories key.
            	FK_ItemMovements_Repositories Description: 
            </summary>
            <param name="fromRepositoryId"></param>
            <returns>Returns a generic collection of ItemMovement objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemMovementServiceBase.GetByFromRepositoryId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_ItemMovements_Repositories key.
            	FK_ItemMovements_Repositories Description: 
            </summary>
            <param name="fromRepositoryId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Construction.Entities.TList`1"/> of <c>ItemMovement</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemMovementServiceBase.GetByToRepositoryId(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_ItemMovements_Repositories1 key.
            	FK_ItemMovements_Repositories1 Description: 
            </summary>
            <param name="toRepositoryId"></param>
            <returns>Returns a generic collection of ItemMovement objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemMovementServiceBase.GetByToRepositoryId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_ItemMovements_Repositories1 key.
            	FK_ItemMovements_Repositories1 Description: 
            </summary>
            <param name="toRepositoryId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Construction.Entities.TList`1"/> of <c>ItemMovement</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemMovementServiceBase.Get(RLM.Construction.Entities.ItemMovementKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemMovementServiceBase.GetByRepositoryMovementId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_ItemMovements index.
            </summary>
            <param name="repositoryMovementId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.ItemMovement"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemMovementServiceBase.GetByRepositoryMovementId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_ItemMovements index.
            </summary>
            <param name="repositoryMovementId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.ItemMovement"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemMovementServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Construction.Entities.ItemMovement"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemMovementServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Construction.Entities.ItemMovement"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Construction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemMovementServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ItemMovement</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemMovementServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ItemMovement</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemMovementServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Construction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ItemMovement</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemMovementServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemMovementServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemMovementServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ItemMovement} of <c>ItemMovement</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemMovementServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ItemMovement</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemMovementServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ItemMovement</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemMovementServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ItemMovement</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemMovementServiceBase.Insert(RLM.Construction.Entities.ItemMovement)">
            <summary>
            	public virtualmethod that Inserts a ItemMovement object into the datasource using a transaction.
            </summary>
            <param name="entity">ItemMovement object to Insert.</param>
            <remarks>After Inserting into the datasource, the ItemMovement object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ItemMovement entity = new ItemMovement();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ItemMovementService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemMovementServiceBase.Insert(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemMovement})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ItemMovement</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ItemMovement</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ItemMovement.
             <code><![CDATA[
             TList<ItemMovement> list = new TList<ItemMovement>();
             ItemMovement entity = new ItemMovement();
             entity.StringProperty = "foo";
             ItemMovement entity2 = new ItemMovement();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemMovementService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemMovementServiceBase.Update(RLM.Construction.Entities.ItemMovement)">
            <summary>
            	public virtualmethod that Updates a ItemMovement object into the datasource using a transaction.
            </summary>
            <param name="entity">ItemMovement object to Update.</param>
            <remarks>After Updateing into the datasource, the ItemMovement object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ItemMovement entity = ItemMovementService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ItemMovementService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemMovementServiceBase.Update(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemMovement})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ItemMovement</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ItemMovement</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ItemMovement.
             <code><![CDATA[
             TList<ItemMovement> list = new TList<ItemMovement>();
             ItemMovement entity = new ItemMovement();
             entity.StringProperty = "foo";
             ItemMovement entity2 = new ItemMovement();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemMovementService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemMovementServiceBase.Save(RLM.Construction.Entities.ItemMovement)">
            <summary>
            	public virtualmethod that Saves a ItemMovement object into the datasource using a transaction.
            </summary>
            <param name="entity">ItemMovement object to Save.</param>
            <remarks>After Saveing into the datasource, the ItemMovement object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ItemMovement entity = ItemMovementService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ItemMovementService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemMovementServiceBase.Save(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemMovement})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ItemMovement</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ItemMovement</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ItemMovement.
             <code><![CDATA[
             TList<ItemMovement> list = new TList<ItemMovement>();
             ItemMovement entity = new ItemMovement();
             entity.StringProperty = "foo";
             ItemMovement entity2 = new ItemMovement();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemMovementService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemMovementServiceBase.Delete(RLM.Construction.Entities.ItemMovement)">
            <summary>
            	public virtualmethod that Deletes a ItemMovement object into the datasource using a transaction.
            </summary>
            <param name="entity">ItemMovement object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ItemMovement object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ItemMovement entity = ItemMovementService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ItemMovementService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemMovementServiceBase.Delete(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemMovement})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ItemMovement</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ItemMovement</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ItemMovement.
             <code><![CDATA[
             TList<ItemMovement> list = new TList<ItemMovement>();
             ItemMovement entity = new ItemMovement();
             entity.StringProperty = "foo";
             ItemMovement entity2 = new ItemMovement();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemMovementService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemMovementServiceBase.Delete(RLM.Construction.Entities.ItemMovementKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemMovementServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 repositoryMovementId
            </summary>
            <param name="repositoryMovementId">ItemMovement pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemMovementServiceBase.DeepLoadByRepositoryMovementId(System.Int32,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Construction.Entities.ItemMovement"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <param name="repositoryMovementId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ItemMovement Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.ItemMovement"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemMovementServiceBase.DeepLoad(RLM.Construction.Entities.ItemMovement)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ItemMovement Object</param>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ItemMovementServiceBase.DeepLoad(RLM.Construction.Entities.ItemMovement)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Construction.Services.ItemMovementServiceBase.DeepLoad(RLM.Construction.Entities.ItemMovement,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ItemMovementServiceBase.DeepLoad(RLM.Construction.Entities.ItemMovement)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ItemMovement Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.ItemMovementServiceBase.DeepLoad(RLM.Construction.Entities.ItemMovement,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Construction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Construction.Entities.ItemMovement"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ItemMovement Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.ItemMovementServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemMovement})">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ItemMovementServiceBase.DeepLoad(RLM.Construction.Entities.ItemMovement)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Construction.Services.ItemMovementServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemMovement},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ItemMovementServiceBase.DeepLoad(RLM.Construction.Entities.ItemMovement)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.ItemMovementServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemMovement},System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Construction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Construction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Construction.Entities.ItemMovement"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.ItemMovementServiceBase.DeepSave(RLM.Construction.Entities.ItemMovement)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Construction.Entities.ItemMovement"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ItemMovement Object</param>
        </member>
        <member name="M:RLM.Construction.Services.ItemMovementServiceBase.DeepSave(RLM.Construction.Entities.ItemMovement,RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ItemMovement object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ItemMovement Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ItemMovement</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Construction.Services.ItemMovementServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemMovement})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ItemMovement} Object</param>
        </member>
        <member name="M:RLM.Construction.Services.ItemMovementServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemMovement},RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Construction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ItemMovement Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Construction.Services.ItemMovementServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.ItemMovementService.#ctor">
            <summary>
            Initializes a new instance of the ItemMovementService class.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.RoleOfStaffService">
            <summary>
             An component type implementation of the 'RoleOfStaff' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:RLM.Construction.Services.RoleOfStaffServiceBase">
            <summary>
             An object representation of the 'RoleOfStaff' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the RoleOfStaff.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Construction.Entities.RoleOfStaff"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.RoleOfStaffServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Construction.Entities.RoleOfStaff"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.RoleOfStaffServiceBase.CreateRoleOfStaff(System.Int32,System.Int32,System.Int32,System.Int32,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Construction.Entities.RoleOfStaff"/> instance.
            </summary>
            <param name="staffId"></param>
            <param name="roleId"></param>
            <param name="resourceId"></param>
            <param name="resourceType">Type of entity, It Can be: project, department, ......</param>
            <param name="isApprove"></param>
            <param name="isActive"></param>
            <param name="status"></param>
            <param name="fromDate"></param>
            <param name="toDate"></param>
            <param name="creationDate"></param>
            <param name="creationUserId"></param>
            <param name="lastModificationDate"></param>
            <param name="lastModificationUserId"></param>
        </member>
        <member name="M:RLM.Construction.Services.RoleOfStaffServiceBase.GetByStaffId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_RoleOfStaffs_Staffs key.
            	FK_RoleOfStaffs_Staffs Description: 
            </summary>
            <param name="staffId"></param>
            <returns>Returns a generic collection of RoleOfStaff objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RoleOfStaffServiceBase.GetByStaffId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_RoleOfStaffs_Staffs key.
            	FK_RoleOfStaffs_Staffs Description: 
            </summary>
            <param name="staffId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Construction.Entities.TList`1"/> of <c>RoleOfStaff</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RoleOfStaffServiceBase.GetByRoleId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_RoleOfStaffs_Roles key.
            	FK_RoleOfStaffs_Roles Description: 
            </summary>
            <param name="roleId"></param>
            <returns>Returns a generic collection of RoleOfStaff objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RoleOfStaffServiceBase.GetByRoleId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_RoleOfStaffs_Roles key.
            	FK_RoleOfStaffs_Roles Description: 
            </summary>
            <param name="roleId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Construction.Entities.TList`1"/> of <c>RoleOfStaff</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RoleOfStaffServiceBase.Get(RLM.Construction.Entities.RoleOfStaffKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RoleOfStaffServiceBase.GetByRoleOfStaffId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_RoleOfStaffs index.
            </summary>
            <param name="roleOfStaffId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.RoleOfStaff"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RoleOfStaffServiceBase.GetByRoleOfStaffId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_RoleOfStaffs index.
            </summary>
            <param name="roleOfStaffId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.RoleOfStaff"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RoleOfStaffServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Construction.Entities.RoleOfStaff"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Construction.Services.RoleOfStaffServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Construction.Entities.RoleOfStaff"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Construction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Construction.Services.RoleOfStaffServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>RoleOfStaff</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RoleOfStaffServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>RoleOfStaff</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RoleOfStaffServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Construction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>RoleOfStaff</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RoleOfStaffServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RoleOfStaffServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RoleOfStaffServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{RoleOfStaff} of <c>RoleOfStaff</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RoleOfStaffServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>RoleOfStaff</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RoleOfStaffServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>RoleOfStaff</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RoleOfStaffServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>RoleOfStaff</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RoleOfStaffServiceBase.Insert(RLM.Construction.Entities.RoleOfStaff)">
            <summary>
            	public virtualmethod that Inserts a RoleOfStaff object into the datasource using a transaction.
            </summary>
            <param name="entity">RoleOfStaff object to Insert.</param>
            <remarks>After Inserting into the datasource, the RoleOfStaff object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            RoleOfStaff entity = new RoleOfStaff();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	RoleOfStaffService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.RoleOfStaffServiceBase.Insert(RLM.Construction.Entities.TList{RLM.Construction.Entities.RoleOfStaff})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>RoleOfStaff</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>RoleOfStaff</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of RoleOfStaff.
             <code><![CDATA[
             TList<RoleOfStaff> list = new TList<RoleOfStaff>();
             RoleOfStaff entity = new RoleOfStaff();
             entity.StringProperty = "foo";
             RoleOfStaff entity2 = new RoleOfStaff();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	RoleOfStaffService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.RoleOfStaffServiceBase.Update(RLM.Construction.Entities.RoleOfStaff)">
            <summary>
            	public virtualmethod that Updates a RoleOfStaff object into the datasource using a transaction.
            </summary>
            <param name="entity">RoleOfStaff object to Update.</param>
            <remarks>After Updateing into the datasource, the RoleOfStaff object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            RoleOfStaff entity = RoleOfStaffService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	RoleOfStaffService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.RoleOfStaffServiceBase.Update(RLM.Construction.Entities.TList{RLM.Construction.Entities.RoleOfStaff})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>RoleOfStaff</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>RoleOfStaff</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of RoleOfStaff.
             <code><![CDATA[
             TList<RoleOfStaff> list = new TList<RoleOfStaff>();
             RoleOfStaff entity = new RoleOfStaff();
             entity.StringProperty = "foo";
             RoleOfStaff entity2 = new RoleOfStaff();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	RoleOfStaffService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.RoleOfStaffServiceBase.Save(RLM.Construction.Entities.RoleOfStaff)">
            <summary>
            	public virtualmethod that Saves a RoleOfStaff object into the datasource using a transaction.
            </summary>
            <param name="entity">RoleOfStaff object to Save.</param>
            <remarks>After Saveing into the datasource, the RoleOfStaff object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            RoleOfStaff entity = RoleOfStaffService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	RoleOfStaffService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.RoleOfStaffServiceBase.Save(RLM.Construction.Entities.TList{RLM.Construction.Entities.RoleOfStaff})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>RoleOfStaff</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>RoleOfStaff</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of RoleOfStaff.
             <code><![CDATA[
             TList<RoleOfStaff> list = new TList<RoleOfStaff>();
             RoleOfStaff entity = new RoleOfStaff();
             entity.StringProperty = "foo";
             RoleOfStaff entity2 = new RoleOfStaff();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	RoleOfStaffService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.RoleOfStaffServiceBase.Delete(RLM.Construction.Entities.RoleOfStaff)">
            <summary>
            	public virtualmethod that Deletes a RoleOfStaff object into the datasource using a transaction.
            </summary>
            <param name="entity">RoleOfStaff object to Delete.</param>
            <remarks>After Deleteing into the datasource, the RoleOfStaff object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            RoleOfStaff entity = RoleOfStaffService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	RoleOfStaffService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.RoleOfStaffServiceBase.Delete(RLM.Construction.Entities.TList{RLM.Construction.Entities.RoleOfStaff})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>RoleOfStaff</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>RoleOfStaff</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of RoleOfStaff.
             <code><![CDATA[
             TList<RoleOfStaff> list = new TList<RoleOfStaff>();
             RoleOfStaff entity = new RoleOfStaff();
             entity.StringProperty = "foo";
             RoleOfStaff entity2 = new RoleOfStaff();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	RoleOfStaffService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.RoleOfStaffServiceBase.Delete(RLM.Construction.Entities.RoleOfStaffKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RoleOfStaffServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 roleOfStaffId
            </summary>
            <param name="roleOfStaffId">RoleOfStaff pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RoleOfStaffServiceBase.DeepLoadByRoleOfStaffId(System.Int32,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Construction.Entities.RoleOfStaff"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <param name="roleOfStaffId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">RoleOfStaff Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.RoleOfStaff"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RoleOfStaffServiceBase.DeepLoad(RLM.Construction.Entities.RoleOfStaff)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">RoleOfStaff Object</param>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.RoleOfStaffServiceBase.DeepLoad(RLM.Construction.Entities.RoleOfStaff)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Construction.Services.RoleOfStaffServiceBase.DeepLoad(RLM.Construction.Entities.RoleOfStaff,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.RoleOfStaffServiceBase.DeepLoad(RLM.Construction.Entities.RoleOfStaff)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">RoleOfStaff Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.RoleOfStaffServiceBase.DeepLoad(RLM.Construction.Entities.RoleOfStaff,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Construction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Construction.Entities.RoleOfStaff"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">RoleOfStaff Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.RoleOfStaffServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.RoleOfStaff})">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.RoleOfStaffServiceBase.DeepLoad(RLM.Construction.Entities.RoleOfStaff)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Construction.Services.RoleOfStaffServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.RoleOfStaff},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.RoleOfStaffServiceBase.DeepLoad(RLM.Construction.Entities.RoleOfStaff)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.RoleOfStaffServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.RoleOfStaff},System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Construction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Construction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Construction.Entities.RoleOfStaff"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.RoleOfStaffServiceBase.DeepSave(RLM.Construction.Entities.RoleOfStaff)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Construction.Entities.RoleOfStaff"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">RoleOfStaff Object</param>
        </member>
        <member name="M:RLM.Construction.Services.RoleOfStaffServiceBase.DeepSave(RLM.Construction.Entities.RoleOfStaff,RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the RoleOfStaff object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">RoleOfStaff Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>RoleOfStaff</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Construction.Services.RoleOfStaffServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.RoleOfStaff})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{RoleOfStaff} Object</param>
        </member>
        <member name="M:RLM.Construction.Services.RoleOfStaffServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.RoleOfStaff},RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Construction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">RoleOfStaff Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Construction.Services.RoleOfStaffServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.RoleOfStaffService.#ctor">
            <summary>
            Initializes a new instance of the RoleOfStaffService class.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.UserService">
            <summary>
             An component type implementation of the 'User' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:RLM.Construction.Services.UserServiceBase">
            <summary>
             An object representation of the 'User' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the User.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Construction.Entities.User"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.UserServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Construction.Entities.User"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.UserServiceBase.CreateUser(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Guid})">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Construction.Entities.User"/> instance.
            </summary>
            <param name="userGroupId"></param>
            <param name="email"></param>
            <param name="pwd"></param>
            <param name="pwdFormat">Format of pwd, example: 0: plain text, 1: MD5, 2: 3-DES</param>
            <param name="fullName"></param>
            <param name="phone"></param>
            <param name="isDeletable">true if user can not be deleted (built-in user)</param>
            <param name="isActive">false if user account was deactive. An deactive user account can not logged into the system</param>
            <param name="isFirstLoggedIn">true if user did not logged in</param>
            <param name="isLocked">true if account was locked, example: after 3 times logged-in fail. User account will be locked</param>
            <param name="logInFail">number of login fail</param>
            <param name="lastLoginDate">Last log-in time</param>
            <param name="creationDate"></param>
            <param name="creationUserId"></param>
            <param name="lastModificationDate"></param>
            <param name="lastModificationUserId"></param>
            <param name="isLoggedIn"></param>
            <param name="loggedInGuid"></param>
        </member>
        <member name="M:RLM.Construction.Services.UserServiceBase.GetByUserGroupId(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_Users_UserGroups key.
            	FK_Users_UserGroups Description: 
            </summary>
            <param name="userGroupId"></param>
            <returns>Returns a generic collection of User objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UserServiceBase.GetByUserGroupId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_Users_UserGroups key.
            	FK_Users_UserGroups Description: 
            </summary>
            <param name="userGroupId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Construction.Entities.TList`1"/> of <c>User</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UserServiceBase.Get(RLM.Construction.Entities.UserKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UserServiceBase.GetByUserId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_Users index.
            </summary>
            <param name="userId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.User"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UserServiceBase.GetByUserId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_Users index.
            </summary>
            <param name="userId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.User"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UserServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Construction.Entities.User"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Construction.Services.UserServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Construction.Entities.User"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Construction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Construction.Services.UserServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>User</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UserServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>User</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UserServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Construction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>User</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UserServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UserServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UserServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{User} of <c>User</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UserServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>User</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UserServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>User</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UserServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>User</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UserServiceBase.Insert(RLM.Construction.Entities.User)">
            <summary>
            	public virtualmethod that Inserts a User object into the datasource using a transaction.
            </summary>
            <param name="entity">User object to Insert.</param>
            <remarks>After Inserting into the datasource, the User object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            User entity = new User();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	UserService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.UserServiceBase.Insert(RLM.Construction.Entities.TList{RLM.Construction.Entities.User})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>User</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>User</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of User.
             <code><![CDATA[
             TList<User> list = new TList<User>();
             User entity = new User();
             entity.StringProperty = "foo";
             User entity2 = new User();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UserService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.UserServiceBase.Update(RLM.Construction.Entities.User)">
            <summary>
            	public virtualmethod that Updates a User object into the datasource using a transaction.
            </summary>
            <param name="entity">User object to Update.</param>
            <remarks>After Updateing into the datasource, the User object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            User entity = UserService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	UserService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.UserServiceBase.Update(RLM.Construction.Entities.TList{RLM.Construction.Entities.User})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>User</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>User</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of User.
             <code><![CDATA[
             TList<User> list = new TList<User>();
             User entity = new User();
             entity.StringProperty = "foo";
             User entity2 = new User();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UserService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.UserServiceBase.Save(RLM.Construction.Entities.User)">
            <summary>
            	public virtualmethod that Saves a User object into the datasource using a transaction.
            </summary>
            <param name="entity">User object to Save.</param>
            <remarks>After Saveing into the datasource, the User object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            User entity = UserService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	UserService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.UserServiceBase.Save(RLM.Construction.Entities.TList{RLM.Construction.Entities.User})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>User</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>User</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of User.
             <code><![CDATA[
             TList<User> list = new TList<User>();
             User entity = new User();
             entity.StringProperty = "foo";
             User entity2 = new User();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UserService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.UserServiceBase.Delete(RLM.Construction.Entities.User)">
            <summary>
            	public virtualmethod that Deletes a User object into the datasource using a transaction.
            </summary>
            <param name="entity">User object to Delete.</param>
            <remarks>After Deleteing into the datasource, the User object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            User entity = UserService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	UserService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.UserServiceBase.Delete(RLM.Construction.Entities.TList{RLM.Construction.Entities.User})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>User</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>User</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of User.
             <code><![CDATA[
             TList<User> list = new TList<User>();
             User entity = new User();
             entity.StringProperty = "foo";
             User entity2 = new User();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UserService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.UserServiceBase.Delete(RLM.Construction.Entities.UserKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UserServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 userId
            </summary>
            <param name="userId">User pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UserServiceBase.DeepLoadByUserId(System.Int32,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Construction.Entities.User"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <param name="userId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">User Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.User"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UserServiceBase.DeepLoad(RLM.Construction.Entities.User)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">User Object</param>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.UserServiceBase.DeepLoad(RLM.Construction.Entities.User)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Construction.Services.UserServiceBase.DeepLoad(RLM.Construction.Entities.User,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.UserServiceBase.DeepLoad(RLM.Construction.Entities.User)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">User Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.UserServiceBase.DeepLoad(RLM.Construction.Entities.User,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Construction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Construction.Entities.User"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">User Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.UserServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.User})">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.UserServiceBase.DeepLoad(RLM.Construction.Entities.User)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Construction.Services.UserServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.User},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.UserServiceBase.DeepLoad(RLM.Construction.Entities.User)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.UserServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.User},System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Construction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Construction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Construction.Entities.User"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.UserServiceBase.DeepSave(RLM.Construction.Entities.User)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Construction.Entities.User"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">User Object</param>
        </member>
        <member name="M:RLM.Construction.Services.UserServiceBase.DeepSave(RLM.Construction.Entities.User,RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the User object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">User Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>User</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Construction.Services.UserServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.User})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{User} Object</param>
        </member>
        <member name="M:RLM.Construction.Services.UserServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.User},RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Construction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">User Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Construction.Services.UserServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.UserService.#ctor">
            <summary>
            Initializes a new instance of the UserService class.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.ContactorServiceBase">
            <summary>
             An object representation of the 'Contactor' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Contactor.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Construction.Entities.Contactor"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.ContactorServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Construction.Entities.Contactor"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.ContactorServiceBase.CreateContactor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.String,System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Construction.Entities.Contactor"/> instance.
            </summary>
            <param name="partnerId">Id of department, company that this contactor is being belong to</param>
            <param name="groupId">group to classify contactor</param>
            <param name="code"></param>
            <param name="name"></param>
            <param name="jobTitle">Job title of contactor in their company</param>
            <param name="email"></param>
            <param name="mobile"></param>
            <param name="phone"></param>
            <param name="ext"></param>
            <param name="isActive"></param>
            <param name="priority"></param>
            <param name="comment"></param>
            <param name="creationDate"></param>
            <param name="creationUserId"></param>
            <param name="lastModificationDate"></param>
            <param name="lastModificationUserId"></param>
        </member>
        <member name="M:RLM.Construction.Services.ContactorServiceBase.Get(RLM.Construction.Entities.ContactorKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ContactorServiceBase.GetByContactorId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_Contactors index.
            </summary>
            <param name="contactorId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.Contactor"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ContactorServiceBase.GetByContactorId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_Contactors index.
            </summary>
            <param name="contactorId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.Contactor"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ContactorServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Construction.Entities.Contactor"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Construction.Services.ContactorServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Construction.Entities.Contactor"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Construction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Construction.Services.ContactorServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Contactor</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ContactorServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Contactor</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ContactorServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Construction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Contactor</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ContactorServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ContactorServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ContactorServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Contactor} of <c>Contactor</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ContactorServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Contactor</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ContactorServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Contactor</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ContactorServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Contactor</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ContactorServiceBase.Insert(RLM.Construction.Entities.Contactor)">
            <summary>
            	public virtualmethod that Inserts a Contactor object into the datasource using a transaction.
            </summary>
            <param name="entity">Contactor object to Insert.</param>
            <remarks>After Inserting into the datasource, the Contactor object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Contactor entity = new Contactor();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ContactorService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ContactorServiceBase.Insert(RLM.Construction.Entities.TList{RLM.Construction.Entities.Contactor})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Contactor</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Contactor</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Contactor.
             <code><![CDATA[
             TList<Contactor> list = new TList<Contactor>();
             Contactor entity = new Contactor();
             entity.StringProperty = "foo";
             Contactor entity2 = new Contactor();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ContactorService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ContactorServiceBase.Update(RLM.Construction.Entities.Contactor)">
            <summary>
            	public virtualmethod that Updates a Contactor object into the datasource using a transaction.
            </summary>
            <param name="entity">Contactor object to Update.</param>
            <remarks>After Updateing into the datasource, the Contactor object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Contactor entity = ContactorService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ContactorService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ContactorServiceBase.Update(RLM.Construction.Entities.TList{RLM.Construction.Entities.Contactor})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Contactor</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Contactor</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Contactor.
             <code><![CDATA[
             TList<Contactor> list = new TList<Contactor>();
             Contactor entity = new Contactor();
             entity.StringProperty = "foo";
             Contactor entity2 = new Contactor();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ContactorService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ContactorServiceBase.Save(RLM.Construction.Entities.Contactor)">
            <summary>
            	public virtualmethod that Saves a Contactor object into the datasource using a transaction.
            </summary>
            <param name="entity">Contactor object to Save.</param>
            <remarks>After Saveing into the datasource, the Contactor object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Contactor entity = ContactorService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ContactorService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ContactorServiceBase.Save(RLM.Construction.Entities.TList{RLM.Construction.Entities.Contactor})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Contactor</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Contactor</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Contactor.
             <code><![CDATA[
             TList<Contactor> list = new TList<Contactor>();
             Contactor entity = new Contactor();
             entity.StringProperty = "foo";
             Contactor entity2 = new Contactor();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ContactorService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ContactorServiceBase.Delete(RLM.Construction.Entities.Contactor)">
            <summary>
            	public virtualmethod that Deletes a Contactor object into the datasource using a transaction.
            </summary>
            <param name="entity">Contactor object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Contactor object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Contactor entity = ContactorService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ContactorService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ContactorServiceBase.Delete(RLM.Construction.Entities.TList{RLM.Construction.Entities.Contactor})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Contactor</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Contactor</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Contactor.
             <code><![CDATA[
             TList<Contactor> list = new TList<Contactor>();
             Contactor entity = new Contactor();
             entity.StringProperty = "foo";
             Contactor entity2 = new Contactor();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ContactorService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ContactorServiceBase.Delete(RLM.Construction.Entities.ContactorKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ContactorServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 contactorId
            </summary>
            <param name="contactorId">Contactor pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ContactorServiceBase.DeepLoadByContactorId(System.Int32,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Construction.Entities.Contactor"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <param name="contactorId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Contactor Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.Contactor"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ContactorServiceBase.DeepLoad(RLM.Construction.Entities.Contactor)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Contactor Object</param>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ContactorServiceBase.DeepLoad(RLM.Construction.Entities.Contactor)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Construction.Services.ContactorServiceBase.DeepLoad(RLM.Construction.Entities.Contactor,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ContactorServiceBase.DeepLoad(RLM.Construction.Entities.Contactor)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Contactor Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.ContactorServiceBase.DeepLoad(RLM.Construction.Entities.Contactor,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Construction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Construction.Entities.Contactor"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Contactor Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.ContactorServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.Contactor})">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ContactorServiceBase.DeepLoad(RLM.Construction.Entities.Contactor)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Construction.Services.ContactorServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.Contactor},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ContactorServiceBase.DeepLoad(RLM.Construction.Entities.Contactor)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.ContactorServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.Contactor},System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Construction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Construction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Construction.Entities.Contactor"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.ContactorServiceBase.DeepSave(RLM.Construction.Entities.Contactor)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Construction.Entities.Contactor"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Contactor Object</param>
        </member>
        <member name="M:RLM.Construction.Services.ContactorServiceBase.DeepSave(RLM.Construction.Entities.Contactor,RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Contactor object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Contactor Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Contactor</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Construction.Services.ContactorServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.Contactor})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Contactor} Object</param>
        </member>
        <member name="M:RLM.Construction.Services.ContactorServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.Contactor},RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Construction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Contactor Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Construction.Services.ContactorServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.TaskServiceBase">
            <summary>
             An object representation of the 'Task' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Task.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Construction.Entities.Task"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.TaskServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Construction.Entities.Task"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.TaskServiceBase.CreateTask(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Construction.Entities.Task"/> instance.
            </summary>
            <param name="projectId"></param>
            <param name="contractId"></param>
            <param name="projectPhaseId"></param>
            <param name="resourceId"></param>
            <param name="resourceType"></param>
            <param name="approvalUserId"></param>
            <param name="name"></param>
            <param name="description"></param>
            <param name="operatorUserId"></param>
            <param name="isApproved"></param>
            <param name="isCanComment"></param>
            <param name="type">Type of task: Project, Contract, ProjectPhase, Traning...</param>
            <param name="status">Status of current task: Planing, Deploying, ....Finished</param>
            <param name="isActive"></param>
            <param name="useAsProjectTask"></param>
            <param name="percentComplete"></param>
            <param name="realFromDate"></param>
            <param name="realToDate"></param>
            <param name="estimationFromDate"></param>
            <param name="estimationToDate"></param>
            <param name="creationDate"></param>
            <param name="creationUserId"></param>
            <param name="lastModificationDate"></param>
            <param name="lastModificationUserId"></param>
        </member>
        <member name="M:RLM.Construction.Services.TaskServiceBase.Get(RLM.Construction.Entities.TaskKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.TaskServiceBase.GetByTaskId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_Task index.
            </summary>
            <param name="taskId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.Task"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.TaskServiceBase.GetByTaskId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_Task index.
            </summary>
            <param name="taskId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.Task"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.TaskServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Construction.Entities.Task"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Construction.Services.TaskServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Construction.Entities.Task"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Construction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Construction.Services.TaskServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Task</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.TaskServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Task</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.TaskServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Construction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Task</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.TaskServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Construction.Services.TaskServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.TaskServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Task} of <c>Task</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.TaskServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Task</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.TaskServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Task</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.TaskServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Task</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.TaskServiceBase.Insert(RLM.Construction.Entities.Task)">
            <summary>
            	public virtualmethod that Inserts a Task object into the datasource using a transaction.
            </summary>
            <param name="entity">Task object to Insert.</param>
            <remarks>After Inserting into the datasource, the Task object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Task entity = new Task();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	TaskService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.TaskServiceBase.Insert(RLM.Construction.Entities.TList{RLM.Construction.Entities.Task})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Task</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Task</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Task.
             <code><![CDATA[
             TList<Task> list = new TList<Task>();
             Task entity = new Task();
             entity.StringProperty = "foo";
             Task entity2 = new Task();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TaskService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.TaskServiceBase.Update(RLM.Construction.Entities.Task)">
            <summary>
            	public virtualmethod that Updates a Task object into the datasource using a transaction.
            </summary>
            <param name="entity">Task object to Update.</param>
            <remarks>After Updateing into the datasource, the Task object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Task entity = TaskService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	TaskService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.TaskServiceBase.Update(RLM.Construction.Entities.TList{RLM.Construction.Entities.Task})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Task</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Task</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Task.
             <code><![CDATA[
             TList<Task> list = new TList<Task>();
             Task entity = new Task();
             entity.StringProperty = "foo";
             Task entity2 = new Task();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TaskService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.TaskServiceBase.Save(RLM.Construction.Entities.Task)">
            <summary>
            	public virtualmethod that Saves a Task object into the datasource using a transaction.
            </summary>
            <param name="entity">Task object to Save.</param>
            <remarks>After Saveing into the datasource, the Task object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Task entity = TaskService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	TaskService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.TaskServiceBase.Save(RLM.Construction.Entities.TList{RLM.Construction.Entities.Task})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Task</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Task</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Task.
             <code><![CDATA[
             TList<Task> list = new TList<Task>();
             Task entity = new Task();
             entity.StringProperty = "foo";
             Task entity2 = new Task();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TaskService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.TaskServiceBase.Delete(RLM.Construction.Entities.Task)">
            <summary>
            	public virtualmethod that Deletes a Task object into the datasource using a transaction.
            </summary>
            <param name="entity">Task object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Task object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Task entity = TaskService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	TaskService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.TaskServiceBase.Delete(RLM.Construction.Entities.TList{RLM.Construction.Entities.Task})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Task</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Task</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Task.
             <code><![CDATA[
             TList<Task> list = new TList<Task>();
             Task entity = new Task();
             entity.StringProperty = "foo";
             Task entity2 = new Task();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TaskService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.TaskServiceBase.Delete(RLM.Construction.Entities.TaskKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.TaskServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 taskId
            </summary>
            <param name="taskId">Task pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.TaskServiceBase.DeepLoadByTaskId(System.Int32,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Construction.Entities.Task"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <param name="taskId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Task Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.Task"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.TaskServiceBase.DeepLoad(RLM.Construction.Entities.Task)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Task Object</param>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.TaskServiceBase.DeepLoad(RLM.Construction.Entities.Task)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Construction.Services.TaskServiceBase.DeepLoad(RLM.Construction.Entities.Task,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.TaskServiceBase.DeepLoad(RLM.Construction.Entities.Task)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Task Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.TaskServiceBase.DeepLoad(RLM.Construction.Entities.Task,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Construction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Construction.Entities.Task"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Task Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.TaskServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.Task})">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.TaskServiceBase.DeepLoad(RLM.Construction.Entities.Task)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Construction.Services.TaskServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.Task},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.TaskServiceBase.DeepLoad(RLM.Construction.Entities.Task)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.TaskServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.Task},System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Construction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Construction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Construction.Entities.Task"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.TaskServiceBase.DeepSave(RLM.Construction.Entities.Task)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Construction.Entities.Task"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Task Object</param>
        </member>
        <member name="M:RLM.Construction.Services.TaskServiceBase.DeepSave(RLM.Construction.Entities.Task,RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Task object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Task Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Task</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Construction.Services.TaskServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.Task})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Task} Object</param>
        </member>
        <member name="M:RLM.Construction.Services.TaskServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.Task},RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Construction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Task Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Construction.Services.TaskServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.TaskMemberServiceBase">
            <summary>
             An object representation of the 'TaskMember' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the TaskMember.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Construction.Entities.TaskMember"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.TaskMemberServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Construction.Entities.TaskMember"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.TaskMemberServiceBase.CreateTaskMember(System.Int32,System.Int32,System.Int32,System.Int32,System.Nullable{System.Int32},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Construction.Entities.TaskMember"/> instance.
            </summary>
            <param name="staffId"></param>
            <param name="roleId"></param>
            <param name="resourceType">Task, Meeting, Project</param>
            <param name="resourceId"></param>
            <param name="status">Joined, Waiting, Released, ....</param>
            <param name="comment"></param>
            <param name="fromDate"></param>
            <param name="toDate"></param>
            <param name="realFromDate"></param>
            <param name="realToDate"></param>
            <param name="creationDate"></param>
            <param name="creationUserId"></param>
            <param name="lastModificationUserId"></param>
            <param name="lastModificationDate"></param>
        </member>
        <member name="M:RLM.Construction.Services.TaskMemberServiceBase.Get(RLM.Construction.Entities.TaskMemberKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.TaskMemberServiceBase.GetByTaskMemberId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_TaskMember index.
            </summary>
            <param name="taskMemberId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.TaskMember"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.TaskMemberServiceBase.GetByTaskMemberId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_TaskMember index.
            </summary>
            <param name="taskMemberId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.TaskMember"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.TaskMemberServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Construction.Entities.TaskMember"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Construction.Services.TaskMemberServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Construction.Entities.TaskMember"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Construction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Construction.Services.TaskMemberServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>TaskMember</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.TaskMemberServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>TaskMember</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.TaskMemberServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Construction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>TaskMember</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.TaskMemberServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Construction.Services.TaskMemberServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.TaskMemberServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{TaskMember} of <c>TaskMember</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.TaskMemberServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>TaskMember</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.TaskMemberServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>TaskMember</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.TaskMemberServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>TaskMember</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.TaskMemberServiceBase.Insert(RLM.Construction.Entities.TaskMember)">
            <summary>
            	public virtualmethod that Inserts a TaskMember object into the datasource using a transaction.
            </summary>
            <param name="entity">TaskMember object to Insert.</param>
            <remarks>After Inserting into the datasource, the TaskMember object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            TaskMember entity = new TaskMember();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	TaskMemberService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.TaskMemberServiceBase.Insert(RLM.Construction.Entities.TList{RLM.Construction.Entities.TaskMember})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TaskMember</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>TaskMember</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of TaskMember.
             <code><![CDATA[
             TList<TaskMember> list = new TList<TaskMember>();
             TaskMember entity = new TaskMember();
             entity.StringProperty = "foo";
             TaskMember entity2 = new TaskMember();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TaskMemberService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.TaskMemberServiceBase.Update(RLM.Construction.Entities.TaskMember)">
            <summary>
            	public virtualmethod that Updates a TaskMember object into the datasource using a transaction.
            </summary>
            <param name="entity">TaskMember object to Update.</param>
            <remarks>After Updateing into the datasource, the TaskMember object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            TaskMember entity = TaskMemberService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	TaskMemberService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.TaskMemberServiceBase.Update(RLM.Construction.Entities.TList{RLM.Construction.Entities.TaskMember})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TaskMember</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>TaskMember</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of TaskMember.
             <code><![CDATA[
             TList<TaskMember> list = new TList<TaskMember>();
             TaskMember entity = new TaskMember();
             entity.StringProperty = "foo";
             TaskMember entity2 = new TaskMember();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TaskMemberService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.TaskMemberServiceBase.Save(RLM.Construction.Entities.TaskMember)">
            <summary>
            	public virtualmethod that Saves a TaskMember object into the datasource using a transaction.
            </summary>
            <param name="entity">TaskMember object to Save.</param>
            <remarks>After Saveing into the datasource, the TaskMember object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            TaskMember entity = TaskMemberService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	TaskMemberService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.TaskMemberServiceBase.Save(RLM.Construction.Entities.TList{RLM.Construction.Entities.TaskMember})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TaskMember</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>TaskMember</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of TaskMember.
             <code><![CDATA[
             TList<TaskMember> list = new TList<TaskMember>();
             TaskMember entity = new TaskMember();
             entity.StringProperty = "foo";
             TaskMember entity2 = new TaskMember();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TaskMemberService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.TaskMemberServiceBase.Delete(RLM.Construction.Entities.TaskMember)">
            <summary>
            	public virtualmethod that Deletes a TaskMember object into the datasource using a transaction.
            </summary>
            <param name="entity">TaskMember object to Delete.</param>
            <remarks>After Deleteing into the datasource, the TaskMember object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            TaskMember entity = TaskMemberService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	TaskMemberService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.TaskMemberServiceBase.Delete(RLM.Construction.Entities.TList{RLM.Construction.Entities.TaskMember})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TaskMember</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>TaskMember</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of TaskMember.
             <code><![CDATA[
             TList<TaskMember> list = new TList<TaskMember>();
             TaskMember entity = new TaskMember();
             entity.StringProperty = "foo";
             TaskMember entity2 = new TaskMember();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TaskMemberService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.TaskMemberServiceBase.Delete(RLM.Construction.Entities.TaskMemberKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.TaskMemberServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 taskMemberId
            </summary>
            <param name="taskMemberId">TaskMember pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.TaskMemberServiceBase.DeepLoadByTaskMemberId(System.Int32,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Construction.Entities.TaskMember"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <param name="taskMemberId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">TaskMember Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.TaskMember"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.TaskMemberServiceBase.DeepLoad(RLM.Construction.Entities.TaskMember)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">TaskMember Object</param>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.TaskMemberServiceBase.DeepLoad(RLM.Construction.Entities.TaskMember)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Construction.Services.TaskMemberServiceBase.DeepLoad(RLM.Construction.Entities.TaskMember,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.TaskMemberServiceBase.DeepLoad(RLM.Construction.Entities.TaskMember)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">TaskMember Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.TaskMemberServiceBase.DeepLoad(RLM.Construction.Entities.TaskMember,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Construction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Construction.Entities.TaskMember"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">TaskMember Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.TaskMemberServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.TaskMember})">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.TaskMemberServiceBase.DeepLoad(RLM.Construction.Entities.TaskMember)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Construction.Services.TaskMemberServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.TaskMember},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.TaskMemberServiceBase.DeepLoad(RLM.Construction.Entities.TaskMember)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.TaskMemberServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.TaskMember},System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Construction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Construction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Construction.Entities.TaskMember"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.TaskMemberServiceBase.DeepSave(RLM.Construction.Entities.TaskMember)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Construction.Entities.TaskMember"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">TaskMember Object</param>
        </member>
        <member name="M:RLM.Construction.Services.TaskMemberServiceBase.DeepSave(RLM.Construction.Entities.TaskMember,RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the TaskMember object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">TaskMember Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>TaskMember</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Construction.Services.TaskMemberServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.TaskMember})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{TaskMember} Object</param>
        </member>
        <member name="M:RLM.Construction.Services.TaskMemberServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.TaskMember},RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Construction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">TaskMember Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Construction.Services.TaskMemberServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.ItemIOItemService">
            <summary>
             An component type implementation of the 'ItemIOItem' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:RLM.Construction.Services.ItemIOItemServiceBase">
            <summary>
             An object representation of the 'ItemIOItem' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ItemIOItem.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Construction.Entities.ItemIOItem"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOItemServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Construction.Entities.ItemIOItem"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOItemServiceBase.CreateItemIOItem(System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Decimal,System.Int32,System.Int32,System.Double,System.Nullable{System.Double},System.Int32,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Construction.Entities.ItemIOItem"/> instance.
            </summary>
            <param name="iOTicketId"></param>
            <param name="itemId"></param>
            <param name="toRepositoryId"></param>
            <param name="fromRepositoryId"></param>
            <param name="unitPrice"></param>
            <param name="priceUnitId"></param>
            <param name="unitId"></param>
            <param name="quantity"></param>
            <param name="taxPercent"></param>
            <param name="iOType"></param>
            <param name="isActive"></param>
            <param name="isNeedAppred"></param>
            <param name="isApproved"></param>
            <param name="approvedDate"></param>
            <param name="approverUserId"></param>
            <param name="approverStaffId"></param>
            <param name="comment"></param>
            <param name="creationDate"></param>
            <param name="lastModificationDate"></param>
            <param name="creationUserId"></param>
            <param name="lastModificationUserId"></param>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOItemServiceBase.Get(RLM.Construction.Entities.ItemIOItemKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOItemServiceBase.GetByItemIOItemId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_ItemIOItem index.
            </summary>
            <param name="itemIOItemId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.ItemIOItem"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOItemServiceBase.GetByItemIOItemId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_ItemIOItem index.
            </summary>
            <param name="itemIOItemId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.ItemIOItem"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOItemServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Construction.Entities.ItemIOItem"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOItemServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Construction.Entities.ItemIOItem"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Construction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOItemServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ItemIOItem</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOItemServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ItemIOItem</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOItemServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Construction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ItemIOItem</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOItemServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOItemServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOItemServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ItemIOItem} of <c>ItemIOItem</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOItemServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ItemIOItem</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOItemServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ItemIOItem</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOItemServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ItemIOItem</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOItemServiceBase.Insert(RLM.Construction.Entities.ItemIOItem)">
            <summary>
            	public virtualmethod that Inserts a ItemIOItem object into the datasource using a transaction.
            </summary>
            <param name="entity">ItemIOItem object to Insert.</param>
            <remarks>After Inserting into the datasource, the ItemIOItem object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ItemIOItem entity = new ItemIOItem();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ItemIOItemService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOItemServiceBase.Insert(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemIOItem})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ItemIOItem</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ItemIOItem</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ItemIOItem.
             <code><![CDATA[
             TList<ItemIOItem> list = new TList<ItemIOItem>();
             ItemIOItem entity = new ItemIOItem();
             entity.StringProperty = "foo";
             ItemIOItem entity2 = new ItemIOItem();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemIOItemService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOItemServiceBase.Update(RLM.Construction.Entities.ItemIOItem)">
            <summary>
            	public virtualmethod that Updates a ItemIOItem object into the datasource using a transaction.
            </summary>
            <param name="entity">ItemIOItem object to Update.</param>
            <remarks>After Updateing into the datasource, the ItemIOItem object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ItemIOItem entity = ItemIOItemService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ItemIOItemService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOItemServiceBase.Update(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemIOItem})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ItemIOItem</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ItemIOItem</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ItemIOItem.
             <code><![CDATA[
             TList<ItemIOItem> list = new TList<ItemIOItem>();
             ItemIOItem entity = new ItemIOItem();
             entity.StringProperty = "foo";
             ItemIOItem entity2 = new ItemIOItem();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemIOItemService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOItemServiceBase.Save(RLM.Construction.Entities.ItemIOItem)">
            <summary>
            	public virtualmethod that Saves a ItemIOItem object into the datasource using a transaction.
            </summary>
            <param name="entity">ItemIOItem object to Save.</param>
            <remarks>After Saveing into the datasource, the ItemIOItem object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ItemIOItem entity = ItemIOItemService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ItemIOItemService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOItemServiceBase.Save(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemIOItem})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ItemIOItem</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ItemIOItem</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ItemIOItem.
             <code><![CDATA[
             TList<ItemIOItem> list = new TList<ItemIOItem>();
             ItemIOItem entity = new ItemIOItem();
             entity.StringProperty = "foo";
             ItemIOItem entity2 = new ItemIOItem();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemIOItemService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOItemServiceBase.Delete(RLM.Construction.Entities.ItemIOItem)">
            <summary>
            	public virtualmethod that Deletes a ItemIOItem object into the datasource using a transaction.
            </summary>
            <param name="entity">ItemIOItem object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ItemIOItem object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ItemIOItem entity = ItemIOItemService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ItemIOItemService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOItemServiceBase.Delete(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemIOItem})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ItemIOItem</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ItemIOItem</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ItemIOItem.
             <code><![CDATA[
             TList<ItemIOItem> list = new TList<ItemIOItem>();
             ItemIOItem entity = new ItemIOItem();
             entity.StringProperty = "foo";
             ItemIOItem entity2 = new ItemIOItem();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemIOItemService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOItemServiceBase.Delete(RLM.Construction.Entities.ItemIOItemKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOItemServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 itemIOItemId
            </summary>
            <param name="itemIOItemId">ItemIOItem pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOItemServiceBase.DeepLoadByItemIOItemId(System.Int32,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Construction.Entities.ItemIOItem"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <param name="itemIOItemId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ItemIOItem Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.ItemIOItem"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOItemServiceBase.DeepLoad(RLM.Construction.Entities.ItemIOItem)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ItemIOItem Object</param>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ItemIOItemServiceBase.DeepLoad(RLM.Construction.Entities.ItemIOItem)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOItemServiceBase.DeepLoad(RLM.Construction.Entities.ItemIOItem,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ItemIOItemServiceBase.DeepLoad(RLM.Construction.Entities.ItemIOItem)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ItemIOItem Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOItemServiceBase.DeepLoad(RLM.Construction.Entities.ItemIOItem,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Construction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Construction.Entities.ItemIOItem"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ItemIOItem Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOItemServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemIOItem})">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ItemIOItemServiceBase.DeepLoad(RLM.Construction.Entities.ItemIOItem)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOItemServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemIOItem},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ItemIOItemServiceBase.DeepLoad(RLM.Construction.Entities.ItemIOItem)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOItemServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemIOItem},System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Construction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Construction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Construction.Entities.ItemIOItem"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOItemServiceBase.DeepSave(RLM.Construction.Entities.ItemIOItem)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Construction.Entities.ItemIOItem"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ItemIOItem Object</param>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOItemServiceBase.DeepSave(RLM.Construction.Entities.ItemIOItem,RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ItemIOItem object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ItemIOItem Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ItemIOItem</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOItemServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemIOItem})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ItemIOItem} Object</param>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOItemServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemIOItem},RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Construction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ItemIOItem Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Construction.Services.ItemIOItemServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOItemService.#ctor">
            <summary>
            Initializes a new instance of the ItemIOItemService class.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.AppConfigServiceBase">
            <summary>
             An object representation of the 'AppConfig' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the AppConfig.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Construction.Entities.AppConfig"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.AppConfigServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Construction.Entities.AppConfig"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.AppConfigServiceBase.CreateAppConfig(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Construction.Entities.AppConfig"/> instance.
            </summary>
            <param name="applicationId"></param>
            <param name="appConfigName"></param>
            <param name="appConfigValue"></param>
            <param name="isActive"></param>
            <param name="isDeletable"></param>
            <param name="creationDate"></param>
            <param name="creationUserId"></param>
            <param name="lastModificationDate"></param>
            <param name="lastModificationUserId"></param>
        </member>
        <member name="M:RLM.Construction.Services.AppConfigServiceBase.GetByApplicationId(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_AppConfig_Application key.
            	FK_AppConfig_Application Description: 
            </summary>
            <param name="applicationId"></param>
            <returns>Returns a generic collection of AppConfig objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.AppConfigServiceBase.GetByApplicationId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_AppConfig_Application key.
            	FK_AppConfig_Application Description: 
            </summary>
            <param name="applicationId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Construction.Entities.TList`1"/> of <c>AppConfig</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.AppConfigServiceBase.Get(RLM.Construction.Entities.AppConfigKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.AppConfigServiceBase.GetByAppConfigId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_AppConfig index.
            </summary>
            <param name="appConfigId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.AppConfig"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.AppConfigServiceBase.GetByAppConfigId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_AppConfig index.
            </summary>
            <param name="appConfigId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.AppConfig"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.AppConfigServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Construction.Entities.AppConfig"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Construction.Services.AppConfigServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Construction.Entities.AppConfig"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Construction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Construction.Services.AppConfigServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AppConfig</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.AppConfigServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AppConfig</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.AppConfigServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Construction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AppConfig</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.AppConfigServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Construction.Services.AppConfigServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.AppConfigServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{AppConfig} of <c>AppConfig</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.AppConfigServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>AppConfig</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.AppConfigServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>AppConfig</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.AppConfigServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>AppConfig</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.AppConfigServiceBase.Insert(RLM.Construction.Entities.AppConfig)">
            <summary>
            	public virtualmethod that Inserts a AppConfig object into the datasource using a transaction.
            </summary>
            <param name="entity">AppConfig object to Insert.</param>
            <remarks>After Inserting into the datasource, the AppConfig object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            AppConfig entity = new AppConfig();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	AppConfigService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.AppConfigServiceBase.Insert(RLM.Construction.Entities.TList{RLM.Construction.Entities.AppConfig})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AppConfig</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>AppConfig</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of AppConfig.
             <code><![CDATA[
             TList<AppConfig> list = new TList<AppConfig>();
             AppConfig entity = new AppConfig();
             entity.StringProperty = "foo";
             AppConfig entity2 = new AppConfig();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AppConfigService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.AppConfigServiceBase.Update(RLM.Construction.Entities.AppConfig)">
            <summary>
            	public virtualmethod that Updates a AppConfig object into the datasource using a transaction.
            </summary>
            <param name="entity">AppConfig object to Update.</param>
            <remarks>After Updateing into the datasource, the AppConfig object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            AppConfig entity = AppConfigService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	AppConfigService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.AppConfigServiceBase.Update(RLM.Construction.Entities.TList{RLM.Construction.Entities.AppConfig})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AppConfig</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>AppConfig</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of AppConfig.
             <code><![CDATA[
             TList<AppConfig> list = new TList<AppConfig>();
             AppConfig entity = new AppConfig();
             entity.StringProperty = "foo";
             AppConfig entity2 = new AppConfig();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AppConfigService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.AppConfigServiceBase.Save(RLM.Construction.Entities.AppConfig)">
            <summary>
            	public virtualmethod that Saves a AppConfig object into the datasource using a transaction.
            </summary>
            <param name="entity">AppConfig object to Save.</param>
            <remarks>After Saveing into the datasource, the AppConfig object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            AppConfig entity = AppConfigService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	AppConfigService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.AppConfigServiceBase.Save(RLM.Construction.Entities.TList{RLM.Construction.Entities.AppConfig})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AppConfig</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>AppConfig</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of AppConfig.
             <code><![CDATA[
             TList<AppConfig> list = new TList<AppConfig>();
             AppConfig entity = new AppConfig();
             entity.StringProperty = "foo";
             AppConfig entity2 = new AppConfig();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AppConfigService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.AppConfigServiceBase.Delete(RLM.Construction.Entities.AppConfig)">
            <summary>
            	public virtualmethod that Deletes a AppConfig object into the datasource using a transaction.
            </summary>
            <param name="entity">AppConfig object to Delete.</param>
            <remarks>After Deleteing into the datasource, the AppConfig object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            AppConfig entity = AppConfigService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	AppConfigService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.AppConfigServiceBase.Delete(RLM.Construction.Entities.TList{RLM.Construction.Entities.AppConfig})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AppConfig</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>AppConfig</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of AppConfig.
             <code><![CDATA[
             TList<AppConfig> list = new TList<AppConfig>();
             AppConfig entity = new AppConfig();
             entity.StringProperty = "foo";
             AppConfig entity2 = new AppConfig();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AppConfigService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.AppConfigServiceBase.Delete(RLM.Construction.Entities.AppConfigKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.AppConfigServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 appConfigId
            </summary>
            <param name="appConfigId">AppConfig pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.AppConfigServiceBase.DeepLoadByAppConfigId(System.Int32,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Construction.Entities.AppConfig"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <param name="appConfigId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AppConfig Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.AppConfig"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.AppConfigServiceBase.DeepLoad(RLM.Construction.Entities.AppConfig)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">AppConfig Object</param>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.AppConfigServiceBase.DeepLoad(RLM.Construction.Entities.AppConfig)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Construction.Services.AppConfigServiceBase.DeepLoad(RLM.Construction.Entities.AppConfig,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.AppConfigServiceBase.DeepLoad(RLM.Construction.Entities.AppConfig)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">AppConfig Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.AppConfigServiceBase.DeepLoad(RLM.Construction.Entities.AppConfig,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Construction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Construction.Entities.AppConfig"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AppConfig Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.AppConfigServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.AppConfig})">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.AppConfigServiceBase.DeepLoad(RLM.Construction.Entities.AppConfig)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Construction.Services.AppConfigServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.AppConfig},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.AppConfigServiceBase.DeepLoad(RLM.Construction.Entities.AppConfig)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.AppConfigServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.AppConfig},System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Construction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Construction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Construction.Entities.AppConfig"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.AppConfigServiceBase.DeepSave(RLM.Construction.Entities.AppConfig)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Construction.Entities.AppConfig"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">AppConfig Object</param>
        </member>
        <member name="M:RLM.Construction.Services.AppConfigServiceBase.DeepSave(RLM.Construction.Entities.AppConfig,RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the AppConfig object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">AppConfig Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>AppConfig</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Construction.Services.AppConfigServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.AppConfig})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{AppConfig} Object</param>
        </member>
        <member name="M:RLM.Construction.Services.AppConfigServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.AppConfig},RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Construction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">AppConfig Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Construction.Services.AppConfigServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.StaffService">
            <summary>
             An component type implementation of the 'Staff' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:RLM.Construction.Services.StaffServiceBase">
            <summary>
             An object representation of the 'Staff' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Staff.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Construction.Entities.Staff"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.StaffServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Construction.Entities.Staff"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.StaffServiceBase.CreateStaff(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Construction.Entities.Staff"/> instance.
            </summary>
            <param name="staffCode"></param>
            <param name="firstName"></param>
            <param name="lastName"></param>
            <param name="middleName"></param>
            <param name="sex"></param>
            <param name="birthDate"></param>
            <param name="birthPlaceId"></param>
            <param name="birthdayPlace"></param>
            <param name="isActive"></param>
            <param name="magneticCardId"></param>
            <param name="religiousId"></param>
            <param name="provinceId"></param>
            <param name="peopleId"></param>
            <param name="startWorkingDate">ngay bat dau lam o cty</param>
            <param name="workingDate">ngay bat dau di lam</param>
            <param name="deptId"></param>
            <param name="jobTitleId"></param>
            <param name="permanentAddress"></param>
            <param name="permanentProvinceId"></param>
            <param name="currentAddress"></param>
            <param name="currentProvinceId"></param>
            <param name="creationDate"></param>
            <param name="creationUserId"></param>
            <param name="lastModificationDate"></param>
            <param name="lastModificationUserId"></param>
            <param name="photo"></param>
        </member>
        <member name="M:RLM.Construction.Services.StaffServiceBase.Get(RLM.Construction.Entities.StaffKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.StaffServiceBase.GetByStaffId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_Staffs index.
            </summary>
            <param name="staffId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.Staff"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.StaffServiceBase.GetByStaffId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_Staffs index.
            </summary>
            <param name="staffId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.Staff"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.StaffServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Construction.Entities.Staff"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Construction.Services.StaffServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Construction.Entities.Staff"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Construction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Construction.Services.StaffServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Staff</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.StaffServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Staff</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.StaffServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Construction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Staff</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.StaffServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Construction.Services.StaffServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.StaffServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Staff} of <c>Staff</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.StaffServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Staff</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.StaffServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Staff</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.StaffServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Staff</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.StaffServiceBase.Insert(RLM.Construction.Entities.Staff)">
            <summary>
            	public virtualmethod that Inserts a Staff object into the datasource using a transaction.
            </summary>
            <param name="entity">Staff object to Insert.</param>
            <remarks>After Inserting into the datasource, the Staff object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Staff entity = new Staff();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	StaffService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.StaffServiceBase.Insert(RLM.Construction.Entities.TList{RLM.Construction.Entities.Staff})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Staff</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Staff</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Staff.
             <code><![CDATA[
             TList<Staff> list = new TList<Staff>();
             Staff entity = new Staff();
             entity.StringProperty = "foo";
             Staff entity2 = new Staff();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StaffService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.StaffServiceBase.Update(RLM.Construction.Entities.Staff)">
            <summary>
            	public virtualmethod that Updates a Staff object into the datasource using a transaction.
            </summary>
            <param name="entity">Staff object to Update.</param>
            <remarks>After Updateing into the datasource, the Staff object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Staff entity = StaffService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	StaffService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.StaffServiceBase.Update(RLM.Construction.Entities.TList{RLM.Construction.Entities.Staff})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Staff</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Staff</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Staff.
             <code><![CDATA[
             TList<Staff> list = new TList<Staff>();
             Staff entity = new Staff();
             entity.StringProperty = "foo";
             Staff entity2 = new Staff();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StaffService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.StaffServiceBase.Save(RLM.Construction.Entities.Staff)">
            <summary>
            	public virtualmethod that Saves a Staff object into the datasource using a transaction.
            </summary>
            <param name="entity">Staff object to Save.</param>
            <remarks>After Saveing into the datasource, the Staff object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Staff entity = StaffService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	StaffService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.StaffServiceBase.Save(RLM.Construction.Entities.TList{RLM.Construction.Entities.Staff})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Staff</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Staff</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Staff.
             <code><![CDATA[
             TList<Staff> list = new TList<Staff>();
             Staff entity = new Staff();
             entity.StringProperty = "foo";
             Staff entity2 = new Staff();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StaffService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.StaffServiceBase.Delete(RLM.Construction.Entities.Staff)">
            <summary>
            	public virtualmethod that Deletes a Staff object into the datasource using a transaction.
            </summary>
            <param name="entity">Staff object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Staff object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Staff entity = StaffService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	StaffService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.StaffServiceBase.Delete(RLM.Construction.Entities.TList{RLM.Construction.Entities.Staff})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Staff</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Staff</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Staff.
             <code><![CDATA[
             TList<Staff> list = new TList<Staff>();
             Staff entity = new Staff();
             entity.StringProperty = "foo";
             Staff entity2 = new Staff();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StaffService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.StaffServiceBase.Delete(RLM.Construction.Entities.StaffKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.StaffServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 staffId
            </summary>
            <param name="staffId">Staff pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.StaffServiceBase.DeepLoadByStaffId(System.Int32,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Construction.Entities.Staff"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <param name="staffId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Staff Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.Staff"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.StaffServiceBase.DeepLoad(RLM.Construction.Entities.Staff)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Staff Object</param>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.StaffServiceBase.DeepLoad(RLM.Construction.Entities.Staff)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Construction.Services.StaffServiceBase.DeepLoad(RLM.Construction.Entities.Staff,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.StaffServiceBase.DeepLoad(RLM.Construction.Entities.Staff)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Staff Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.StaffServiceBase.DeepLoad(RLM.Construction.Entities.Staff,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Construction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Construction.Entities.Staff"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Staff Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.StaffServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.Staff})">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.StaffServiceBase.DeepLoad(RLM.Construction.Entities.Staff)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Construction.Services.StaffServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.Staff},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.StaffServiceBase.DeepLoad(RLM.Construction.Entities.Staff)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.StaffServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.Staff},System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Construction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Construction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Construction.Entities.Staff"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.StaffServiceBase.DeepSave(RLM.Construction.Entities.Staff)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Construction.Entities.Staff"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Staff Object</param>
        </member>
        <member name="M:RLM.Construction.Services.StaffServiceBase.DeepSave(RLM.Construction.Entities.Staff,RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Staff object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Staff Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Staff</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Construction.Services.StaffServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.Staff})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Staff} Object</param>
        </member>
        <member name="M:RLM.Construction.Services.StaffServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.Staff},RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Construction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Staff Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Construction.Services.StaffServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.StaffService.#ctor">
            <summary>
            Initializes a new instance of the StaffService class.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.RelatedContractServiceBase">
            <summary>
             An object representation of the 'RelatedContract' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the RelatedContract.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Construction.Entities.RelatedContract"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.RelatedContractServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Construction.Entities.RelatedContract"/> instance .
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:RLM.Construction.Services.RelatedContractServiceBase.CreateRelatedContract(System.Int32,System.Int32,System.String,System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String)" -->
        <member name="M:RLM.Construction.Services.RelatedContractServiceBase.GetByFromContractId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_RelatedContract_Contract key.
            	FK_RelatedContract_Contract Description: 
            </summary>
            <param name="fromContractId"></param>
            <returns>Returns a generic collection of RelatedContract objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RelatedContractServiceBase.GetByFromContractId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_RelatedContract_Contract key.
            	FK_RelatedContract_Contract Description: 
            </summary>
            <param name="fromContractId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Construction.Entities.TList`1"/> of <c>RelatedContract</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RelatedContractServiceBase.GetByToContractId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_RelatedContract_Contract1 key.
            	FK_RelatedContract_Contract1 Description: 
            </summary>
            <param name="toContractId"></param>
            <returns>Returns a generic collection of RelatedContract objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RelatedContractServiceBase.GetByToContractId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_RelatedContract_Contract1 key.
            	FK_RelatedContract_Contract1 Description: 
            </summary>
            <param name="toContractId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Construction.Entities.TList`1"/> of <c>RelatedContract</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RelatedContractServiceBase.Get(RLM.Construction.Entities.RelatedContractKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RelatedContractServiceBase.GetByRelatedContractId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_RelatedContract index.
            </summary>
            <param name="relatedContractId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.RelatedContract"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RelatedContractServiceBase.GetByRelatedContractId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_RelatedContract index.
            </summary>
            <param name="relatedContractId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.RelatedContract"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RelatedContractServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Construction.Entities.RelatedContract"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Construction.Services.RelatedContractServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Construction.Entities.RelatedContract"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Construction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Construction.Services.RelatedContractServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>RelatedContract</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RelatedContractServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>RelatedContract</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RelatedContractServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Construction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>RelatedContract</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RelatedContractServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RelatedContractServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RelatedContractServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{RelatedContract} of <c>RelatedContract</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RelatedContractServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>RelatedContract</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RelatedContractServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>RelatedContract</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RelatedContractServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>RelatedContract</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RelatedContractServiceBase.Insert(RLM.Construction.Entities.RelatedContract)">
            <summary>
            	public virtualmethod that Inserts a RelatedContract object into the datasource using a transaction.
            </summary>
            <param name="entity">RelatedContract object to Insert.</param>
            <remarks>After Inserting into the datasource, the RelatedContract object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            RelatedContract entity = new RelatedContract();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	RelatedContractService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.RelatedContractServiceBase.Insert(RLM.Construction.Entities.TList{RLM.Construction.Entities.RelatedContract})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>RelatedContract</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>RelatedContract</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of RelatedContract.
             <code><![CDATA[
             TList<RelatedContract> list = new TList<RelatedContract>();
             RelatedContract entity = new RelatedContract();
             entity.StringProperty = "foo";
             RelatedContract entity2 = new RelatedContract();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	RelatedContractService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.RelatedContractServiceBase.Update(RLM.Construction.Entities.RelatedContract)">
            <summary>
            	public virtualmethod that Updates a RelatedContract object into the datasource using a transaction.
            </summary>
            <param name="entity">RelatedContract object to Update.</param>
            <remarks>After Updateing into the datasource, the RelatedContract object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            RelatedContract entity = RelatedContractService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	RelatedContractService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.RelatedContractServiceBase.Update(RLM.Construction.Entities.TList{RLM.Construction.Entities.RelatedContract})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>RelatedContract</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>RelatedContract</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of RelatedContract.
             <code><![CDATA[
             TList<RelatedContract> list = new TList<RelatedContract>();
             RelatedContract entity = new RelatedContract();
             entity.StringProperty = "foo";
             RelatedContract entity2 = new RelatedContract();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	RelatedContractService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.RelatedContractServiceBase.Save(RLM.Construction.Entities.RelatedContract)">
            <summary>
            	public virtualmethod that Saves a RelatedContract object into the datasource using a transaction.
            </summary>
            <param name="entity">RelatedContract object to Save.</param>
            <remarks>After Saveing into the datasource, the RelatedContract object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            RelatedContract entity = RelatedContractService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	RelatedContractService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.RelatedContractServiceBase.Save(RLM.Construction.Entities.TList{RLM.Construction.Entities.RelatedContract})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>RelatedContract</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>RelatedContract</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of RelatedContract.
             <code><![CDATA[
             TList<RelatedContract> list = new TList<RelatedContract>();
             RelatedContract entity = new RelatedContract();
             entity.StringProperty = "foo";
             RelatedContract entity2 = new RelatedContract();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	RelatedContractService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.RelatedContractServiceBase.Delete(RLM.Construction.Entities.RelatedContract)">
            <summary>
            	public virtualmethod that Deletes a RelatedContract object into the datasource using a transaction.
            </summary>
            <param name="entity">RelatedContract object to Delete.</param>
            <remarks>After Deleteing into the datasource, the RelatedContract object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            RelatedContract entity = RelatedContractService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	RelatedContractService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.RelatedContractServiceBase.Delete(RLM.Construction.Entities.TList{RLM.Construction.Entities.RelatedContract})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>RelatedContract</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>RelatedContract</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of RelatedContract.
             <code><![CDATA[
             TList<RelatedContract> list = new TList<RelatedContract>();
             RelatedContract entity = new RelatedContract();
             entity.StringProperty = "foo";
             RelatedContract entity2 = new RelatedContract();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	RelatedContractService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.RelatedContractServiceBase.Delete(RLM.Construction.Entities.RelatedContractKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RelatedContractServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 relatedContractId
            </summary>
            <param name="relatedContractId">RelatedContract pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RelatedContractServiceBase.DeepLoadByRelatedContractId(System.Int32,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Construction.Entities.RelatedContract"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <param name="relatedContractId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">RelatedContract Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.RelatedContract"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RelatedContractServiceBase.DeepLoad(RLM.Construction.Entities.RelatedContract)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">RelatedContract Object</param>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.RelatedContractServiceBase.DeepLoad(RLM.Construction.Entities.RelatedContract)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Construction.Services.RelatedContractServiceBase.DeepLoad(RLM.Construction.Entities.RelatedContract,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.RelatedContractServiceBase.DeepLoad(RLM.Construction.Entities.RelatedContract)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">RelatedContract Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.RelatedContractServiceBase.DeepLoad(RLM.Construction.Entities.RelatedContract,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Construction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Construction.Entities.RelatedContract"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">RelatedContract Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.RelatedContractServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.RelatedContract})">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.RelatedContractServiceBase.DeepLoad(RLM.Construction.Entities.RelatedContract)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Construction.Services.RelatedContractServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.RelatedContract},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.RelatedContractServiceBase.DeepLoad(RLM.Construction.Entities.RelatedContract)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.RelatedContractServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.RelatedContract},System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Construction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Construction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Construction.Entities.RelatedContract"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.RelatedContractServiceBase.DeepSave(RLM.Construction.Entities.RelatedContract)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Construction.Entities.RelatedContract"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">RelatedContract Object</param>
        </member>
        <member name="M:RLM.Construction.Services.RelatedContractServiceBase.DeepSave(RLM.Construction.Entities.RelatedContract,RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the RelatedContract object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">RelatedContract Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>RelatedContract</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Construction.Services.RelatedContractServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.RelatedContract})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{RelatedContract} Object</param>
        </member>
        <member name="M:RLM.Construction.Services.RelatedContractServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.RelatedContract},RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Construction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">RelatedContract Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Construction.Services.RelatedContractServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.UserInApplicationServiceBase">
            <summary>
             An object representation of the 'UserInApplication' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the UserInApplication.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Construction.Entities.UserInApplication"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.UserInApplicationServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Construction.Entities.UserInApplication"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.UserInApplicationServiceBase.CreateUserInApplication(System.Int32,System.Nullable{System.Int32},System.Int32,System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Construction.Entities.UserInApplication"/> instance.
            </summary>
            <param name="resourceId"></param>
            <param name="resourceType">It can be user, user group</param>
            <param name="applicationId"></param>
            <param name="creationDate"></param>
            <param name="creationUserId"></param>
        </member>
        <member name="M:RLM.Construction.Services.UserInApplicationServiceBase.Get(RLM.Construction.Entities.UserInApplicationKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UserInApplicationServiceBase.GetByUserInApplicationId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_UserInApplication index.
            </summary>
            <param name="userInApplicationId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.UserInApplication"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UserInApplicationServiceBase.GetByUserInApplicationId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_UserInApplication index.
            </summary>
            <param name="userInApplicationId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.UserInApplication"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UserInApplicationServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Construction.Entities.UserInApplication"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Construction.Services.UserInApplicationServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Construction.Entities.UserInApplication"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Construction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Construction.Services.UserInApplicationServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>UserInApplication</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UserInApplicationServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>UserInApplication</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UserInApplicationServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Construction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>UserInApplication</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UserInApplicationServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UserInApplicationServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UserInApplicationServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{UserInApplication} of <c>UserInApplication</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UserInApplicationServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>UserInApplication</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UserInApplicationServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>UserInApplication</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UserInApplicationServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>UserInApplication</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UserInApplicationServiceBase.Insert(RLM.Construction.Entities.UserInApplication)">
            <summary>
            	public virtualmethod that Inserts a UserInApplication object into the datasource using a transaction.
            </summary>
            <param name="entity">UserInApplication object to Insert.</param>
            <remarks>After Inserting into the datasource, the UserInApplication object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            UserInApplication entity = new UserInApplication();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	UserInApplicationService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.UserInApplicationServiceBase.Insert(RLM.Construction.Entities.TList{RLM.Construction.Entities.UserInApplication})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>UserInApplication</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>UserInApplication</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of UserInApplication.
             <code><![CDATA[
             TList<UserInApplication> list = new TList<UserInApplication>();
             UserInApplication entity = new UserInApplication();
             entity.StringProperty = "foo";
             UserInApplication entity2 = new UserInApplication();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UserInApplicationService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.UserInApplicationServiceBase.Update(RLM.Construction.Entities.UserInApplication)">
            <summary>
            	public virtualmethod that Updates a UserInApplication object into the datasource using a transaction.
            </summary>
            <param name="entity">UserInApplication object to Update.</param>
            <remarks>After Updateing into the datasource, the UserInApplication object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            UserInApplication entity = UserInApplicationService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	UserInApplicationService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.UserInApplicationServiceBase.Update(RLM.Construction.Entities.TList{RLM.Construction.Entities.UserInApplication})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>UserInApplication</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>UserInApplication</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of UserInApplication.
             <code><![CDATA[
             TList<UserInApplication> list = new TList<UserInApplication>();
             UserInApplication entity = new UserInApplication();
             entity.StringProperty = "foo";
             UserInApplication entity2 = new UserInApplication();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UserInApplicationService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.UserInApplicationServiceBase.Save(RLM.Construction.Entities.UserInApplication)">
            <summary>
            	public virtualmethod that Saves a UserInApplication object into the datasource using a transaction.
            </summary>
            <param name="entity">UserInApplication object to Save.</param>
            <remarks>After Saveing into the datasource, the UserInApplication object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            UserInApplication entity = UserInApplicationService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	UserInApplicationService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.UserInApplicationServiceBase.Save(RLM.Construction.Entities.TList{RLM.Construction.Entities.UserInApplication})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>UserInApplication</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>UserInApplication</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of UserInApplication.
             <code><![CDATA[
             TList<UserInApplication> list = new TList<UserInApplication>();
             UserInApplication entity = new UserInApplication();
             entity.StringProperty = "foo";
             UserInApplication entity2 = new UserInApplication();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UserInApplicationService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.UserInApplicationServiceBase.Delete(RLM.Construction.Entities.UserInApplication)">
            <summary>
            	public virtualmethod that Deletes a UserInApplication object into the datasource using a transaction.
            </summary>
            <param name="entity">UserInApplication object to Delete.</param>
            <remarks>After Deleteing into the datasource, the UserInApplication object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            UserInApplication entity = UserInApplicationService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	UserInApplicationService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.UserInApplicationServiceBase.Delete(RLM.Construction.Entities.TList{RLM.Construction.Entities.UserInApplication})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>UserInApplication</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>UserInApplication</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of UserInApplication.
             <code><![CDATA[
             TList<UserInApplication> list = new TList<UserInApplication>();
             UserInApplication entity = new UserInApplication();
             entity.StringProperty = "foo";
             UserInApplication entity2 = new UserInApplication();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UserInApplicationService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.UserInApplicationServiceBase.Delete(RLM.Construction.Entities.UserInApplicationKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UserInApplicationServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 userInApplicationId
            </summary>
            <param name="userInApplicationId">UserInApplication pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UserInApplicationServiceBase.DeepLoadByUserInApplicationId(System.Int32,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Construction.Entities.UserInApplication"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <param name="userInApplicationId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">UserInApplication Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.UserInApplication"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UserInApplicationServiceBase.DeepLoad(RLM.Construction.Entities.UserInApplication)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">UserInApplication Object</param>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.UserInApplicationServiceBase.DeepLoad(RLM.Construction.Entities.UserInApplication)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Construction.Services.UserInApplicationServiceBase.DeepLoad(RLM.Construction.Entities.UserInApplication,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.UserInApplicationServiceBase.DeepLoad(RLM.Construction.Entities.UserInApplication)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">UserInApplication Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.UserInApplicationServiceBase.DeepLoad(RLM.Construction.Entities.UserInApplication,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Construction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Construction.Entities.UserInApplication"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">UserInApplication Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.UserInApplicationServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.UserInApplication})">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.UserInApplicationServiceBase.DeepLoad(RLM.Construction.Entities.UserInApplication)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Construction.Services.UserInApplicationServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.UserInApplication},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.UserInApplicationServiceBase.DeepLoad(RLM.Construction.Entities.UserInApplication)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.UserInApplicationServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.UserInApplication},System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Construction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Construction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Construction.Entities.UserInApplication"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.UserInApplicationServiceBase.DeepSave(RLM.Construction.Entities.UserInApplication)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Construction.Entities.UserInApplication"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">UserInApplication Object</param>
        </member>
        <member name="M:RLM.Construction.Services.UserInApplicationServiceBase.DeepSave(RLM.Construction.Entities.UserInApplication,RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the UserInApplication object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">UserInApplication Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>UserInApplication</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Construction.Services.UserInApplicationServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.UserInApplication})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{UserInApplication} Object</param>
        </member>
        <member name="M:RLM.Construction.Services.UserInApplicationServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.UserInApplication},RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Construction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">UserInApplication Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Construction.Services.UserInApplicationServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.TaskService">
            <summary>
             An component type implementation of the 'Task' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.TaskService.#ctor">
            <summary>
            Initializes a new instance of the TaskService class.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.CommentService">
            <summary>
             An component type implementation of the 'Comment' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:RLM.Construction.Services.CommentServiceBase">
            <summary>
             An object representation of the 'Comment' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Comment.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Construction.Entities.Comment"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.CommentServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Construction.Entities.Comment"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.CommentServiceBase.CreateComment(System.String,System.Int32,System.Int32,System.DateTime,System.Int32)">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Construction.Entities.Comment"/> instance.
            </summary>
            <param name="content"></param>
            <param name="resourceType">Task, ....</param>
            <param name="resourceId"></param>
            <param name="creationDate"></param>
            <param name="creationUserId"></param>
        </member>
        <member name="M:RLM.Construction.Services.CommentServiceBase.Get(RLM.Construction.Entities.CommentKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.CommentServiceBase.GetByCommentId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_Comment index.
            </summary>
            <param name="commentId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.Comment"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.CommentServiceBase.GetByCommentId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_Comment index.
            </summary>
            <param name="commentId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.Comment"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.CommentServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Construction.Entities.Comment"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Construction.Services.CommentServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Construction.Entities.Comment"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Construction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Construction.Services.CommentServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Comment</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.CommentServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Comment</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.CommentServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Construction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Comment</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.CommentServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Construction.Services.CommentServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.CommentServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Comment} of <c>Comment</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.CommentServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Comment</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.CommentServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Comment</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.CommentServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Comment</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.CommentServiceBase.Insert(RLM.Construction.Entities.Comment)">
            <summary>
            	public virtualmethod that Inserts a Comment object into the datasource using a transaction.
            </summary>
            <param name="entity">Comment object to Insert.</param>
            <remarks>After Inserting into the datasource, the Comment object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Comment entity = new Comment();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	CommentService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.CommentServiceBase.Insert(RLM.Construction.Entities.TList{RLM.Construction.Entities.Comment})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Comment</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Comment</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Comment.
             <code><![CDATA[
             TList<Comment> list = new TList<Comment>();
             Comment entity = new Comment();
             entity.StringProperty = "foo";
             Comment entity2 = new Comment();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CommentService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.CommentServiceBase.Update(RLM.Construction.Entities.Comment)">
            <summary>
            	public virtualmethod that Updates a Comment object into the datasource using a transaction.
            </summary>
            <param name="entity">Comment object to Update.</param>
            <remarks>After Updateing into the datasource, the Comment object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Comment entity = CommentService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	CommentService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.CommentServiceBase.Update(RLM.Construction.Entities.TList{RLM.Construction.Entities.Comment})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Comment</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Comment</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Comment.
             <code><![CDATA[
             TList<Comment> list = new TList<Comment>();
             Comment entity = new Comment();
             entity.StringProperty = "foo";
             Comment entity2 = new Comment();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CommentService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.CommentServiceBase.Save(RLM.Construction.Entities.Comment)">
            <summary>
            	public virtualmethod that Saves a Comment object into the datasource using a transaction.
            </summary>
            <param name="entity">Comment object to Save.</param>
            <remarks>After Saveing into the datasource, the Comment object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Comment entity = CommentService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	CommentService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.CommentServiceBase.Save(RLM.Construction.Entities.TList{RLM.Construction.Entities.Comment})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Comment</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Comment</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Comment.
             <code><![CDATA[
             TList<Comment> list = new TList<Comment>();
             Comment entity = new Comment();
             entity.StringProperty = "foo";
             Comment entity2 = new Comment();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CommentService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.CommentServiceBase.Delete(RLM.Construction.Entities.Comment)">
            <summary>
            	public virtualmethod that Deletes a Comment object into the datasource using a transaction.
            </summary>
            <param name="entity">Comment object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Comment object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Comment entity = CommentService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	CommentService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.CommentServiceBase.Delete(RLM.Construction.Entities.TList{RLM.Construction.Entities.Comment})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Comment</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Comment</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Comment.
             <code><![CDATA[
             TList<Comment> list = new TList<Comment>();
             Comment entity = new Comment();
             entity.StringProperty = "foo";
             Comment entity2 = new Comment();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CommentService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.CommentServiceBase.Delete(RLM.Construction.Entities.CommentKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.CommentServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 commentId
            </summary>
            <param name="commentId">Comment pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.CommentServiceBase.DeepLoadByCommentId(System.Int32,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Construction.Entities.Comment"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <param name="commentId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Comment Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.Comment"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.CommentServiceBase.DeepLoad(RLM.Construction.Entities.Comment)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Comment Object</param>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.CommentServiceBase.DeepLoad(RLM.Construction.Entities.Comment)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Construction.Services.CommentServiceBase.DeepLoad(RLM.Construction.Entities.Comment,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.CommentServiceBase.DeepLoad(RLM.Construction.Entities.Comment)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Comment Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.CommentServiceBase.DeepLoad(RLM.Construction.Entities.Comment,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Construction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Construction.Entities.Comment"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Comment Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.CommentServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.Comment})">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.CommentServiceBase.DeepLoad(RLM.Construction.Entities.Comment)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Construction.Services.CommentServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.Comment},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.CommentServiceBase.DeepLoad(RLM.Construction.Entities.Comment)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.CommentServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.Comment},System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Construction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Construction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Construction.Entities.Comment"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.CommentServiceBase.DeepSave(RLM.Construction.Entities.Comment)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Construction.Entities.Comment"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Comment Object</param>
        </member>
        <member name="M:RLM.Construction.Services.CommentServiceBase.DeepSave(RLM.Construction.Entities.Comment,RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Comment object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Comment Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Comment</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Construction.Services.CommentServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.Comment})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Comment} Object</param>
        </member>
        <member name="M:RLM.Construction.Services.CommentServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.Comment},RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Construction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Comment Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Construction.Services.CommentServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.CommentService.#ctor">
            <summary>
            Initializes a new instance of the CommentService class.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.ApplicationService">
            <summary>
             An component type implementation of the 'Application' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:RLM.Construction.Services.ApplicationServiceBase">
            <summary>
             An object representation of the 'Application' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Application.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Construction.Entities.Application"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.ApplicationServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Construction.Entities.Application"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.ApplicationServiceBase.CreateApplication(System.String,System.String,System.String,System.Nullable{System.Int64},System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Construction.Entities.Application"/> instance.
            </summary>
            <param name="code"></param>
            <param name="name"></param>
            <param name="description"></param>
            <param name="isActive"></param>
            <param name="defaultUrl"></param>
            <param name="webserviceUrl"></param>
            <param name="webserviceUserName"></param>
            <param name="webServicePwd"></param>
            <param name="creationDate"></param>
            <param name="creationUserId"></param>
            <param name="lastModificationDate"></param>
            <param name="lastModificationUserId"></param>
        </member>
        <member name="M:RLM.Construction.Services.ApplicationServiceBase.Get(RLM.Construction.Entities.ApplicationKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ApplicationServiceBase.GetByApplicationId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_Application index.
            </summary>
            <param name="applicationId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.Application"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ApplicationServiceBase.GetByApplicationId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_Application index.
            </summary>
            <param name="applicationId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.Application"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ApplicationServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Construction.Entities.Application"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Construction.Services.ApplicationServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Construction.Entities.Application"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Construction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Construction.Services.ApplicationServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Application</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ApplicationServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Application</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ApplicationServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Construction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Application</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ApplicationServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ApplicationServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ApplicationServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Application} of <c>Application</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ApplicationServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Application</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ApplicationServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Application</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ApplicationServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Application</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ApplicationServiceBase.Insert(RLM.Construction.Entities.Application)">
            <summary>
            	public virtualmethod that Inserts a Application object into the datasource using a transaction.
            </summary>
            <param name="entity">Application object to Insert.</param>
            <remarks>After Inserting into the datasource, the Application object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Application entity = new Application();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ApplicationService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ApplicationServiceBase.Insert(RLM.Construction.Entities.TList{RLM.Construction.Entities.Application})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Application</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Application</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Application.
             <code><![CDATA[
             TList<Application> list = new TList<Application>();
             Application entity = new Application();
             entity.StringProperty = "foo";
             Application entity2 = new Application();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ApplicationService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ApplicationServiceBase.Update(RLM.Construction.Entities.Application)">
            <summary>
            	public virtualmethod that Updates a Application object into the datasource using a transaction.
            </summary>
            <param name="entity">Application object to Update.</param>
            <remarks>After Updateing into the datasource, the Application object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Application entity = ApplicationService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ApplicationService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ApplicationServiceBase.Update(RLM.Construction.Entities.TList{RLM.Construction.Entities.Application})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Application</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Application</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Application.
             <code><![CDATA[
             TList<Application> list = new TList<Application>();
             Application entity = new Application();
             entity.StringProperty = "foo";
             Application entity2 = new Application();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ApplicationService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ApplicationServiceBase.Save(RLM.Construction.Entities.Application)">
            <summary>
            	public virtualmethod that Saves a Application object into the datasource using a transaction.
            </summary>
            <param name="entity">Application object to Save.</param>
            <remarks>After Saveing into the datasource, the Application object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Application entity = ApplicationService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ApplicationService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ApplicationServiceBase.Save(RLM.Construction.Entities.TList{RLM.Construction.Entities.Application})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Application</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Application</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Application.
             <code><![CDATA[
             TList<Application> list = new TList<Application>();
             Application entity = new Application();
             entity.StringProperty = "foo";
             Application entity2 = new Application();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ApplicationService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ApplicationServiceBase.Delete(RLM.Construction.Entities.Application)">
            <summary>
            	public virtualmethod that Deletes a Application object into the datasource using a transaction.
            </summary>
            <param name="entity">Application object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Application object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Application entity = ApplicationService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ApplicationService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ApplicationServiceBase.Delete(RLM.Construction.Entities.TList{RLM.Construction.Entities.Application})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Application</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Application</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Application.
             <code><![CDATA[
             TList<Application> list = new TList<Application>();
             Application entity = new Application();
             entity.StringProperty = "foo";
             Application entity2 = new Application();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ApplicationService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ApplicationServiceBase.Delete(RLM.Construction.Entities.ApplicationKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ApplicationServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 applicationId
            </summary>
            <param name="applicationId">Application pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ApplicationServiceBase.DeepLoadByApplicationId(System.Int32,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Construction.Entities.Application"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <param name="applicationId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Application Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.Application"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ApplicationServiceBase.DeepLoad(RLM.Construction.Entities.Application)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Application Object</param>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ApplicationServiceBase.DeepLoad(RLM.Construction.Entities.Application)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Construction.Services.ApplicationServiceBase.DeepLoad(RLM.Construction.Entities.Application,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ApplicationServiceBase.DeepLoad(RLM.Construction.Entities.Application)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Application Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.ApplicationServiceBase.DeepLoad(RLM.Construction.Entities.Application,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Construction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Construction.Entities.Application"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Application Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.ApplicationServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.Application})">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ApplicationServiceBase.DeepLoad(RLM.Construction.Entities.Application)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Construction.Services.ApplicationServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.Application},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ApplicationServiceBase.DeepLoad(RLM.Construction.Entities.Application)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.ApplicationServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.Application},System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Construction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Construction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Construction.Entities.Application"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.ApplicationServiceBase.DeepSave(RLM.Construction.Entities.Application)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Construction.Entities.Application"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Application Object</param>
        </member>
        <member name="M:RLM.Construction.Services.ApplicationServiceBase.DeepSave(RLM.Construction.Entities.Application,RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Application object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Application Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Application</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Construction.Services.ApplicationServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.Application})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Application} Object</param>
        </member>
        <member name="M:RLM.Construction.Services.ApplicationServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.Application},RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Construction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Application Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Construction.Services.ApplicationServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.ApplicationService.#ctor">
            <summary>
            Initializes a new instance of the ApplicationService class.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.ServiceResult">
            <summary>
            The class provides a notification pattern for the processor execution.
            </summary>
        </member>
        <member name="P:RLM.Construction.Services.ServiceResult.HasErrors">
            <summary>
               Determines whethere the containing service, has errors.
            </summary>
        </member>
        <member name="P:RLM.Construction.Services.ServiceResult.Error">
            <summary>
               Provides a string of errors accumulated with a new line of delimeted errors.
            </summary>
        </member>
        <member name="P:RLM.Construction.Services.ServiceResult.ProcessBrokenRuleLists">
            <summary>
               Provides an aggregated group of BrokenRuleList for each of the executed processes.
            </summary>
        </member>
        <member name="P:RLM.Construction.Services.ServiceResult.ProcessorResultList">
            <summary>
               Determines whethere the containing processs results that were enlisted in the service.
            </summary>
        </member>
        <member name="P:RLM.Construction.Services.ServiceResult.ExceptionList">
             <summary>
            	Provides the List of UnHandled Exceptions that occured during processing.
             </summary>
            <value>A list of rules that were broken in the process</value>		
        </member>
        <member name="T:RLM.Construction.Services.ConnectionScope">
            <summary>
            Provides storage of global database connection information.
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.ConnectionScope.#ctor">
            <summary>
            Initializes a new instance of the ConnectionScope class.
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.ConnectionScope.NewThread(System.Threading.ThreadStart)">
            <summary>
            Creates a new <see cref="T:System.Threading.Thread"/> object and copies
            the current <see cref="T:RLM.Construction.Services.ConnectionScope"/> parameters.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns a new <see cref="T:System.Threading.Thread"/> object.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ConnectionScope.NewThread(System.Threading.ParameterizedThreadStart)">
            <summary>
            Creates a new <see cref="T:System.Threading.Thread"/> object and copies
            the current <see cref="T:RLM.Construction.Services.ConnectionScope"/> parameters.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns a new <see cref="T:System.Threading.Thread"/> object.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ConnectionScope.EnqueueOnThreadPool(System.Threading.ThreadStart)">
            <summary>
            Queues a method for execution. The method executes
            when a thread pool thread becomes available.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns true if the method is successfully queued.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ConnectionScope.EnqueueOnThreadPool(System.Threading.ParameterizedThreadStart,System.Object)">
            <summary>
            Queues a method for execution. The method executes
            when a thread pool thread becomes available.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <param name="state">An object containing data to be used by the method.</param>
            <returns>Returns true if the method is successfully queued.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ConnectionScope.Copy(RLM.Construction.Services.ConnectionScope)">
            <summary>
            Copies the values from the specified <paramref name="scope"/> object
            to the <see cref="T:RLM.Construction.Services.ConnectionScope"/> used by the current thread.
            </summary>
            <param name="scope">A <see cref="T:RLM.Construction.Services.ConnectionScope"/> object.</param>
        </member>
        <member name="M:RLM.Construction.Services.ConnectionScope.ValidateOrCreateTransaction">
            <summary>
            Validates an existing <c cref="P:RLM.Construction.Services.ConnectionScope.TransactionManager"/> if one exists,
            otherwise creates a new <c cref="P:RLM.Construction.Services.ConnectionScope.TransactionManager"/> to use.
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.ConnectionScope.ValidateOrCreateTransaction(System.Boolean)">
            <summary>
            Validates an existing <c cref="P:RLM.Construction.Services.ConnectionScope.TransactionManager"/> if one exists,
            otherwise creates a new <c cref="P:RLM.Construction.Services.ConnectionScope.TransactionManager"/> to use.
            </summary>
            <param name="createTransaction">determines whether to create a new transaction</param>
        </member>
        <member name="M:RLM.Construction.Services.ConnectionScope.CreateTransaction">
            <summary>
            Creates a new transaction on the current <c>ConnectionScope</c>.
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.ConnectionScope.CreateTransaction(System.Data.IsolationLevel)">
            <summary>
            Creates a new transaction on the current <c>ConnectionScope</c>
            with the specified <c cref="T:System.Data.IsolationLevel"/>.
            </summary>
            <param name="level">Determines which <c cref="T:System.Data.IsolationLevel"/> to use for the transaction.</param>
        </member>
        <member name="M:RLM.Construction.Services.ConnectionScope.Complete">
             <summary>
             Completes this unit of work instance of the current transaction.  
             Commits the transaction,  Cleans up Connection, 
             Disposes of TransactionManager which performs unmanaged cleanup.
             </summary>
             <example>
                 try
                 {
                     using (ConnectionScope.CreateTransaction())
                     {
                         // or use ConnectionScope.ValidateOrCreateTransaction(true) 
                         // if you prefer to dynamically check for an existing transaction
                         AccountService.Save(account);
                         LedgerService.Save(generalEntry);
             
                         //Commit and Cleanup your transaction
                         bool result = ConnectionScope.Complete();
                     }
                 }
                 catch (Exception ex)
                 {
                     // when creating the transaction via the 
                     // using (ConnectionScope.CreateTransaction()) construct, 
                     // there's no need to rollback, handled by 
                     // ConnectionScope Dispose Method.
             
                     Logger.Write(ex.Message);
                 }
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ConnectionScope.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="F:RLM.Construction.Services.ConnectionScope.connectionStringKey">
            <summary>
            The ConnectionStringKey member variable.
            </summary>
        </member>
        <member name="F:RLM.Construction.Services.ConnectionScope.dynamicConnectionString">
            <summary>
            The DynamicConnectionString member variable.
            </summary>
        </member>
        <member name="F:RLM.Construction.Services.ConnectionScope.transactionManager">
            <summary>
            The TransactionManager member variable.
            </summary>
        </member>
        <member name="F:RLM.Construction.Services.ConnectionScope.dataProvider">
            <summary>
            The NetTiersProvider member variable.
            </summary>
        </member>
        <member name="P:RLM.Construction.Services.ConnectionScope.Current">
            <summary>
            Gets a reference to the ConnectionScope object for the current thread.
            </summary>
        </member>
        <member name="P:RLM.Construction.Services.ConnectionScope.ConnectionStringKey">
            <summary>
            Gets or sets the ConnectionStringKey property.
            </summary>
        </member>
        <member name="P:RLM.Construction.Services.ConnectionScope.DynamicConnectionString">
            <summary>
            Gets or sets the DynamicConnectionString property.
            </summary>
        </member>
        <member name="P:RLM.Construction.Services.ConnectionScope.TransactionManager">
            <summary>
            Gets or sets the TransactionManager property.
            </summary>
        </member>
        <member name="P:RLM.Construction.Services.ConnectionScope.DataProvider">
             <summary>
             Gets or Sets the Current DataProvider property of the <c>ConnectionScope</c> Object.
             </summary>
             <remarks>
             To use a dynamic connection, you must set both the 
             DynamicConnectionString and a unique ConnectionStringKey properties;
            </remarks>
        </member>
        <member name="P:RLM.Construction.Services.ConnectionScope.HasTransaction">
            <summary>
            Determines if Current Connections is in a Transaction.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.UnitConvertorServiceBase">
            <summary>
             An object representation of the 'UnitConvertor' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the UnitConvertor.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Construction.Entities.UnitConvertor"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.UnitConvertorServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Construction.Entities.UnitConvertor"/> instance .
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:RLM.Construction.Services.UnitConvertorServiceBase.CreateUnitConvertor(System.Int32,System.Int32,System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32})" -->
        <member name="M:RLM.Construction.Services.UnitConvertorServiceBase.GetByFromUnitId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_UnitConvertors_Units key.
            	FK_UnitConvertors_Units Description: 
            </summary>
            <param name="fromUnitId"></param>
            <returns>Returns a generic collection of UnitConvertor objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UnitConvertorServiceBase.GetByFromUnitId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_UnitConvertors_Units key.
            	FK_UnitConvertors_Units Description: 
            </summary>
            <param name="fromUnitId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Construction.Entities.TList`1"/> of <c>UnitConvertor</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UnitConvertorServiceBase.GetByToUnitId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_UnitConvertors_Units1 key.
            	FK_UnitConvertors_Units1 Description: 
            </summary>
            <param name="toUnitId"></param>
            <returns>Returns a generic collection of UnitConvertor objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UnitConvertorServiceBase.GetByToUnitId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_UnitConvertors_Units1 key.
            	FK_UnitConvertors_Units1 Description: 
            </summary>
            <param name="toUnitId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Construction.Entities.TList`1"/> of <c>UnitConvertor</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UnitConvertorServiceBase.Get(RLM.Construction.Entities.UnitConvertorKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UnitConvertorServiceBase.GetByUnitConvertorId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_UnitConvertors index.
            </summary>
            <param name="unitConvertorId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.UnitConvertor"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UnitConvertorServiceBase.GetByUnitConvertorId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_UnitConvertors index.
            </summary>
            <param name="unitConvertorId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.UnitConvertor"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UnitConvertorServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Construction.Entities.UnitConvertor"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Construction.Services.UnitConvertorServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Construction.Entities.UnitConvertor"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Construction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Construction.Services.UnitConvertorServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>UnitConvertor</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UnitConvertorServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>UnitConvertor</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UnitConvertorServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Construction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>UnitConvertor</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UnitConvertorServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UnitConvertorServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UnitConvertorServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{UnitConvertor} of <c>UnitConvertor</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UnitConvertorServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>UnitConvertor</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UnitConvertorServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>UnitConvertor</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UnitConvertorServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>UnitConvertor</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UnitConvertorServiceBase.Insert(RLM.Construction.Entities.UnitConvertor)">
            <summary>
            	public virtualmethod that Inserts a UnitConvertor object into the datasource using a transaction.
            </summary>
            <param name="entity">UnitConvertor object to Insert.</param>
            <remarks>After Inserting into the datasource, the UnitConvertor object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            UnitConvertor entity = new UnitConvertor();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	UnitConvertorService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.UnitConvertorServiceBase.Insert(RLM.Construction.Entities.TList{RLM.Construction.Entities.UnitConvertor})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>UnitConvertor</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>UnitConvertor</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of UnitConvertor.
             <code><![CDATA[
             TList<UnitConvertor> list = new TList<UnitConvertor>();
             UnitConvertor entity = new UnitConvertor();
             entity.StringProperty = "foo";
             UnitConvertor entity2 = new UnitConvertor();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UnitConvertorService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.UnitConvertorServiceBase.Update(RLM.Construction.Entities.UnitConvertor)">
            <summary>
            	public virtualmethod that Updates a UnitConvertor object into the datasource using a transaction.
            </summary>
            <param name="entity">UnitConvertor object to Update.</param>
            <remarks>After Updateing into the datasource, the UnitConvertor object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            UnitConvertor entity = UnitConvertorService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	UnitConvertorService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.UnitConvertorServiceBase.Update(RLM.Construction.Entities.TList{RLM.Construction.Entities.UnitConvertor})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>UnitConvertor</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>UnitConvertor</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of UnitConvertor.
             <code><![CDATA[
             TList<UnitConvertor> list = new TList<UnitConvertor>();
             UnitConvertor entity = new UnitConvertor();
             entity.StringProperty = "foo";
             UnitConvertor entity2 = new UnitConvertor();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UnitConvertorService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.UnitConvertorServiceBase.Save(RLM.Construction.Entities.UnitConvertor)">
            <summary>
            	public virtualmethod that Saves a UnitConvertor object into the datasource using a transaction.
            </summary>
            <param name="entity">UnitConvertor object to Save.</param>
            <remarks>After Saveing into the datasource, the UnitConvertor object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            UnitConvertor entity = UnitConvertorService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	UnitConvertorService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.UnitConvertorServiceBase.Save(RLM.Construction.Entities.TList{RLM.Construction.Entities.UnitConvertor})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>UnitConvertor</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>UnitConvertor</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of UnitConvertor.
             <code><![CDATA[
             TList<UnitConvertor> list = new TList<UnitConvertor>();
             UnitConvertor entity = new UnitConvertor();
             entity.StringProperty = "foo";
             UnitConvertor entity2 = new UnitConvertor();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UnitConvertorService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.UnitConvertorServiceBase.Delete(RLM.Construction.Entities.UnitConvertor)">
            <summary>
            	public virtualmethod that Deletes a UnitConvertor object into the datasource using a transaction.
            </summary>
            <param name="entity">UnitConvertor object to Delete.</param>
            <remarks>After Deleteing into the datasource, the UnitConvertor object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            UnitConvertor entity = UnitConvertorService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	UnitConvertorService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.UnitConvertorServiceBase.Delete(RLM.Construction.Entities.TList{RLM.Construction.Entities.UnitConvertor})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>UnitConvertor</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>UnitConvertor</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of UnitConvertor.
             <code><![CDATA[
             TList<UnitConvertor> list = new TList<UnitConvertor>();
             UnitConvertor entity = new UnitConvertor();
             entity.StringProperty = "foo";
             UnitConvertor entity2 = new UnitConvertor();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UnitConvertorService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.UnitConvertorServiceBase.Delete(RLM.Construction.Entities.UnitConvertorKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UnitConvertorServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 unitConvertorId
            </summary>
            <param name="unitConvertorId">UnitConvertor pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UnitConvertorServiceBase.DeepLoadByUnitConvertorId(System.Int32,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Construction.Entities.UnitConvertor"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <param name="unitConvertorId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">UnitConvertor Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.UnitConvertor"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UnitConvertorServiceBase.DeepLoad(RLM.Construction.Entities.UnitConvertor)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">UnitConvertor Object</param>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.UnitConvertorServiceBase.DeepLoad(RLM.Construction.Entities.UnitConvertor)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Construction.Services.UnitConvertorServiceBase.DeepLoad(RLM.Construction.Entities.UnitConvertor,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.UnitConvertorServiceBase.DeepLoad(RLM.Construction.Entities.UnitConvertor)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">UnitConvertor Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.UnitConvertorServiceBase.DeepLoad(RLM.Construction.Entities.UnitConvertor,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Construction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Construction.Entities.UnitConvertor"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">UnitConvertor Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.UnitConvertorServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.UnitConvertor})">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.UnitConvertorServiceBase.DeepLoad(RLM.Construction.Entities.UnitConvertor)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Construction.Services.UnitConvertorServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.UnitConvertor},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.UnitConvertorServiceBase.DeepLoad(RLM.Construction.Entities.UnitConvertor)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.UnitConvertorServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.UnitConvertor},System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Construction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Construction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Construction.Entities.UnitConvertor"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.UnitConvertorServiceBase.DeepSave(RLM.Construction.Entities.UnitConvertor)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Construction.Entities.UnitConvertor"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">UnitConvertor Object</param>
        </member>
        <member name="M:RLM.Construction.Services.UnitConvertorServiceBase.DeepSave(RLM.Construction.Entities.UnitConvertor,RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the UnitConvertor object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">UnitConvertor Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>UnitConvertor</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Construction.Services.UnitConvertorServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.UnitConvertor})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{UnitConvertor} Object</param>
        </member>
        <member name="M:RLM.Construction.Services.UnitConvertorServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.UnitConvertor},RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Construction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">UnitConvertor Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Construction.Services.UnitConvertorServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.UserGroupService">
            <summary>
             An component type implementation of the 'UserGroup' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.UserGroupService.#ctor">
            <summary>
            Initializes a new instance of the UserGroupService class.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.DepartmentService">
            <summary>
             An component type implementation of the 'Department' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:RLM.Construction.Services.DepartmentServiceBase">
            <summary>
             An object representation of the 'Department' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Department.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Construction.Entities.Department"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.DepartmentServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Construction.Entities.Department"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.DepartmentServiceBase.CreateDepartment(System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Construction.Entities.Department"/> instance.
            </summary>
            <param name="code"></param>
            <param name="name"></param>
            <param name="phone"></param>
            <param name="priority"></param>
            <param name="fax"></param>
            <param name="isActive"></param>
            <param name="isDeletable"></param>
            <param name="creationDate"></param>
            <param name="creationUserId"></param>
            <param name="lastModificationDate"></param>
            <param name="lastModificationUserId"></param>
        </member>
        <member name="M:RLM.Construction.Services.DepartmentServiceBase.Get(RLM.Construction.Entities.DepartmentKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.DepartmentServiceBase.GetByDeptId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_Departments_1 index.
            </summary>
            <param name="deptId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.Department"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.DepartmentServiceBase.GetByDeptId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_Departments_1 index.
            </summary>
            <param name="deptId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.Department"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.DepartmentServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Construction.Entities.Department"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Construction.Services.DepartmentServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Construction.Entities.Department"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Construction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Construction.Services.DepartmentServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Department</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.DepartmentServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Department</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.DepartmentServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Construction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Department</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.DepartmentServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Construction.Services.DepartmentServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.DepartmentServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Department} of <c>Department</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.DepartmentServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Department</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.DepartmentServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Department</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.DepartmentServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Department</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.DepartmentServiceBase.Insert(RLM.Construction.Entities.Department)">
            <summary>
            	public virtualmethod that Inserts a Department object into the datasource using a transaction.
            </summary>
            <param name="entity">Department object to Insert.</param>
            <remarks>After Inserting into the datasource, the Department object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Department entity = new Department();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	DepartmentService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.DepartmentServiceBase.Insert(RLM.Construction.Entities.TList{RLM.Construction.Entities.Department})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Department</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Department</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Department.
             <code><![CDATA[
             TList<Department> list = new TList<Department>();
             Department entity = new Department();
             entity.StringProperty = "foo";
             Department entity2 = new Department();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DepartmentService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.DepartmentServiceBase.Update(RLM.Construction.Entities.Department)">
            <summary>
            	public virtualmethod that Updates a Department object into the datasource using a transaction.
            </summary>
            <param name="entity">Department object to Update.</param>
            <remarks>After Updateing into the datasource, the Department object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Department entity = DepartmentService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	DepartmentService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.DepartmentServiceBase.Update(RLM.Construction.Entities.TList{RLM.Construction.Entities.Department})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Department</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Department</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Department.
             <code><![CDATA[
             TList<Department> list = new TList<Department>();
             Department entity = new Department();
             entity.StringProperty = "foo";
             Department entity2 = new Department();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DepartmentService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.DepartmentServiceBase.Save(RLM.Construction.Entities.Department)">
            <summary>
            	public virtualmethod that Saves a Department object into the datasource using a transaction.
            </summary>
            <param name="entity">Department object to Save.</param>
            <remarks>After Saveing into the datasource, the Department object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Department entity = DepartmentService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	DepartmentService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.DepartmentServiceBase.Save(RLM.Construction.Entities.TList{RLM.Construction.Entities.Department})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Department</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Department</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Department.
             <code><![CDATA[
             TList<Department> list = new TList<Department>();
             Department entity = new Department();
             entity.StringProperty = "foo";
             Department entity2 = new Department();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DepartmentService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.DepartmentServiceBase.Delete(RLM.Construction.Entities.Department)">
            <summary>
            	public virtualmethod that Deletes a Department object into the datasource using a transaction.
            </summary>
            <param name="entity">Department object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Department object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Department entity = DepartmentService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	DepartmentService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.DepartmentServiceBase.Delete(RLM.Construction.Entities.TList{RLM.Construction.Entities.Department})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Department</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Department</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Department.
             <code><![CDATA[
             TList<Department> list = new TList<Department>();
             Department entity = new Department();
             entity.StringProperty = "foo";
             Department entity2 = new Department();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DepartmentService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.DepartmentServiceBase.Delete(RLM.Construction.Entities.DepartmentKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.DepartmentServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 deptId
            </summary>
            <param name="deptId">Department pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.DepartmentServiceBase.DeepLoadByDeptId(System.Int32,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Construction.Entities.Department"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <param name="deptId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Department Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.Department"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.DepartmentServiceBase.DeepLoad(RLM.Construction.Entities.Department)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Department Object</param>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.DepartmentServiceBase.DeepLoad(RLM.Construction.Entities.Department)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Construction.Services.DepartmentServiceBase.DeepLoad(RLM.Construction.Entities.Department,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.DepartmentServiceBase.DeepLoad(RLM.Construction.Entities.Department)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Department Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.DepartmentServiceBase.DeepLoad(RLM.Construction.Entities.Department,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Construction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Construction.Entities.Department"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Department Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.DepartmentServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.Department})">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.DepartmentServiceBase.DeepLoad(RLM.Construction.Entities.Department)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Construction.Services.DepartmentServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.Department},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.DepartmentServiceBase.DeepLoad(RLM.Construction.Entities.Department)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.DepartmentServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.Department},System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Construction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Construction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Construction.Entities.Department"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.DepartmentServiceBase.DeepSave(RLM.Construction.Entities.Department)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Construction.Entities.Department"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Department Object</param>
        </member>
        <member name="M:RLM.Construction.Services.DepartmentServiceBase.DeepSave(RLM.Construction.Entities.Department,RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Department object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Department Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Department</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Construction.Services.DepartmentServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.Department})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Department} Object</param>
        </member>
        <member name="M:RLM.Construction.Services.DepartmentServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.Department},RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Construction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Department Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Construction.Services.DepartmentServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.DepartmentService.#ctor">
            <summary>
            Initializes a new instance of the DepartmentService class.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.ServiceViewBaseCore`1">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.ServiceViewBaseCore`1.Execute">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:RLM.Construction.Services.ServiceViewBaseCore`1.Execute(System.Boolean)">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:RLM.Construction.Services.ServiceViewBaseCore`1.OnProcessStarting(RLM.Construction.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.ServiceViewBaseCore`1.OnProcessEnded(RLM.Construction.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.ServiceViewBaseCore`1.Get">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ServiceViewBaseCore`1.Get(System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ServiceViewBaseCore`1.Get(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ServiceViewBaseCore`1.Get(System.String,System.String)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ServiceViewBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ServiceViewBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ServiceViewBaseCore`1.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ServiceViewBaseCore`1.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ServiceViewBaseCore`1.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="P:RLM.Construction.Services.ServiceViewBaseCore`1.ProcessorList">
             <summary>
            	Provides a List of Processors to execute external business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:RLM.Construction.Services.ServiceViewBaseCore`1.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:RLM.Construction.Services.ServiceViewBaseCore`1.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="P:RLM.Construction.Services.ServiceViewBaseCore`1.CurrentProcessor">
            <summary>
            Current Processor being executed
            </summary>
        </member>
        <member name="P:RLM.Construction.Services.ServiceViewBaseCore`1.ProcessCounter">
            <summary>
            Current Number of Processes completed thus far.
            </summary>
        </member>
        <member name="P:RLM.Construction.Services.ServiceViewBaseCore`1.CurrentProcessorIndex">
            <summary>
            Current index of the processor currently or last executed 
            </summary>
        </member>
        <member name="P:RLM.Construction.Services.ServiceViewBaseCore`1.TotalProcesses">
            <summary>
            Total Number of Processes currently enlisted in this service 
            </summary>
        </member>
        <member name="E:RLM.Construction.Services.ServiceViewBaseCore`1.ProcessStarting">
            <summary>
            Event to indicate that a processor has began.
            </summary>
        </member>
        <member name="E:RLM.Construction.Services.ServiceViewBaseCore`1.ProcessEnded">
            <summary>
            Event to indicate that a processor has ended.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.IdentificationInfomationService">
            <summary>
             An component type implementation of the 'IdentificationInfomation' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.IdentificationInfomationService.#ctor">
            <summary>
            Initializes a new instance of the IdentificationInfomationService class.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.ServiceViewBase`1">
            <summary>
            The base class that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.IProcessorResult">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.IProcessorResult.AddBrokenRulesList(System.Type,RLM.Construction.Entities.Validation.BrokenRulesList)">
            <summary>
            Provides a method to aggregate BrokenRuleList Collections Based on their Type 
            if they are invalid.
            </summary>
        </member>
        <member name="P:RLM.Construction.Services.IProcessorResult.Result">
             <summary>
            	Provides a result of the current process.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:RLM.Construction.Services.IProcessorResult.BrokenRulesLists">
             <summary>
            	Provides a list of broken rules for the entire process.
             </summary>
            <value>A list of rules that were broken in the process</value>
        </member>
        <member name="P:RLM.Construction.Services.IProcessorResult.FinalProcessorState">
            <summary>
            Provides the final processor state the operation.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.ProjectService">
            <summary>
             An component type implementation of the 'Project' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:RLM.Construction.Services.ProjectServiceBase">
            <summary>
             An object representation of the 'Project' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Project.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Construction.Entities.Project"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.ProjectServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Construction.Entities.Project"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.ProjectServiceBase.CreateProject(System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Construction.Entities.Project"/> instance.
            </summary>
            <param name="groupId"></param>
            <param name="contractId"></param>
            <param name="managerId"></param>
            <param name="currentPhaseId"></param>
            <param name="currencyUnitId"></param>
            <param name="code"></param>
            <param name="name"></param>
            <param name="description"></param>
            <param name="designedPrice"></param>
            <param name="auctualPrice"></param>
            <param name="isActive"></param>
            <param name="isApprove"></param>
            <param name="status"></param>
            <param name="creationDate"></param>
            <param name="creationUserId"></param>
            <param name="lastModificationDate"></param>
            <param name="lastModificationUserId"></param>
        </member>
        <member name="M:RLM.Construction.Services.ProjectServiceBase.GetByContractId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_Projects_Contracts key.
            	FK_Projects_Contracts Description: 
            </summary>
            <param name="contractId"></param>
            <returns>Returns a generic collection of Project objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ProjectServiceBase.GetByContractId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_Projects_Contracts key.
            	FK_Projects_Contracts Description: 
            </summary>
            <param name="contractId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Construction.Entities.TList`1"/> of <c>Project</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ProjectServiceBase.GetByGroupId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_Projects_Groups1 key.
            	FK_Projects_Groups1 Description: 
            </summary>
            <param name="groupId"></param>
            <returns>Returns a generic collection of Project objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ProjectServiceBase.GetByGroupId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_Projects_Groups1 key.
            	FK_Projects_Groups1 Description: 
            </summary>
            <param name="groupId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Construction.Entities.TList`1"/> of <c>Project</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ProjectServiceBase.Get(RLM.Construction.Entities.ProjectKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ProjectServiceBase.GetByProjectId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_Projects index.
            </summary>
            <param name="projectId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.Project"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ProjectServiceBase.GetByProjectId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_Projects index.
            </summary>
            <param name="projectId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.Project"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ProjectServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Construction.Entities.Project"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Construction.Services.ProjectServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Construction.Entities.Project"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Construction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Construction.Services.ProjectServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Project</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ProjectServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Project</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ProjectServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Construction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Project</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ProjectServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ProjectServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ProjectServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Project} of <c>Project</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ProjectServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Project</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ProjectServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Project</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ProjectServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Project</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ProjectServiceBase.Insert(RLM.Construction.Entities.Project)">
            <summary>
            	public virtualmethod that Inserts a Project object into the datasource using a transaction.
            </summary>
            <param name="entity">Project object to Insert.</param>
            <remarks>After Inserting into the datasource, the Project object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Project entity = new Project();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ProjectService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ProjectServiceBase.Insert(RLM.Construction.Entities.TList{RLM.Construction.Entities.Project})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Project</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Project</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Project.
             <code><![CDATA[
             TList<Project> list = new TList<Project>();
             Project entity = new Project();
             entity.StringProperty = "foo";
             Project entity2 = new Project();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProjectService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ProjectServiceBase.Update(RLM.Construction.Entities.Project)">
            <summary>
            	public virtualmethod that Updates a Project object into the datasource using a transaction.
            </summary>
            <param name="entity">Project object to Update.</param>
            <remarks>After Updateing into the datasource, the Project object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Project entity = ProjectService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ProjectService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ProjectServiceBase.Update(RLM.Construction.Entities.TList{RLM.Construction.Entities.Project})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Project</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Project</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Project.
             <code><![CDATA[
             TList<Project> list = new TList<Project>();
             Project entity = new Project();
             entity.StringProperty = "foo";
             Project entity2 = new Project();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProjectService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ProjectServiceBase.Save(RLM.Construction.Entities.Project)">
            <summary>
            	public virtualmethod that Saves a Project object into the datasource using a transaction.
            </summary>
            <param name="entity">Project object to Save.</param>
            <remarks>After Saveing into the datasource, the Project object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Project entity = ProjectService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ProjectService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ProjectServiceBase.Save(RLM.Construction.Entities.TList{RLM.Construction.Entities.Project})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Project</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Project</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Project.
             <code><![CDATA[
             TList<Project> list = new TList<Project>();
             Project entity = new Project();
             entity.StringProperty = "foo";
             Project entity2 = new Project();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProjectService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ProjectServiceBase.Delete(RLM.Construction.Entities.Project)">
            <summary>
            	public virtualmethod that Deletes a Project object into the datasource using a transaction.
            </summary>
            <param name="entity">Project object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Project object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Project entity = ProjectService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ProjectService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ProjectServiceBase.Delete(RLM.Construction.Entities.TList{RLM.Construction.Entities.Project})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Project</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Project</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Project.
             <code><![CDATA[
             TList<Project> list = new TList<Project>();
             Project entity = new Project();
             entity.StringProperty = "foo";
             Project entity2 = new Project();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProjectService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ProjectServiceBase.Delete(RLM.Construction.Entities.ProjectKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ProjectServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 projectId
            </summary>
            <param name="projectId">Project pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ProjectServiceBase.DeepLoadByProjectId(System.Int32,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Construction.Entities.Project"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <param name="projectId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Project Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.Project"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ProjectServiceBase.DeepLoad(RLM.Construction.Entities.Project)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Project Object</param>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ProjectServiceBase.DeepLoad(RLM.Construction.Entities.Project)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Construction.Services.ProjectServiceBase.DeepLoad(RLM.Construction.Entities.Project,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ProjectServiceBase.DeepLoad(RLM.Construction.Entities.Project)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Project Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.ProjectServiceBase.DeepLoad(RLM.Construction.Entities.Project,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Construction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Construction.Entities.Project"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Project Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.ProjectServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.Project})">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ProjectServiceBase.DeepLoad(RLM.Construction.Entities.Project)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Construction.Services.ProjectServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.Project},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ProjectServiceBase.DeepLoad(RLM.Construction.Entities.Project)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.ProjectServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.Project},System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Construction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Construction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Construction.Entities.Project"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.ProjectServiceBase.DeepSave(RLM.Construction.Entities.Project)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Construction.Entities.Project"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Project Object</param>
        </member>
        <member name="M:RLM.Construction.Services.ProjectServiceBase.DeepSave(RLM.Construction.Entities.Project,RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Project object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Project Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Project</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Construction.Services.ProjectServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.Project})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Project} Object</param>
        </member>
        <member name="M:RLM.Construction.Services.ProjectServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.Project},RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Construction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Project Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Construction.Services.ProjectServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.ProjectService.#ctor">
            <summary>
            Initializes a new instance of the ProjectService class.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.AttachFileService">
            <summary>
             An component type implementation of the 'AttachFile' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:RLM.Construction.Services.AttachFileServiceBase">
            <summary>
             An object representation of the 'AttachFile' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the AttachFile.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Construction.Entities.AttachFile"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.AttachFileServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Construction.Entities.AttachFile"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.AttachFileServiceBase.CreateAttachFile(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Construction.Entities.AttachFile"/> instance.
            </summary>
            <param name="name"></param>
            <param name="filePath"></param>
            <param name="type">Image, video, text file, ...</param>
            <param name="resourceId"></param>
            <param name="resourceType"></param>
            <param name="isActive"></param>
            <param name="comment"></param>
            <param name="creationUserId"></param>
            <param name="creationDate"></param>
            <param name="lastModificationUserId"></param>
            <param name="lastModificationDate"></param>
        </member>
        <member name="M:RLM.Construction.Services.AttachFileServiceBase.Get(RLM.Construction.Entities.AttachFileKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.AttachFileServiceBase.GetByAttachFileId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_AttachFiles index.
            </summary>
            <param name="attachFileId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.AttachFile"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.AttachFileServiceBase.GetByAttachFileId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_AttachFiles index.
            </summary>
            <param name="attachFileId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.AttachFile"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.AttachFileServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Construction.Entities.AttachFile"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Construction.Services.AttachFileServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Construction.Entities.AttachFile"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Construction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Construction.Services.AttachFileServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AttachFile</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.AttachFileServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AttachFile</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.AttachFileServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Construction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AttachFile</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.AttachFileServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Construction.Services.AttachFileServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.AttachFileServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{AttachFile} of <c>AttachFile</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.AttachFileServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>AttachFile</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.AttachFileServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>AttachFile</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.AttachFileServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>AttachFile</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.AttachFileServiceBase.Insert(RLM.Construction.Entities.AttachFile)">
            <summary>
            	public virtualmethod that Inserts a AttachFile object into the datasource using a transaction.
            </summary>
            <param name="entity">AttachFile object to Insert.</param>
            <remarks>After Inserting into the datasource, the AttachFile object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            AttachFile entity = new AttachFile();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	AttachFileService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.AttachFileServiceBase.Insert(RLM.Construction.Entities.TList{RLM.Construction.Entities.AttachFile})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AttachFile</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>AttachFile</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of AttachFile.
             <code><![CDATA[
             TList<AttachFile> list = new TList<AttachFile>();
             AttachFile entity = new AttachFile();
             entity.StringProperty = "foo";
             AttachFile entity2 = new AttachFile();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AttachFileService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.AttachFileServiceBase.Update(RLM.Construction.Entities.AttachFile)">
            <summary>
            	public virtualmethod that Updates a AttachFile object into the datasource using a transaction.
            </summary>
            <param name="entity">AttachFile object to Update.</param>
            <remarks>After Updateing into the datasource, the AttachFile object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            AttachFile entity = AttachFileService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	AttachFileService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.AttachFileServiceBase.Update(RLM.Construction.Entities.TList{RLM.Construction.Entities.AttachFile})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AttachFile</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>AttachFile</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of AttachFile.
             <code><![CDATA[
             TList<AttachFile> list = new TList<AttachFile>();
             AttachFile entity = new AttachFile();
             entity.StringProperty = "foo";
             AttachFile entity2 = new AttachFile();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AttachFileService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.AttachFileServiceBase.Save(RLM.Construction.Entities.AttachFile)">
            <summary>
            	public virtualmethod that Saves a AttachFile object into the datasource using a transaction.
            </summary>
            <param name="entity">AttachFile object to Save.</param>
            <remarks>After Saveing into the datasource, the AttachFile object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            AttachFile entity = AttachFileService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	AttachFileService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.AttachFileServiceBase.Save(RLM.Construction.Entities.TList{RLM.Construction.Entities.AttachFile})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AttachFile</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>AttachFile</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of AttachFile.
             <code><![CDATA[
             TList<AttachFile> list = new TList<AttachFile>();
             AttachFile entity = new AttachFile();
             entity.StringProperty = "foo";
             AttachFile entity2 = new AttachFile();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AttachFileService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.AttachFileServiceBase.Delete(RLM.Construction.Entities.AttachFile)">
            <summary>
            	public virtualmethod that Deletes a AttachFile object into the datasource using a transaction.
            </summary>
            <param name="entity">AttachFile object to Delete.</param>
            <remarks>After Deleteing into the datasource, the AttachFile object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            AttachFile entity = AttachFileService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	AttachFileService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.AttachFileServiceBase.Delete(RLM.Construction.Entities.TList{RLM.Construction.Entities.AttachFile})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AttachFile</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>AttachFile</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of AttachFile.
             <code><![CDATA[
             TList<AttachFile> list = new TList<AttachFile>();
             AttachFile entity = new AttachFile();
             entity.StringProperty = "foo";
             AttachFile entity2 = new AttachFile();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AttachFileService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.AttachFileServiceBase.Delete(RLM.Construction.Entities.AttachFileKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.AttachFileServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 attachFileId
            </summary>
            <param name="attachFileId">AttachFile pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.AttachFileServiceBase.DeepLoadByAttachFileId(System.Int32,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Construction.Entities.AttachFile"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <param name="attachFileId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AttachFile Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.AttachFile"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.AttachFileServiceBase.DeepLoad(RLM.Construction.Entities.AttachFile)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">AttachFile Object</param>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.AttachFileServiceBase.DeepLoad(RLM.Construction.Entities.AttachFile)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Construction.Services.AttachFileServiceBase.DeepLoad(RLM.Construction.Entities.AttachFile,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.AttachFileServiceBase.DeepLoad(RLM.Construction.Entities.AttachFile)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">AttachFile Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.AttachFileServiceBase.DeepLoad(RLM.Construction.Entities.AttachFile,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Construction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Construction.Entities.AttachFile"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AttachFile Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.AttachFileServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.AttachFile})">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.AttachFileServiceBase.DeepLoad(RLM.Construction.Entities.AttachFile)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Construction.Services.AttachFileServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.AttachFile},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.AttachFileServiceBase.DeepLoad(RLM.Construction.Entities.AttachFile)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.AttachFileServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.AttachFile},System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Construction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Construction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Construction.Entities.AttachFile"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.AttachFileServiceBase.DeepSave(RLM.Construction.Entities.AttachFile)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Construction.Entities.AttachFile"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">AttachFile Object</param>
        </member>
        <member name="M:RLM.Construction.Services.AttachFileServiceBase.DeepSave(RLM.Construction.Entities.AttachFile,RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the AttachFile object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">AttachFile Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>AttachFile</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Construction.Services.AttachFileServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.AttachFile})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{AttachFile} Object</param>
        </member>
        <member name="M:RLM.Construction.Services.AttachFileServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.AttachFile},RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Construction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">AttachFile Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Construction.Services.AttachFileServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.AttachFileService.#ctor">
            <summary>
            Initializes a new instance of the AttachFileService class.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.ContractServiceBase">
            <summary>
             An object representation of the 'Contract' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Contract.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Construction.Entities.Contract"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.ContractServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Construction.Entities.Contract"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.ContractServiceBase.CreateContract(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Construction.Entities.Contract"/> instance.
            </summary>
            <param name="constructDeptId"></param>
            <param name="designDeptId"></param>
            <param name="groupId"></param>
            <param name="partnerId"></param>
            <param name="code"></param>
            <param name="number"></param>
            <param name="name"></param>
            <param name="description"></param>
            <param name="comment"></param>
            <param name="initPrice"></param>
            <param name="lastPrice"></param>
            <param name="signedDate">The data that contract was signed</param>
            <param name="fromDate"></param>
            <param name="toDate"></param>
            <param name="realFromDate"></param>
            <param name="realToDate"></param>
            <param name="status"></param>
            <param name="isApprove"></param>
            <param name="isActive"></param>
            <param name="isPrinted"></param>
            <param name="currencyUnitId"></param>
            <param name="contractType">Electromechanical, Construction, ...</param>
            <param name="fromContactorId">A representative</param>
            <param name="toContactorId">B representative</param>
            <param name="vATTax"></param>
            <param name="pITTax"></param>
            <param name="cITTax"></param>
            <param name="other"></param>
            <param name="creationUserId"></param>
            <param name="creationDate"></param>
            <param name="lastModificationUserId"></param>
            <param name="lastModificationDate"></param>
            <param name="type">TYpe of contract: nhan thau, giao thau</param>
        </member>
        <member name="M:RLM.Construction.Services.ContractServiceBase.GetByGroupId(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_Contracts_Groups key.
            	FK_Contracts_Groups Description: 
            </summary>
            <param name="groupId"></param>
            <returns>Returns a generic collection of Contract objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ContractServiceBase.GetByGroupId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_Contracts_Groups key.
            	FK_Contracts_Groups Description: 
            </summary>
            <param name="groupId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Construction.Entities.TList`1"/> of <c>Contract</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ContractServiceBase.Get(RLM.Construction.Entities.ContractKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ContractServiceBase.GetByContractId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_Contracts index.
            </summary>
            <param name="contractId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.Contract"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ContractServiceBase.GetByContractId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_Contracts index.
            </summary>
            <param name="contractId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.Contract"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ContractServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Construction.Entities.Contract"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Construction.Services.ContractServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Construction.Entities.Contract"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Construction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Construction.Services.ContractServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Contract</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ContractServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Contract</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ContractServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Construction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Contract</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ContractServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ContractServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ContractServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Contract} of <c>Contract</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ContractServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Contract</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ContractServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Contract</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ContractServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Contract</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ContractServiceBase.Insert(RLM.Construction.Entities.Contract)">
            <summary>
            	public virtualmethod that Inserts a Contract object into the datasource using a transaction.
            </summary>
            <param name="entity">Contract object to Insert.</param>
            <remarks>After Inserting into the datasource, the Contract object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Contract entity = new Contract();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ContractService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ContractServiceBase.Insert(RLM.Construction.Entities.TList{RLM.Construction.Entities.Contract})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Contract</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Contract</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Contract.
             <code><![CDATA[
             TList<Contract> list = new TList<Contract>();
             Contract entity = new Contract();
             entity.StringProperty = "foo";
             Contract entity2 = new Contract();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ContractService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ContractServiceBase.Update(RLM.Construction.Entities.Contract)">
            <summary>
            	public virtualmethod that Updates a Contract object into the datasource using a transaction.
            </summary>
            <param name="entity">Contract object to Update.</param>
            <remarks>After Updateing into the datasource, the Contract object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Contract entity = ContractService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ContractService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ContractServiceBase.Update(RLM.Construction.Entities.TList{RLM.Construction.Entities.Contract})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Contract</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Contract</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Contract.
             <code><![CDATA[
             TList<Contract> list = new TList<Contract>();
             Contract entity = new Contract();
             entity.StringProperty = "foo";
             Contract entity2 = new Contract();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ContractService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ContractServiceBase.Save(RLM.Construction.Entities.Contract)">
            <summary>
            	public virtualmethod that Saves a Contract object into the datasource using a transaction.
            </summary>
            <param name="entity">Contract object to Save.</param>
            <remarks>After Saveing into the datasource, the Contract object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Contract entity = ContractService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ContractService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ContractServiceBase.Save(RLM.Construction.Entities.TList{RLM.Construction.Entities.Contract})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Contract</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Contract</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Contract.
             <code><![CDATA[
             TList<Contract> list = new TList<Contract>();
             Contract entity = new Contract();
             entity.StringProperty = "foo";
             Contract entity2 = new Contract();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ContractService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ContractServiceBase.Delete(RLM.Construction.Entities.Contract)">
            <summary>
            	public virtualmethod that Deletes a Contract object into the datasource using a transaction.
            </summary>
            <param name="entity">Contract object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Contract object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Contract entity = ContractService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ContractService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ContractServiceBase.Delete(RLM.Construction.Entities.TList{RLM.Construction.Entities.Contract})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Contract</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Contract</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Contract.
             <code><![CDATA[
             TList<Contract> list = new TList<Contract>();
             Contract entity = new Contract();
             entity.StringProperty = "foo";
             Contract entity2 = new Contract();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ContractService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ContractServiceBase.Delete(RLM.Construction.Entities.ContractKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ContractServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 contractId
            </summary>
            <param name="contractId">Contract pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ContractServiceBase.DeepLoadByContractId(System.Int32,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Construction.Entities.Contract"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <param name="contractId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Contract Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.Contract"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ContractServiceBase.DeepLoad(RLM.Construction.Entities.Contract)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Contract Object</param>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ContractServiceBase.DeepLoad(RLM.Construction.Entities.Contract)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Construction.Services.ContractServiceBase.DeepLoad(RLM.Construction.Entities.Contract,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ContractServiceBase.DeepLoad(RLM.Construction.Entities.Contract)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Contract Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.ContractServiceBase.DeepLoad(RLM.Construction.Entities.Contract,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Construction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Construction.Entities.Contract"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Contract Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.ContractServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.Contract})">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ContractServiceBase.DeepLoad(RLM.Construction.Entities.Contract)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Construction.Services.ContractServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.Contract},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ContractServiceBase.DeepLoad(RLM.Construction.Entities.Contract)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.ContractServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.Contract},System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Construction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Construction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Construction.Entities.Contract"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.ContractServiceBase.DeepSave(RLM.Construction.Entities.Contract)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Construction.Entities.Contract"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Contract Object</param>
        </member>
        <member name="M:RLM.Construction.Services.ContractServiceBase.DeepSave(RLM.Construction.Entities.Contract,RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Contract object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Contract Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Contract</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Construction.Services.ContractServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.Contract})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Contract} Object</param>
        </member>
        <member name="M:RLM.Construction.Services.ContractServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.Contract},RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Construction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Contract Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Construction.Services.ContractServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.UnitServiceBase">
            <summary>
             An object representation of the 'Unit' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Unit.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Construction.Entities.Unit"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.UnitServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Construction.Entities.Unit"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.UnitServiceBase.CreateUnit(System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Construction.Entities.Unit"/> instance.
            </summary>
            <param name="name"></param>
            <param name="description"></param>
            <param name="isActive"></param>
            <param name="isDeletable"></param>
            <param name="priority"></param>
            <param name="isBaseUnit">true if it is primary unit, exaple: kg, m, ....</param>
            <param name="creationDate"></param>
            <param name="creationUserId"></param>
            <param name="lastModificationDate"></param>
            <param name="lastModificationUserId"></param>
        </member>
        <member name="M:RLM.Construction.Services.UnitServiceBase.Get(RLM.Construction.Entities.UnitKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UnitServiceBase.GetByUnitId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_Units index.
            </summary>
            <param name="unitId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.Unit"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UnitServiceBase.GetByUnitId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_Units index.
            </summary>
            <param name="unitId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.Unit"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UnitServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Construction.Entities.Unit"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Construction.Services.UnitServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Construction.Entities.Unit"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Construction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Construction.Services.UnitServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Unit</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UnitServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Unit</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UnitServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Construction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Unit</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UnitServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UnitServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UnitServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Unit} of <c>Unit</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UnitServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Unit</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UnitServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Unit</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UnitServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Unit</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UnitServiceBase.Insert(RLM.Construction.Entities.Unit)">
            <summary>
            	public virtualmethod that Inserts a Unit object into the datasource using a transaction.
            </summary>
            <param name="entity">Unit object to Insert.</param>
            <remarks>After Inserting into the datasource, the Unit object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Unit entity = new Unit();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	UnitService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.UnitServiceBase.Insert(RLM.Construction.Entities.TList{RLM.Construction.Entities.Unit})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Unit</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Unit</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Unit.
             <code><![CDATA[
             TList<Unit> list = new TList<Unit>();
             Unit entity = new Unit();
             entity.StringProperty = "foo";
             Unit entity2 = new Unit();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UnitService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.UnitServiceBase.Update(RLM.Construction.Entities.Unit)">
            <summary>
            	public virtualmethod that Updates a Unit object into the datasource using a transaction.
            </summary>
            <param name="entity">Unit object to Update.</param>
            <remarks>After Updateing into the datasource, the Unit object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Unit entity = UnitService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	UnitService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.UnitServiceBase.Update(RLM.Construction.Entities.TList{RLM.Construction.Entities.Unit})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Unit</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Unit</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Unit.
             <code><![CDATA[
             TList<Unit> list = new TList<Unit>();
             Unit entity = new Unit();
             entity.StringProperty = "foo";
             Unit entity2 = new Unit();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UnitService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.UnitServiceBase.Save(RLM.Construction.Entities.Unit)">
            <summary>
            	public virtualmethod that Saves a Unit object into the datasource using a transaction.
            </summary>
            <param name="entity">Unit object to Save.</param>
            <remarks>After Saveing into the datasource, the Unit object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Unit entity = UnitService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	UnitService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.UnitServiceBase.Save(RLM.Construction.Entities.TList{RLM.Construction.Entities.Unit})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Unit</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Unit</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Unit.
             <code><![CDATA[
             TList<Unit> list = new TList<Unit>();
             Unit entity = new Unit();
             entity.StringProperty = "foo";
             Unit entity2 = new Unit();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UnitService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.UnitServiceBase.Delete(RLM.Construction.Entities.Unit)">
            <summary>
            	public virtualmethod that Deletes a Unit object into the datasource using a transaction.
            </summary>
            <param name="entity">Unit object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Unit object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Unit entity = UnitService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	UnitService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.UnitServiceBase.Delete(RLM.Construction.Entities.TList{RLM.Construction.Entities.Unit})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Unit</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Unit</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Unit.
             <code><![CDATA[
             TList<Unit> list = new TList<Unit>();
             Unit entity = new Unit();
             entity.StringProperty = "foo";
             Unit entity2 = new Unit();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UnitService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.UnitServiceBase.Delete(RLM.Construction.Entities.UnitKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UnitServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 unitId
            </summary>
            <param name="unitId">Unit pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UnitServiceBase.GetByToUnitIdFromUnitConvertor(System.Int32)">
            <summary>
            	Gets Unit objects from the datasource by ToUnitId in the
            	UnitConvertor table. Table Unit is related to table Unit
            	through the (M:N) relationship defined in the UnitConvertor table.
            </summary>
            <param name="toUnitId"></param>
            <returns>Returns a typed collection of Unit objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UnitServiceBase.GetByToUnitIdFromUnitConvertor(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Unit objects from the datasource by ToUnitId in the
            	UnitConvertor table. Table Unit is related to table Unit
            	through the (M:N) relationship defined in the UnitConvertor table.
            </summary>
            <param name="toUnitId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Unit objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UnitServiceBase.GetByFromUnitIdFromUnitConvertor(System.Int32)">
            <summary>
            	Gets Unit objects from the datasource by FromUnitId in the
            	UnitConvertor table. Table Unit is related to table Unit
            	through the (M:N) relationship defined in the UnitConvertor table.
            </summary>
            <param name="fromUnitId"></param>
            <returns>Returns a typed collection of Unit objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UnitServiceBase.GetByFromUnitIdFromUnitConvertor(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Unit objects from the datasource by FromUnitId in the
            	UnitConvertor table. Table Unit is related to table Unit
            	through the (M:N) relationship defined in the UnitConvertor table.
            </summary>
            <param name="fromUnitId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Unit objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UnitServiceBase.DeepLoadByUnitId(System.Int32,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Construction.Entities.Unit"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <param name="unitId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Unit Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.Unit"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.UnitServiceBase.DeepLoad(RLM.Construction.Entities.Unit)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Unit Object</param>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.UnitServiceBase.DeepLoad(RLM.Construction.Entities.Unit)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Construction.Services.UnitServiceBase.DeepLoad(RLM.Construction.Entities.Unit,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.UnitServiceBase.DeepLoad(RLM.Construction.Entities.Unit)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Unit Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.UnitServiceBase.DeepLoad(RLM.Construction.Entities.Unit,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Construction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Construction.Entities.Unit"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Unit Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.UnitServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.Unit})">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.UnitServiceBase.DeepLoad(RLM.Construction.Entities.Unit)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Construction.Services.UnitServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.Unit},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.UnitServiceBase.DeepLoad(RLM.Construction.Entities.Unit)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.UnitServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.Unit},System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Construction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Construction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Construction.Entities.Unit"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.UnitServiceBase.DeepSave(RLM.Construction.Entities.Unit)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Construction.Entities.Unit"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Unit Object</param>
        </member>
        <member name="M:RLM.Construction.Services.UnitServiceBase.DeepSave(RLM.Construction.Entities.Unit,RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Unit object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Unit Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Unit</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Construction.Services.UnitServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.Unit})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Unit} Object</param>
        </member>
        <member name="M:RLM.Construction.Services.UnitServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.Unit},RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Construction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Unit Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Construction.Services.UnitServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.GenericProcessorResult">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary> 
        </member>
        <member name="M:RLM.Construction.Services.GenericProcessorResult.#ctor">
            <summary>
            Initializes a new instance of the GenericProcessorResult class.
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.GenericProcessorResult.AddBrokenRulesList(System.Type,RLM.Construction.Entities.Validation.BrokenRulesList)">
            <summary>
            Provides a method to aggregate BrokenRuleList Collections Based on their Type 
            if they are invalid.
            </summary>
        </member>
        <member name="P:RLM.Construction.Services.GenericProcessorResult.Result">
             <summary>
            	Provides a result of the current process.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:RLM.Construction.Services.GenericProcessorResult.BrokenRulesLists">
             <summary>
            	Provides a list of broken rules for the entire process.
             </summary>
            <value>A list of rules that were broken in the process</value>
        </member>
        <member name="P:RLM.Construction.Services.GenericProcessorResult.FinalProcessorState">
            <summary>
            Provides the final processor state the operation. 
            This is set by the processor.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.PartnerServiceBase">
            <summary>
             An object representation of the 'Partner' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Partner.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Construction.Entities.Partner"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.PartnerServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Construction.Entities.Partner"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.PartnerServiceBase.CreatePartner(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Construction.Entities.Partner"/> instance.
            </summary>
            <param name="groupId">Group to classify partner</param>
            <param name="contactorId"></param>
            <param name="representatorId"></param>
            <param name="code"></param>
            <param name="name"></param>
            <param name="nameInEng"></param>
            <param name="taxCode"></param>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="phone"></param>
            <param name="fax"></param>
            <param name="email"></param>
            <param name="isDeletable"></param>
            <param name="isActive"></param>
            <param name="comment"></param>
            <param name="website"></param>
            <param name="creationDate"></param>
            <param name="creationUserId"></param>
            <param name="lastModificationDate"></param>
            <param name="lastModificationUserId"></param>
        </member>
        <member name="M:RLM.Construction.Services.PartnerServiceBase.Get(RLM.Construction.Entities.PartnerKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.PartnerServiceBase.GetByPartnerId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_Departments index.
            </summary>
            <param name="partnerId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.Partner"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.PartnerServiceBase.GetByPartnerId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_Departments index.
            </summary>
            <param name="partnerId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.Partner"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.PartnerServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Construction.Entities.Partner"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Construction.Services.PartnerServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Construction.Entities.Partner"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Construction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Construction.Services.PartnerServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Partner</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.PartnerServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Partner</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.PartnerServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Construction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Partner</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.PartnerServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Construction.Services.PartnerServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.PartnerServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Partner} of <c>Partner</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.PartnerServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Partner</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.PartnerServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Partner</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.PartnerServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Partner</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.PartnerServiceBase.Insert(RLM.Construction.Entities.Partner)">
            <summary>
            	public virtualmethod that Inserts a Partner object into the datasource using a transaction.
            </summary>
            <param name="entity">Partner object to Insert.</param>
            <remarks>After Inserting into the datasource, the Partner object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Partner entity = new Partner();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	PartnerService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.PartnerServiceBase.Insert(RLM.Construction.Entities.TList{RLM.Construction.Entities.Partner})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Partner</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Partner</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Partner.
             <code><![CDATA[
             TList<Partner> list = new TList<Partner>();
             Partner entity = new Partner();
             entity.StringProperty = "foo";
             Partner entity2 = new Partner();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PartnerService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.PartnerServiceBase.Update(RLM.Construction.Entities.Partner)">
            <summary>
            	public virtualmethod that Updates a Partner object into the datasource using a transaction.
            </summary>
            <param name="entity">Partner object to Update.</param>
            <remarks>After Updateing into the datasource, the Partner object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Partner entity = PartnerService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	PartnerService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.PartnerServiceBase.Update(RLM.Construction.Entities.TList{RLM.Construction.Entities.Partner})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Partner</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Partner</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Partner.
             <code><![CDATA[
             TList<Partner> list = new TList<Partner>();
             Partner entity = new Partner();
             entity.StringProperty = "foo";
             Partner entity2 = new Partner();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PartnerService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.PartnerServiceBase.Save(RLM.Construction.Entities.Partner)">
            <summary>
            	public virtualmethod that Saves a Partner object into the datasource using a transaction.
            </summary>
            <param name="entity">Partner object to Save.</param>
            <remarks>After Saveing into the datasource, the Partner object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Partner entity = PartnerService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	PartnerService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.PartnerServiceBase.Save(RLM.Construction.Entities.TList{RLM.Construction.Entities.Partner})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Partner</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Partner</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Partner.
             <code><![CDATA[
             TList<Partner> list = new TList<Partner>();
             Partner entity = new Partner();
             entity.StringProperty = "foo";
             Partner entity2 = new Partner();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PartnerService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.PartnerServiceBase.Delete(RLM.Construction.Entities.Partner)">
            <summary>
            	public virtualmethod that Deletes a Partner object into the datasource using a transaction.
            </summary>
            <param name="entity">Partner object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Partner object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Partner entity = PartnerService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	PartnerService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.PartnerServiceBase.Delete(RLM.Construction.Entities.TList{RLM.Construction.Entities.Partner})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Partner</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Partner</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Partner.
             <code><![CDATA[
             TList<Partner> list = new TList<Partner>();
             Partner entity = new Partner();
             entity.StringProperty = "foo";
             Partner entity2 = new Partner();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PartnerService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.PartnerServiceBase.Delete(RLM.Construction.Entities.PartnerKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.PartnerServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 partnerId
            </summary>
            <param name="partnerId">Partner pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.PartnerServiceBase.DeepLoadByPartnerId(System.Int32,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Construction.Entities.Partner"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <param name="partnerId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Partner Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.Partner"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.PartnerServiceBase.DeepLoad(RLM.Construction.Entities.Partner)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Partner Object</param>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.PartnerServiceBase.DeepLoad(RLM.Construction.Entities.Partner)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Construction.Services.PartnerServiceBase.DeepLoad(RLM.Construction.Entities.Partner,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.PartnerServiceBase.DeepLoad(RLM.Construction.Entities.Partner)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Partner Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.PartnerServiceBase.DeepLoad(RLM.Construction.Entities.Partner,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Construction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Construction.Entities.Partner"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Partner Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.PartnerServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.Partner})">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.PartnerServiceBase.DeepLoad(RLM.Construction.Entities.Partner)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Construction.Services.PartnerServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.Partner},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.PartnerServiceBase.DeepLoad(RLM.Construction.Entities.Partner)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.PartnerServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.Partner},System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Construction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Construction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Construction.Entities.Partner"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.PartnerServiceBase.DeepSave(RLM.Construction.Entities.Partner)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Construction.Entities.Partner"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Partner Object</param>
        </member>
        <member name="M:RLM.Construction.Services.PartnerServiceBase.DeepSave(RLM.Construction.Entities.Partner,RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Partner object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Partner Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Partner</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Construction.Services.PartnerServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.Partner})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Partner} Object</param>
        </member>
        <member name="M:RLM.Construction.Services.PartnerServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.Partner},RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Construction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Partner Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Construction.Services.PartnerServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.ItemInProjectService">
            <summary>
             An component type implementation of the 'ItemInProject' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:RLM.Construction.Services.ItemInProjectServiceBase">
            <summary>
             An object representation of the 'ItemInProject' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ItemInProject.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Construction.Entities.ItemInProject"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.ItemInProjectServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Construction.Entities.ItemInProject"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.ItemInProjectServiceBase.CreateItemInProject(System.Int64,System.Int32,System.Nullable{System.Int32},System.Int32,System.Nullable{System.Int32},System.Double,System.Decimal,System.Decimal,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Construction.Entities.ItemInProject"/> instance.
            </summary>
            <param name="itemId"></param>
            <param name="projectId"></param>
            <param name="projectPhaseId"></param>
            <param name="contractId"></param>
            <param name="priceUnitId"></param>
            <param name="quantity"></param>
            <param name="unitPrice"></param>
            <param name="total"></param>
            <param name="isActive"></param>
            <param name="isApprove"></param>
            <param name="creationDate"></param>
            <param name="creationUserId"></param>
            <param name="lastModificationDate"></param>
            <param name="lastModificationUserId"></param>
        </member>
        <member name="M:RLM.Construction.Services.ItemInProjectServiceBase.GetByItemId(System.Int64)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_ItemInProjects_Items key.
            	FK_ItemInProjects_Items Description: 
            </summary>
            <param name="itemId"></param>
            <returns>Returns a generic collection of ItemInProject objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInProjectServiceBase.GetByItemId(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_ItemInProjects_Items key.
            	FK_ItemInProjects_Items Description: 
            </summary>
            <param name="itemId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Construction.Entities.TList`1"/> of <c>ItemInProject</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInProjectServiceBase.GetByContractId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_ItemInProjects_Contracts key.
            	FK_ItemInProjects_Contracts Description: 
            </summary>
            <param name="contractId"></param>
            <returns>Returns a generic collection of ItemInProject objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInProjectServiceBase.GetByContractId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_ItemInProjects_Contracts key.
            	FK_ItemInProjects_Contracts Description: 
            </summary>
            <param name="contractId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Construction.Entities.TList`1"/> of <c>ItemInProject</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInProjectServiceBase.GetByProjectId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_ItemInProjects_Projects key.
            	FK_ItemInProjects_Projects Description: 
            </summary>
            <param name="projectId"></param>
            <returns>Returns a generic collection of ItemInProject objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInProjectServiceBase.GetByProjectId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_ItemInProjects_Projects key.
            	FK_ItemInProjects_Projects Description: 
            </summary>
            <param name="projectId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Construction.Entities.TList`1"/> of <c>ItemInProject</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInProjectServiceBase.GetByPriceUnitId(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_ItemInProject_Unit key.
            	FK_ItemInProject_Unit Description: 
            </summary>
            <param name="priceUnitId"></param>
            <returns>Returns a generic collection of ItemInProject objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInProjectServiceBase.GetByPriceUnitId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_ItemInProject_Unit key.
            	FK_ItemInProject_Unit Description: 
            </summary>
            <param name="priceUnitId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Construction.Entities.TList`1"/> of <c>ItemInProject</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInProjectServiceBase.Get(RLM.Construction.Entities.ItemInProjectKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInProjectServiceBase.GetByItemInProjectId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_ItemInProjects index.
            </summary>
            <param name="itemInProjectId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.ItemInProject"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInProjectServiceBase.GetByItemInProjectId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_ItemInProjects index.
            </summary>
            <param name="itemInProjectId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.ItemInProject"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInProjectServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Construction.Entities.ItemInProject"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInProjectServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Construction.Entities.ItemInProject"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Construction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInProjectServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ItemInProject</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInProjectServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ItemInProject</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInProjectServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Construction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ItemInProject</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInProjectServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInProjectServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInProjectServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ItemInProject} of <c>ItemInProject</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInProjectServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ItemInProject</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInProjectServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ItemInProject</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInProjectServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ItemInProject</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInProjectServiceBase.Insert(RLM.Construction.Entities.ItemInProject)">
            <summary>
            	public virtualmethod that Inserts a ItemInProject object into the datasource using a transaction.
            </summary>
            <param name="entity">ItemInProject object to Insert.</param>
            <remarks>After Inserting into the datasource, the ItemInProject object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ItemInProject entity = new ItemInProject();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ItemInProjectService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemInProjectServiceBase.Insert(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemInProject})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ItemInProject</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ItemInProject</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ItemInProject.
             <code><![CDATA[
             TList<ItemInProject> list = new TList<ItemInProject>();
             ItemInProject entity = new ItemInProject();
             entity.StringProperty = "foo";
             ItemInProject entity2 = new ItemInProject();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemInProjectService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemInProjectServiceBase.Update(RLM.Construction.Entities.ItemInProject)">
            <summary>
            	public virtualmethod that Updates a ItemInProject object into the datasource using a transaction.
            </summary>
            <param name="entity">ItemInProject object to Update.</param>
            <remarks>After Updateing into the datasource, the ItemInProject object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ItemInProject entity = ItemInProjectService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ItemInProjectService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemInProjectServiceBase.Update(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemInProject})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ItemInProject</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ItemInProject</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ItemInProject.
             <code><![CDATA[
             TList<ItemInProject> list = new TList<ItemInProject>();
             ItemInProject entity = new ItemInProject();
             entity.StringProperty = "foo";
             ItemInProject entity2 = new ItemInProject();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemInProjectService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemInProjectServiceBase.Save(RLM.Construction.Entities.ItemInProject)">
            <summary>
            	public virtualmethod that Saves a ItemInProject object into the datasource using a transaction.
            </summary>
            <param name="entity">ItemInProject object to Save.</param>
            <remarks>After Saveing into the datasource, the ItemInProject object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ItemInProject entity = ItemInProjectService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ItemInProjectService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemInProjectServiceBase.Save(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemInProject})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ItemInProject</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ItemInProject</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ItemInProject.
             <code><![CDATA[
             TList<ItemInProject> list = new TList<ItemInProject>();
             ItemInProject entity = new ItemInProject();
             entity.StringProperty = "foo";
             ItemInProject entity2 = new ItemInProject();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemInProjectService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemInProjectServiceBase.Delete(RLM.Construction.Entities.ItemInProject)">
            <summary>
            	public virtualmethod that Deletes a ItemInProject object into the datasource using a transaction.
            </summary>
            <param name="entity">ItemInProject object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ItemInProject object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ItemInProject entity = ItemInProjectService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ItemInProjectService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemInProjectServiceBase.Delete(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemInProject})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ItemInProject</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ItemInProject</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ItemInProject.
             <code><![CDATA[
             TList<ItemInProject> list = new TList<ItemInProject>();
             ItemInProject entity = new ItemInProject();
             entity.StringProperty = "foo";
             ItemInProject entity2 = new ItemInProject();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemInProjectService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemInProjectServiceBase.Delete(RLM.Construction.Entities.ItemInProjectKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInProjectServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 itemInProjectId
            </summary>
            <param name="itemInProjectId">ItemInProject pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInProjectServiceBase.DeepLoadByItemInProjectId(System.Int32,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Construction.Entities.ItemInProject"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <param name="itemInProjectId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ItemInProject Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.ItemInProject"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInProjectServiceBase.DeepLoad(RLM.Construction.Entities.ItemInProject)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ItemInProject Object</param>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ItemInProjectServiceBase.DeepLoad(RLM.Construction.Entities.ItemInProject)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Construction.Services.ItemInProjectServiceBase.DeepLoad(RLM.Construction.Entities.ItemInProject,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ItemInProjectServiceBase.DeepLoad(RLM.Construction.Entities.ItemInProject)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ItemInProject Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.ItemInProjectServiceBase.DeepLoad(RLM.Construction.Entities.ItemInProject,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Construction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Construction.Entities.ItemInProject"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ItemInProject Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.ItemInProjectServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemInProject})">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ItemInProjectServiceBase.DeepLoad(RLM.Construction.Entities.ItemInProject)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Construction.Services.ItemInProjectServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemInProject},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ItemInProjectServiceBase.DeepLoad(RLM.Construction.Entities.ItemInProject)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.ItemInProjectServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemInProject},System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Construction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Construction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Construction.Entities.ItemInProject"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.ItemInProjectServiceBase.DeepSave(RLM.Construction.Entities.ItemInProject)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Construction.Entities.ItemInProject"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ItemInProject Object</param>
        </member>
        <member name="M:RLM.Construction.Services.ItemInProjectServiceBase.DeepSave(RLM.Construction.Entities.ItemInProject,RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ItemInProject object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ItemInProject Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ItemInProject</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Construction.Services.ItemInProjectServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemInProject})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ItemInProject} Object</param>
        </member>
        <member name="M:RLM.Construction.Services.ItemInProjectServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemInProject},RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Construction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ItemInProject Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Construction.Services.ItemInProjectServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.ItemInProjectService.#ctor">
            <summary>
            Initializes a new instance of the ItemInProjectService class.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.ContactorService">
            <summary>
             An component type implementation of the 'Contactor' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.ContactorService.#ctor">
            <summary>
            Initializes a new instance of the ContactorService class.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.ItemService">
            <summary>
             An component type implementation of the 'Item' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:RLM.Construction.Services.ItemServiceBase">
            <summary>
             An object representation of the 'Item' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Item.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Construction.Entities.Item"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.ItemServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Construction.Entities.Item"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.ItemServiceBase.CreateItem(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Construction.Entities.Item"/> instance.
            </summary>
            <param name="groupId">Item group</param>
            <param name="parentItemId"></param>
            <param name="code"></param>
            <param name="name"></param>
            <param name="description"></param>
            <param name="baseUnitId">Base unit of product, It can not be change base in any time</param>
            <param name="usedUnitId">Current unit id, It can be change base on repository</param>
            <param name="density">the value of UsedUnitId/BaseUnitId. it is constant</param>
            <param name="totalQuantity">Total of item in all repositories</param>
            <param name="availabelQuantity">Total availabel of all item in all repositories</param>
            <param name="reserveQuantity">Total amount that waiting for approve to do some action (repository movement). ReserveQuantity + AvailabelQuantity + ReturnQuantity=TotalQuantity</param>
            <param name="returnQuantity">Total quantity that have been returned to provider</param>
            <param name="adjustQuantity"></param>
            <param name="status">Status of item</param>
            <param name="isActive">Is false, item can be assigned to any project</param>
            <param name="isDeletable">true if item can be delete</param>
            <param name="priority"></param>
            <param name="lastComputeDate"></param>
            <param name="creationDate"></param>
            <param name="creationUserId"></param>
            <param name="lastModificationDate"></param>
            <param name="lastModificationUserId"></param>
        </member>
        <member name="M:RLM.Construction.Services.ItemServiceBase.GetByBaseUnitId(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_Items_Units key.
            	FK_Items_Units Description: 
            </summary>
            <param name="baseUnitId">Base unit of product, It can not be change base in any time</param>
            <returns>Returns a generic collection of Item objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemServiceBase.GetByBaseUnitId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_Items_Units key.
            	FK_Items_Units Description: 
            </summary>
            <param name="baseUnitId">Base unit of product, It can not be change base in any time</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Construction.Entities.TList`1"/> of <c>Item</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemServiceBase.GetByUsedUnitId(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_Items_Units1 key.
            	FK_Items_Units1 Description: 
            </summary>
            <param name="usedUnitId">Current unit id, It can be change base on repository</param>
            <returns>Returns a generic collection of Item objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemServiceBase.GetByUsedUnitId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_Items_Units1 key.
            	FK_Items_Units1 Description: 
            </summary>
            <param name="usedUnitId">Current unit id, It can be change base on repository</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Construction.Entities.TList`1"/> of <c>Item</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemServiceBase.GetByGroupId(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_Items_Groups key.
            	FK_Items_Groups Description: 
            </summary>
            <param name="groupId">Item group</param>
            <returns>Returns a generic collection of Item objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemServiceBase.GetByGroupId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_Items_Groups key.
            	FK_Items_Groups Description: 
            </summary>
            <param name="groupId">Item group</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Construction.Entities.TList`1"/> of <c>Item</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemServiceBase.Get(RLM.Construction.Entities.ItemKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemServiceBase.GetByItemId(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_Items index.
            </summary>
            <param name="itemId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.Item"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemServiceBase.GetByItemId(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_Items index.
            </summary>
            <param name="itemId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.Item"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Construction.Entities.Item"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Construction.Entities.Item"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Construction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Item</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Item</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Construction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Item</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Item} of <c>Item</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Item</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Item</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Item</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemServiceBase.Insert(RLM.Construction.Entities.Item)">
            <summary>
            	public virtualmethod that Inserts a Item object into the datasource using a transaction.
            </summary>
            <param name="entity">Item object to Insert.</param>
            <remarks>After Inserting into the datasource, the Item object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Item entity = new Item();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ItemService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemServiceBase.Insert(RLM.Construction.Entities.TList{RLM.Construction.Entities.Item})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Item</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Item</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Item.
             <code><![CDATA[
             TList<Item> list = new TList<Item>();
             Item entity = new Item();
             entity.StringProperty = "foo";
             Item entity2 = new Item();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemServiceBase.Update(RLM.Construction.Entities.Item)">
            <summary>
            	public virtualmethod that Updates a Item object into the datasource using a transaction.
            </summary>
            <param name="entity">Item object to Update.</param>
            <remarks>After Updateing into the datasource, the Item object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Item entity = ItemService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ItemService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemServiceBase.Update(RLM.Construction.Entities.TList{RLM.Construction.Entities.Item})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Item</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Item</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Item.
             <code><![CDATA[
             TList<Item> list = new TList<Item>();
             Item entity = new Item();
             entity.StringProperty = "foo";
             Item entity2 = new Item();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemServiceBase.Save(RLM.Construction.Entities.Item)">
            <summary>
            	public virtualmethod that Saves a Item object into the datasource using a transaction.
            </summary>
            <param name="entity">Item object to Save.</param>
            <remarks>After Saveing into the datasource, the Item object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Item entity = ItemService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ItemService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemServiceBase.Save(RLM.Construction.Entities.TList{RLM.Construction.Entities.Item})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Item</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Item</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Item.
             <code><![CDATA[
             TList<Item> list = new TList<Item>();
             Item entity = new Item();
             entity.StringProperty = "foo";
             Item entity2 = new Item();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemServiceBase.Delete(RLM.Construction.Entities.Item)">
            <summary>
            	public virtualmethod that Deletes a Item object into the datasource using a transaction.
            </summary>
            <param name="entity">Item object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Item object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Item entity = ItemService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ItemService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemServiceBase.Delete(RLM.Construction.Entities.TList{RLM.Construction.Entities.Item})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Item</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Item</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Item.
             <code><![CDATA[
             TList<Item> list = new TList<Item>();
             Item entity = new Item();
             entity.StringProperty = "foo";
             Item entity2 = new Item();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemServiceBase.Delete(RLM.Construction.Entities.ItemKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int64 itemId
            </summary>
            <param name="itemId">Item pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemServiceBase.GetByRepositoryIdFromItemInRepository(System.Int32)">
            <summary>
            	Gets Item objects from the datasource by RepositoryId in the
            	ItemInRepository table. Table Item is related to table Repository
            	through the (M:N) relationship defined in the ItemInRepository table.
            </summary>
            <param name="repositoryId"></param>
            <returns>Returns a typed collection of Item objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemServiceBase.GetByRepositoryIdFromItemInRepository(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Item objects from the datasource by RepositoryId in the
            	ItemInRepository table. Table Item is related to table Repository
            	through the (M:N) relationship defined in the ItemInRepository table.
            </summary>
            <param name="repositoryId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Item objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemServiceBase.DeepLoadByItemId(System.Int64,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Construction.Entities.Item"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <param name="itemId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Item Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.Item"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemServiceBase.DeepLoad(RLM.Construction.Entities.Item)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Item Object</param>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ItemServiceBase.DeepLoad(RLM.Construction.Entities.Item)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Construction.Services.ItemServiceBase.DeepLoad(RLM.Construction.Entities.Item,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ItemServiceBase.DeepLoad(RLM.Construction.Entities.Item)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Item Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.ItemServiceBase.DeepLoad(RLM.Construction.Entities.Item,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Construction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Construction.Entities.Item"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Item Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.ItemServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.Item})">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ItemServiceBase.DeepLoad(RLM.Construction.Entities.Item)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Construction.Services.ItemServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.Item},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ItemServiceBase.DeepLoad(RLM.Construction.Entities.Item)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.ItemServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.Item},System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Construction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Construction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Construction.Entities.Item"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.ItemServiceBase.DeepSave(RLM.Construction.Entities.Item)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Construction.Entities.Item"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Item Object</param>
        </member>
        <member name="M:RLM.Construction.Services.ItemServiceBase.DeepSave(RLM.Construction.Entities.Item,RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Item object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Item Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Item</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Construction.Services.ItemServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.Item})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Item} Object</param>
        </member>
        <member name="M:RLM.Construction.Services.ItemServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.Item},RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Construction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Item Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Construction.Services.ItemServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.ItemService.#ctor">
            <summary>
            Initializes a new instance of the ItemService class.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.RelatedContractService">
            <summary>
             An component type implementation of the 'RelatedContract' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.RelatedContractService.#ctor">
            <summary>
            Initializes a new instance of the RelatedContractService class.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.DomainUtil">
            <summary>
            DomainUtil class.
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.DomainUtil.GetErrorsFromList``1(RLM.Construction.Entities.TList{``0})">
            <summary>
            Aggregates all the errors in a collection
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.DomainUtil.HandleException(System.Exception,System.String)">
            <summary>
            Wraps call to tohe <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicy"/> class which handles all exceptions based on the security policy.
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.DomainUtil.GetDefaultByType(System.Data.DbType)">
            <summary>
            Get a default value for a given data type
            </summary>
            <param name="dataType">Data type for which to get the default value</param>
            <returns>An object of the default value.</returns>
        </member>
        <member name="M:RLM.Construction.Services.DomainUtil.GetDataValue(System.Data.IDataParameter)">
            <summary>
            Get Value or Default Value from an IDataParamater
            Based on DbType
            </summary>
            <param name="p">The IDataParameter instance type is used to determine the default value.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Construction.Services.DomainUtil.DefaultToDBNull(System.Object,System.Data.DbType)">
            <summary>
            Checks to see if the Default Value has been set to the parameter.
            If it's the default value, then create.
            </summary>
            <param name="val">The value we want to check.</param>
            <param name="dbtype">The DbType from wich we take the default value.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Construction.Services.DomainUtil.GetParameterValue``1(System.Data.IDataParameter)">
            <summary>
            Generic method to return the value of a nullable parameter
            </summary>
            <typeparam name="T">Type of value to return</typeparam>
            <param name="parameter">Parameter from which to extract the value</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Construction.Services.DomainUtil.ConvertDataReaderToDataSet(System.Data.IDataReader)">
            <summary>
            Converts a IDataReader to a DataSet.  For use when a custom stored procedure returns an <see cref="T:System.Data.IDataReader"/>, it will
            convert all result sets returned as a DataSet.
            </summary>
            <param name="reader">The reader to convert</param>
            <returns>A dataset with one table per result in the reader</returns>
        </member>
        <member name="T:RLM.Construction.Services.UserInApplicationService">
            <summary>
             An component type implementation of the 'UserInApplication' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.UserInApplicationService.#ctor">
            <summary>
            Initializes a new instance of the UserInApplicationService class.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.ProjectPhaseServiceBase">
            <summary>
             An object representation of the 'ProjectPhase' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ProjectPhase.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Construction.Entities.ProjectPhase"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.ProjectPhaseServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Construction.Entities.ProjectPhase"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.ProjectPhaseServiceBase.CreateProjectPhase(System.Nullable{System.Int32},System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Construction.Entities.ProjectPhase"/> instance.
            </summary>
            <param name="parentProjectPhaseId"></param>
            <param name="projectId"></param>
            <param name="contractId"></param>
            <param name="managerId"></param>
            <param name="currencyUnitId"></param>
            <param name="name"></param>
            <param name="description"></param>
            <param name="designPrice"></param>
            <param name="auctualPrice"></param>
            <param name="isActive"></param>
            <param name="isApprove"></param>
            <param name="isCurrentProjectPhase"></param>
            <param name="status"></param>
            <param name="type">Project phase type: design, built,...</param>
            <param name="fromDate"></param>
            <param name="toDate"></param>
            <param name="realFromDate"></param>
            <param name="realToDate"></param>
            <param name="parentPath">Containt list of parent id: Project:1/ProjectPhase:5/ProjejectPhase:8/...</param>
            <param name="isCollectItemFromChild"></param>
            <param name="isStart"></param>
            <param name="isFinished"></param>
            <param name="isBillable"></param>
            <param name="creationDate"></param>
            <param name="creationUserId"></param>
            <param name="lastModificationDate"></param>
            <param name="lastModificationUserId"></param>
            <param name="exchangeRate"></param>
        </member>
        <member name="M:RLM.Construction.Services.ProjectPhaseServiceBase.GetByProjectId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_ProjectPhase_Project key.
            	FK_ProjectPhase_Project Description: 
            </summary>
            <param name="projectId"></param>
            <returns>Returns a generic collection of ProjectPhase objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ProjectPhaseServiceBase.GetByProjectId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_ProjectPhase_Project key.
            	FK_ProjectPhase_Project Description: 
            </summary>
            <param name="projectId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Construction.Entities.TList`1"/> of <c>ProjectPhase</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ProjectPhaseServiceBase.GetByContractId(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_ProjectPhase_Contract key.
            	FK_ProjectPhase_Contract Description: 
            </summary>
            <param name="contractId"></param>
            <returns>Returns a generic collection of ProjectPhase objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ProjectPhaseServiceBase.GetByContractId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_ProjectPhase_Contract key.
            	FK_ProjectPhase_Contract Description: 
            </summary>
            <param name="contractId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Construction.Entities.TList`1"/> of <c>ProjectPhase</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ProjectPhaseServiceBase.Get(RLM.Construction.Entities.ProjectPhaseKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ProjectPhaseServiceBase.GetByProjectPhaseId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_ProjectPhase index.
            </summary>
            <param name="projectPhaseId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.ProjectPhase"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ProjectPhaseServiceBase.GetByProjectPhaseId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_ProjectPhase index.
            </summary>
            <param name="projectPhaseId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.ProjectPhase"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ProjectPhaseServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Construction.Entities.ProjectPhase"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Construction.Services.ProjectPhaseServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Construction.Entities.ProjectPhase"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Construction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Construction.Services.ProjectPhaseServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProjectPhase</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ProjectPhaseServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProjectPhase</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ProjectPhaseServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Construction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProjectPhase</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ProjectPhaseServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ProjectPhaseServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ProjectPhaseServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ProjectPhase} of <c>ProjectPhase</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ProjectPhaseServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ProjectPhase</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ProjectPhaseServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ProjectPhase</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ProjectPhaseServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ProjectPhase</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ProjectPhaseServiceBase.Insert(RLM.Construction.Entities.ProjectPhase)">
            <summary>
            	public virtualmethod that Inserts a ProjectPhase object into the datasource using a transaction.
            </summary>
            <param name="entity">ProjectPhase object to Insert.</param>
            <remarks>After Inserting into the datasource, the ProjectPhase object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ProjectPhase entity = new ProjectPhase();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ProjectPhaseService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ProjectPhaseServiceBase.Insert(RLM.Construction.Entities.TList{RLM.Construction.Entities.ProjectPhase})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProjectPhase</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ProjectPhase</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ProjectPhase.
             <code><![CDATA[
             TList<ProjectPhase> list = new TList<ProjectPhase>();
             ProjectPhase entity = new ProjectPhase();
             entity.StringProperty = "foo";
             ProjectPhase entity2 = new ProjectPhase();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProjectPhaseService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ProjectPhaseServiceBase.Update(RLM.Construction.Entities.ProjectPhase)">
            <summary>
            	public virtualmethod that Updates a ProjectPhase object into the datasource using a transaction.
            </summary>
            <param name="entity">ProjectPhase object to Update.</param>
            <remarks>After Updateing into the datasource, the ProjectPhase object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ProjectPhase entity = ProjectPhaseService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ProjectPhaseService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ProjectPhaseServiceBase.Update(RLM.Construction.Entities.TList{RLM.Construction.Entities.ProjectPhase})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProjectPhase</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ProjectPhase</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ProjectPhase.
             <code><![CDATA[
             TList<ProjectPhase> list = new TList<ProjectPhase>();
             ProjectPhase entity = new ProjectPhase();
             entity.StringProperty = "foo";
             ProjectPhase entity2 = new ProjectPhase();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProjectPhaseService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ProjectPhaseServiceBase.Save(RLM.Construction.Entities.ProjectPhase)">
            <summary>
            	public virtualmethod that Saves a ProjectPhase object into the datasource using a transaction.
            </summary>
            <param name="entity">ProjectPhase object to Save.</param>
            <remarks>After Saveing into the datasource, the ProjectPhase object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ProjectPhase entity = ProjectPhaseService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ProjectPhaseService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ProjectPhaseServiceBase.Save(RLM.Construction.Entities.TList{RLM.Construction.Entities.ProjectPhase})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProjectPhase</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ProjectPhase</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ProjectPhase.
             <code><![CDATA[
             TList<ProjectPhase> list = new TList<ProjectPhase>();
             ProjectPhase entity = new ProjectPhase();
             entity.StringProperty = "foo";
             ProjectPhase entity2 = new ProjectPhase();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProjectPhaseService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ProjectPhaseServiceBase.Delete(RLM.Construction.Entities.ProjectPhase)">
            <summary>
            	public virtualmethod that Deletes a ProjectPhase object into the datasource using a transaction.
            </summary>
            <param name="entity">ProjectPhase object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ProjectPhase object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ProjectPhase entity = ProjectPhaseService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ProjectPhaseService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ProjectPhaseServiceBase.Delete(RLM.Construction.Entities.TList{RLM.Construction.Entities.ProjectPhase})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProjectPhase</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ProjectPhase</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ProjectPhase.
             <code><![CDATA[
             TList<ProjectPhase> list = new TList<ProjectPhase>();
             ProjectPhase entity = new ProjectPhase();
             entity.StringProperty = "foo";
             ProjectPhase entity2 = new ProjectPhase();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProjectPhaseService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ProjectPhaseServiceBase.Delete(RLM.Construction.Entities.ProjectPhaseKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ProjectPhaseServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 projectPhaseId
            </summary>
            <param name="projectPhaseId">ProjectPhase pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ProjectPhaseServiceBase.DeepLoadByProjectPhaseId(System.Int32,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Construction.Entities.ProjectPhase"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <param name="projectPhaseId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProjectPhase Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.ProjectPhase"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ProjectPhaseServiceBase.DeepLoad(RLM.Construction.Entities.ProjectPhase)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ProjectPhase Object</param>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ProjectPhaseServiceBase.DeepLoad(RLM.Construction.Entities.ProjectPhase)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Construction.Services.ProjectPhaseServiceBase.DeepLoad(RLM.Construction.Entities.ProjectPhase,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ProjectPhaseServiceBase.DeepLoad(RLM.Construction.Entities.ProjectPhase)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ProjectPhase Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.ProjectPhaseServiceBase.DeepLoad(RLM.Construction.Entities.ProjectPhase,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Construction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Construction.Entities.ProjectPhase"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProjectPhase Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.ProjectPhaseServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.ProjectPhase})">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ProjectPhaseServiceBase.DeepLoad(RLM.Construction.Entities.ProjectPhase)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Construction.Services.ProjectPhaseServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.ProjectPhase},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ProjectPhaseServiceBase.DeepLoad(RLM.Construction.Entities.ProjectPhase)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.ProjectPhaseServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.ProjectPhase},System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Construction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Construction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Construction.Entities.ProjectPhase"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.ProjectPhaseServiceBase.DeepSave(RLM.Construction.Entities.ProjectPhase)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Construction.Entities.ProjectPhase"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ProjectPhase Object</param>
        </member>
        <member name="M:RLM.Construction.Services.ProjectPhaseServiceBase.DeepSave(RLM.Construction.Entities.ProjectPhase,RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ProjectPhase object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ProjectPhase Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ProjectPhase</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Construction.Services.ProjectPhaseServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.ProjectPhase})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ProjectPhase} Object</param>
        </member>
        <member name="M:RLM.Construction.Services.ProjectPhaseServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.ProjectPhase},RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Construction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ProjectPhase Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Construction.Services.ProjectPhaseServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.ItemInItemService">
            <summary>
             An component type implementation of the 'ItemInItem' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:RLM.Construction.Services.ItemInItemServiceBase">
            <summary>
             An object representation of the 'ItemInItem' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ItemInItem.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Construction.Entities.ItemInItem"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.ItemInItemServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Construction.Entities.ItemInItem"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.ItemInItemServiceBase.CreateItemInItem(System.Int64,System.Int64,System.Nullable{System.Int32},System.Nullable{System.Double},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Construction.Entities.ItemInItem"/> instance.
            </summary>
            <param name="fromItemId">Detail item id</param>
            <param name="toItemId">master item id</param>
            <param name="unitId"></param>
            <param name="quantity"></param>
            <param name="unitPrice"></param>
            <param name="total"></param>
            <param name="parentPath">Item:2/Item:6</param>
            <param name="creationDate"></param>
            <param name="creationUserId"></param>
            <param name="lastModificationDate"></param>
            <param name="lastModificationUserId"></param>
        </member>
        <member name="M:RLM.Construction.Services.ItemInItemServiceBase.GetByFromItemId(System.Int64)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_ItemInItem_Item key.
            	FK_ItemInItem_Item Description: 
            </summary>
            <param name="fromItemId">Detail item id</param>
            <returns>Returns a generic collection of ItemInItem objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInItemServiceBase.GetByFromItemId(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_ItemInItem_Item key.
            	FK_ItemInItem_Item Description: 
            </summary>
            <param name="fromItemId">Detail item id</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Construction.Entities.TList`1"/> of <c>ItemInItem</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInItemServiceBase.GetByToItemId(System.Int64)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_ItemInItem_Item1 key.
            	FK_ItemInItem_Item1 Description: 
            </summary>
            <param name="toItemId">master item id</param>
            <returns>Returns a generic collection of ItemInItem objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInItemServiceBase.GetByToItemId(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_ItemInItem_Item1 key.
            	FK_ItemInItem_Item1 Description: 
            </summary>
            <param name="toItemId">master item id</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Construction.Entities.TList`1"/> of <c>ItemInItem</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInItemServiceBase.Get(RLM.Construction.Entities.ItemInItemKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInItemServiceBase.GetByItemInItemId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_ItemInItem index.
            </summary>
            <param name="itemInItemId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.ItemInItem"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInItemServiceBase.GetByItemInItemId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_ItemInItem index.
            </summary>
            <param name="itemInItemId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.ItemInItem"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInItemServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Construction.Entities.ItemInItem"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInItemServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Construction.Entities.ItemInItem"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Construction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInItemServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ItemInItem</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInItemServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ItemInItem</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInItemServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Construction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ItemInItem</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInItemServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInItemServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInItemServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ItemInItem} of <c>ItemInItem</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInItemServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ItemInItem</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInItemServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ItemInItem</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInItemServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ItemInItem</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInItemServiceBase.Insert(RLM.Construction.Entities.ItemInItem)">
            <summary>
            	public virtualmethod that Inserts a ItemInItem object into the datasource using a transaction.
            </summary>
            <param name="entity">ItemInItem object to Insert.</param>
            <remarks>After Inserting into the datasource, the ItemInItem object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ItemInItem entity = new ItemInItem();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ItemInItemService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemInItemServiceBase.Insert(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemInItem})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ItemInItem</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ItemInItem</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ItemInItem.
             <code><![CDATA[
             TList<ItemInItem> list = new TList<ItemInItem>();
             ItemInItem entity = new ItemInItem();
             entity.StringProperty = "foo";
             ItemInItem entity2 = new ItemInItem();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemInItemService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemInItemServiceBase.Update(RLM.Construction.Entities.ItemInItem)">
            <summary>
            	public virtualmethod that Updates a ItemInItem object into the datasource using a transaction.
            </summary>
            <param name="entity">ItemInItem object to Update.</param>
            <remarks>After Updateing into the datasource, the ItemInItem object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ItemInItem entity = ItemInItemService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ItemInItemService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemInItemServiceBase.Update(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemInItem})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ItemInItem</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ItemInItem</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ItemInItem.
             <code><![CDATA[
             TList<ItemInItem> list = new TList<ItemInItem>();
             ItemInItem entity = new ItemInItem();
             entity.StringProperty = "foo";
             ItemInItem entity2 = new ItemInItem();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemInItemService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemInItemServiceBase.Save(RLM.Construction.Entities.ItemInItem)">
            <summary>
            	public virtualmethod that Saves a ItemInItem object into the datasource using a transaction.
            </summary>
            <param name="entity">ItemInItem object to Save.</param>
            <remarks>After Saveing into the datasource, the ItemInItem object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ItemInItem entity = ItemInItemService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ItemInItemService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemInItemServiceBase.Save(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemInItem})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ItemInItem</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ItemInItem</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ItemInItem.
             <code><![CDATA[
             TList<ItemInItem> list = new TList<ItemInItem>();
             ItemInItem entity = new ItemInItem();
             entity.StringProperty = "foo";
             ItemInItem entity2 = new ItemInItem();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemInItemService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemInItemServiceBase.Delete(RLM.Construction.Entities.ItemInItem)">
            <summary>
            	public virtualmethod that Deletes a ItemInItem object into the datasource using a transaction.
            </summary>
            <param name="entity">ItemInItem object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ItemInItem object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ItemInItem entity = ItemInItemService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ItemInItemService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemInItemServiceBase.Delete(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemInItem})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ItemInItem</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ItemInItem</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ItemInItem.
             <code><![CDATA[
             TList<ItemInItem> list = new TList<ItemInItem>();
             ItemInItem entity = new ItemInItem();
             entity.StringProperty = "foo";
             ItemInItem entity2 = new ItemInItem();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemInItemService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemInItemServiceBase.Delete(RLM.Construction.Entities.ItemInItemKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInItemServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 itemInItemId
            </summary>
            <param name="itemInItemId">ItemInItem pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInItemServiceBase.DeepLoadByItemInItemId(System.Int32,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Construction.Entities.ItemInItem"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <param name="itemInItemId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ItemInItem Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.ItemInItem"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInItemServiceBase.DeepLoad(RLM.Construction.Entities.ItemInItem)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ItemInItem Object</param>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ItemInItemServiceBase.DeepLoad(RLM.Construction.Entities.ItemInItem)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Construction.Services.ItemInItemServiceBase.DeepLoad(RLM.Construction.Entities.ItemInItem,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ItemInItemServiceBase.DeepLoad(RLM.Construction.Entities.ItemInItem)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ItemInItem Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.ItemInItemServiceBase.DeepLoad(RLM.Construction.Entities.ItemInItem,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Construction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Construction.Entities.ItemInItem"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ItemInItem Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.ItemInItemServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemInItem})">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ItemInItemServiceBase.DeepLoad(RLM.Construction.Entities.ItemInItem)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Construction.Services.ItemInItemServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemInItem},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ItemInItemServiceBase.DeepLoad(RLM.Construction.Entities.ItemInItem)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.ItemInItemServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemInItem},System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Construction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Construction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Construction.Entities.ItemInItem"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.ItemInItemServiceBase.DeepSave(RLM.Construction.Entities.ItemInItem)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Construction.Entities.ItemInItem"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ItemInItem Object</param>
        </member>
        <member name="M:RLM.Construction.Services.ItemInItemServiceBase.DeepSave(RLM.Construction.Entities.ItemInItem,RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ItemInItem object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ItemInItem Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ItemInItem</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Construction.Services.ItemInItemServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemInItem})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ItemInItem} Object</param>
        </member>
        <member name="M:RLM.Construction.Services.ItemInItemServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemInItem},RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Construction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ItemInItem Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Construction.Services.ItemInItemServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.ItemInItemService.#ctor">
            <summary>
            Initializes a new instance of the ItemInItemService class.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.ProcessorState">
            <summary>
            ProcessorState enumeration.
            </summary>
        </member>
        <member name="F:RLM.Construction.Services.ProcessorState.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:RLM.Construction.Services.ProcessorState.Running">
            <summary>
            Running
            </summary>
        </member>
        <member name="F:RLM.Construction.Services.ProcessorState.Stopped">
            <summary>
            Stopped
            </summary>
        </member>
        <member name="F:RLM.Construction.Services.ProcessorState.Completed">
            <summary>
            Completed
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.PartnerService">
            <summary>
             An component type implementation of the 'Partner' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.PartnerService.#ctor">
            <summary>
            Initializes a new instance of the PartnerService class.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.AdvanceRequestServiceBase">
            <summary>
             An object representation of the 'AdvanceRequest' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the AdvanceRequest.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Construction.Entities.AdvanceRequest"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.AdvanceRequestServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Construction.Entities.AdvanceRequest"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.AdvanceRequestServiceBase.CreateAdvanceRequest(System.Nullable{System.Int32},System.Int32,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Construction.Entities.AdvanceRequest"/> instance.
            </summary>
            <param name="contractId"></param>
            <param name="requestContactorId"></param>
            <param name="responseContactorId"></param>
            <param name="requestDate"></param>
            <param name="responseDate"></param>
            <param name="requestAmount"></param>
            <param name="responseAmount"></param>
            <param name="currencyUnitId"></param>
            <param name="requestComment"></param>
            <param name="responseComment"></param>
            <param name="status"></param>
            <param name="type"></param>
            <param name="creationDate"></param>
            <param name="creationUserId"></param>
            <param name="lastModificationDate"></param>
            <param name="lastModifidationUserId"></param>
        </member>
        <member name="M:RLM.Construction.Services.AdvanceRequestServiceBase.Get(RLM.Construction.Entities.AdvanceRequestKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.AdvanceRequestServiceBase.GetByAdvanceRequestId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_AdvanceRequest index.
            </summary>
            <param name="advanceRequestId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.AdvanceRequest"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.AdvanceRequestServiceBase.GetByAdvanceRequestId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_AdvanceRequest index.
            </summary>
            <param name="advanceRequestId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.AdvanceRequest"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.AdvanceRequestServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Construction.Entities.AdvanceRequest"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Construction.Services.AdvanceRequestServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Construction.Entities.AdvanceRequest"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Construction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Construction.Services.AdvanceRequestServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AdvanceRequest</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.AdvanceRequestServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AdvanceRequest</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.AdvanceRequestServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Construction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AdvanceRequest</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.AdvanceRequestServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Construction.Services.AdvanceRequestServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.AdvanceRequestServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{AdvanceRequest} of <c>AdvanceRequest</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.AdvanceRequestServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>AdvanceRequest</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.AdvanceRequestServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>AdvanceRequest</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.AdvanceRequestServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>AdvanceRequest</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.AdvanceRequestServiceBase.Insert(RLM.Construction.Entities.AdvanceRequest)">
            <summary>
            	public virtualmethod that Inserts a AdvanceRequest object into the datasource using a transaction.
            </summary>
            <param name="entity">AdvanceRequest object to Insert.</param>
            <remarks>After Inserting into the datasource, the AdvanceRequest object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            AdvanceRequest entity = new AdvanceRequest();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	AdvanceRequestService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.AdvanceRequestServiceBase.Insert(RLM.Construction.Entities.TList{RLM.Construction.Entities.AdvanceRequest})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AdvanceRequest</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>AdvanceRequest</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of AdvanceRequest.
             <code><![CDATA[
             TList<AdvanceRequest> list = new TList<AdvanceRequest>();
             AdvanceRequest entity = new AdvanceRequest();
             entity.StringProperty = "foo";
             AdvanceRequest entity2 = new AdvanceRequest();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AdvanceRequestService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.AdvanceRequestServiceBase.Update(RLM.Construction.Entities.AdvanceRequest)">
            <summary>
            	public virtualmethod that Updates a AdvanceRequest object into the datasource using a transaction.
            </summary>
            <param name="entity">AdvanceRequest object to Update.</param>
            <remarks>After Updateing into the datasource, the AdvanceRequest object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            AdvanceRequest entity = AdvanceRequestService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	AdvanceRequestService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.AdvanceRequestServiceBase.Update(RLM.Construction.Entities.TList{RLM.Construction.Entities.AdvanceRequest})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AdvanceRequest</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>AdvanceRequest</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of AdvanceRequest.
             <code><![CDATA[
             TList<AdvanceRequest> list = new TList<AdvanceRequest>();
             AdvanceRequest entity = new AdvanceRequest();
             entity.StringProperty = "foo";
             AdvanceRequest entity2 = new AdvanceRequest();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AdvanceRequestService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.AdvanceRequestServiceBase.Save(RLM.Construction.Entities.AdvanceRequest)">
            <summary>
            	public virtualmethod that Saves a AdvanceRequest object into the datasource using a transaction.
            </summary>
            <param name="entity">AdvanceRequest object to Save.</param>
            <remarks>After Saveing into the datasource, the AdvanceRequest object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            AdvanceRequest entity = AdvanceRequestService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	AdvanceRequestService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.AdvanceRequestServiceBase.Save(RLM.Construction.Entities.TList{RLM.Construction.Entities.AdvanceRequest})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AdvanceRequest</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>AdvanceRequest</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of AdvanceRequest.
             <code><![CDATA[
             TList<AdvanceRequest> list = new TList<AdvanceRequest>();
             AdvanceRequest entity = new AdvanceRequest();
             entity.StringProperty = "foo";
             AdvanceRequest entity2 = new AdvanceRequest();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AdvanceRequestService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.AdvanceRequestServiceBase.Delete(RLM.Construction.Entities.AdvanceRequest)">
            <summary>
            	public virtualmethod that Deletes a AdvanceRequest object into the datasource using a transaction.
            </summary>
            <param name="entity">AdvanceRequest object to Delete.</param>
            <remarks>After Deleteing into the datasource, the AdvanceRequest object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            AdvanceRequest entity = AdvanceRequestService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	AdvanceRequestService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.AdvanceRequestServiceBase.Delete(RLM.Construction.Entities.TList{RLM.Construction.Entities.AdvanceRequest})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AdvanceRequest</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>AdvanceRequest</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of AdvanceRequest.
             <code><![CDATA[
             TList<AdvanceRequest> list = new TList<AdvanceRequest>();
             AdvanceRequest entity = new AdvanceRequest();
             entity.StringProperty = "foo";
             AdvanceRequest entity2 = new AdvanceRequest();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AdvanceRequestService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.AdvanceRequestServiceBase.Delete(RLM.Construction.Entities.AdvanceRequestKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.AdvanceRequestServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 advanceRequestId
            </summary>
            <param name="advanceRequestId">AdvanceRequest pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.AdvanceRequestServiceBase.DeepLoadByAdvanceRequestId(System.Int32,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Construction.Entities.AdvanceRequest"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <param name="advanceRequestId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AdvanceRequest Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.AdvanceRequest"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.AdvanceRequestServiceBase.DeepLoad(RLM.Construction.Entities.AdvanceRequest)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">AdvanceRequest Object</param>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.AdvanceRequestServiceBase.DeepLoad(RLM.Construction.Entities.AdvanceRequest)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Construction.Services.AdvanceRequestServiceBase.DeepLoad(RLM.Construction.Entities.AdvanceRequest,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.AdvanceRequestServiceBase.DeepLoad(RLM.Construction.Entities.AdvanceRequest)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">AdvanceRequest Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.AdvanceRequestServiceBase.DeepLoad(RLM.Construction.Entities.AdvanceRequest,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Construction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Construction.Entities.AdvanceRequest"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AdvanceRequest Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.AdvanceRequestServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.AdvanceRequest})">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.AdvanceRequestServiceBase.DeepLoad(RLM.Construction.Entities.AdvanceRequest)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Construction.Services.AdvanceRequestServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.AdvanceRequest},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.AdvanceRequestServiceBase.DeepLoad(RLM.Construction.Entities.AdvanceRequest)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.AdvanceRequestServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.AdvanceRequest},System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Construction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Construction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Construction.Entities.AdvanceRequest"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.AdvanceRequestServiceBase.DeepSave(RLM.Construction.Entities.AdvanceRequest)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Construction.Entities.AdvanceRequest"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">AdvanceRequest Object</param>
        </member>
        <member name="M:RLM.Construction.Services.AdvanceRequestServiceBase.DeepSave(RLM.Construction.Entities.AdvanceRequest,RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the AdvanceRequest object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">AdvanceRequest Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>AdvanceRequest</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Construction.Services.AdvanceRequestServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.AdvanceRequest})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{AdvanceRequest} Object</param>
        </member>
        <member name="M:RLM.Construction.Services.AdvanceRequestServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.AdvanceRequest},RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Construction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">AdvanceRequest Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Construction.Services.AdvanceRequestServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.AdvanceRequestService">
            <summary>
             An component type implementation of the 'AdvanceRequest' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.AdvanceRequestService.#ctor">
            <summary>
            Initializes a new instance of the AdvanceRequestService class.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.UnitConvertorService">
            <summary>
             An component type implementation of the 'UnitConvertor' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.UnitConvertorService.#ctor">
            <summary>
            Initializes a new instance of the UnitConvertorService class.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.ItemIOTicketServiceBase">
            <summary>
             An object representation of the 'ItemIOTicket' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ItemIOTicket.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Construction.Entities.ItemIOTicket"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOTicketServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Construction.Entities.ItemIOTicket"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOTicketServiceBase.CreateItemIOTicket(System.String,System.Nullable{System.Int32},System.Int32,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Double},System.Nullable{System.Decimal},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Construction.Entities.ItemIOTicket"/> instance.
            </summary>
            <param name="ticketId"></param>
            <param name="relatedTicketId"></param>
            <param name="staffId"></param>
            <param name="name"></param>
            <param name="receiver">Is the person who receive or transfer item</param>
            <param name="sender"></param>
            <param name="projectId"></param>
            <param name="projectPhaseId"></param>
            <param name="iODate"></param>
            <param name="taxPercent"></param>
            <param name="totalAmount"></param>
            <param name="unitId"></param>
            <param name="comment"></param>
            <param name="status"></param>
            <param name="iOType"></param>
            <param name="fromRepositoryId"></param>
            <param name="toRepositoryId"></param>
            <param name="fromStaffId"></param>
            <param name="toStaffId"></param>
            <param name="isActive"></param>
            <param name="isNeedApproved"></param>
            <param name="isApproved"></param>
            <param name="approverUserId"></param>
            <param name="approverStaffId"></param>
            <param name="approvedDate"></param>
            <param name="creationDate"></param>
            <param name="creationUserId"></param>
            <param name="lastModificationDate"></param>
            <param name="lastModificationUserId"></param>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOTicketServiceBase.Get(RLM.Construction.Entities.ItemIOTicketKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOTicketServiceBase.GetByIOTicketId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_ItemIOTicket index.
            </summary>
            <param name="iOTicketId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.ItemIOTicket"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOTicketServiceBase.GetByIOTicketId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_ItemIOTicket index.
            </summary>
            <param name="iOTicketId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.ItemIOTicket"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOTicketServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Construction.Entities.ItemIOTicket"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOTicketServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Construction.Entities.ItemIOTicket"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Construction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOTicketServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ItemIOTicket</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOTicketServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ItemIOTicket</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOTicketServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Construction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ItemIOTicket</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOTicketServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOTicketServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOTicketServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ItemIOTicket} of <c>ItemIOTicket</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOTicketServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ItemIOTicket</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOTicketServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ItemIOTicket</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOTicketServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ItemIOTicket</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOTicketServiceBase.Insert(RLM.Construction.Entities.ItemIOTicket)">
            <summary>
            	public virtualmethod that Inserts a ItemIOTicket object into the datasource using a transaction.
            </summary>
            <param name="entity">ItemIOTicket object to Insert.</param>
            <remarks>After Inserting into the datasource, the ItemIOTicket object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ItemIOTicket entity = new ItemIOTicket();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ItemIOTicketService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOTicketServiceBase.Insert(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemIOTicket})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ItemIOTicket</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ItemIOTicket</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ItemIOTicket.
             <code><![CDATA[
             TList<ItemIOTicket> list = new TList<ItemIOTicket>();
             ItemIOTicket entity = new ItemIOTicket();
             entity.StringProperty = "foo";
             ItemIOTicket entity2 = new ItemIOTicket();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemIOTicketService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOTicketServiceBase.Update(RLM.Construction.Entities.ItemIOTicket)">
            <summary>
            	public virtualmethod that Updates a ItemIOTicket object into the datasource using a transaction.
            </summary>
            <param name="entity">ItemIOTicket object to Update.</param>
            <remarks>After Updateing into the datasource, the ItemIOTicket object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ItemIOTicket entity = ItemIOTicketService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ItemIOTicketService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOTicketServiceBase.Update(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemIOTicket})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ItemIOTicket</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ItemIOTicket</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ItemIOTicket.
             <code><![CDATA[
             TList<ItemIOTicket> list = new TList<ItemIOTicket>();
             ItemIOTicket entity = new ItemIOTicket();
             entity.StringProperty = "foo";
             ItemIOTicket entity2 = new ItemIOTicket();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemIOTicketService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOTicketServiceBase.Save(RLM.Construction.Entities.ItemIOTicket)">
            <summary>
            	public virtualmethod that Saves a ItemIOTicket object into the datasource using a transaction.
            </summary>
            <param name="entity">ItemIOTicket object to Save.</param>
            <remarks>After Saveing into the datasource, the ItemIOTicket object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ItemIOTicket entity = ItemIOTicketService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ItemIOTicketService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOTicketServiceBase.Save(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemIOTicket})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ItemIOTicket</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ItemIOTicket</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ItemIOTicket.
             <code><![CDATA[
             TList<ItemIOTicket> list = new TList<ItemIOTicket>();
             ItemIOTicket entity = new ItemIOTicket();
             entity.StringProperty = "foo";
             ItemIOTicket entity2 = new ItemIOTicket();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemIOTicketService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOTicketServiceBase.Delete(RLM.Construction.Entities.ItemIOTicket)">
            <summary>
            	public virtualmethod that Deletes a ItemIOTicket object into the datasource using a transaction.
            </summary>
            <param name="entity">ItemIOTicket object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ItemIOTicket object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ItemIOTicket entity = ItemIOTicketService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ItemIOTicketService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOTicketServiceBase.Delete(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemIOTicket})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ItemIOTicket</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ItemIOTicket</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ItemIOTicket.
             <code><![CDATA[
             TList<ItemIOTicket> list = new TList<ItemIOTicket>();
             ItemIOTicket entity = new ItemIOTicket();
             entity.StringProperty = "foo";
             ItemIOTicket entity2 = new ItemIOTicket();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemIOTicketService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOTicketServiceBase.Delete(RLM.Construction.Entities.ItemIOTicketKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOTicketServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 iOTicketId
            </summary>
            <param name="iOTicketId">ItemIOTicket pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOTicketServiceBase.DeepLoadByIOTicketId(System.Int32,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Construction.Entities.ItemIOTicket"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <param name="iOTicketId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ItemIOTicket Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.ItemIOTicket"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOTicketServiceBase.DeepLoad(RLM.Construction.Entities.ItemIOTicket)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ItemIOTicket Object</param>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ItemIOTicketServiceBase.DeepLoad(RLM.Construction.Entities.ItemIOTicket)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOTicketServiceBase.DeepLoad(RLM.Construction.Entities.ItemIOTicket,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ItemIOTicketServiceBase.DeepLoad(RLM.Construction.Entities.ItemIOTicket)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ItemIOTicket Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOTicketServiceBase.DeepLoad(RLM.Construction.Entities.ItemIOTicket,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Construction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Construction.Entities.ItemIOTicket"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ItemIOTicket Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOTicketServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemIOTicket})">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ItemIOTicketServiceBase.DeepLoad(RLM.Construction.Entities.ItemIOTicket)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOTicketServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemIOTicket},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ItemIOTicketServiceBase.DeepLoad(RLM.Construction.Entities.ItemIOTicket)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOTicketServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemIOTicket},System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Construction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Construction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Construction.Entities.ItemIOTicket"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOTicketServiceBase.DeepSave(RLM.Construction.Entities.ItemIOTicket)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Construction.Entities.ItemIOTicket"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ItemIOTicket Object</param>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOTicketServiceBase.DeepSave(RLM.Construction.Entities.ItemIOTicket,RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ItemIOTicket object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ItemIOTicket Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ItemIOTicket</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOTicketServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemIOTicket})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ItemIOTicket} Object</param>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOTicketServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemIOTicket},RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Construction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ItemIOTicket Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Construction.Services.ItemIOTicketServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.RoleServiceBase">
            <summary>
             An object representation of the 'Role' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Role.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Construction.Entities.Role"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.RoleServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Construction.Entities.Role"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.RoleServiceBase.CreateRole(System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Construction.Entities.Role"/> instance.
            </summary>
            <param name="code"></param>
            <param name="name"></param>
            <param name="isActive"></param>
            <param name="isDeletable"></param>
            <param name="type">Type of roles, example: 1: system roles, 2: permission roles, 3: project roles, 4: department roles, ....</param>
            <param name="creationDate"></param>
            <param name="creationUserId"></param>
            <param name="lastModificationUserId"></param>
            <param name="lastModificationDate"></param>
        </member>
        <member name="M:RLM.Construction.Services.RoleServiceBase.Get(RLM.Construction.Entities.RoleKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RoleServiceBase.GetByRoleId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_Roles index.
            </summary>
            <param name="roleId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.Role"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RoleServiceBase.GetByRoleId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_Roles index.
            </summary>
            <param name="roleId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.Role"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RoleServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Construction.Entities.Role"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Construction.Services.RoleServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Construction.Entities.Role"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Construction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Construction.Services.RoleServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Role</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RoleServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Role</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RoleServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Construction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Role</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RoleServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RoleServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RoleServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Role} of <c>Role</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RoleServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Role</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RoleServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Role</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RoleServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Role</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RoleServiceBase.Insert(RLM.Construction.Entities.Role)">
            <summary>
            	public virtualmethod that Inserts a Role object into the datasource using a transaction.
            </summary>
            <param name="entity">Role object to Insert.</param>
            <remarks>After Inserting into the datasource, the Role object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Role entity = new Role();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	RoleService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.RoleServiceBase.Insert(RLM.Construction.Entities.TList{RLM.Construction.Entities.Role})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Role</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Role</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Role.
             <code><![CDATA[
             TList<Role> list = new TList<Role>();
             Role entity = new Role();
             entity.StringProperty = "foo";
             Role entity2 = new Role();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	RoleService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.RoleServiceBase.Update(RLM.Construction.Entities.Role)">
            <summary>
            	public virtualmethod that Updates a Role object into the datasource using a transaction.
            </summary>
            <param name="entity">Role object to Update.</param>
            <remarks>After Updateing into the datasource, the Role object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Role entity = RoleService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	RoleService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.RoleServiceBase.Update(RLM.Construction.Entities.TList{RLM.Construction.Entities.Role})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Role</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Role</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Role.
             <code><![CDATA[
             TList<Role> list = new TList<Role>();
             Role entity = new Role();
             entity.StringProperty = "foo";
             Role entity2 = new Role();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	RoleService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.RoleServiceBase.Save(RLM.Construction.Entities.Role)">
            <summary>
            	public virtualmethod that Saves a Role object into the datasource using a transaction.
            </summary>
            <param name="entity">Role object to Save.</param>
            <remarks>After Saveing into the datasource, the Role object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Role entity = RoleService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	RoleService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.RoleServiceBase.Save(RLM.Construction.Entities.TList{RLM.Construction.Entities.Role})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Role</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Role</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Role.
             <code><![CDATA[
             TList<Role> list = new TList<Role>();
             Role entity = new Role();
             entity.StringProperty = "foo";
             Role entity2 = new Role();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	RoleService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.RoleServiceBase.Delete(RLM.Construction.Entities.Role)">
            <summary>
            	public virtualmethod that Deletes a Role object into the datasource using a transaction.
            </summary>
            <param name="entity">Role object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Role object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Role entity = RoleService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	RoleService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.RoleServiceBase.Delete(RLM.Construction.Entities.TList{RLM.Construction.Entities.Role})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Role</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Role</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Role.
             <code><![CDATA[
             TList<Role> list = new TList<Role>();
             Role entity = new Role();
             entity.StringProperty = "foo";
             Role entity2 = new Role();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	RoleService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.RoleServiceBase.Delete(RLM.Construction.Entities.RoleKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RoleServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 roleId
            </summary>
            <param name="roleId">Role pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RoleServiceBase.DeepLoadByRoleId(System.Int32,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Construction.Entities.Role"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <param name="roleId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Role Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.Role"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.RoleServiceBase.DeepLoad(RLM.Construction.Entities.Role)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Role Object</param>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.RoleServiceBase.DeepLoad(RLM.Construction.Entities.Role)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Construction.Services.RoleServiceBase.DeepLoad(RLM.Construction.Entities.Role,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.RoleServiceBase.DeepLoad(RLM.Construction.Entities.Role)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Role Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.RoleServiceBase.DeepLoad(RLM.Construction.Entities.Role,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Construction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Construction.Entities.Role"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Role Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.RoleServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.Role})">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.RoleServiceBase.DeepLoad(RLM.Construction.Entities.Role)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Construction.Services.RoleServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.Role},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.RoleServiceBase.DeepLoad(RLM.Construction.Entities.Role)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.RoleServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.Role},System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Construction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Construction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Construction.Entities.Role"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.RoleServiceBase.DeepSave(RLM.Construction.Entities.Role)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Construction.Entities.Role"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Role Object</param>
        </member>
        <member name="M:RLM.Construction.Services.RoleServiceBase.DeepSave(RLM.Construction.Entities.Role,RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Role object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Role Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Role</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Construction.Services.RoleServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.Role})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Role} Object</param>
        </member>
        <member name="M:RLM.Construction.Services.RoleServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.Role},RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Construction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Role Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Construction.Services.RoleServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.ItemInRepositoryServiceBase">
            <summary>
             An object representation of the 'ItemInRepository' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ItemInRepository.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Construction.Entities.ItemInRepository"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.ItemInRepositoryServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Construction.Entities.ItemInRepository"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.ItemInRepositoryServiceBase.CreateItemInRepository(System.Int32,System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Construction.Entities.ItemInRepository"/> instance.
            </summary>
            <param name="repositoryId"></param>
            <param name="itemId"></param>
            <param name="priceUnitId"></param>
            <param name="totalQuantity"></param>
            <param name="availabelQuantity"></param>
            <param name="reserveQuantity"></param>
            <param name="returnQuantity"></param>
            <param name="adjustQuantity">the total number of adjust of this item in this repository</param>
            <param name="isActive"></param>
            <param name="isDeletable"></param>
            <param name="status">the same as item.status</param>
            <param name="priority"></param>
            <param name="baseUnitId"></param>
            <param name="creationDate"></param>
            <param name="creationUserId"></param>
            <param name="lastModificationDate"></param>
            <param name="lastModificationUserId"></param>
        </member>
        <member name="M:RLM.Construction.Services.ItemInRepositoryServiceBase.GetByItemId(System.Int64)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_ItemInRepositories_Items key.
            	FK_ItemInRepositories_Items Description: 
            </summary>
            <param name="itemId"></param>
            <returns>Returns a generic collection of ItemInRepository objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInRepositoryServiceBase.GetByItemId(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_ItemInRepositories_Items key.
            	FK_ItemInRepositories_Items Description: 
            </summary>
            <param name="itemId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Construction.Entities.TList`1"/> of <c>ItemInRepository</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInRepositoryServiceBase.GetByRepositoryId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_ItemInRepositories_Repositories key.
            	FK_ItemInRepositories_Repositories Description: 
            </summary>
            <param name="repositoryId"></param>
            <returns>Returns a generic collection of ItemInRepository objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInRepositoryServiceBase.GetByRepositoryId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_ItemInRepositories_Repositories key.
            	FK_ItemInRepositories_Repositories Description: 
            </summary>
            <param name="repositoryId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Construction.Entities.TList`1"/> of <c>ItemInRepository</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInRepositoryServiceBase.GetByPriceUnitId(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_ItemInRepository_Unit key.
            	FK_ItemInRepository_Unit Description: 
            </summary>
            <param name="priceUnitId"></param>
            <returns>Returns a generic collection of ItemInRepository objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInRepositoryServiceBase.GetByPriceUnitId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the FK_ItemInRepository_Unit key.
            	FK_ItemInRepository_Unit Description: 
            </summary>
            <param name="priceUnitId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Construction.Entities.TList`1"/> of <c>ItemInRepository</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInRepositoryServiceBase.Get(RLM.Construction.Entities.ItemInRepositoryKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInRepositoryServiceBase.GetByRepositoryIdItemId(System.Int32,System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_ItemInRepositories index.
            </summary>
            <param name="repositoryId"></param>
            <param name="itemId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.ItemInRepository"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInRepositoryServiceBase.GetByRepositoryIdItemId(System.Int32,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_ItemInRepositories index.
            </summary>
            <param name="repositoryId"></param>
            <param name="itemId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.ItemInRepository"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInRepositoryServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Construction.Entities.ItemInRepository"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInRepositoryServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Construction.Entities.ItemInRepository"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Construction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInRepositoryServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ItemInRepository</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInRepositoryServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ItemInRepository</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInRepositoryServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Construction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ItemInRepository</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInRepositoryServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInRepositoryServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInRepositoryServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ItemInRepository} of <c>ItemInRepository</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInRepositoryServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ItemInRepository</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInRepositoryServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ItemInRepository</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInRepositoryServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ItemInRepository</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInRepositoryServiceBase.Insert(RLM.Construction.Entities.ItemInRepository)">
            <summary>
            	public virtualmethod that Inserts a ItemInRepository object into the datasource using a transaction.
            </summary>
            <param name="entity">ItemInRepository object to Insert.</param>
            <remarks>After Inserting into the datasource, the ItemInRepository object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ItemInRepository entity = new ItemInRepository();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ItemInRepositoryService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemInRepositoryServiceBase.Insert(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemInRepository})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ItemInRepository</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ItemInRepository</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ItemInRepository.
             <code><![CDATA[
             TList<ItemInRepository> list = new TList<ItemInRepository>();
             ItemInRepository entity = new ItemInRepository();
             entity.StringProperty = "foo";
             ItemInRepository entity2 = new ItemInRepository();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemInRepositoryService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemInRepositoryServiceBase.Update(RLM.Construction.Entities.ItemInRepository)">
            <summary>
            	public virtualmethod that Updates a ItemInRepository object into the datasource using a transaction.
            </summary>
            <param name="entity">ItemInRepository object to Update.</param>
            <remarks>After Updateing into the datasource, the ItemInRepository object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ItemInRepository entity = ItemInRepositoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ItemInRepositoryService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemInRepositoryServiceBase.Update(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemInRepository})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ItemInRepository</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ItemInRepository</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ItemInRepository.
             <code><![CDATA[
             TList<ItemInRepository> list = new TList<ItemInRepository>();
             ItemInRepository entity = new ItemInRepository();
             entity.StringProperty = "foo";
             ItemInRepository entity2 = new ItemInRepository();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemInRepositoryService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemInRepositoryServiceBase.Save(RLM.Construction.Entities.ItemInRepository)">
            <summary>
            	public virtualmethod that Saves a ItemInRepository object into the datasource using a transaction.
            </summary>
            <param name="entity">ItemInRepository object to Save.</param>
            <remarks>After Saveing into the datasource, the ItemInRepository object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ItemInRepository entity = ItemInRepositoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ItemInRepositoryService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemInRepositoryServiceBase.Save(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemInRepository})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ItemInRepository</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ItemInRepository</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ItemInRepository.
             <code><![CDATA[
             TList<ItemInRepository> list = new TList<ItemInRepository>();
             ItemInRepository entity = new ItemInRepository();
             entity.StringProperty = "foo";
             ItemInRepository entity2 = new ItemInRepository();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemInRepositoryService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemInRepositoryServiceBase.Delete(RLM.Construction.Entities.ItemInRepository)">
            <summary>
            	public virtualmethod that Deletes a ItemInRepository object into the datasource using a transaction.
            </summary>
            <param name="entity">ItemInRepository object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ItemInRepository object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ItemInRepository entity = ItemInRepositoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ItemInRepositoryService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemInRepositoryServiceBase.Delete(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemInRepository})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ItemInRepository</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ItemInRepository</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ItemInRepository.
             <code><![CDATA[
             TList<ItemInRepository> list = new TList<ItemInRepository>();
             ItemInRepository entity = new ItemInRepository();
             entity.StringProperty = "foo";
             ItemInRepository entity2 = new ItemInRepository();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemInRepositoryService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.ItemInRepositoryServiceBase.Delete(RLM.Construction.Entities.ItemInRepositoryKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInRepositoryServiceBase.Delete(System.Int32,System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 repositoryId, System.Int64 itemId
            </summary>
            <param name="repositoryId">ItemInRepository pk id.</param>
            <param name="itemId">ItemInRepository pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInRepositoryServiceBase.DeepLoadByRepositoryIdItemId(System.Int32,System.Int64,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Construction.Entities.ItemInRepository"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <param name="repositoryId"></param>
            <param name="itemId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ItemInRepository Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.ItemInRepository"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.ItemInRepositoryServiceBase.DeepLoad(RLM.Construction.Entities.ItemInRepository)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ItemInRepository Object</param>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ItemInRepositoryServiceBase.DeepLoad(RLM.Construction.Entities.ItemInRepository)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Construction.Services.ItemInRepositoryServiceBase.DeepLoad(RLM.Construction.Entities.ItemInRepository,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ItemInRepositoryServiceBase.DeepLoad(RLM.Construction.Entities.ItemInRepository)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ItemInRepository Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.ItemInRepositoryServiceBase.DeepLoad(RLM.Construction.Entities.ItemInRepository,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Construction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Construction.Entities.ItemInRepository"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ItemInRepository Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.ItemInRepositoryServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemInRepository})">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ItemInRepositoryServiceBase.DeepLoad(RLM.Construction.Entities.ItemInRepository)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Construction.Services.ItemInRepositoryServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemInRepository},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.ItemInRepositoryServiceBase.DeepLoad(RLM.Construction.Entities.ItemInRepository)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.ItemInRepositoryServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemInRepository},System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Construction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Construction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Construction.Entities.ItemInRepository"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.ItemInRepositoryServiceBase.DeepSave(RLM.Construction.Entities.ItemInRepository)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Construction.Entities.ItemInRepository"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ItemInRepository Object</param>
        </member>
        <member name="M:RLM.Construction.Services.ItemInRepositoryServiceBase.DeepSave(RLM.Construction.Entities.ItemInRepository,RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ItemInRepository object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ItemInRepository Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ItemInRepository</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Construction.Services.ItemInRepositoryServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemInRepository})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ItemInRepository} Object</param>
        </member>
        <member name="M:RLM.Construction.Services.ItemInRepositoryServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.ItemInRepository},RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Construction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ItemInRepository Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Construction.Services.ItemInRepositoryServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.ItemInRepositoryService">
            <summary>
             An component type implementation of the 'ItemInRepository' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.ItemInRepositoryService.#ctor">
            <summary>
            Initializes a new instance of the ItemInRepositoryService class.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.GroupServiceBase">
            <summary>
             An object representation of the 'Group' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Group.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Construction.Entities.Group"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.GroupServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Construction.Entities.Group"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.GroupServiceBase.CreateGroup(System.Nullable{System.Int32},System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Construction.Entities.Group"/> instance.
            </summary>
            <param name="parentGroupId"></param>
            <param name="code"></param>
            <param name="name"></param>
            <param name="description"></param>
            <param name="type">Type of group, example: 1: contract group, 2: customer group, cong doan</param>
            <param name="isActive"></param>
            <param name="isDeletable"></param>
            <param name="priority"></param>
            <param name="creationUserId"></param>
            <param name="creationDate"></param>
            <param name="lastModificationDate"></param>
            <param name="lastModificationUserId"></param>
        </member>
        <member name="M:RLM.Construction.Services.GroupServiceBase.Get(RLM.Construction.Entities.GroupKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.GroupServiceBase.GetByGroupId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_Groups index.
            </summary>
            <param name="groupId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.Group"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.GroupServiceBase.GetByGroupId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Construction.Entities.TList`1"/> from the datasource based on the primary key PK_Groups index.
            </summary>
            <param name="groupId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.Group"/> class.</returns>
        </member>
        <member name="M:RLM.Construction.Services.GroupServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Construction.Entities.Group"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Construction.Services.GroupServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Construction.Entities.Group"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Construction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Construction.Services.GroupServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Group</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.GroupServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Construction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Group</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.GroupServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Construction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Group</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.GroupServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Construction.Services.GroupServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.GroupServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Group} of <c>Group</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.GroupServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Group</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.GroupServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Group</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.GroupServiceBase.Find(RLM.Construction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Construction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Group</c> objects.</returns>
        </member>
        <member name="M:RLM.Construction.Services.GroupServiceBase.Insert(RLM.Construction.Entities.Group)">
            <summary>
            	public virtualmethod that Inserts a Group object into the datasource using a transaction.
            </summary>
            <param name="entity">Group object to Insert.</param>
            <remarks>After Inserting into the datasource, the Group object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Group entity = new Group();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	GroupService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.GroupServiceBase.Insert(RLM.Construction.Entities.TList{RLM.Construction.Entities.Group})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Group</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Group</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Group.
             <code><![CDATA[
             TList<Group> list = new TList<Group>();
             Group entity = new Group();
             entity.StringProperty = "foo";
             Group entity2 = new Group();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	GroupService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.GroupServiceBase.Update(RLM.Construction.Entities.Group)">
            <summary>
            	public virtualmethod that Updates a Group object into the datasource using a transaction.
            </summary>
            <param name="entity">Group object to Update.</param>
            <remarks>After Updateing into the datasource, the Group object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Group entity = GroupService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	GroupService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.GroupServiceBase.Update(RLM.Construction.Entities.TList{RLM.Construction.Entities.Group})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Group</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Group</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Group.
             <code><![CDATA[
             TList<Group> list = new TList<Group>();
             Group entity = new Group();
             entity.StringProperty = "foo";
             Group entity2 = new Group();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	GroupService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.GroupServiceBase.Save(RLM.Construction.Entities.Group)">
            <summary>
            	public virtualmethod that Saves a Group object into the datasource using a transaction.
            </summary>
            <param name="entity">Group object to Save.</param>
            <remarks>After Saveing into the datasource, the Group object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Group entity = GroupService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	GroupService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.GroupServiceBase.Save(RLM.Construction.Entities.TList{RLM.Construction.Entities.Group})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Group</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Group</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Group.
             <code><![CDATA[
             TList<Group> list = new TList<Group>();
             Group entity = new Group();
             entity.StringProperty = "foo";
             Group entity2 = new Group();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	GroupService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.GroupServiceBase.Delete(RLM.Construction.Entities.Group)">
            <summary>
            	public virtualmethod that Deletes a Group object into the datasource using a transaction.
            </summary>
            <param name="entity">Group object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Group object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Group entity = GroupService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	GroupService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Construction.Services.GroupServiceBase.Delete(RLM.Construction.Entities.TList{RLM.Construction.Entities.Group})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Construction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Group</c> objects in a <see cref="T:RLM.Construction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Group</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Group.
             <code><![CDATA[
             TList<Group> list = new TList<Group>();
             Group entity = new Group();
             entity.StringProperty = "foo";
             Group entity2 = new Group();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	GroupService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Construction.Services.GroupServiceBase.Delete(RLM.Construction.Entities.GroupKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.GroupServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 groupId
            </summary>
            <param name="groupId">Group pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.GroupServiceBase.DeepLoadByGroupId(System.Int32,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Construction.Entities.Group"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <param name="groupId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Group Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Construction.Entities.Group"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Construction.Services.GroupServiceBase.DeepLoad(RLM.Construction.Entities.Group)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Group Object</param>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.GroupServiceBase.DeepLoad(RLM.Construction.Entities.Group)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Construction.Services.GroupServiceBase.DeepLoad(RLM.Construction.Entities.Group,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.GroupServiceBase.DeepLoad(RLM.Construction.Entities.Group)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Group Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.GroupServiceBase.DeepLoad(RLM.Construction.Entities.Group,System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Construction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Construction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Construction.Entities.Group"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Group Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.GroupServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.Group})">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.GroupServiceBase.DeepLoad(RLM.Construction.Entities.Group)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Construction.Services.GroupServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.Group},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Construction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Construction.Services.GroupServiceBase.DeepLoad(RLM.Construction.Entities.Group)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Construction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Construction.Services.GroupServiceBase.DeepLoad(RLM.Construction.Entities.TList{RLM.Construction.Entities.Group},System.Boolean,RLM.Construction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Construction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Construction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Construction.Entities.Group"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Construction.Services.GroupServiceBase.DeepSave(RLM.Construction.Entities.Group)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Construction.Entities.Group"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Group Object</param>
        </member>
        <member name="M:RLM.Construction.Services.GroupServiceBase.DeepSave(RLM.Construction.Entities.Group,RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Group object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Group Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Group</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Construction.Services.GroupServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.Group})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Construction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Group} Object</param>
        </member>
        <member name="M:RLM.Construction.Services.GroupServiceBase.DeepSave(RLM.Construction.Entities.TList{RLM.Construction.Entities.Group},RLM.Construction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Construction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Construction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Group Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Construction.Services.GroupServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.AppConfigService">
            <summary>
             An component type implementation of the 'AppConfig' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.AppConfigService.#ctor">
            <summary>
            Initializes a new instance of the AppConfigService class.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.ProcessStartingHandler">
            <summary>
            ProcessStartingHandler
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:RLM.Construction.Services.ProcessEndedHandler">
            <summary>
            ProcessEndedHandler
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:RLM.Construction.Services.ProcessorEventArgs">
            <summary>
            ProcessorEventArgs
            </summary>
        </member>
        <member name="M:RLM.Construction.Services.ProcessorEventArgs.#ctor(RLM.Construction.Services.ProcessorBase)">
            <summary>
            Initializes a new instance of the ProcessorEventArgs class.
            </summary>
            <param name="processor"></param>
        </member>
        <member name="P:RLM.Construction.Services.ProcessorEventArgs.Processor">
            <summary>
            Gets or sets the processor.
            </summary>
            <value>The processor.</value>
        </member>
        <member name="T:RLM.Construction.Services.RoleService">
            <summary>
             An component type implementation of the 'Role' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.RoleService.#ctor">
            <summary>
            Initializes a new instance of the RoleService class.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.ContractService">
            <summary>
             An component type implementation of the 'Contract' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.ContractService.#ctor">
            <summary>
            Initializes a new instance of the ContractService class.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.TaskMemberService">
            <summary>
             An component type implementation of the 'TaskMember' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.TaskMemberService.#ctor">
            <summary>
            Initializes a new instance of the TaskMemberService class.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.ResourceDataService">
            <summary>
             An component type implementation of the 'ResourceData' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.ResourceDataService.#ctor">
            <summary>
            Initializes a new instance of the ResourceDataService class.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.ProjectPhaseService">
            <summary>
             An component type implementation of the 'ProjectPhase' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.ProjectPhaseService.#ctor">
            <summary>
            Initializes a new instance of the ProjectPhaseService class.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.UnitService">
            <summary>
             An component type implementation of the 'Unit' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.UnitService.#ctor">
            <summary>
            Initializes a new instance of the UnitService class.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.ItemIOTicketService">
            <summary>
             An component type implementation of the 'ItemIOTicket' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.ItemIOTicketService.#ctor">
            <summary>
            Initializes a new instance of the ItemIOTicketService class.
            </summary>
        </member>
        <member name="T:RLM.Construction.Services.GroupService">
            <summary>
             An component type implementation of the 'Group' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:RLM.Construction.Services.GroupService.#ctor">
            <summary>
            Initializes a new instance of the GroupService class.
            </summary>
        </member>
    </members>
</doc>
