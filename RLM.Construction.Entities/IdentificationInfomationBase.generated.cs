	
/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : Saturday, January 15, 2011
	Important: Do not modify this file. Edit the file IdentificationInfomation.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace RLM.Construction.Entities
{
	#region IdentificationInfomationEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="IdentificationInfomation"/> object.
	/// </remarks>
	public class IdentificationInfomationEventArgs : System.EventArgs
	{
		private IdentificationInfomationColumn column;
		private object value;
		
		
		///<summary>
		/// Initalizes a new Instance of the IdentificationInfomationEventArgs class.
		///</summary>
		public IdentificationInfomationEventArgs(IdentificationInfomationColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the IdentificationInfomationEventArgs class.
		///</summary>
		public IdentificationInfomationEventArgs(IdentificationInfomationColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		
		///<summary>
		/// The IdentificationInfomationColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="IdentificationInfomationColumn" />
		public IdentificationInfomationColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	
	///<summary>
	/// Define a delegate for all IdentificationInfomation related events.
	///</summary>
	public delegate void IdentificationInfomationEventHandler(object sender, IdentificationInfomationEventArgs e);
	
	///<summary>
	/// An object representation of the 'IdentificationInfomation' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	//[ToolboxItem(typeof(IdentificationInfomation))]
	public abstract partial class IdentificationInfomationBase : EntityBase, IEntityId<IdentificationInfomationKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		/// 	Old the inner data of the entity.
		/// </summary>
		private IdentificationInfomationEntityData entityData;
		
		// <summary>
		// 	Old the original data of the entity.
		// </summary>
		//IdentificationInfomationEntityData originalData;
		
		/// <summary>
		/// 	Old a backup of the inner data of the entity.
		/// </summary>
		private IdentificationInfomationEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		[NonSerialized]
		private TList<IdentificationInfomation> parentCollection;
		private bool inTxn = false;

		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event IdentificationInfomationEventHandler ColumnChanging;
		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event IdentificationInfomationEventHandler ColumnChanged;		
		#endregion "Variable Declarations"
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="IdentificationInfomationBase"/> instance.
		///</summary>
		public IdentificationInfomationBase()
		{
			this.entityData = new IdentificationInfomationEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="IdentificationInfomationBase"/> instance.
		///</summary>
		///<param name="identificationInfomationStaffId"></param>
		///<param name="identificationInfomationInfoType">1: CMND, 2: bang lai xe, ...</param>
		///<param name="identificationInfomationCountryId"></param>
		///<param name="identificationInfomationDistrictId"></param>
		///<param name="identificationInfomationExpiredDate"></param>
		///<param name="identificationInfomationNumber"></param>
		///<param name="identificationInfomationIssuedProvinceId"></param>
		///<param name="identificationInfomationIssuedDate"></param>
		///<param name="identificationInfomationIssuedPersonName"></param>
		///<param name="identificationInfomationComment"></param>
		///<param name="identificationInfomationCreationDate"></param>
		///<param name="identificationInfomationCreationUserId"></param>
		///<param name="identificationInfomationLastModificationDate"></param>
		///<param name="identificationInfomationLastModificationUserId"></param>
		public IdentificationInfomationBase(System.Int32 identificationInfomationStaffId, System.Int32 identificationInfomationInfoType, 
			System.Int32? identificationInfomationCountryId, System.Int32? identificationInfomationDistrictId, System.DateTime? identificationInfomationExpiredDate, 
			System.String identificationInfomationNumber, System.Int32? identificationInfomationIssuedProvinceId, System.DateTime? identificationInfomationIssuedDate, 
			System.String identificationInfomationIssuedPersonName, System.String identificationInfomationComment, System.DateTime? identificationInfomationCreationDate, 
			System.Int32? identificationInfomationCreationUserId, System.DateTime? identificationInfomationLastModificationDate, System.Int32? identificationInfomationLastModificationUserId)
		{
			this.entityData = new IdentificationInfomationEntityData();
			this.backupData = null;

			this.StaffId = identificationInfomationStaffId;
			this.InfoType = identificationInfomationInfoType;
			this.CountryId = identificationInfomationCountryId;
			this.DistrictId = identificationInfomationDistrictId;
			this.ExpiredDate = identificationInfomationExpiredDate;
			this.Number = identificationInfomationNumber;
			this.IssuedProvinceId = identificationInfomationIssuedProvinceId;
			this.IssuedDate = identificationInfomationIssuedDate;
			this.IssuedPersonName = identificationInfomationIssuedPersonName;
			this.Comment = identificationInfomationComment;
			this.CreationDate = identificationInfomationCreationDate;
			this.CreationUserId = identificationInfomationCreationUserId;
			this.LastModificationDate = identificationInfomationLastModificationDate;
			this.LastModificationUserId = identificationInfomationLastModificationUserId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="IdentificationInfomation"/> instance.
		///</summary>
		///<param name="identificationInfomationStaffId"></param>
		///<param name="identificationInfomationInfoType">1: CMND, 2: bang lai xe, ...</param>
		///<param name="identificationInfomationCountryId"></param>
		///<param name="identificationInfomationDistrictId"></param>
		///<param name="identificationInfomationExpiredDate"></param>
		///<param name="identificationInfomationNumber"></param>
		///<param name="identificationInfomationIssuedProvinceId"></param>
		///<param name="identificationInfomationIssuedDate"></param>
		///<param name="identificationInfomationIssuedPersonName"></param>
		///<param name="identificationInfomationComment"></param>
		///<param name="identificationInfomationCreationDate"></param>
		///<param name="identificationInfomationCreationUserId"></param>
		///<param name="identificationInfomationLastModificationDate"></param>
		///<param name="identificationInfomationLastModificationUserId"></param>
		public static IdentificationInfomation CreateIdentificationInfomation(System.Int32 identificationInfomationStaffId, System.Int32 identificationInfomationInfoType, 
			System.Int32? identificationInfomationCountryId, System.Int32? identificationInfomationDistrictId, System.DateTime? identificationInfomationExpiredDate, 
			System.String identificationInfomationNumber, System.Int32? identificationInfomationIssuedProvinceId, System.DateTime? identificationInfomationIssuedDate, 
			System.String identificationInfomationIssuedPersonName, System.String identificationInfomationComment, System.DateTime? identificationInfomationCreationDate, 
			System.Int32? identificationInfomationCreationUserId, System.DateTime? identificationInfomationLastModificationDate, System.Int32? identificationInfomationLastModificationUserId)
		{
			IdentificationInfomation newIdentificationInfomation = new IdentificationInfomation();
			newIdentificationInfomation.StaffId = identificationInfomationStaffId;
			newIdentificationInfomation.InfoType = identificationInfomationInfoType;
			newIdentificationInfomation.CountryId = identificationInfomationCountryId;
			newIdentificationInfomation.DistrictId = identificationInfomationDistrictId;
			newIdentificationInfomation.ExpiredDate = identificationInfomationExpiredDate;
			newIdentificationInfomation.Number = identificationInfomationNumber;
			newIdentificationInfomation.IssuedProvinceId = identificationInfomationIssuedProvinceId;
			newIdentificationInfomation.IssuedDate = identificationInfomationIssuedDate;
			newIdentificationInfomation.IssuedPersonName = identificationInfomationIssuedPersonName;
			newIdentificationInfomation.Comment = identificationInfomationComment;
			newIdentificationInfomation.CreationDate = identificationInfomationCreationDate;
			newIdentificationInfomation.CreationUserId = identificationInfomationCreationUserId;
			newIdentificationInfomation.LastModificationDate = identificationInfomationLastModificationDate;
			newIdentificationInfomation.LastModificationUserId = identificationInfomationLastModificationUserId;
			return newIdentificationInfomation;
		}
				
		#endregion Constructors
		
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="IdentificationInfomationColumn"/> which has raised the event.</param>
		public void OnColumnChanging(IdentificationInfomationColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="IdentificationInfomationColumn"/> which has raised the event.</param>
		public void OnColumnChanged(IdentificationInfomationColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="IdentificationInfomationColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(IdentificationInfomationColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added)
				EntityManager.StopTracking(EntityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				IdentificationInfomationEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new IdentificationInfomationEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="IdentificationInfomationColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(IdentificationInfomationColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				IdentificationInfomationEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new IdentificationInfomationEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
				
		#region Properties	
				
		/// <summary>
		/// 	Gets or sets the IdentificationInfomationId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 IdentificationInfomationId
		{
			get
			{
				return this.entityData.IdentificationInfomationId; 
			}
			
			set
			{
				if (this.entityData.IdentificationInfomationId == value)
					return;
					
					
				OnColumnChanging(IdentificationInfomationColumn.IdentificationInfomationId, this.entityData.IdentificationInfomationId);
				this.entityData.IdentificationInfomationId = value;
				this.EntityId.IdentificationInfomationId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(IdentificationInfomationColumn.IdentificationInfomationId, this.entityData.IdentificationInfomationId);
				OnPropertyChanged("IdentificationInfomationId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StaffId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 StaffId
		{
			get
			{
				return this.entityData.StaffId; 
			}
			
			set
			{
				if (this.entityData.StaffId == value)
					return;
					
					
				OnColumnChanging(IdentificationInfomationColumn.StaffId, this.entityData.StaffId);
				this.entityData.StaffId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(IdentificationInfomationColumn.StaffId, this.entityData.StaffId);
				OnPropertyChanged("StaffId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the InfoType property. 
		///		1: CMND, 2: bang lai xe, ...
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute("1: CMND, 2: bang lai xe, ..."), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 InfoType
		{
			get
			{
				return this.entityData.InfoType; 
			}
			
			set
			{
				if (this.entityData.InfoType == value)
					return;
					
					
				OnColumnChanging(IdentificationInfomationColumn.InfoType, this.entityData.InfoType);
				this.entityData.InfoType = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(IdentificationInfomationColumn.InfoType, this.entityData.InfoType);
				OnPropertyChanged("InfoType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CountryId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCountryIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CountryId
		{
			get
			{
				return this.entityData.CountryId; 
			}
			
			set
			{
				if (this.entityData.CountryId == value)
					return;
					
					
				OnColumnChanging(IdentificationInfomationColumn.CountryId, this.entityData.CountryId);
				this.entityData.CountryId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(IdentificationInfomationColumn.CountryId, this.entityData.CountryId);
				OnPropertyChanged("CountryId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DistrictId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsDistrictIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? DistrictId
		{
			get
			{
				return this.entityData.DistrictId; 
			}
			
			set
			{
				if (this.entityData.DistrictId == value)
					return;
					
					
				OnColumnChanging(IdentificationInfomationColumn.DistrictId, this.entityData.DistrictId);
				this.entityData.DistrictId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(IdentificationInfomationColumn.DistrictId, this.entityData.DistrictId);
				OnPropertyChanged("DistrictId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExpiredDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsExpiredDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ExpiredDate
		{
			get
			{
				return this.entityData.ExpiredDate; 
			}
			
			set
			{
				if (this.entityData.ExpiredDate == value)
					return;
					
					
				OnColumnChanging(IdentificationInfomationColumn.ExpiredDate, this.entityData.ExpiredDate);
				this.entityData.ExpiredDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(IdentificationInfomationColumn.ExpiredDate, this.entityData.ExpiredDate);
				OnPropertyChanged("ExpiredDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Number property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String Number
		{
			get
			{
				return this.entityData.Number; 
			}
			
			set
			{
				if (this.entityData.Number == value)
					return;
					
					
				OnColumnChanging(IdentificationInfomationColumn.Number, this.entityData.Number);
				this.entityData.Number = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(IdentificationInfomationColumn.Number, this.entityData.Number);
				OnPropertyChanged("Number");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IssuedProvinceId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsIssuedProvinceIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? IssuedProvinceId
		{
			get
			{
				return this.entityData.IssuedProvinceId; 
			}
			
			set
			{
				if (this.entityData.IssuedProvinceId == value)
					return;
					
					
				OnColumnChanging(IdentificationInfomationColumn.IssuedProvinceId, this.entityData.IssuedProvinceId);
				this.entityData.IssuedProvinceId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(IdentificationInfomationColumn.IssuedProvinceId, this.entityData.IssuedProvinceId);
				OnPropertyChanged("IssuedProvinceId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IssuedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsIssuedDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? IssuedDate
		{
			get
			{
				return this.entityData.IssuedDate; 
			}
			
			set
			{
				if (this.entityData.IssuedDate == value)
					return;
					
					
				OnColumnChanging(IdentificationInfomationColumn.IssuedDate, this.entityData.IssuedDate);
				this.entityData.IssuedDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(IdentificationInfomationColumn.IssuedDate, this.entityData.IssuedDate);
				OnPropertyChanged("IssuedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IssuedPersonName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String IssuedPersonName
		{
			get
			{
				return this.entityData.IssuedPersonName; 
			}
			
			set
			{
				if (this.entityData.IssuedPersonName == value)
					return;
					
					
				OnColumnChanging(IdentificationInfomationColumn.IssuedPersonName, this.entityData.IssuedPersonName);
				this.entityData.IssuedPersonName = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(IdentificationInfomationColumn.IssuedPersonName, this.entityData.IssuedPersonName);
				OnPropertyChanged("IssuedPersonName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Comment property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 2000)]
		public virtual System.String Comment
		{
			get
			{
				return this.entityData.Comment; 
			}
			
			set
			{
				if (this.entityData.Comment == value)
					return;
					
					
				OnColumnChanging(IdentificationInfomationColumn.Comment, this.entityData.Comment);
				this.entityData.Comment = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(IdentificationInfomationColumn.Comment, this.entityData.Comment);
				OnPropertyChanged("Comment");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreationDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsCreationDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CreationDate
		{
			get
			{
				return this.entityData.CreationDate; 
			}
			
			set
			{
				if (this.entityData.CreationDate == value)
					return;
					
					
				OnColumnChanging(IdentificationInfomationColumn.CreationDate, this.entityData.CreationDate);
				this.entityData.CreationDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(IdentificationInfomationColumn.CreationDate, this.entityData.CreationDate);
				OnPropertyChanged("CreationDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreationUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCreationUserIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CreationUserId
		{
			get
			{
				return this.entityData.CreationUserId; 
			}
			
			set
			{
				if (this.entityData.CreationUserId == value)
					return;
					
					
				OnColumnChanging(IdentificationInfomationColumn.CreationUserId, this.entityData.CreationUserId);
				this.entityData.CreationUserId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(IdentificationInfomationColumn.CreationUserId, this.entityData.CreationUserId);
				OnPropertyChanged("CreationUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModificationDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastModificationDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastModificationDate
		{
			get
			{
				return this.entityData.LastModificationDate; 
			}
			
			set
			{
				if (this.entityData.LastModificationDate == value)
					return;
					
					
				OnColumnChanging(IdentificationInfomationColumn.LastModificationDate, this.entityData.LastModificationDate);
				this.entityData.LastModificationDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(IdentificationInfomationColumn.LastModificationDate, this.entityData.LastModificationDate);
				OnPropertyChanged("LastModificationDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModificationUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsLastModificationUserIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? LastModificationUserId
		{
			get
			{
				return this.entityData.LastModificationUserId; 
			}
			
			set
			{
				if (this.entityData.LastModificationUserId == value)
					return;
					
					
				OnColumnChanging(IdentificationInfomationColumn.LastModificationUserId, this.entityData.LastModificationUserId);
				this.entityData.LastModificationUserId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(IdentificationInfomationColumn.LastModificationUserId, this.entityData.LastModificationUserId);
				OnPropertyChanged("LastModificationUserId");
			}
		}
		

		#region Source Foreign Key Property
				
		#endregion
			
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "IdentificationInfomation"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"IdentificationInfomationId", "StaffId", "InfoType", "CountryId", "DistrictId", "ExpiredDate", "Number", "IssuedProvinceId", "IssuedDate", "IssuedPersonName", "Comment", "CreationDate", "CreationUserId", "LastModificationDate", "LastModificationUserId"};
			}
		}
		#endregion 
		
		
		#endregion
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as IdentificationInfomationEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (IdentificationInfomation) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return (object)this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<IdentificationInfomation>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as IdentificationInfomation);
	        }
	    }


		#endregion
		
		#region Methods	
			
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();
		}	
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed IdentificationInfomation Entity 
		///</summary>
		public virtual IdentificationInfomation Copy()
		{
			//shallow copy entity
			IdentificationInfomation copy = new IdentificationInfomation();
			copy.IdentificationInfomationId = this.IdentificationInfomationId;
			copy.StaffId = this.StaffId;
			copy.InfoType = this.InfoType;
			copy.CountryId = this.CountryId;
			copy.DistrictId = this.DistrictId;
			copy.ExpiredDate = this.ExpiredDate;
			copy.Number = this.Number;
			copy.IssuedProvinceId = this.IssuedProvinceId;
			copy.IssuedDate = this.IssuedDate;
			copy.IssuedPersonName = this.IssuedPersonName;
			copy.Comment = this.Comment;
			copy.CreationDate = this.CreationDate;
			copy.CreationUserId = this.CreationUserId;
			copy.LastModificationDate = this.LastModificationDate;
			copy.LastModificationUserId = this.LastModificationUserId;
					
			copy.AcceptChanges();
			return (IdentificationInfomation)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed IdentificationInfomation Entity which is a deep copy of the current entity.
		///</summary>
		public virtual IdentificationInfomation DeepCopy()
		{
			return EntityHelper.Clone<IdentificationInfomation>(this as IdentificationInfomation);	
		}
		#endregion
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="IdentificationInfomationBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(IdentificationInfomationBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="IdentificationInfomationBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="IdentificationInfomationBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="IdentificationInfomationBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(IdentificationInfomationBase Object1, IdentificationInfomationBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.IdentificationInfomationId != Object2.IdentificationInfomationId)
				equal = false;
			if (Object1.StaffId != Object2.StaffId)
				equal = false;
			if (Object1.InfoType != Object2.InfoType)
				equal = false;
			if ( Object1.CountryId != null && Object2.CountryId != null )
			{
				if (Object1.CountryId != Object2.CountryId)
					equal = false;
			}
			else if (Object1.CountryId == null ^ Object2.CountryId == null )
			{
				equal = false;
			}
			if ( Object1.DistrictId != null && Object2.DistrictId != null )
			{
				if (Object1.DistrictId != Object2.DistrictId)
					equal = false;
			}
			else if (Object1.DistrictId == null ^ Object2.DistrictId == null )
			{
				equal = false;
			}
			if ( Object1.ExpiredDate != null && Object2.ExpiredDate != null )
			{
				if (Object1.ExpiredDate != Object2.ExpiredDate)
					equal = false;
			}
			else if (Object1.ExpiredDate == null ^ Object2.ExpiredDate == null )
			{
				equal = false;
			}
			if ( Object1.Number != null && Object2.Number != null )
			{
				if (Object1.Number != Object2.Number)
					equal = false;
			}
			else if (Object1.Number == null ^ Object2.Number == null )
			{
				equal = false;
			}
			if ( Object1.IssuedProvinceId != null && Object2.IssuedProvinceId != null )
			{
				if (Object1.IssuedProvinceId != Object2.IssuedProvinceId)
					equal = false;
			}
			else if (Object1.IssuedProvinceId == null ^ Object2.IssuedProvinceId == null )
			{
				equal = false;
			}
			if ( Object1.IssuedDate != null && Object2.IssuedDate != null )
			{
				if (Object1.IssuedDate != Object2.IssuedDate)
					equal = false;
			}
			else if (Object1.IssuedDate == null ^ Object2.IssuedDate == null )
			{
				equal = false;
			}
			if ( Object1.IssuedPersonName != null && Object2.IssuedPersonName != null )
			{
				if (Object1.IssuedPersonName != Object2.IssuedPersonName)
					equal = false;
			}
			else if (Object1.IssuedPersonName == null ^ Object2.IssuedPersonName == null )
			{
				equal = false;
			}
			if ( Object1.Comment != null && Object2.Comment != null )
			{
				if (Object1.Comment != Object2.Comment)
					equal = false;
			}
			else if (Object1.Comment == null ^ Object2.Comment == null )
			{
				equal = false;
			}
			if ( Object1.CreationDate != null && Object2.CreationDate != null )
			{
				if (Object1.CreationDate != Object2.CreationDate)
					equal = false;
			}
			else if (Object1.CreationDate == null ^ Object2.CreationDate == null )
			{
				equal = false;
			}
			if ( Object1.CreationUserId != null && Object2.CreationUserId != null )
			{
				if (Object1.CreationUserId != Object2.CreationUserId)
					equal = false;
			}
			else if (Object1.CreationUserId == null ^ Object2.CreationUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastModificationDate != null && Object2.LastModificationDate != null )
			{
				if (Object1.LastModificationDate != Object2.LastModificationDate)
					equal = false;
			}
			else if (Object1.LastModificationDate == null ^ Object2.LastModificationDate == null )
			{
				equal = false;
			}
			if ( Object1.LastModificationUserId != null && Object2.LastModificationUserId != null )
			{
				if (Object1.LastModificationUserId != Object2.LastModificationUserId)
					equal = false;
			}
			else if (Object1.LastModificationUserId == null ^ Object2.LastModificationUserId == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			// TODO -> generate a strongly typed IComparer in the concrete class
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name) .CompareTo(((IdentificationInfomationBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name));
		}
		
		/*
		// static method to get a Comparer object
        public static IdentificationInfomationComparer GetComparer()
        {
            return new IdentificationInfomationComparer();
        }
        */

        // Comparer delegates back to IdentificationInfomation
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(IdentificationInfomation rhs, IdentificationInfomationColumn which)
        {
            switch (which)
            {
            	
            	
            	case IdentificationInfomationColumn.IdentificationInfomationId:
            		return this.IdentificationInfomationId.CompareTo(rhs.IdentificationInfomationId);
            		
            		                 
            	
            	
            	case IdentificationInfomationColumn.StaffId:
            		return this.StaffId.CompareTo(rhs.StaffId);
            		
            		                 
            	
            	
            	case IdentificationInfomationColumn.InfoType:
            		return this.InfoType.CompareTo(rhs.InfoType);
            		
            		                 
            	
            	
            	case IdentificationInfomationColumn.CountryId:
            		return this.CountryId.Value.CompareTo(rhs.CountryId.Value);
            		
            		                 
            	
            	
            	case IdentificationInfomationColumn.DistrictId:
            		return this.DistrictId.Value.CompareTo(rhs.DistrictId.Value);
            		
            		                 
            	
            	
            	case IdentificationInfomationColumn.ExpiredDate:
            		return this.ExpiredDate.Value.CompareTo(rhs.ExpiredDate.Value);
            		
            		                 
            	
            	
            	case IdentificationInfomationColumn.Number:
            		return this.Number.CompareTo(rhs.Number);
            		
            		                 
            	
            	
            	case IdentificationInfomationColumn.IssuedProvinceId:
            		return this.IssuedProvinceId.Value.CompareTo(rhs.IssuedProvinceId.Value);
            		
            		                 
            	
            	
            	case IdentificationInfomationColumn.IssuedDate:
            		return this.IssuedDate.Value.CompareTo(rhs.IssuedDate.Value);
            		
            		                 
            	
            	
            	case IdentificationInfomationColumn.IssuedPersonName:
            		return this.IssuedPersonName.CompareTo(rhs.IssuedPersonName);
            		
            		                 
            	
            	
            	case IdentificationInfomationColumn.Comment:
            		return this.Comment.CompareTo(rhs.Comment);
            		
            		                 
            	
            	
            	case IdentificationInfomationColumn.CreationDate:
            		return this.CreationDate.Value.CompareTo(rhs.CreationDate.Value);
            		
            		                 
            	
            	
            	case IdentificationInfomationColumn.CreationUserId:
            		return this.CreationUserId.Value.CompareTo(rhs.CreationUserId.Value);
            		
            		                 
            	
            	
            	case IdentificationInfomationColumn.LastModificationDate:
            		return this.LastModificationDate.Value.CompareTo(rhs.LastModificationDate.Value);
            		
            		                 
            	
            	
            	case IdentificationInfomationColumn.LastModificationUserId:
            		return this.LastModificationUserId.Value.CompareTo(rhs.LastModificationUserId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<IdentificationInfomationKey> Members
		
		// member variable for the EntityId property
		private IdentificationInfomationKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public IdentificationInfomationKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new IdentificationInfomationKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = @"IdentificationInfomation" 
					+ this.IdentificationInfomationId.ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{16}{15}- IdentificationInfomationId: {0}{15}- StaffId: {1}{15}- InfoType: {2}{15}- CountryId: {3}{15}- DistrictId: {4}{15}- ExpiredDate: {5}{15}- Number: {6}{15}- IssuedProvinceId: {7}{15}- IssuedDate: {8}{15}- IssuedPersonName: {9}{15}- Comment: {10}{15}- CreationDate: {11}{15}- CreationUserId: {12}{15}- LastModificationDate: {13}{15}- LastModificationUserId: {14}{15}", 
				this.IdentificationInfomationId,
				this.StaffId,
				this.InfoType,
				(this.CountryId == null) ? string.Empty : this.CountryId.ToString(),
				(this.DistrictId == null) ? string.Empty : this.DistrictId.ToString(),
				(this.ExpiredDate == null) ? string.Empty : this.ExpiredDate.ToString(),
				(this.Number == null) ? string.Empty : this.Number.ToString(),
				(this.IssuedProvinceId == null) ? string.Empty : this.IssuedProvinceId.ToString(),
				(this.IssuedDate == null) ? string.Empty : this.IssuedDate.ToString(),
				(this.IssuedPersonName == null) ? string.Empty : this.IssuedPersonName.ToString(),
				(this.Comment == null) ? string.Empty : this.Comment.ToString(),
				(this.CreationDate == null) ? string.Empty : this.CreationDate.ToString(),
				(this.CreationUserId == null) ? string.Empty : this.CreationUserId.ToString(),
				(this.LastModificationDate == null) ? string.Empty : this.LastModificationDate.ToString(),
				(this.LastModificationUserId == null) ? string.Empty : this.LastModificationUserId.ToString(),
				Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'IdentificationInfomation' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal class IdentificationInfomationEntityData : ICloneable
	{
		#region Variable Declarations
		
		#region Primary key(s)
			/// <summary>			
			/// IdentificationInfomationId : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "IdentificationInfomation"</remarks>
			public System.Int32 IdentificationInfomationId;
				
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// StaffId : 
		/// </summary>
		public System.Int32		  StaffId = (int)0;
		
		/// <summary>
		/// InfoType : 1: CMND, 2: bang lai xe, ...
		/// </summary>
		public System.Int32		  InfoType = (int)0;
		
		/// <summary>
		/// CountryId : 
		/// </summary>
		public System.Int32?		  CountryId = (int)0;
		
		/// <summary>
		/// DistrictId : 
		/// </summary>
		public System.Int32?		  DistrictId = (int)0;
		
		/// <summary>
		/// ExpiredDate : 
		/// </summary>
		public System.DateTime?		  ExpiredDate = DateTime.MinValue;
		
		/// <summary>
		/// Number : 
		/// </summary>
		public System.String		  Number = string.Empty;
		
		/// <summary>
		/// IssuedProvinceId : 
		/// </summary>
		public System.Int32?		  IssuedProvinceId = (int)0;
		
		/// <summary>
		/// IssuedDate : 
		/// </summary>
		public System.DateTime?		  IssuedDate = DateTime.MinValue;
		
		/// <summary>
		/// IssuedPersonName : 
		/// </summary>
		public System.String		  IssuedPersonName = string.Empty;
		
		/// <summary>
		/// Comment : 
		/// </summary>
		public System.String		  Comment = string.Empty;
		
		/// <summary>
		/// CreationDate : 
		/// </summary>
		public System.DateTime?		  CreationDate = DateTime.MinValue;
		
		/// <summary>
		/// CreationUserId : 
		/// </summary>
		public System.Int32?		  CreationUserId = (int)0;
		
		/// <summary>
		/// LastModificationDate : 
		/// </summary>
		public System.DateTime?		  LastModificationDate = DateTime.MinValue;
		
		/// <summary>
		/// LastModificationUserId : 
		/// </summary>
		public System.Int32?		  LastModificationUserId = (int)0;
		#endregion
			
		#endregion Variable Declarations
		
		#region Clone
		public Object Clone()
		{
			IdentificationInfomationEntityData _tmp = new IdentificationInfomationEntityData();
						
			_tmp.IdentificationInfomationId = this.IdentificationInfomationId;
			
			_tmp.StaffId = this.StaffId;
			_tmp.InfoType = this.InfoType;
			_tmp.CountryId = this.CountryId;
			_tmp.DistrictId = this.DistrictId;
			_tmp.ExpiredDate = this.ExpiredDate;
			_tmp.Number = this.Number;
			_tmp.IssuedProvinceId = this.IssuedProvinceId;
			_tmp.IssuedDate = this.IssuedDate;
			_tmp.IssuedPersonName = this.IssuedPersonName;
			_tmp.Comment = this.Comment;
			_tmp.CreationDate = this.CreationDate;
			_tmp.CreationUserId = this.CreationUserId;
			_tmp.LastModificationDate = this.LastModificationDate;
			_tmp.LastModificationUserId = this.LastModificationUserId;
			
			return _tmp;
		}
		#endregion 
		
		#region Data Properties

		#endregion Data Properties

	}//End struct


		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Number",100));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("IssuedPersonName",200));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Comment",2000));
		}
   		#endregion
	
	} // End Class
	
	#region IdentificationInfomationComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class IdentificationInfomationComparer : System.Collections.Generic.IComparer<IdentificationInfomation>
	{
		IdentificationInfomationColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:IdentificationInfomationComparer"/> class.
        /// </summary>
		public IdentificationInfomationComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public IdentificationInfomationComparer(IdentificationInfomationColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="IdentificationInfomation"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="IdentificationInfomation"/> to compare.</param>
        /// <param name="b">The second <c>IdentificationInfomation</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(IdentificationInfomation a, IdentificationInfomation b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(IdentificationInfomation entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(IdentificationInfomation a, IdentificationInfomation b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public IdentificationInfomationColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region IdentificationInfomationKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="IdentificationInfomation"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class IdentificationInfomationKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the IdentificationInfomationKey class.
		/// </summary>
		public IdentificationInfomationKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the IdentificationInfomationKey class.
		/// </summary>
		public IdentificationInfomationKey(IdentificationInfomationBase entity)
		{
			Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.identificationInfomationId = entity.IdentificationInfomationId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the IdentificationInfomationKey class.
		/// </summary>
		public IdentificationInfomationKey(System.Int32 identificationInfomationId)
		{
			#region Init Properties

			this.identificationInfomationId = identificationInfomationId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private IdentificationInfomationBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public IdentificationInfomationBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the IdentificationInfomationId property
		private System.Int32 identificationInfomationId;
		
		/// <summary>
		/// Gets or sets the IdentificationInfomationId property.
		/// </summary>
		public System.Int32 IdentificationInfomationId
		{
			get { return identificationInfomationId; }
			set
			{
				if ( Entity != null )
				{
					Entity.IdentificationInfomationId = value;
				}
				
				identificationInfomationId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				IdentificationInfomationId = ( values["IdentificationInfomationId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["IdentificationInfomationId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("IdentificationInfomationId", IdentificationInfomationId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("IdentificationInfomationId: {0}{1}",
								IdentificationInfomationId,
								Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region IdentificationInfomationColumn Enum
	
	/// <summary>
	/// Enumerate the IdentificationInfomation columns.
	/// </summary>
	[Serializable]
	public enum IdentificationInfomationColumn : int
	{
		/// <summary>
		/// IdentificationInfomationId : 
		/// </summary>
		[EnumTextValue("IdentificationInfomationId")]
		[ColumnEnum("IdentificationInfomationId", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		IdentificationInfomationId = 1,
		/// <summary>
		/// StaffId : 
		/// </summary>
		[EnumTextValue("StaffId")]
		[ColumnEnum("StaffId", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		StaffId = 2,
		/// <summary>
		/// InfoType : 1: CMND, 2: bang lai xe, ...
		/// </summary>
		[EnumTextValue("InfoType")]
		[ColumnEnum("InfoType", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		InfoType = 3,
		/// <summary>
		/// CountryId : 
		/// </summary>
		[EnumTextValue("CountryId")]
		[ColumnEnum("CountryId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CountryId = 4,
		/// <summary>
		/// DistrictId : 
		/// </summary>
		[EnumTextValue("DistrictId")]
		[ColumnEnum("DistrictId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		DistrictId = 5,
		/// <summary>
		/// ExpiredDate : 
		/// </summary>
		[EnumTextValue("ExpiredDate")]
		[ColumnEnum("ExpiredDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ExpiredDate = 6,
		/// <summary>
		/// Number : 
		/// </summary>
		[EnumTextValue("Number")]
		[ColumnEnum("Number", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		Number = 7,
		/// <summary>
		/// IssuedProvinceId : 
		/// </summary>
		[EnumTextValue("IssuedProvinceId")]
		[ColumnEnum("IssuedProvinceId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		IssuedProvinceId = 8,
		/// <summary>
		/// IssuedDate : 
		/// </summary>
		[EnumTextValue("IssuedDate")]
		[ColumnEnum("IssuedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		IssuedDate = 9,
		/// <summary>
		/// IssuedPersonName : 
		/// </summary>
		[EnumTextValue("IssuedPersonName")]
		[ColumnEnum("IssuedPersonName", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		IssuedPersonName = 10,
		/// <summary>
		/// Comment : 
		/// </summary>
		[EnumTextValue("Comment")]
		[ColumnEnum("Comment", typeof(System.String), System.Data.DbType.String, false, false, true, 2000)]
		Comment = 11,
		/// <summary>
		/// CreationDate : 
		/// </summary>
		[EnumTextValue("CreationDate")]
		[ColumnEnum("CreationDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CreationDate = 12,
		/// <summary>
		/// CreationUserId : 
		/// </summary>
		[EnumTextValue("CreationUserId")]
		[ColumnEnum("CreationUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CreationUserId = 13,
		/// <summary>
		/// LastModificationDate : 
		/// </summary>
		[EnumTextValue("LastModificationDate")]
		[ColumnEnum("LastModificationDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastModificationDate = 14,
		/// <summary>
		/// LastModificationUserId : 
		/// </summary>
		[EnumTextValue("LastModificationUserId")]
		[ColumnEnum("LastModificationUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		LastModificationUserId = 15
	}//End enum

	#endregion IdentificationInfomationColumn Enum

} // end namespace
