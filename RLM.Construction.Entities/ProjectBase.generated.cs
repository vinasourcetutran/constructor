	
/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : Tuesday, May 03, 2011
	Important: Do not modify this file. Edit the file Project.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace RLM.Construction.Entities
{
	#region ProjectEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Project"/> object.
	/// </remarks>
	public class ProjectEventArgs : System.EventArgs
	{
		private ProjectColumn column;
		private object value;
		
		
		///<summary>
		/// Initalizes a new Instance of the ProjectEventArgs class.
		///</summary>
		public ProjectEventArgs(ProjectColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ProjectEventArgs class.
		///</summary>
		public ProjectEventArgs(ProjectColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		
		///<summary>
		/// The ProjectColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ProjectColumn" />
		public ProjectColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	
	///<summary>
	/// Define a delegate for all Project related events.
	///</summary>
	public delegate void ProjectEventHandler(object sender, ProjectEventArgs e);
	
	///<summary>
	/// An object representation of the 'Project' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	//[ToolboxItem(typeof(Project))]
	public abstract partial class ProjectBase : EntityBase, IEntityId<ProjectKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		/// 	Old the inner data of the entity.
		/// </summary>
		private ProjectEntityData entityData;
		
		// <summary>
		// 	Old the original data of the entity.
		// </summary>
		//ProjectEntityData originalData;
		
		/// <summary>
		/// 	Old a backup of the inner data of the entity.
		/// </summary>
		private ProjectEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		[NonSerialized]
		private TList<Project> parentCollection;
		private bool inTxn = false;

		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event ProjectEventHandler ColumnChanging;
		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ProjectEventHandler ColumnChanged;		
		#endregion "Variable Declarations"
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ProjectBase"/> instance.
		///</summary>
		public ProjectBase()
		{
			this.entityData = new ProjectEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ProjectBase"/> instance.
		///</summary>
		///<param name="projectGroupId"></param>
		///<param name="projectContractId"></param>
		///<param name="projectManagerId"></param>
		///<param name="projectCurrentPhaseId"></param>
		///<param name="projectCurrencyUnitId"></param>
		///<param name="projectCode"></param>
		///<param name="projectName"></param>
		///<param name="projectDescription"></param>
		///<param name="projectDesignedPrice"></param>
		///<param name="projectAuctualPrice"></param>
		///<param name="projectIsActive"></param>
		///<param name="projectIsApprove"></param>
		///<param name="projectStatus"></param>
		///<param name="projectCreationDate"></param>
		///<param name="projectCreationUserId"></param>
		///<param name="projectLastModificationDate"></param>
		///<param name="projectLastModificationUserId"></param>
		///<param name="projectExchangeRate"></param>
		public ProjectBase(System.Int32 projectGroupId, System.Int32 projectContractId, System.Int32? projectManagerId, 
			System.Int32? projectCurrentPhaseId, System.Int32? projectCurrencyUnitId, System.String projectCode, System.String projectName, 
			System.String projectDescription, System.Decimal? projectDesignedPrice, System.Decimal? projectAuctualPrice, System.Boolean? projectIsActive, 
			System.Boolean? projectIsApprove, System.Int32? projectStatus, System.DateTime? projectCreationDate, System.Int32? projectCreationUserId, 
			System.DateTime? projectLastModificationDate, System.Int32? projectLastModificationUserId, System.Int32? projectExchangeRate)
		{
			this.entityData = new ProjectEntityData();
			this.backupData = null;

			this.GroupId = projectGroupId;
			this.ContractId = projectContractId;
			this.ManagerId = projectManagerId;
			this.CurrentPhaseId = projectCurrentPhaseId;
			this.CurrencyUnitId = projectCurrencyUnitId;
			this.Code = projectCode;
			this.Name = projectName;
			this.Description = projectDescription;
			this.DesignedPrice = projectDesignedPrice;
			this.AuctualPrice = projectAuctualPrice;
			this.IsActive = projectIsActive;
			this.IsApprove = projectIsApprove;
			this.Status = projectStatus;
			this.CreationDate = projectCreationDate;
			this.CreationUserId = projectCreationUserId;
			this.LastModificationDate = projectLastModificationDate;
			this.LastModificationUserId = projectLastModificationUserId;
			this.ExchangeRate = projectExchangeRate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Project"/> instance.
		///</summary>
		///<param name="projectGroupId"></param>
		///<param name="projectContractId"></param>
		///<param name="projectManagerId"></param>
		///<param name="projectCurrentPhaseId"></param>
		///<param name="projectCurrencyUnitId"></param>
		///<param name="projectCode"></param>
		///<param name="projectName"></param>
		///<param name="projectDescription"></param>
		///<param name="projectDesignedPrice"></param>
		///<param name="projectAuctualPrice"></param>
		///<param name="projectIsActive"></param>
		///<param name="projectIsApprove"></param>
		///<param name="projectStatus"></param>
		///<param name="projectCreationDate"></param>
		///<param name="projectCreationUserId"></param>
		///<param name="projectLastModificationDate"></param>
		///<param name="projectLastModificationUserId"></param>
		///<param name="projectExchangeRate"></param>
		public static Project CreateProject(System.Int32 projectGroupId, System.Int32 projectContractId, System.Int32? projectManagerId, 
			System.Int32? projectCurrentPhaseId, System.Int32? projectCurrencyUnitId, System.String projectCode, System.String projectName, 
			System.String projectDescription, System.Decimal? projectDesignedPrice, System.Decimal? projectAuctualPrice, System.Boolean? projectIsActive, 
			System.Boolean? projectIsApprove, System.Int32? projectStatus, System.DateTime? projectCreationDate, System.Int32? projectCreationUserId, 
			System.DateTime? projectLastModificationDate, System.Int32? projectLastModificationUserId, System.Int32? projectExchangeRate)
		{
			Project newProject = new Project();
			newProject.GroupId = projectGroupId;
			newProject.ContractId = projectContractId;
			newProject.ManagerId = projectManagerId;
			newProject.CurrentPhaseId = projectCurrentPhaseId;
			newProject.CurrencyUnitId = projectCurrencyUnitId;
			newProject.Code = projectCode;
			newProject.Name = projectName;
			newProject.Description = projectDescription;
			newProject.DesignedPrice = projectDesignedPrice;
			newProject.AuctualPrice = projectAuctualPrice;
			newProject.IsActive = projectIsActive;
			newProject.IsApprove = projectIsApprove;
			newProject.Status = projectStatus;
			newProject.CreationDate = projectCreationDate;
			newProject.CreationUserId = projectCreationUserId;
			newProject.LastModificationDate = projectLastModificationDate;
			newProject.LastModificationUserId = projectLastModificationUserId;
			newProject.ExchangeRate = projectExchangeRate;
			return newProject;
		}
				
		#endregion Constructors
		
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ProjectColumn"/> which has raised the event.</param>
		public void OnColumnChanging(ProjectColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ProjectColumn"/> which has raised the event.</param>
		public void OnColumnChanged(ProjectColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ProjectColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(ProjectColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added)
				EntityManager.StopTracking(EntityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				ProjectEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ProjectEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ProjectColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(ProjectColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ProjectEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ProjectEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
				
		#region Properties	
				
		/// <summary>
		/// 	Gets or sets the ProjectId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 ProjectId
		{
			get
			{
				return this.entityData.ProjectId; 
			}
			
			set
			{
				if (this.entityData.ProjectId == value)
					return;
					
					
				OnColumnChanging(ProjectColumn.ProjectId, this.entityData.ProjectId);
				this.entityData.ProjectId = value;
				this.EntityId.ProjectId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProjectColumn.ProjectId, this.entityData.ProjectId);
				OnPropertyChanged("ProjectId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GroupId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 GroupId
		{
			get
			{
				return this.entityData.GroupId; 
			}
			
			set
			{
				if (this.entityData.GroupId == value)
					return;
					
					
				OnColumnChanging(ProjectColumn.GroupId, this.entityData.GroupId);
				this.entityData.GroupId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProjectColumn.GroupId, this.entityData.GroupId);
				OnPropertyChanged("GroupId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ContractId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 ContractId
		{
			get
			{
				return this.entityData.ContractId; 
			}
			
			set
			{
				if (this.entityData.ContractId == value)
					return;
					
					
				OnColumnChanging(ProjectColumn.ContractId, this.entityData.ContractId);
				this.entityData.ContractId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProjectColumn.ContractId, this.entityData.ContractId);
				OnPropertyChanged("ContractId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ManagerId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsManagerIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ManagerId
		{
			get
			{
				return this.entityData.ManagerId; 
			}
			
			set
			{
				if (this.entityData.ManagerId == value)
					return;
					
					
				OnColumnChanging(ProjectColumn.ManagerId, this.entityData.ManagerId);
				this.entityData.ManagerId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProjectColumn.ManagerId, this.entityData.ManagerId);
				OnPropertyChanged("ManagerId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CurrentPhaseId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCurrentPhaseIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CurrentPhaseId
		{
			get
			{
				return this.entityData.CurrentPhaseId; 
			}
			
			set
			{
				if (this.entityData.CurrentPhaseId == value)
					return;
					
					
				OnColumnChanging(ProjectColumn.CurrentPhaseId, this.entityData.CurrentPhaseId);
				this.entityData.CurrentPhaseId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProjectColumn.CurrentPhaseId, this.entityData.CurrentPhaseId);
				OnPropertyChanged("CurrentPhaseId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CurrencyUnitId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCurrencyUnitIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CurrencyUnitId
		{
			get
			{
				return this.entityData.CurrencyUnitId; 
			}
			
			set
			{
				if (this.entityData.CurrencyUnitId == value)
					return;
					
					
				OnColumnChanging(ProjectColumn.CurrencyUnitId, this.entityData.CurrencyUnitId);
				this.entityData.CurrencyUnitId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProjectColumn.CurrencyUnitId, this.entityData.CurrencyUnitId);
				OnPropertyChanged("CurrencyUnitId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Code property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String Code
		{
			get
			{
				return this.entityData.Code; 
			}
			
			set
			{
				if (this.entityData.Code == value)
					return;
					
					
				OnColumnChanging(ProjectColumn.Code, this.entityData.Code);
				this.entityData.Code = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProjectColumn.Code, this.entityData.Code);
				OnPropertyChanged("Code");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Name property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false, 500)]
		public virtual System.String Name
		{
			get
			{
				return this.entityData.Name; 
			}
			
			set
			{
				if (this.entityData.Name == value)
					return;
					
					
				OnColumnChanging(ProjectColumn.Name, this.entityData.Name);
				this.entityData.Name = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProjectColumn.Name, this.entityData.Name);
				OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Description property. 
		///		
		/// </summary>
		/// <value>This type is ntext.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String Description
		{
			get
			{
				return this.entityData.Description; 
			}
			
			set
			{
				if (this.entityData.Description == value)
					return;
					
					
				OnColumnChanging(ProjectColumn.Description, this.entityData.Description);
				this.entityData.Description = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProjectColumn.Description, this.entityData.Description);
				OnPropertyChanged("Description");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DesignedPrice property. 
		///		
		/// </summary>
		/// <value>This type is money.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0. It is up to the developer
		/// to check the value of IsDesignedPriceNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? DesignedPrice
		{
			get
			{
				return this.entityData.DesignedPrice; 
			}
			
			set
			{
				if (this.entityData.DesignedPrice == value)
					return;
					
					
				OnColumnChanging(ProjectColumn.DesignedPrice, this.entityData.DesignedPrice);
				this.entityData.DesignedPrice = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProjectColumn.DesignedPrice, this.entityData.DesignedPrice);
				OnPropertyChanged("DesignedPrice");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AuctualPrice property. 
		///		
		/// </summary>
		/// <value>This type is money.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0. It is up to the developer
		/// to check the value of IsAuctualPriceNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AuctualPrice
		{
			get
			{
				return this.entityData.AuctualPrice; 
			}
			
			set
			{
				if (this.entityData.AuctualPrice == value)
					return;
					
					
				OnColumnChanging(ProjectColumn.AuctualPrice, this.entityData.AuctualPrice);
				this.entityData.AuctualPrice = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProjectColumn.AuctualPrice, this.entityData.AuctualPrice);
				OnPropertyChanged("AuctualPrice");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsActive property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsActiveNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsActive
		{
			get
			{
				return this.entityData.IsActive; 
			}
			
			set
			{
				if (this.entityData.IsActive == value)
					return;
					
					
				OnColumnChanging(ProjectColumn.IsActive, this.entityData.IsActive);
				this.entityData.IsActive = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProjectColumn.IsActive, this.entityData.IsActive);
				OnPropertyChanged("IsActive");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsApprove property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsApproveNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsApprove
		{
			get
			{
				return this.entityData.IsApprove; 
			}
			
			set
			{
				if (this.entityData.IsApprove == value)
					return;
					
					
				OnColumnChanging(ProjectColumn.IsApprove, this.entityData.IsApprove);
				this.entityData.IsApprove = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProjectColumn.IsApprove, this.entityData.IsApprove);
				OnPropertyChanged("IsApprove");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Status property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsStatusNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Status
		{
			get
			{
				return this.entityData.Status; 
			}
			
			set
			{
				if (this.entityData.Status == value)
					return;
					
					
				OnColumnChanging(ProjectColumn.Status, this.entityData.Status);
				this.entityData.Status = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProjectColumn.Status, this.entityData.Status);
				OnPropertyChanged("Status");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreationDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsCreationDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CreationDate
		{
			get
			{
				return this.entityData.CreationDate; 
			}
			
			set
			{
				if (this.entityData.CreationDate == value)
					return;
					
					
				OnColumnChanging(ProjectColumn.CreationDate, this.entityData.CreationDate);
				this.entityData.CreationDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProjectColumn.CreationDate, this.entityData.CreationDate);
				OnPropertyChanged("CreationDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreationUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCreationUserIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CreationUserId
		{
			get
			{
				return this.entityData.CreationUserId; 
			}
			
			set
			{
				if (this.entityData.CreationUserId == value)
					return;
					
					
				OnColumnChanging(ProjectColumn.CreationUserId, this.entityData.CreationUserId);
				this.entityData.CreationUserId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProjectColumn.CreationUserId, this.entityData.CreationUserId);
				OnPropertyChanged("CreationUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModificationDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastModificationDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastModificationDate
		{
			get
			{
				return this.entityData.LastModificationDate; 
			}
			
			set
			{
				if (this.entityData.LastModificationDate == value)
					return;
					
					
				OnColumnChanging(ProjectColumn.LastModificationDate, this.entityData.LastModificationDate);
				this.entityData.LastModificationDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProjectColumn.LastModificationDate, this.entityData.LastModificationDate);
				OnPropertyChanged("LastModificationDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModificationUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsLastModificationUserIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? LastModificationUserId
		{
			get
			{
				return this.entityData.LastModificationUserId; 
			}
			
			set
			{
				if (this.entityData.LastModificationUserId == value)
					return;
					
					
				OnColumnChanging(ProjectColumn.LastModificationUserId, this.entityData.LastModificationUserId);
				this.entityData.LastModificationUserId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProjectColumn.LastModificationUserId, this.entityData.LastModificationUserId);
				OnPropertyChanged("LastModificationUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExchangeRate property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsExchangeRateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ExchangeRate
		{
			get
			{
				return this.entityData.ExchangeRate; 
			}
			
			set
			{
				if (this.entityData.ExchangeRate == value)
					return;
					
					
				OnColumnChanging(ProjectColumn.ExchangeRate, this.entityData.ExchangeRate);
				this.entityData.ExchangeRate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProjectColumn.ExchangeRate, this.entityData.ExchangeRate);
				OnPropertyChanged("ExchangeRate");
			}
		}
		

		#region Source Foreign Key Property
				
		private Group _groupIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Group"/>.
		/// </summary>
		/// <value>The source Group for GroupId.</value>
        [XmlIgnore()]
		[Browsable(false), BindableAttribute()]
		public virtual Group GroupIdSource
      	{
            get { return this._groupIdSource; }
            set { this._groupIdSource = value; }
      	}
		private Contract _contractIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Contract"/>.
		/// </summary>
		/// <value>The source Contract for ContractId.</value>
        [XmlIgnore()]
		[Browsable(false), BindableAttribute()]
		public virtual Contract ContractIdSource
      	{
            get { return this._contractIdSource; }
            set { this._contractIdSource = value; }
      	}
		#endregion
			
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Project"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ProjectId", "GroupId", "ContractId", "ManagerId", "CurrentPhaseId", "CurrencyUnitId", "Code", "Name", "Description", "DesignedPrice", "AuctualPrice", "IsActive", "IsApprove", "Status", "CreationDate", "CreationUserId", "LastModificationDate", "LastModificationUserId", "ExchangeRate"};
			}
		}
		#endregion 
		
	
		/// <summary>
		///	Holds a collection of ProjectPhase objects
		///	which are related to this object through the relation FK_ProjectPhase_Project
		/// </summary>	
		[BindableAttribute()]
		public TList<ProjectPhase> ProjectPhaseCollection
		{
			get { return entityData.ProjectPhaseCollection; }
			set { entityData.ProjectPhaseCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ItemInProject objects
		///	which are related to this object through the relation FK_ItemInProjects_Projects
		/// </summary>	
		[BindableAttribute()]
		public TList<ItemInProject> ItemInProjectCollection
		{
			get { return entityData.ItemInProjectCollection; }
			set { entityData.ItemInProjectCollection = value; }	
		}
		
		#endregion
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ProjectEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Project) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return (object)this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Project>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Project);
	        }
	    }


		#endregion
		
		#region Methods	
			
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();
		}	
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Project Entity 
		///</summary>
		public virtual Project Copy()
		{
			//shallow copy entity
			Project copy = new Project();
			copy.ProjectId = this.ProjectId;
			copy.GroupId = this.GroupId;
			copy.ContractId = this.ContractId;
			copy.ManagerId = this.ManagerId;
			copy.CurrentPhaseId = this.CurrentPhaseId;
			copy.CurrencyUnitId = this.CurrencyUnitId;
			copy.Code = this.Code;
			copy.Name = this.Name;
			copy.Description = this.Description;
			copy.DesignedPrice = this.DesignedPrice;
			copy.AuctualPrice = this.AuctualPrice;
			copy.IsActive = this.IsActive;
			copy.IsApprove = this.IsApprove;
			copy.Status = this.Status;
			copy.CreationDate = this.CreationDate;
			copy.CreationUserId = this.CreationUserId;
			copy.LastModificationDate = this.LastModificationDate;
			copy.LastModificationUserId = this.LastModificationUserId;
			copy.ExchangeRate = this.ExchangeRate;
					
			copy.AcceptChanges();
			return (Project)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed Project Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Project DeepCopy()
		{
			return EntityHelper.Clone<Project>(this as Project);	
		}
		#endregion
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ProjectBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ProjectBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="ProjectBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="ProjectBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ProjectBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(ProjectBase Object1, ProjectBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.ProjectId != Object2.ProjectId)
				equal = false;
			if (Object1.GroupId != Object2.GroupId)
				equal = false;
			if (Object1.ContractId != Object2.ContractId)
				equal = false;
			if ( Object1.ManagerId != null && Object2.ManagerId != null )
			{
				if (Object1.ManagerId != Object2.ManagerId)
					equal = false;
			}
			else if (Object1.ManagerId == null ^ Object2.ManagerId == null )
			{
				equal = false;
			}
			if ( Object1.CurrentPhaseId != null && Object2.CurrentPhaseId != null )
			{
				if (Object1.CurrentPhaseId != Object2.CurrentPhaseId)
					equal = false;
			}
			else if (Object1.CurrentPhaseId == null ^ Object2.CurrentPhaseId == null )
			{
				equal = false;
			}
			if ( Object1.CurrencyUnitId != null && Object2.CurrencyUnitId != null )
			{
				if (Object1.CurrencyUnitId != Object2.CurrencyUnitId)
					equal = false;
			}
			else if (Object1.CurrencyUnitId == null ^ Object2.CurrencyUnitId == null )
			{
				equal = false;
			}
			if ( Object1.Code != null && Object2.Code != null )
			{
				if (Object1.Code != Object2.Code)
					equal = false;
			}
			else if (Object1.Code == null ^ Object2.Code == null )
			{
				equal = false;
			}
			if (Object1.Name != Object2.Name)
				equal = false;
			if ( Object1.Description != null && Object2.Description != null )
			{
				if (Object1.Description != Object2.Description)
					equal = false;
			}
			else if (Object1.Description == null ^ Object2.Description == null )
			{
				equal = false;
			}
			if ( Object1.DesignedPrice != null && Object2.DesignedPrice != null )
			{
				if (Object1.DesignedPrice != Object2.DesignedPrice)
					equal = false;
			}
			else if (Object1.DesignedPrice == null ^ Object2.DesignedPrice == null )
			{
				equal = false;
			}
			if ( Object1.AuctualPrice != null && Object2.AuctualPrice != null )
			{
				if (Object1.AuctualPrice != Object2.AuctualPrice)
					equal = false;
			}
			else if (Object1.AuctualPrice == null ^ Object2.AuctualPrice == null )
			{
				equal = false;
			}
			if ( Object1.IsActive != null && Object2.IsActive != null )
			{
				if (Object1.IsActive != Object2.IsActive)
					equal = false;
			}
			else if (Object1.IsActive == null ^ Object2.IsActive == null )
			{
				equal = false;
			}
			if ( Object1.IsApprove != null && Object2.IsApprove != null )
			{
				if (Object1.IsApprove != Object2.IsApprove)
					equal = false;
			}
			else if (Object1.IsApprove == null ^ Object2.IsApprove == null )
			{
				equal = false;
			}
			if ( Object1.Status != null && Object2.Status != null )
			{
				if (Object1.Status != Object2.Status)
					equal = false;
			}
			else if (Object1.Status == null ^ Object2.Status == null )
			{
				equal = false;
			}
			if ( Object1.CreationDate != null && Object2.CreationDate != null )
			{
				if (Object1.CreationDate != Object2.CreationDate)
					equal = false;
			}
			else if (Object1.CreationDate == null ^ Object2.CreationDate == null )
			{
				equal = false;
			}
			if ( Object1.CreationUserId != null && Object2.CreationUserId != null )
			{
				if (Object1.CreationUserId != Object2.CreationUserId)
					equal = false;
			}
			else if (Object1.CreationUserId == null ^ Object2.CreationUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastModificationDate != null && Object2.LastModificationDate != null )
			{
				if (Object1.LastModificationDate != Object2.LastModificationDate)
					equal = false;
			}
			else if (Object1.LastModificationDate == null ^ Object2.LastModificationDate == null )
			{
				equal = false;
			}
			if ( Object1.LastModificationUserId != null && Object2.LastModificationUserId != null )
			{
				if (Object1.LastModificationUserId != Object2.LastModificationUserId)
					equal = false;
			}
			else if (Object1.LastModificationUserId == null ^ Object2.LastModificationUserId == null )
			{
				equal = false;
			}
			if ( Object1.ExchangeRate != null && Object2.ExchangeRate != null )
			{
				if (Object1.ExchangeRate != Object2.ExchangeRate)
					equal = false;
			}
			else if (Object1.ExchangeRate == null ^ Object2.ExchangeRate == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			// TODO -> generate a strongly typed IComparer in the concrete class
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name) .CompareTo(((ProjectBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name));
		}
		
		/*
		// static method to get a Comparer object
        public static ProjectComparer GetComparer()
        {
            return new ProjectComparer();
        }
        */

        // Comparer delegates back to Project
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Project rhs, ProjectColumn which)
        {
            switch (which)
            {
            	
            	
            	case ProjectColumn.ProjectId:
            		return this.ProjectId.CompareTo(rhs.ProjectId);
            		
            		                 
            	
            	
            	case ProjectColumn.GroupId:
            		return this.GroupId.CompareTo(rhs.GroupId);
            		
            		                 
            	
            	
            	case ProjectColumn.ContractId:
            		return this.ContractId.CompareTo(rhs.ContractId);
            		
            		                 
            	
            	
            	case ProjectColumn.ManagerId:
            		return this.ManagerId.Value.CompareTo(rhs.ManagerId.Value);
            		
            		                 
            	
            	
            	case ProjectColumn.CurrentPhaseId:
            		return this.CurrentPhaseId.Value.CompareTo(rhs.CurrentPhaseId.Value);
            		
            		                 
            	
            	
            	case ProjectColumn.CurrencyUnitId:
            		return this.CurrencyUnitId.Value.CompareTo(rhs.CurrencyUnitId.Value);
            		
            		                 
            	
            	
            	case ProjectColumn.Code:
            		return this.Code.CompareTo(rhs.Code);
            		
            		                 
            	
            	
            	case ProjectColumn.Name:
            		return this.Name.CompareTo(rhs.Name);
            		
            		                 
            	
            	
            	case ProjectColumn.Description:
            		return this.Description.CompareTo(rhs.Description);
            		
            		                 
            	
            	
            	case ProjectColumn.DesignedPrice:
            		return this.DesignedPrice.Value.CompareTo(rhs.DesignedPrice.Value);
            		
            		                 
            	
            	
            	case ProjectColumn.AuctualPrice:
            		return this.AuctualPrice.Value.CompareTo(rhs.AuctualPrice.Value);
            		
            		                 
            	
            	
            	case ProjectColumn.IsActive:
            		return this.IsActive.Value.CompareTo(rhs.IsActive.Value);
            		
            		                 
            	
            	
            	case ProjectColumn.IsApprove:
            		return this.IsApprove.Value.CompareTo(rhs.IsApprove.Value);
            		
            		                 
            	
            	
            	case ProjectColumn.Status:
            		return this.Status.Value.CompareTo(rhs.Status.Value);
            		
            		                 
            	
            	
            	case ProjectColumn.CreationDate:
            		return this.CreationDate.Value.CompareTo(rhs.CreationDate.Value);
            		
            		                 
            	
            	
            	case ProjectColumn.CreationUserId:
            		return this.CreationUserId.Value.CompareTo(rhs.CreationUserId.Value);
            		
            		                 
            	
            	
            	case ProjectColumn.LastModificationDate:
            		return this.LastModificationDate.Value.CompareTo(rhs.LastModificationDate.Value);
            		
            		                 
            	
            	
            	case ProjectColumn.LastModificationUserId:
            		return this.LastModificationUserId.Value.CompareTo(rhs.LastModificationUserId.Value);
            		
            		                 
            	
            	
            	case ProjectColumn.ExchangeRate:
            		return this.ExchangeRate.Value.CompareTo(rhs.ExchangeRate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ProjectKey> Members
		
		// member variable for the EntityId property
		private ProjectKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public ProjectKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ProjectKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = @"Project" 
					+ this.ProjectId.ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{20}{19}- ProjectId: {0}{19}- GroupId: {1}{19}- ContractId: {2}{19}- ManagerId: {3}{19}- CurrentPhaseId: {4}{19}- CurrencyUnitId: {5}{19}- Code: {6}{19}- Name: {7}{19}- Description: {8}{19}- DesignedPrice: {9}{19}- AuctualPrice: {10}{19}- IsActive: {11}{19}- IsApprove: {12}{19}- Status: {13}{19}- CreationDate: {14}{19}- CreationUserId: {15}{19}- LastModificationDate: {16}{19}- LastModificationUserId: {17}{19}- ExchangeRate: {18}{19}", 
				this.ProjectId,
				this.GroupId,
				this.ContractId,
				(this.ManagerId == null) ? string.Empty : this.ManagerId.ToString(),
				(this.CurrentPhaseId == null) ? string.Empty : this.CurrentPhaseId.ToString(),
				(this.CurrencyUnitId == null) ? string.Empty : this.CurrencyUnitId.ToString(),
				(this.Code == null) ? string.Empty : this.Code.ToString(),
				this.Name,
				(this.Description == null) ? string.Empty : this.Description.ToString(),
				(this.DesignedPrice == null) ? string.Empty : this.DesignedPrice.ToString(),
				(this.AuctualPrice == null) ? string.Empty : this.AuctualPrice.ToString(),
				(this.IsActive == null) ? string.Empty : this.IsActive.ToString(),
				(this.IsApprove == null) ? string.Empty : this.IsApprove.ToString(),
				(this.Status == null) ? string.Empty : this.Status.ToString(),
				(this.CreationDate == null) ? string.Empty : this.CreationDate.ToString(),
				(this.CreationUserId == null) ? string.Empty : this.CreationUserId.ToString(),
				(this.LastModificationDate == null) ? string.Empty : this.LastModificationDate.ToString(),
				(this.LastModificationUserId == null) ? string.Empty : this.LastModificationUserId.ToString(),
				(this.ExchangeRate == null) ? string.Empty : this.ExchangeRate.ToString(),
				Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Project' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal class ProjectEntityData : ICloneable
	{
		#region Variable Declarations
		
		#region Primary key(s)
			/// <summary>			
			/// ProjectId : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "Project"</remarks>
			public System.Int32 ProjectId;
				
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// GroupId : 
		/// </summary>
		public System.Int32		  GroupId = (int)0;
		
		/// <summary>
		/// ContractId : 
		/// </summary>
		public System.Int32		  ContractId = (int)0;
		
		/// <summary>
		/// ManagerId : 
		/// </summary>
		public System.Int32?		  ManagerId = (int)0;
		
		/// <summary>
		/// CurrentPhaseId : 
		/// </summary>
		public System.Int32?		  CurrentPhaseId = (int)0;
		
		/// <summary>
		/// CurrencyUnitId : 
		/// </summary>
		public System.Int32?		  CurrencyUnitId = (int)0;
		
		/// <summary>
		/// Code : 
		/// </summary>
		public System.String		  Code = string.Empty;
		
		/// <summary>
		/// Name : 
		/// </summary>
		public System.String		  Name = string.Empty;
		
		/// <summary>
		/// Description : 
		/// </summary>
		public System.String		  Description = string.Empty;
		
		/// <summary>
		/// DesignedPrice : 
		/// </summary>
		public System.Decimal?		  DesignedPrice = 0;
		
		/// <summary>
		/// AuctualPrice : 
		/// </summary>
		public System.Decimal?		  AuctualPrice = 0;
		
		/// <summary>
		/// IsActive : 
		/// </summary>
		public System.Boolean?		  IsActive = false;
		
		/// <summary>
		/// IsApprove : 
		/// </summary>
		public System.Boolean?		  IsApprove = false;
		
		/// <summary>
		/// Status : 
		/// </summary>
		public System.Int32?		  Status = (int)0;
		
		/// <summary>
		/// CreationDate : 
		/// </summary>
		public System.DateTime?		  CreationDate = DateTime.MinValue;
		
		/// <summary>
		/// CreationUserId : 
		/// </summary>
		public System.Int32?		  CreationUserId = (int)0;
		
		/// <summary>
		/// LastModificationDate : 
		/// </summary>
		public System.DateTime?		  LastModificationDate = DateTime.MinValue;
		
		/// <summary>
		/// LastModificationUserId : 
		/// </summary>
		public System.Int32?		  LastModificationUserId = (int)0;
		
		/// <summary>
		/// ExchangeRate : 
		/// </summary>
		public System.Int32?		  ExchangeRate = (int)0;
		#endregion
			
		#endregion Variable Declarations
		
		#region Clone
		public Object Clone()
		{
			ProjectEntityData _tmp = new ProjectEntityData();
						
			_tmp.ProjectId = this.ProjectId;
			
			_tmp.GroupId = this.GroupId;
			_tmp.ContractId = this.ContractId;
			_tmp.ManagerId = this.ManagerId;
			_tmp.CurrentPhaseId = this.CurrentPhaseId;
			_tmp.CurrencyUnitId = this.CurrencyUnitId;
			_tmp.Code = this.Code;
			_tmp.Name = this.Name;
			_tmp.Description = this.Description;
			_tmp.DesignedPrice = this.DesignedPrice;
			_tmp.AuctualPrice = this.AuctualPrice;
			_tmp.IsActive = this.IsActive;
			_tmp.IsApprove = this.IsApprove;
			_tmp.Status = this.Status;
			_tmp.CreationDate = this.CreationDate;
			_tmp.CreationUserId = this.CreationUserId;
			_tmp.LastModificationDate = this.LastModificationDate;
			_tmp.LastModificationUserId = this.LastModificationUserId;
			_tmp.ExchangeRate = this.ExchangeRate;
			
			return _tmp;
		}
		#endregion 
		
		#region Data Properties

		#region ProjectPhaseCollection
		
		private TList<ProjectPhase> projectPhaseProjectId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation projectPhaseProjectId
		/// </summary>	
		public TList<ProjectPhase> ProjectPhaseCollection
		{
			get
			{
				if (projectPhaseProjectId == null)
				{
				projectPhaseProjectId = new TList<ProjectPhase>();
				}
	
				return projectPhaseProjectId;
			}
			set { projectPhaseProjectId = value; }
		}
		
		#endregion

		#region ItemInProjectCollection
		
		private TList<ItemInProject> itemInProjectProjectId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation itemInProjectProjectId
		/// </summary>	
		public TList<ItemInProject> ItemInProjectCollection
		{
			get
			{
				if (itemInProjectProjectId == null)
				{
				itemInProjectProjectId = new TList<ItemInProject>();
				}
	
				return itemInProjectProjectId;
			}
			set { itemInProjectProjectId = value; }
		}
		
		#endregion

		#endregion Data Properties

	}//End struct


		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Code",100));
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"Name");
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Name",500));
		}
   		#endregion
	
	} // End Class
	
	#region ProjectComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ProjectComparer : System.Collections.Generic.IComparer<Project>
	{
		ProjectColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ProjectComparer"/> class.
        /// </summary>
		public ProjectComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ProjectComparer(ProjectColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="Project"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="Project"/> to compare.</param>
        /// <param name="b">The second <c>Project</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Project a, Project b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Project entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Project a, Project b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ProjectColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ProjectKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Project"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ProjectKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ProjectKey class.
		/// </summary>
		public ProjectKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ProjectKey class.
		/// </summary>
		public ProjectKey(ProjectBase entity)
		{
			Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.projectId = entity.ProjectId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ProjectKey class.
		/// </summary>
		public ProjectKey(System.Int32 projectId)
		{
			#region Init Properties

			this.projectId = projectId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ProjectBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ProjectBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the ProjectId property
		private System.Int32 projectId;
		
		/// <summary>
		/// Gets or sets the ProjectId property.
		/// </summary>
		public System.Int32 ProjectId
		{
			get { return projectId; }
			set
			{
				if ( Entity != null )
				{
					Entity.ProjectId = value;
				}
				
				projectId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				ProjectId = ( values["ProjectId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["ProjectId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("ProjectId", ProjectId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("ProjectId: {0}{1}",
								ProjectId,
								Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ProjectColumn Enum
	
	/// <summary>
	/// Enumerate the Project columns.
	/// </summary>
	[Serializable]
	public enum ProjectColumn : int
	{
		/// <summary>
		/// ProjectId : 
		/// </summary>
		[EnumTextValue("ProjectId")]
		[ColumnEnum("ProjectId", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		ProjectId = 1,
		/// <summary>
		/// GroupId : 
		/// </summary>
		[EnumTextValue("GroupId")]
		[ColumnEnum("GroupId", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		GroupId = 2,
		/// <summary>
		/// ContractId : 
		/// </summary>
		[EnumTextValue("ContractId")]
		[ColumnEnum("ContractId", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ContractId = 3,
		/// <summary>
		/// ManagerId : 
		/// </summary>
		[EnumTextValue("ManagerId")]
		[ColumnEnum("ManagerId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ManagerId = 4,
		/// <summary>
		/// CurrentPhaseId : 
		/// </summary>
		[EnumTextValue("CurrentPhaseId")]
		[ColumnEnum("CurrentPhaseId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CurrentPhaseId = 5,
		/// <summary>
		/// CurrencyUnitId : 
		/// </summary>
		[EnumTextValue("CurrencyUnitId")]
		[ColumnEnum("CurrencyUnitId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CurrencyUnitId = 6,
		/// <summary>
		/// Code : 
		/// </summary>
		[EnumTextValue("Code")]
		[ColumnEnum("Code", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		Code = 7,
		/// <summary>
		/// Name : 
		/// </summary>
		[EnumTextValue("Name")]
		[ColumnEnum("Name", typeof(System.String), System.Data.DbType.String, false, false, false, 500)]
		Name = 8,
		/// <summary>
		/// Description : 
		/// </summary>
		[EnumTextValue("Description")]
		[ColumnEnum("Description", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Description = 9,
		/// <summary>
		/// DesignedPrice : 
		/// </summary>
		[EnumTextValue("DesignedPrice")]
		[ColumnEnum("DesignedPrice", typeof(System.Decimal), System.Data.DbType.Currency, false, false, true)]
		DesignedPrice = 10,
		/// <summary>
		/// AuctualPrice : 
		/// </summary>
		[EnumTextValue("AuctualPrice")]
		[ColumnEnum("AuctualPrice", typeof(System.Decimal), System.Data.DbType.Currency, false, false, true)]
		AuctualPrice = 11,
		/// <summary>
		/// IsActive : 
		/// </summary>
		[EnumTextValue("IsActive")]
		[ColumnEnum("IsActive", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsActive = 12,
		/// <summary>
		/// IsApprove : 
		/// </summary>
		[EnumTextValue("IsApprove")]
		[ColumnEnum("IsApprove", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsApprove = 13,
		/// <summary>
		/// Status : 
		/// </summary>
		[EnumTextValue("Status")]
		[ColumnEnum("Status", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Status = 14,
		/// <summary>
		/// CreationDate : 
		/// </summary>
		[EnumTextValue("CreationDate")]
		[ColumnEnum("CreationDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CreationDate = 15,
		/// <summary>
		/// CreationUserId : 
		/// </summary>
		[EnumTextValue("CreationUserId")]
		[ColumnEnum("CreationUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CreationUserId = 16,
		/// <summary>
		/// LastModificationDate : 
		/// </summary>
		[EnumTextValue("LastModificationDate")]
		[ColumnEnum("LastModificationDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastModificationDate = 17,
		/// <summary>
		/// LastModificationUserId : 
		/// </summary>
		[EnumTextValue("LastModificationUserId")]
		[ColumnEnum("LastModificationUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		LastModificationUserId = 18,
		/// <summary>
		/// ExchangeRate : 
		/// </summary>
		[EnumTextValue("ExchangeRate")]
		[ColumnEnum("ExchangeRate", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ExchangeRate = 19
	}//End enum

	#endregion ProjectColumn Enum

} // end namespace
