	
/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : Monday, May 02, 2011
	Important: Do not modify this file. Edit the file ProjectPhase.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace RLM.Construction.Entities
{
	#region ProjectPhaseEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="ProjectPhase"/> object.
	/// </remarks>
	public class ProjectPhaseEventArgs : System.EventArgs
	{
		private ProjectPhaseColumn column;
		private object value;
		
		
		///<summary>
		/// Initalizes a new Instance of the ProjectPhaseEventArgs class.
		///</summary>
		public ProjectPhaseEventArgs(ProjectPhaseColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ProjectPhaseEventArgs class.
		///</summary>
		public ProjectPhaseEventArgs(ProjectPhaseColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		
		///<summary>
		/// The ProjectPhaseColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ProjectPhaseColumn" />
		public ProjectPhaseColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	
	///<summary>
	/// Define a delegate for all ProjectPhase related events.
	///</summary>
	public delegate void ProjectPhaseEventHandler(object sender, ProjectPhaseEventArgs e);
	
	///<summary>
	/// An object representation of the 'ProjectPhase' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	//[ToolboxItem(typeof(ProjectPhase))]
	public abstract partial class ProjectPhaseBase : EntityBase, IEntityId<ProjectPhaseKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		/// 	Old the inner data of the entity.
		/// </summary>
		private ProjectPhaseEntityData entityData;
		
		// <summary>
		// 	Old the original data of the entity.
		// </summary>
		//ProjectPhaseEntityData originalData;
		
		/// <summary>
		/// 	Old a backup of the inner data of the entity.
		/// </summary>
		private ProjectPhaseEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		[NonSerialized]
		private TList<ProjectPhase> parentCollection;
		private bool inTxn = false;

		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event ProjectPhaseEventHandler ColumnChanging;
		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ProjectPhaseEventHandler ColumnChanged;		
		#endregion "Variable Declarations"
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ProjectPhaseBase"/> instance.
		///</summary>
		public ProjectPhaseBase()
		{
			this.entityData = new ProjectPhaseEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ProjectPhaseBase"/> instance.
		///</summary>
		///<param name="projectPhaseParentProjectPhaseId"></param>
		///<param name="projectPhaseProjectId"></param>
		///<param name="projectPhaseContractId"></param>
		///<param name="projectPhaseManagerId"></param>
		///<param name="projectPhaseCurrencyUnitId"></param>
		///<param name="projectPhaseName"></param>
		///<param name="projectPhaseDescription"></param>
		///<param name="projectPhaseDesignPrice"></param>
		///<param name="projectPhaseAuctualPrice"></param>
		///<param name="projectPhaseIsActive"></param>
		///<param name="projectPhaseIsApprove"></param>
		///<param name="projectPhaseIsCurrentProjectPhase"></param>
		///<param name="projectPhaseStatus"></param>
		///<param name="projectPhaseType">Project phase type: design, built,...</param>
		///<param name="projectPhaseFromDate"></param>
		///<param name="projectPhaseToDate"></param>
		///<param name="projectPhaseRealFromDate"></param>
		///<param name="projectPhaseRealToDate"></param>
		///<param name="projectPhaseParentPath">Containt list of parent id: Project:1/ProjectPhase:5/ProjejectPhase:8/...</param>
		///<param name="projectPhaseIsCollectItemFromChild"></param>
		///<param name="projectPhaseIsStart"></param>
		///<param name="projectPhaseIsFinished"></param>
		///<param name="projectPhaseIsBillable"></param>
		///<param name="projectPhaseCreationDate"></param>
		///<param name="projectPhaseCreationUserId"></param>
		///<param name="projectPhaseLastModificationDate"></param>
		///<param name="projectPhaseLastModificationUserId"></param>
		///<param name="projectPhaseExchangeRate"></param>
		public ProjectPhaseBase(System.Int32? projectPhaseParentProjectPhaseId, System.Int32 projectPhaseProjectId, 
			System.Int32? projectPhaseContractId, System.Int32? projectPhaseManagerId, System.Int32? projectPhaseCurrencyUnitId, System.String projectPhaseName, 
			System.String projectPhaseDescription, System.Decimal? projectPhaseDesignPrice, System.Decimal? projectPhaseAuctualPrice, 
			System.Boolean? projectPhaseIsActive, System.Boolean? projectPhaseIsApprove, System.Boolean? projectPhaseIsCurrentProjectPhase, 
			System.Int32? projectPhaseStatus, System.Int32? projectPhaseType, System.DateTime? projectPhaseFromDate, System.DateTime? projectPhaseToDate, 
			System.DateTime? projectPhaseRealFromDate, System.DateTime? projectPhaseRealToDate, System.String projectPhaseParentPath, 
			System.Boolean? projectPhaseIsCollectItemFromChild, System.Boolean? projectPhaseIsStart, System.Boolean? projectPhaseIsFinished, 
			System.Boolean? projectPhaseIsBillable, System.DateTime? projectPhaseCreationDate, System.Int32? projectPhaseCreationUserId, 
			System.DateTime? projectPhaseLastModificationDate, System.Int32? projectPhaseLastModificationUserId, System.Int32? projectPhaseExchangeRate)
		{
			this.entityData = new ProjectPhaseEntityData();
			this.backupData = null;

			this.ParentProjectPhaseId = projectPhaseParentProjectPhaseId;
			this.ProjectId = projectPhaseProjectId;
			this.ContractId = projectPhaseContractId;
			this.ManagerId = projectPhaseManagerId;
			this.CurrencyUnitId = projectPhaseCurrencyUnitId;
			this.Name = projectPhaseName;
			this.Description = projectPhaseDescription;
			this.DesignPrice = projectPhaseDesignPrice;
			this.AuctualPrice = projectPhaseAuctualPrice;
			this.IsActive = projectPhaseIsActive;
			this.IsApprove = projectPhaseIsApprove;
			this.IsCurrentProjectPhase = projectPhaseIsCurrentProjectPhase;
			this.Status = projectPhaseStatus;
			this.Type = projectPhaseType;
			this.FromDate = projectPhaseFromDate;
			this.ToDate = projectPhaseToDate;
			this.RealFromDate = projectPhaseRealFromDate;
			this.RealToDate = projectPhaseRealToDate;
			this.ParentPath = projectPhaseParentPath;
			this.IsCollectItemFromChild = projectPhaseIsCollectItemFromChild;
			this.IsStart = projectPhaseIsStart;
			this.IsFinished = projectPhaseIsFinished;
			this.IsBillable = projectPhaseIsBillable;
			this.CreationDate = projectPhaseCreationDate;
			this.CreationUserId = projectPhaseCreationUserId;
			this.LastModificationDate = projectPhaseLastModificationDate;
			this.LastModificationUserId = projectPhaseLastModificationUserId;
			this.ExchangeRate = projectPhaseExchangeRate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ProjectPhase"/> instance.
		///</summary>
		///<param name="projectPhaseParentProjectPhaseId"></param>
		///<param name="projectPhaseProjectId"></param>
		///<param name="projectPhaseContractId"></param>
		///<param name="projectPhaseManagerId"></param>
		///<param name="projectPhaseCurrencyUnitId"></param>
		///<param name="projectPhaseName"></param>
		///<param name="projectPhaseDescription"></param>
		///<param name="projectPhaseDesignPrice"></param>
		///<param name="projectPhaseAuctualPrice"></param>
		///<param name="projectPhaseIsActive"></param>
		///<param name="projectPhaseIsApprove"></param>
		///<param name="projectPhaseIsCurrentProjectPhase"></param>
		///<param name="projectPhaseStatus"></param>
		///<param name="projectPhaseType">Project phase type: design, built,...</param>
		///<param name="projectPhaseFromDate"></param>
		///<param name="projectPhaseToDate"></param>
		///<param name="projectPhaseRealFromDate"></param>
		///<param name="projectPhaseRealToDate"></param>
		///<param name="projectPhaseParentPath">Containt list of parent id: Project:1/ProjectPhase:5/ProjejectPhase:8/...</param>
		///<param name="projectPhaseIsCollectItemFromChild"></param>
		///<param name="projectPhaseIsStart"></param>
		///<param name="projectPhaseIsFinished"></param>
		///<param name="projectPhaseIsBillable"></param>
		///<param name="projectPhaseCreationDate"></param>
		///<param name="projectPhaseCreationUserId"></param>
		///<param name="projectPhaseLastModificationDate"></param>
		///<param name="projectPhaseLastModificationUserId"></param>
		///<param name="projectPhaseExchangeRate"></param>
		public static ProjectPhase CreateProjectPhase(System.Int32? projectPhaseParentProjectPhaseId, System.Int32 projectPhaseProjectId, 
			System.Int32? projectPhaseContractId, System.Int32? projectPhaseManagerId, System.Int32? projectPhaseCurrencyUnitId, System.String projectPhaseName, 
			System.String projectPhaseDescription, System.Decimal? projectPhaseDesignPrice, System.Decimal? projectPhaseAuctualPrice, 
			System.Boolean? projectPhaseIsActive, System.Boolean? projectPhaseIsApprove, System.Boolean? projectPhaseIsCurrentProjectPhase, 
			System.Int32? projectPhaseStatus, System.Int32? projectPhaseType, System.DateTime? projectPhaseFromDate, System.DateTime? projectPhaseToDate, 
			System.DateTime? projectPhaseRealFromDate, System.DateTime? projectPhaseRealToDate, System.String projectPhaseParentPath, 
			System.Boolean? projectPhaseIsCollectItemFromChild, System.Boolean? projectPhaseIsStart, System.Boolean? projectPhaseIsFinished, 
			System.Boolean? projectPhaseIsBillable, System.DateTime? projectPhaseCreationDate, System.Int32? projectPhaseCreationUserId, 
			System.DateTime? projectPhaseLastModificationDate, System.Int32? projectPhaseLastModificationUserId, System.Int32? projectPhaseExchangeRate)
		{
			ProjectPhase newProjectPhase = new ProjectPhase();
			newProjectPhase.ParentProjectPhaseId = projectPhaseParentProjectPhaseId;
			newProjectPhase.ProjectId = projectPhaseProjectId;
			newProjectPhase.ContractId = projectPhaseContractId;
			newProjectPhase.ManagerId = projectPhaseManagerId;
			newProjectPhase.CurrencyUnitId = projectPhaseCurrencyUnitId;
			newProjectPhase.Name = projectPhaseName;
			newProjectPhase.Description = projectPhaseDescription;
			newProjectPhase.DesignPrice = projectPhaseDesignPrice;
			newProjectPhase.AuctualPrice = projectPhaseAuctualPrice;
			newProjectPhase.IsActive = projectPhaseIsActive;
			newProjectPhase.IsApprove = projectPhaseIsApprove;
			newProjectPhase.IsCurrentProjectPhase = projectPhaseIsCurrentProjectPhase;
			newProjectPhase.Status = projectPhaseStatus;
			newProjectPhase.Type = projectPhaseType;
			newProjectPhase.FromDate = projectPhaseFromDate;
			newProjectPhase.ToDate = projectPhaseToDate;
			newProjectPhase.RealFromDate = projectPhaseRealFromDate;
			newProjectPhase.RealToDate = projectPhaseRealToDate;
			newProjectPhase.ParentPath = projectPhaseParentPath;
			newProjectPhase.IsCollectItemFromChild = projectPhaseIsCollectItemFromChild;
			newProjectPhase.IsStart = projectPhaseIsStart;
			newProjectPhase.IsFinished = projectPhaseIsFinished;
			newProjectPhase.IsBillable = projectPhaseIsBillable;
			newProjectPhase.CreationDate = projectPhaseCreationDate;
			newProjectPhase.CreationUserId = projectPhaseCreationUserId;
			newProjectPhase.LastModificationDate = projectPhaseLastModificationDate;
			newProjectPhase.LastModificationUserId = projectPhaseLastModificationUserId;
			newProjectPhase.ExchangeRate = projectPhaseExchangeRate;
			return newProjectPhase;
		}
				
		#endregion Constructors
		
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ProjectPhaseColumn"/> which has raised the event.</param>
		public void OnColumnChanging(ProjectPhaseColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ProjectPhaseColumn"/> which has raised the event.</param>
		public void OnColumnChanged(ProjectPhaseColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ProjectPhaseColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(ProjectPhaseColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added)
				EntityManager.StopTracking(EntityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				ProjectPhaseEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ProjectPhaseEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ProjectPhaseColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(ProjectPhaseColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ProjectPhaseEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ProjectPhaseEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
				
		#region Properties	
				
		/// <summary>
		/// 	Gets or sets the ProjectPhaseId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 ProjectPhaseId
		{
			get
			{
				return this.entityData.ProjectPhaseId; 
			}
			
			set
			{
				if (this.entityData.ProjectPhaseId == value)
					return;
					
					
				OnColumnChanging(ProjectPhaseColumn.ProjectPhaseId, this.entityData.ProjectPhaseId);
				this.entityData.ProjectPhaseId = value;
				this.EntityId.ProjectPhaseId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProjectPhaseColumn.ProjectPhaseId, this.entityData.ProjectPhaseId);
				OnPropertyChanged("ProjectPhaseId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ParentProjectPhaseId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsParentProjectPhaseIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ParentProjectPhaseId
		{
			get
			{
				return this.entityData.ParentProjectPhaseId; 
			}
			
			set
			{
				if (this.entityData.ParentProjectPhaseId == value)
					return;
					
					
				OnColumnChanging(ProjectPhaseColumn.ParentProjectPhaseId, this.entityData.ParentProjectPhaseId);
				this.entityData.ParentProjectPhaseId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProjectPhaseColumn.ParentProjectPhaseId, this.entityData.ParentProjectPhaseId);
				OnPropertyChanged("ParentProjectPhaseId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ProjectId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 ProjectId
		{
			get
			{
				return this.entityData.ProjectId; 
			}
			
			set
			{
				if (this.entityData.ProjectId == value)
					return;
					
					
				OnColumnChanging(ProjectPhaseColumn.ProjectId, this.entityData.ProjectId);
				this.entityData.ProjectId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProjectPhaseColumn.ProjectId, this.entityData.ProjectId);
				OnPropertyChanged("ProjectId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ContractId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsContractIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ContractId
		{
			get
			{
				return this.entityData.ContractId; 
			}
			
			set
			{
				if (this.entityData.ContractId == value)
					return;
					
					
				OnColumnChanging(ProjectPhaseColumn.ContractId, this.entityData.ContractId);
				this.entityData.ContractId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProjectPhaseColumn.ContractId, this.entityData.ContractId);
				OnPropertyChanged("ContractId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ManagerId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsManagerIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ManagerId
		{
			get
			{
				return this.entityData.ManagerId; 
			}
			
			set
			{
				if (this.entityData.ManagerId == value)
					return;
					
					
				OnColumnChanging(ProjectPhaseColumn.ManagerId, this.entityData.ManagerId);
				this.entityData.ManagerId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProjectPhaseColumn.ManagerId, this.entityData.ManagerId);
				OnPropertyChanged("ManagerId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CurrencyUnitId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCurrencyUnitIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CurrencyUnitId
		{
			get
			{
				return this.entityData.CurrencyUnitId; 
			}
			
			set
			{
				if (this.entityData.CurrencyUnitId == value)
					return;
					
					
				OnColumnChanging(ProjectPhaseColumn.CurrencyUnitId, this.entityData.CurrencyUnitId);
				this.entityData.CurrencyUnitId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProjectPhaseColumn.CurrencyUnitId, this.entityData.CurrencyUnitId);
				OnPropertyChanged("CurrencyUnitId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Name property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false, 500)]
		public virtual System.String Name
		{
			get
			{
				return this.entityData.Name; 
			}
			
			set
			{
				if (this.entityData.Name == value)
					return;
					
					
				OnColumnChanging(ProjectPhaseColumn.Name, this.entityData.Name);
				this.entityData.Name = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProjectPhaseColumn.Name, this.entityData.Name);
				OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Description property. 
		///		
		/// </summary>
		/// <value>This type is ntext.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String Description
		{
			get
			{
				return this.entityData.Description; 
			}
			
			set
			{
				if (this.entityData.Description == value)
					return;
					
					
				OnColumnChanging(ProjectPhaseColumn.Description, this.entityData.Description);
				this.entityData.Description = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProjectPhaseColumn.Description, this.entityData.Description);
				OnPropertyChanged("Description");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DesignPrice property. 
		///		
		/// </summary>
		/// <value>This type is money.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0. It is up to the developer
		/// to check the value of IsDesignPriceNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? DesignPrice
		{
			get
			{
				return this.entityData.DesignPrice; 
			}
			
			set
			{
				if (this.entityData.DesignPrice == value)
					return;
					
					
				OnColumnChanging(ProjectPhaseColumn.DesignPrice, this.entityData.DesignPrice);
				this.entityData.DesignPrice = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProjectPhaseColumn.DesignPrice, this.entityData.DesignPrice);
				OnPropertyChanged("DesignPrice");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AuctualPrice property. 
		///		
		/// </summary>
		/// <value>This type is money.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0. It is up to the developer
		/// to check the value of IsAuctualPriceNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AuctualPrice
		{
			get
			{
				return this.entityData.AuctualPrice; 
			}
			
			set
			{
				if (this.entityData.AuctualPrice == value)
					return;
					
					
				OnColumnChanging(ProjectPhaseColumn.AuctualPrice, this.entityData.AuctualPrice);
				this.entityData.AuctualPrice = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProjectPhaseColumn.AuctualPrice, this.entityData.AuctualPrice);
				OnPropertyChanged("AuctualPrice");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsActive property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsActiveNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsActive
		{
			get
			{
				return this.entityData.IsActive; 
			}
			
			set
			{
				if (this.entityData.IsActive == value)
					return;
					
					
				OnColumnChanging(ProjectPhaseColumn.IsActive, this.entityData.IsActive);
				this.entityData.IsActive = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProjectPhaseColumn.IsActive, this.entityData.IsActive);
				OnPropertyChanged("IsActive");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsApprove property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsApproveNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsApprove
		{
			get
			{
				return this.entityData.IsApprove; 
			}
			
			set
			{
				if (this.entityData.IsApprove == value)
					return;
					
					
				OnColumnChanging(ProjectPhaseColumn.IsApprove, this.entityData.IsApprove);
				this.entityData.IsApprove = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProjectPhaseColumn.IsApprove, this.entityData.IsApprove);
				OnPropertyChanged("IsApprove");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsCurrentProjectPhase property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsCurrentProjectPhaseNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsCurrentProjectPhase
		{
			get
			{
				return this.entityData.IsCurrentProjectPhase; 
			}
			
			set
			{
				if (this.entityData.IsCurrentProjectPhase == value)
					return;
					
					
				OnColumnChanging(ProjectPhaseColumn.IsCurrentProjectPhase, this.entityData.IsCurrentProjectPhase);
				this.entityData.IsCurrentProjectPhase = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProjectPhaseColumn.IsCurrentProjectPhase, this.entityData.IsCurrentProjectPhase);
				OnPropertyChanged("IsCurrentProjectPhase");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Status property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsStatusNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Status
		{
			get
			{
				return this.entityData.Status; 
			}
			
			set
			{
				if (this.entityData.Status == value)
					return;
					
					
				OnColumnChanging(ProjectPhaseColumn.Status, this.entityData.Status);
				this.entityData.Status = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProjectPhaseColumn.Status, this.entityData.Status);
				OnPropertyChanged("Status");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Type property. 
		///		Project phase type: design, built,...
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsTypeNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("Project phase type: design, built,..."), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Type
		{
			get
			{
				return this.entityData.Type; 
			}
			
			set
			{
				if (this.entityData.Type == value)
					return;
					
					
				OnColumnChanging(ProjectPhaseColumn.Type, this.entityData.Type);
				this.entityData.Type = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProjectPhaseColumn.Type, this.entityData.Type);
				OnPropertyChanged("Type");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FromDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsFromDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? FromDate
		{
			get
			{
				return this.entityData.FromDate; 
			}
			
			set
			{
				if (this.entityData.FromDate == value)
					return;
					
					
				OnColumnChanging(ProjectPhaseColumn.FromDate, this.entityData.FromDate);
				this.entityData.FromDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProjectPhaseColumn.FromDate, this.entityData.FromDate);
				OnPropertyChanged("FromDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ToDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsToDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ToDate
		{
			get
			{
				return this.entityData.ToDate; 
			}
			
			set
			{
				if (this.entityData.ToDate == value)
					return;
					
					
				OnColumnChanging(ProjectPhaseColumn.ToDate, this.entityData.ToDate);
				this.entityData.ToDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProjectPhaseColumn.ToDate, this.entityData.ToDate);
				OnPropertyChanged("ToDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RealFromDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsRealFromDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? RealFromDate
		{
			get
			{
				return this.entityData.RealFromDate; 
			}
			
			set
			{
				if (this.entityData.RealFromDate == value)
					return;
					
					
				OnColumnChanging(ProjectPhaseColumn.RealFromDate, this.entityData.RealFromDate);
				this.entityData.RealFromDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProjectPhaseColumn.RealFromDate, this.entityData.RealFromDate);
				OnPropertyChanged("RealFromDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RealToDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsRealToDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? RealToDate
		{
			get
			{
				return this.entityData.RealToDate; 
			}
			
			set
			{
				if (this.entityData.RealToDate == value)
					return;
					
					
				OnColumnChanging(ProjectPhaseColumn.RealToDate, this.entityData.RealToDate);
				this.entityData.RealToDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProjectPhaseColumn.RealToDate, this.entityData.RealToDate);
				OnPropertyChanged("RealToDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ParentPath property. 
		///		Containt list of parent id: Project:1/ProjectPhase:5/ProjejectPhase:8/...
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute("Containt list of parent id: Project:1/ProjectPhase:5/ProjejectPhase:8/..."), BindableAttribute()]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String ParentPath
		{
			get
			{
				return this.entityData.ParentPath; 
			}
			
			set
			{
				if (this.entityData.ParentPath == value)
					return;
					
					
				OnColumnChanging(ProjectPhaseColumn.ParentPath, this.entityData.ParentPath);
				this.entityData.ParentPath = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProjectPhaseColumn.ParentPath, this.entityData.ParentPath);
				OnPropertyChanged("ParentPath");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsCollectItemFromChild property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsCollectItemFromChildNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsCollectItemFromChild
		{
			get
			{
				return this.entityData.IsCollectItemFromChild; 
			}
			
			set
			{
				if (this.entityData.IsCollectItemFromChild == value)
					return;
					
					
				OnColumnChanging(ProjectPhaseColumn.IsCollectItemFromChild, this.entityData.IsCollectItemFromChild);
				this.entityData.IsCollectItemFromChild = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProjectPhaseColumn.IsCollectItemFromChild, this.entityData.IsCollectItemFromChild);
				OnPropertyChanged("IsCollectItemFromChild");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsStart property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsStartNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsStart
		{
			get
			{
				return this.entityData.IsStart; 
			}
			
			set
			{
				if (this.entityData.IsStart == value)
					return;
					
					
				OnColumnChanging(ProjectPhaseColumn.IsStart, this.entityData.IsStart);
				this.entityData.IsStart = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProjectPhaseColumn.IsStart, this.entityData.IsStart);
				OnPropertyChanged("IsStart");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsFinished property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsFinishedNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsFinished
		{
			get
			{
				return this.entityData.IsFinished; 
			}
			
			set
			{
				if (this.entityData.IsFinished == value)
					return;
					
					
				OnColumnChanging(ProjectPhaseColumn.IsFinished, this.entityData.IsFinished);
				this.entityData.IsFinished = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProjectPhaseColumn.IsFinished, this.entityData.IsFinished);
				OnPropertyChanged("IsFinished");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsBillable property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsBillableNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsBillable
		{
			get
			{
				return this.entityData.IsBillable; 
			}
			
			set
			{
				if (this.entityData.IsBillable == value)
					return;
					
					
				OnColumnChanging(ProjectPhaseColumn.IsBillable, this.entityData.IsBillable);
				this.entityData.IsBillable = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProjectPhaseColumn.IsBillable, this.entityData.IsBillable);
				OnPropertyChanged("IsBillable");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreationDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsCreationDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CreationDate
		{
			get
			{
				return this.entityData.CreationDate; 
			}
			
			set
			{
				if (this.entityData.CreationDate == value)
					return;
					
					
				OnColumnChanging(ProjectPhaseColumn.CreationDate, this.entityData.CreationDate);
				this.entityData.CreationDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProjectPhaseColumn.CreationDate, this.entityData.CreationDate);
				OnPropertyChanged("CreationDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreationUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCreationUserIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CreationUserId
		{
			get
			{
				return this.entityData.CreationUserId; 
			}
			
			set
			{
				if (this.entityData.CreationUserId == value)
					return;
					
					
				OnColumnChanging(ProjectPhaseColumn.CreationUserId, this.entityData.CreationUserId);
				this.entityData.CreationUserId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProjectPhaseColumn.CreationUserId, this.entityData.CreationUserId);
				OnPropertyChanged("CreationUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModificationDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastModificationDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastModificationDate
		{
			get
			{
				return this.entityData.LastModificationDate; 
			}
			
			set
			{
				if (this.entityData.LastModificationDate == value)
					return;
					
					
				OnColumnChanging(ProjectPhaseColumn.LastModificationDate, this.entityData.LastModificationDate);
				this.entityData.LastModificationDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProjectPhaseColumn.LastModificationDate, this.entityData.LastModificationDate);
				OnPropertyChanged("LastModificationDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModificationUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsLastModificationUserIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? LastModificationUserId
		{
			get
			{
				return this.entityData.LastModificationUserId; 
			}
			
			set
			{
				if (this.entityData.LastModificationUserId == value)
					return;
					
					
				OnColumnChanging(ProjectPhaseColumn.LastModificationUserId, this.entityData.LastModificationUserId);
				this.entityData.LastModificationUserId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProjectPhaseColumn.LastModificationUserId, this.entityData.LastModificationUserId);
				OnPropertyChanged("LastModificationUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExchangeRate property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsExchangeRateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ExchangeRate
		{
			get
			{
				return this.entityData.ExchangeRate; 
			}
			
			set
			{
				if (this.entityData.ExchangeRate == value)
					return;
					
					
				OnColumnChanging(ProjectPhaseColumn.ExchangeRate, this.entityData.ExchangeRate);
				this.entityData.ExchangeRate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProjectPhaseColumn.ExchangeRate, this.entityData.ExchangeRate);
				OnPropertyChanged("ExchangeRate");
			}
		}
		

		#region Source Foreign Key Property
				
		private Project _projectIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Project"/>.
		/// </summary>
		/// <value>The source Project for ProjectId.</value>
        [XmlIgnore()]
		[Browsable(false), BindableAttribute()]
		public virtual Project ProjectIdSource
      	{
            get { return this._projectIdSource; }
            set { this._projectIdSource = value; }
      	}
		private Contract _contractIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Contract"/>.
		/// </summary>
		/// <value>The source Contract for ContractId.</value>
        [XmlIgnore()]
		[Browsable(false), BindableAttribute()]
		public virtual Contract ContractIdSource
      	{
            get { return this._contractIdSource; }
            set { this._contractIdSource = value; }
      	}
		#endregion
			
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ProjectPhase"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ProjectPhaseId", "ParentProjectPhaseId", "ProjectId", "ContractId", "ManagerId", "CurrencyUnitId", "Name", "Description", "DesignPrice", "AuctualPrice", "IsActive", "IsApprove", "IsCurrentProjectPhase", "Status", "Type", "FromDate", "ToDate", "RealFromDate", "RealToDate", "ParentPath", "IsCollectItemFromChild", "IsStart", "IsFinished", "IsBillable", "CreationDate", "CreationUserId", "LastModificationDate", "LastModificationUserId", "ExchangeRate"};
			}
		}
		#endregion 
		
		
		#endregion
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ProjectPhaseEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (ProjectPhase) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return (object)this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<ProjectPhase>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as ProjectPhase);
	        }
	    }


		#endregion
		
		#region Methods	
			
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();
		}	
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ProjectPhase Entity 
		///</summary>
		public virtual ProjectPhase Copy()
		{
			//shallow copy entity
			ProjectPhase copy = new ProjectPhase();
			copy.ProjectPhaseId = this.ProjectPhaseId;
			copy.ParentProjectPhaseId = this.ParentProjectPhaseId;
			copy.ProjectId = this.ProjectId;
			copy.ContractId = this.ContractId;
			copy.ManagerId = this.ManagerId;
			copy.CurrencyUnitId = this.CurrencyUnitId;
			copy.Name = this.Name;
			copy.Description = this.Description;
			copy.DesignPrice = this.DesignPrice;
			copy.AuctualPrice = this.AuctualPrice;
			copy.IsActive = this.IsActive;
			copy.IsApprove = this.IsApprove;
			copy.IsCurrentProjectPhase = this.IsCurrentProjectPhase;
			copy.Status = this.Status;
			copy.Type = this.Type;
			copy.FromDate = this.FromDate;
			copy.ToDate = this.ToDate;
			copy.RealFromDate = this.RealFromDate;
			copy.RealToDate = this.RealToDate;
			copy.ParentPath = this.ParentPath;
			copy.IsCollectItemFromChild = this.IsCollectItemFromChild;
			copy.IsStart = this.IsStart;
			copy.IsFinished = this.IsFinished;
			copy.IsBillable = this.IsBillable;
			copy.CreationDate = this.CreationDate;
			copy.CreationUserId = this.CreationUserId;
			copy.LastModificationDate = this.LastModificationDate;
			copy.LastModificationUserId = this.LastModificationUserId;
			copy.ExchangeRate = this.ExchangeRate;
					
			copy.AcceptChanges();
			return (ProjectPhase)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed ProjectPhase Entity which is a deep copy of the current entity.
		///</summary>
		public virtual ProjectPhase DeepCopy()
		{
			return EntityHelper.Clone<ProjectPhase>(this as ProjectPhase);	
		}
		#endregion
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ProjectPhaseBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ProjectPhaseBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="ProjectPhaseBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="ProjectPhaseBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ProjectPhaseBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(ProjectPhaseBase Object1, ProjectPhaseBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.ProjectPhaseId != Object2.ProjectPhaseId)
				equal = false;
			if ( Object1.ParentProjectPhaseId != null && Object2.ParentProjectPhaseId != null )
			{
				if (Object1.ParentProjectPhaseId != Object2.ParentProjectPhaseId)
					equal = false;
			}
			else if (Object1.ParentProjectPhaseId == null ^ Object2.ParentProjectPhaseId == null )
			{
				equal = false;
			}
			if (Object1.ProjectId != Object2.ProjectId)
				equal = false;
			if ( Object1.ContractId != null && Object2.ContractId != null )
			{
				if (Object1.ContractId != Object2.ContractId)
					equal = false;
			}
			else if (Object1.ContractId == null ^ Object2.ContractId == null )
			{
				equal = false;
			}
			if ( Object1.ManagerId != null && Object2.ManagerId != null )
			{
				if (Object1.ManagerId != Object2.ManagerId)
					equal = false;
			}
			else if (Object1.ManagerId == null ^ Object2.ManagerId == null )
			{
				equal = false;
			}
			if ( Object1.CurrencyUnitId != null && Object2.CurrencyUnitId != null )
			{
				if (Object1.CurrencyUnitId != Object2.CurrencyUnitId)
					equal = false;
			}
			else if (Object1.CurrencyUnitId == null ^ Object2.CurrencyUnitId == null )
			{
				equal = false;
			}
			if (Object1.Name != Object2.Name)
				equal = false;
			if ( Object1.Description != null && Object2.Description != null )
			{
				if (Object1.Description != Object2.Description)
					equal = false;
			}
			else if (Object1.Description == null ^ Object2.Description == null )
			{
				equal = false;
			}
			if ( Object1.DesignPrice != null && Object2.DesignPrice != null )
			{
				if (Object1.DesignPrice != Object2.DesignPrice)
					equal = false;
			}
			else if (Object1.DesignPrice == null ^ Object2.DesignPrice == null )
			{
				equal = false;
			}
			if ( Object1.AuctualPrice != null && Object2.AuctualPrice != null )
			{
				if (Object1.AuctualPrice != Object2.AuctualPrice)
					equal = false;
			}
			else if (Object1.AuctualPrice == null ^ Object2.AuctualPrice == null )
			{
				equal = false;
			}
			if ( Object1.IsActive != null && Object2.IsActive != null )
			{
				if (Object1.IsActive != Object2.IsActive)
					equal = false;
			}
			else if (Object1.IsActive == null ^ Object2.IsActive == null )
			{
				equal = false;
			}
			if ( Object1.IsApprove != null && Object2.IsApprove != null )
			{
				if (Object1.IsApprove != Object2.IsApprove)
					equal = false;
			}
			else if (Object1.IsApprove == null ^ Object2.IsApprove == null )
			{
				equal = false;
			}
			if ( Object1.IsCurrentProjectPhase != null && Object2.IsCurrentProjectPhase != null )
			{
				if (Object1.IsCurrentProjectPhase != Object2.IsCurrentProjectPhase)
					equal = false;
			}
			else if (Object1.IsCurrentProjectPhase == null ^ Object2.IsCurrentProjectPhase == null )
			{
				equal = false;
			}
			if ( Object1.Status != null && Object2.Status != null )
			{
				if (Object1.Status != Object2.Status)
					equal = false;
			}
			else if (Object1.Status == null ^ Object2.Status == null )
			{
				equal = false;
			}
			if ( Object1.Type != null && Object2.Type != null )
			{
				if (Object1.Type != Object2.Type)
					equal = false;
			}
			else if (Object1.Type == null ^ Object2.Type == null )
			{
				equal = false;
			}
			if ( Object1.FromDate != null && Object2.FromDate != null )
			{
				if (Object1.FromDate != Object2.FromDate)
					equal = false;
			}
			else if (Object1.FromDate == null ^ Object2.FromDate == null )
			{
				equal = false;
			}
			if ( Object1.ToDate != null && Object2.ToDate != null )
			{
				if (Object1.ToDate != Object2.ToDate)
					equal = false;
			}
			else if (Object1.ToDate == null ^ Object2.ToDate == null )
			{
				equal = false;
			}
			if ( Object1.RealFromDate != null && Object2.RealFromDate != null )
			{
				if (Object1.RealFromDate != Object2.RealFromDate)
					equal = false;
			}
			else if (Object1.RealFromDate == null ^ Object2.RealFromDate == null )
			{
				equal = false;
			}
			if ( Object1.RealToDate != null && Object2.RealToDate != null )
			{
				if (Object1.RealToDate != Object2.RealToDate)
					equal = false;
			}
			else if (Object1.RealToDate == null ^ Object2.RealToDate == null )
			{
				equal = false;
			}
			if ( Object1.ParentPath != null && Object2.ParentPath != null )
			{
				if (Object1.ParentPath != Object2.ParentPath)
					equal = false;
			}
			else if (Object1.ParentPath == null ^ Object2.ParentPath == null )
			{
				equal = false;
			}
			if ( Object1.IsCollectItemFromChild != null && Object2.IsCollectItemFromChild != null )
			{
				if (Object1.IsCollectItemFromChild != Object2.IsCollectItemFromChild)
					equal = false;
			}
			else if (Object1.IsCollectItemFromChild == null ^ Object2.IsCollectItemFromChild == null )
			{
				equal = false;
			}
			if ( Object1.IsStart != null && Object2.IsStart != null )
			{
				if (Object1.IsStart != Object2.IsStart)
					equal = false;
			}
			else if (Object1.IsStart == null ^ Object2.IsStart == null )
			{
				equal = false;
			}
			if ( Object1.IsFinished != null && Object2.IsFinished != null )
			{
				if (Object1.IsFinished != Object2.IsFinished)
					equal = false;
			}
			else if (Object1.IsFinished == null ^ Object2.IsFinished == null )
			{
				equal = false;
			}
			if ( Object1.IsBillable != null && Object2.IsBillable != null )
			{
				if (Object1.IsBillable != Object2.IsBillable)
					equal = false;
			}
			else if (Object1.IsBillable == null ^ Object2.IsBillable == null )
			{
				equal = false;
			}
			if ( Object1.CreationDate != null && Object2.CreationDate != null )
			{
				if (Object1.CreationDate != Object2.CreationDate)
					equal = false;
			}
			else if (Object1.CreationDate == null ^ Object2.CreationDate == null )
			{
				equal = false;
			}
			if ( Object1.CreationUserId != null && Object2.CreationUserId != null )
			{
				if (Object1.CreationUserId != Object2.CreationUserId)
					equal = false;
			}
			else if (Object1.CreationUserId == null ^ Object2.CreationUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastModificationDate != null && Object2.LastModificationDate != null )
			{
				if (Object1.LastModificationDate != Object2.LastModificationDate)
					equal = false;
			}
			else if (Object1.LastModificationDate == null ^ Object2.LastModificationDate == null )
			{
				equal = false;
			}
			if ( Object1.LastModificationUserId != null && Object2.LastModificationUserId != null )
			{
				if (Object1.LastModificationUserId != Object2.LastModificationUserId)
					equal = false;
			}
			else if (Object1.LastModificationUserId == null ^ Object2.LastModificationUserId == null )
			{
				equal = false;
			}
			if ( Object1.ExchangeRate != null && Object2.ExchangeRate != null )
			{
				if (Object1.ExchangeRate != Object2.ExchangeRate)
					equal = false;
			}
			else if (Object1.ExchangeRate == null ^ Object2.ExchangeRate == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			// TODO -> generate a strongly typed IComparer in the concrete class
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name) .CompareTo(((ProjectPhaseBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name));
		}
		
		/*
		// static method to get a Comparer object
        public static ProjectPhaseComparer GetComparer()
        {
            return new ProjectPhaseComparer();
        }
        */

        // Comparer delegates back to ProjectPhase
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(ProjectPhase rhs, ProjectPhaseColumn which)
        {
            switch (which)
            {
            	
            	
            	case ProjectPhaseColumn.ProjectPhaseId:
            		return this.ProjectPhaseId.CompareTo(rhs.ProjectPhaseId);
            		
            		                 
            	
            	
            	case ProjectPhaseColumn.ParentProjectPhaseId:
            		return this.ParentProjectPhaseId.Value.CompareTo(rhs.ParentProjectPhaseId.Value);
            		
            		                 
            	
            	
            	case ProjectPhaseColumn.ProjectId:
            		return this.ProjectId.CompareTo(rhs.ProjectId);
            		
            		                 
            	
            	
            	case ProjectPhaseColumn.ContractId:
            		return this.ContractId.Value.CompareTo(rhs.ContractId.Value);
            		
            		                 
            	
            	
            	case ProjectPhaseColumn.ManagerId:
            		return this.ManagerId.Value.CompareTo(rhs.ManagerId.Value);
            		
            		                 
            	
            	
            	case ProjectPhaseColumn.CurrencyUnitId:
            		return this.CurrencyUnitId.Value.CompareTo(rhs.CurrencyUnitId.Value);
            		
            		                 
            	
            	
            	case ProjectPhaseColumn.Name:
            		return this.Name.CompareTo(rhs.Name);
            		
            		                 
            	
            	
            	case ProjectPhaseColumn.Description:
            		return this.Description.CompareTo(rhs.Description);
            		
            		                 
            	
            	
            	case ProjectPhaseColumn.DesignPrice:
            		return this.DesignPrice.Value.CompareTo(rhs.DesignPrice.Value);
            		
            		                 
            	
            	
            	case ProjectPhaseColumn.AuctualPrice:
            		return this.AuctualPrice.Value.CompareTo(rhs.AuctualPrice.Value);
            		
            		                 
            	
            	
            	case ProjectPhaseColumn.IsActive:
            		return this.IsActive.Value.CompareTo(rhs.IsActive.Value);
            		
            		                 
            	
            	
            	case ProjectPhaseColumn.IsApprove:
            		return this.IsApprove.Value.CompareTo(rhs.IsApprove.Value);
            		
            		                 
            	
            	
            	case ProjectPhaseColumn.IsCurrentProjectPhase:
            		return this.IsCurrentProjectPhase.Value.CompareTo(rhs.IsCurrentProjectPhase.Value);
            		
            		                 
            	
            	
            	case ProjectPhaseColumn.Status:
            		return this.Status.Value.CompareTo(rhs.Status.Value);
            		
            		                 
            	
            	
            	case ProjectPhaseColumn.Type:
            		return this.Type.Value.CompareTo(rhs.Type.Value);
            		
            		                 
            	
            	
            	case ProjectPhaseColumn.FromDate:
            		return this.FromDate.Value.CompareTo(rhs.FromDate.Value);
            		
            		                 
            	
            	
            	case ProjectPhaseColumn.ToDate:
            		return this.ToDate.Value.CompareTo(rhs.ToDate.Value);
            		
            		                 
            	
            	
            	case ProjectPhaseColumn.RealFromDate:
            		return this.RealFromDate.Value.CompareTo(rhs.RealFromDate.Value);
            		
            		                 
            	
            	
            	case ProjectPhaseColumn.RealToDate:
            		return this.RealToDate.Value.CompareTo(rhs.RealToDate.Value);
            		
            		                 
            	
            	
            	case ProjectPhaseColumn.ParentPath:
            		return this.ParentPath.CompareTo(rhs.ParentPath);
            		
            		                 
            	
            	
            	case ProjectPhaseColumn.IsCollectItemFromChild:
            		return this.IsCollectItemFromChild.Value.CompareTo(rhs.IsCollectItemFromChild.Value);
            		
            		                 
            	
            	
            	case ProjectPhaseColumn.IsStart:
            		return this.IsStart.Value.CompareTo(rhs.IsStart.Value);
            		
            		                 
            	
            	
            	case ProjectPhaseColumn.IsFinished:
            		return this.IsFinished.Value.CompareTo(rhs.IsFinished.Value);
            		
            		                 
            	
            	
            	case ProjectPhaseColumn.IsBillable:
            		return this.IsBillable.Value.CompareTo(rhs.IsBillable.Value);
            		
            		                 
            	
            	
            	case ProjectPhaseColumn.CreationDate:
            		return this.CreationDate.Value.CompareTo(rhs.CreationDate.Value);
            		
            		                 
            	
            	
            	case ProjectPhaseColumn.CreationUserId:
            		return this.CreationUserId.Value.CompareTo(rhs.CreationUserId.Value);
            		
            		                 
            	
            	
            	case ProjectPhaseColumn.LastModificationDate:
            		return this.LastModificationDate.Value.CompareTo(rhs.LastModificationDate.Value);
            		
            		                 
            	
            	
            	case ProjectPhaseColumn.LastModificationUserId:
            		return this.LastModificationUserId.Value.CompareTo(rhs.LastModificationUserId.Value);
            		
            		                 
            	
            	
            	case ProjectPhaseColumn.ExchangeRate:
            		return this.ExchangeRate.Value.CompareTo(rhs.ExchangeRate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ProjectPhaseKey> Members
		
		// member variable for the EntityId property
		private ProjectPhaseKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public ProjectPhaseKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ProjectPhaseKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = @"ProjectPhase" 
					+ this.ProjectPhaseId.ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{30}{29}- ProjectPhaseId: {0}{29}- ParentProjectPhaseId: {1}{29}- ProjectId: {2}{29}- ContractId: {3}{29}- ManagerId: {4}{29}- CurrencyUnitId: {5}{29}- Name: {6}{29}- Description: {7}{29}- DesignPrice: {8}{29}- AuctualPrice: {9}{29}- IsActive: {10}{29}- IsApprove: {11}{29}- IsCurrentProjectPhase: {12}{29}- Status: {13}{29}- Type: {14}{29}- FromDate: {15}{29}- ToDate: {16}{29}- RealFromDate: {17}{29}- RealToDate: {18}{29}- ParentPath: {19}{29}- IsCollectItemFromChild: {20}{29}- IsStart: {21}{29}- IsFinished: {22}{29}- IsBillable: {23}{29}- CreationDate: {24}{29}- CreationUserId: {25}{29}- LastModificationDate: {26}{29}- LastModificationUserId: {27}{29}- ExchangeRate: {28}{29}", 
				this.ProjectPhaseId,
				(this.ParentProjectPhaseId == null) ? string.Empty : this.ParentProjectPhaseId.ToString(),
				this.ProjectId,
				(this.ContractId == null) ? string.Empty : this.ContractId.ToString(),
				(this.ManagerId == null) ? string.Empty : this.ManagerId.ToString(),
				(this.CurrencyUnitId == null) ? string.Empty : this.CurrencyUnitId.ToString(),
				this.Name,
				(this.Description == null) ? string.Empty : this.Description.ToString(),
				(this.DesignPrice == null) ? string.Empty : this.DesignPrice.ToString(),
				(this.AuctualPrice == null) ? string.Empty : this.AuctualPrice.ToString(),
				(this.IsActive == null) ? string.Empty : this.IsActive.ToString(),
				(this.IsApprove == null) ? string.Empty : this.IsApprove.ToString(),
				(this.IsCurrentProjectPhase == null) ? string.Empty : this.IsCurrentProjectPhase.ToString(),
				(this.Status == null) ? string.Empty : this.Status.ToString(),
				(this.Type == null) ? string.Empty : this.Type.ToString(),
				(this.FromDate == null) ? string.Empty : this.FromDate.ToString(),
				(this.ToDate == null) ? string.Empty : this.ToDate.ToString(),
				(this.RealFromDate == null) ? string.Empty : this.RealFromDate.ToString(),
				(this.RealToDate == null) ? string.Empty : this.RealToDate.ToString(),
				(this.ParentPath == null) ? string.Empty : this.ParentPath.ToString(),
				(this.IsCollectItemFromChild == null) ? string.Empty : this.IsCollectItemFromChild.ToString(),
				(this.IsStart == null) ? string.Empty : this.IsStart.ToString(),
				(this.IsFinished == null) ? string.Empty : this.IsFinished.ToString(),
				(this.IsBillable == null) ? string.Empty : this.IsBillable.ToString(),
				(this.CreationDate == null) ? string.Empty : this.CreationDate.ToString(),
				(this.CreationUserId == null) ? string.Empty : this.CreationUserId.ToString(),
				(this.LastModificationDate == null) ? string.Empty : this.LastModificationDate.ToString(),
				(this.LastModificationUserId == null) ? string.Empty : this.LastModificationUserId.ToString(),
				(this.ExchangeRate == null) ? string.Empty : this.ExchangeRate.ToString(),
				Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ProjectPhase' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal class ProjectPhaseEntityData : ICloneable
	{
		#region Variable Declarations
		
		#region Primary key(s)
			/// <summary>			
			/// ProjectPhaseId : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "ProjectPhase"</remarks>
			public System.Int32 ProjectPhaseId;
				
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ParentProjectPhaseId : 
		/// </summary>
		public System.Int32?		  ParentProjectPhaseId = (int)0;
		
		/// <summary>
		/// ProjectId : 
		/// </summary>
		public System.Int32		  ProjectId = (int)0;
		
		/// <summary>
		/// ContractId : 
		/// </summary>
		public System.Int32?		  ContractId = (int)0;
		
		/// <summary>
		/// ManagerId : 
		/// </summary>
		public System.Int32?		  ManagerId = (int)0;
		
		/// <summary>
		/// CurrencyUnitId : 
		/// </summary>
		public System.Int32?		  CurrencyUnitId = (int)0;
		
		/// <summary>
		/// Name : 
		/// </summary>
		public System.String		  Name = string.Empty;
		
		/// <summary>
		/// Description : 
		/// </summary>
		public System.String		  Description = string.Empty;
		
		/// <summary>
		/// DesignPrice : 
		/// </summary>
		public System.Decimal?		  DesignPrice = 0;
		
		/// <summary>
		/// AuctualPrice : 
		/// </summary>
		public System.Decimal?		  AuctualPrice = 0;
		
		/// <summary>
		/// IsActive : 
		/// </summary>
		public System.Boolean?		  IsActive = false;
		
		/// <summary>
		/// IsApprove : 
		/// </summary>
		public System.Boolean?		  IsApprove = false;
		
		/// <summary>
		/// IsCurrentProjectPhase : 
		/// </summary>
		public System.Boolean?		  IsCurrentProjectPhase = false;
		
		/// <summary>
		/// Status : 
		/// </summary>
		public System.Int32?		  Status = (int)0;
		
		/// <summary>
		/// Type : Project phase type: design, built,...
		/// </summary>
		public System.Int32?		  Type = (int)0;
		
		/// <summary>
		/// FromDate : 
		/// </summary>
		public System.DateTime?		  FromDate = DateTime.MinValue;
		
		/// <summary>
		/// ToDate : 
		/// </summary>
		public System.DateTime?		  ToDate = DateTime.MinValue;
		
		/// <summary>
		/// RealFromDate : 
		/// </summary>
		public System.DateTime?		  RealFromDate = DateTime.MinValue;
		
		/// <summary>
		/// RealToDate : 
		/// </summary>
		public System.DateTime?		  RealToDate = DateTime.MinValue;
		
		/// <summary>
		/// ParentPath : Containt list of parent id: Project:1/ProjectPhase:5/ProjejectPhase:8/...
		/// </summary>
		public System.String		  ParentPath = string.Empty;
		
		/// <summary>
		/// IsCollectItemFromChild : 
		/// </summary>
		public System.Boolean?		  IsCollectItemFromChild = false;
		
		/// <summary>
		/// IsStart : 
		/// </summary>
		public System.Boolean?		  IsStart = false;
		
		/// <summary>
		/// IsFinished : 
		/// </summary>
		public System.Boolean?		  IsFinished = false;
		
		/// <summary>
		/// IsBillable : 
		/// </summary>
		public System.Boolean?		  IsBillable = false;
		
		/// <summary>
		/// CreationDate : 
		/// </summary>
		public System.DateTime?		  CreationDate = DateTime.MinValue;
		
		/// <summary>
		/// CreationUserId : 
		/// </summary>
		public System.Int32?		  CreationUserId = (int)0;
		
		/// <summary>
		/// LastModificationDate : 
		/// </summary>
		public System.DateTime?		  LastModificationDate = DateTime.MinValue;
		
		/// <summary>
		/// LastModificationUserId : 
		/// </summary>
		public System.Int32?		  LastModificationUserId = (int)0;
		
		/// <summary>
		/// ExchangeRate : 
		/// </summary>
		public System.Int32?		  ExchangeRate = (int)0;
		#endregion
			
		#endregion Variable Declarations
		
		#region Clone
		public Object Clone()
		{
			ProjectPhaseEntityData _tmp = new ProjectPhaseEntityData();
						
			_tmp.ProjectPhaseId = this.ProjectPhaseId;
			
			_tmp.ParentProjectPhaseId = this.ParentProjectPhaseId;
			_tmp.ProjectId = this.ProjectId;
			_tmp.ContractId = this.ContractId;
			_tmp.ManagerId = this.ManagerId;
			_tmp.CurrencyUnitId = this.CurrencyUnitId;
			_tmp.Name = this.Name;
			_tmp.Description = this.Description;
			_tmp.DesignPrice = this.DesignPrice;
			_tmp.AuctualPrice = this.AuctualPrice;
			_tmp.IsActive = this.IsActive;
			_tmp.IsApprove = this.IsApprove;
			_tmp.IsCurrentProjectPhase = this.IsCurrentProjectPhase;
			_tmp.Status = this.Status;
			_tmp.Type = this.Type;
			_tmp.FromDate = this.FromDate;
			_tmp.ToDate = this.ToDate;
			_tmp.RealFromDate = this.RealFromDate;
			_tmp.RealToDate = this.RealToDate;
			_tmp.ParentPath = this.ParentPath;
			_tmp.IsCollectItemFromChild = this.IsCollectItemFromChild;
			_tmp.IsStart = this.IsStart;
			_tmp.IsFinished = this.IsFinished;
			_tmp.IsBillable = this.IsBillable;
			_tmp.CreationDate = this.CreationDate;
			_tmp.CreationUserId = this.CreationUserId;
			_tmp.LastModificationDate = this.LastModificationDate;
			_tmp.LastModificationUserId = this.LastModificationUserId;
			_tmp.ExchangeRate = this.ExchangeRate;
			
			return _tmp;
		}
		#endregion 
		
		#region Data Properties

		#endregion Data Properties

	}//End struct


		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"Name");
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Name",500));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("ParentPath",500));
		}
   		#endregion
	
	} // End Class
	
	#region ProjectPhaseComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ProjectPhaseComparer : System.Collections.Generic.IComparer<ProjectPhase>
	{
		ProjectPhaseColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ProjectPhaseComparer"/> class.
        /// </summary>
		public ProjectPhaseComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ProjectPhaseComparer(ProjectPhaseColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="ProjectPhase"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="ProjectPhase"/> to compare.</param>
        /// <param name="b">The second <c>ProjectPhase</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(ProjectPhase a, ProjectPhase b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(ProjectPhase entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(ProjectPhase a, ProjectPhase b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ProjectPhaseColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ProjectPhaseKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="ProjectPhase"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ProjectPhaseKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ProjectPhaseKey class.
		/// </summary>
		public ProjectPhaseKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ProjectPhaseKey class.
		/// </summary>
		public ProjectPhaseKey(ProjectPhaseBase entity)
		{
			Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.projectPhaseId = entity.ProjectPhaseId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ProjectPhaseKey class.
		/// </summary>
		public ProjectPhaseKey(System.Int32 projectPhaseId)
		{
			#region Init Properties

			this.projectPhaseId = projectPhaseId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ProjectPhaseBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ProjectPhaseBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the ProjectPhaseId property
		private System.Int32 projectPhaseId;
		
		/// <summary>
		/// Gets or sets the ProjectPhaseId property.
		/// </summary>
		public System.Int32 ProjectPhaseId
		{
			get { return projectPhaseId; }
			set
			{
				if ( Entity != null )
				{
					Entity.ProjectPhaseId = value;
				}
				
				projectPhaseId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				ProjectPhaseId = ( values["ProjectPhaseId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["ProjectPhaseId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("ProjectPhaseId", ProjectPhaseId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("ProjectPhaseId: {0}{1}",
								ProjectPhaseId,
								Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ProjectPhaseColumn Enum
	
	/// <summary>
	/// Enumerate the ProjectPhase columns.
	/// </summary>
	[Serializable]
	public enum ProjectPhaseColumn : int
	{
		/// <summary>
		/// ProjectPhaseId : 
		/// </summary>
		[EnumTextValue("ProjectPhaseId")]
		[ColumnEnum("ProjectPhaseId", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		ProjectPhaseId = 1,
		/// <summary>
		/// ParentProjectPhaseId : 
		/// </summary>
		[EnumTextValue("ParentProjectPhaseId")]
		[ColumnEnum("ParentProjectPhaseId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ParentProjectPhaseId = 2,
		/// <summary>
		/// ProjectId : 
		/// </summary>
		[EnumTextValue("ProjectId")]
		[ColumnEnum("ProjectId", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ProjectId = 3,
		/// <summary>
		/// ContractId : 
		/// </summary>
		[EnumTextValue("ContractId")]
		[ColumnEnum("ContractId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ContractId = 4,
		/// <summary>
		/// ManagerId : 
		/// </summary>
		[EnumTextValue("ManagerId")]
		[ColumnEnum("ManagerId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ManagerId = 5,
		/// <summary>
		/// CurrencyUnitId : 
		/// </summary>
		[EnumTextValue("CurrencyUnitId")]
		[ColumnEnum("CurrencyUnitId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CurrencyUnitId = 6,
		/// <summary>
		/// Name : 
		/// </summary>
		[EnumTextValue("Name")]
		[ColumnEnum("Name", typeof(System.String), System.Data.DbType.String, false, false, false, 500)]
		Name = 7,
		/// <summary>
		/// Description : 
		/// </summary>
		[EnumTextValue("Description")]
		[ColumnEnum("Description", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Description = 8,
		/// <summary>
		/// DesignPrice : 
		/// </summary>
		[EnumTextValue("DesignPrice")]
		[ColumnEnum("DesignPrice", typeof(System.Decimal), System.Data.DbType.Currency, false, false, true)]
		DesignPrice = 9,
		/// <summary>
		/// AuctualPrice : 
		/// </summary>
		[EnumTextValue("AuctualPrice")]
		[ColumnEnum("AuctualPrice", typeof(System.Decimal), System.Data.DbType.Currency, false, false, true)]
		AuctualPrice = 10,
		/// <summary>
		/// IsActive : 
		/// </summary>
		[EnumTextValue("IsActive")]
		[ColumnEnum("IsActive", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsActive = 11,
		/// <summary>
		/// IsApprove : 
		/// </summary>
		[EnumTextValue("IsApprove")]
		[ColumnEnum("IsApprove", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsApprove = 12,
		/// <summary>
		/// IsCurrentProjectPhase : 
		/// </summary>
		[EnumTextValue("IsCurrentProjectPhase")]
		[ColumnEnum("IsCurrentProjectPhase", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsCurrentProjectPhase = 13,
		/// <summary>
		/// Status : 
		/// </summary>
		[EnumTextValue("Status")]
		[ColumnEnum("Status", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Status = 14,
		/// <summary>
		/// Type : Project phase type: design, built,...
		/// </summary>
		[EnumTextValue("Type")]
		[ColumnEnum("Type", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Type = 15,
		/// <summary>
		/// FromDate : 
		/// </summary>
		[EnumTextValue("FromDate")]
		[ColumnEnum("FromDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		FromDate = 16,
		/// <summary>
		/// ToDate : 
		/// </summary>
		[EnumTextValue("ToDate")]
		[ColumnEnum("ToDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ToDate = 17,
		/// <summary>
		/// RealFromDate : 
		/// </summary>
		[EnumTextValue("RealFromDate")]
		[ColumnEnum("RealFromDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		RealFromDate = 18,
		/// <summary>
		/// RealToDate : 
		/// </summary>
		[EnumTextValue("RealToDate")]
		[ColumnEnum("RealToDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		RealToDate = 19,
		/// <summary>
		/// ParentPath : Containt list of parent id: Project:1/ProjectPhase:5/ProjejectPhase:8/...
		/// </summary>
		[EnumTextValue("ParentPath")]
		[ColumnEnum("ParentPath", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		ParentPath = 20,
		/// <summary>
		/// IsCollectItemFromChild : 
		/// </summary>
		[EnumTextValue("IsCollectItemFromChild")]
		[ColumnEnum("IsCollectItemFromChild", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsCollectItemFromChild = 21,
		/// <summary>
		/// IsStart : 
		/// </summary>
		[EnumTextValue("IsStart")]
		[ColumnEnum("IsStart", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsStart = 22,
		/// <summary>
		/// IsFinished : 
		/// </summary>
		[EnumTextValue("IsFinished")]
		[ColumnEnum("IsFinished", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsFinished = 23,
		/// <summary>
		/// IsBillable : 
		/// </summary>
		[EnumTextValue("IsBillable")]
		[ColumnEnum("IsBillable", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsBillable = 24,
		/// <summary>
		/// CreationDate : 
		/// </summary>
		[EnumTextValue("CreationDate")]
		[ColumnEnum("CreationDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CreationDate = 25,
		/// <summary>
		/// CreationUserId : 
		/// </summary>
		[EnumTextValue("CreationUserId")]
		[ColumnEnum("CreationUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CreationUserId = 26,
		/// <summary>
		/// LastModificationDate : 
		/// </summary>
		[EnumTextValue("LastModificationDate")]
		[ColumnEnum("LastModificationDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastModificationDate = 27,
		/// <summary>
		/// LastModificationUserId : 
		/// </summary>
		[EnumTextValue("LastModificationUserId")]
		[ColumnEnum("LastModificationUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		LastModificationUserId = 28,
		/// <summary>
		/// ExchangeRate : 
		/// </summary>
		[EnumTextValue("ExchangeRate")]
		[ColumnEnum("ExchangeRate", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ExchangeRate = 29
	}//End enum

	#endregion ProjectPhaseColumn Enum

} // end namespace
