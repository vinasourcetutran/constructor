	
/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : Saturday, May 07, 2011
	Important: Do not modify this file. Edit the file Contract.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace RLM.Construction.Entities
{
	#region ContractEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Contract"/> object.
	/// </remarks>
	public class ContractEventArgs : System.EventArgs
	{
		private ContractColumn column;
		private object value;
		
		
		///<summary>
		/// Initalizes a new Instance of the ContractEventArgs class.
		///</summary>
		public ContractEventArgs(ContractColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ContractEventArgs class.
		///</summary>
		public ContractEventArgs(ContractColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		
		///<summary>
		/// The ContractColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ContractColumn" />
		public ContractColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	
	///<summary>
	/// Define a delegate for all Contract related events.
	///</summary>
	public delegate void ContractEventHandler(object sender, ContractEventArgs e);
	
	///<summary>
	/// An object representation of the 'Contract' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	//[ToolboxItem(typeof(Contract))]
	public abstract partial class ContractBase : EntityBase, IEntityId<ContractKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		/// 	Old the inner data of the entity.
		/// </summary>
		private ContractEntityData entityData;
		
		// <summary>
		// 	Old the original data of the entity.
		// </summary>
		//ContractEntityData originalData;
		
		/// <summary>
		/// 	Old a backup of the inner data of the entity.
		/// </summary>
		private ContractEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		[NonSerialized]
		private TList<Contract> parentCollection;
		private bool inTxn = false;

		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event ContractEventHandler ColumnChanging;
		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ContractEventHandler ColumnChanged;		
		#endregion "Variable Declarations"
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ContractBase"/> instance.
		///</summary>
		public ContractBase()
		{
			this.entityData = new ContractEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ContractBase"/> instance.
		///</summary>
		///<param name="contractFromContactName"></param>
		///<param name="contractToContactName"></param>
		///<param name="contractType">TYpe of contract: nhan thau, giao thau</param>
		///<param name="contractConstructDeptId"></param>
		///<param name="contractDesignDeptId"></param>
		///<param name="contractGroupId"></param>
		///<param name="contractPartnerId"></param>
		///<param name="contractCode"></param>
		///<param name="contractNumber"></param>
		///<param name="contractName"></param>
		///<param name="contractDescription"></param>
		///<param name="contractComment"></param>
		///<param name="contractInitPrice"></param>
		///<param name="contractLastPrice"></param>
		///<param name="contractSignedDate">The data that contract was signed</param>
		///<param name="contractFromDate"></param>
		///<param name="contractToDate"></param>
		///<param name="contractRealFromDate"></param>
		///<param name="contractRealToDate"></param>
		///<param name="contractStatus"></param>
		///<param name="contractIsApprove"></param>
		///<param name="contractIsActive"></param>
		///<param name="contractIsPrinted"></param>
		///<param name="contractCurrencyUnitId"></param>
		///<param name="contractContractType">Electromechanical, Construction, ...</param>
		///<param name="contractFromContactorId">A representative</param>
		///<param name="contractToContactorId">B representative</param>
		///<param name="contractVATTax"></param>
		///<param name="contractPITTax"></param>
		///<param name="contractCITTax"></param>
		///<param name="contractOther"></param>
		///<param name="contractCreationUserId"></param>
		///<param name="contractCreationDate"></param>
		///<param name="contractLastModificationUserId"></param>
		///<param name="contractLastModificationDate"></param>
		///<param name="contractExchangeRate"></param>
		public ContractBase(System.String contractFromContactName, System.String contractToContactName, System.Int32? contractType, 
			System.Int32? contractConstructDeptId, System.Int32? contractDesignDeptId, System.Int32? contractGroupId, System.Int32? contractPartnerId, 
			System.String contractCode, System.String contractNumber, System.String contractName, System.String contractDescription, 
			System.String contractComment, System.Decimal? contractInitPrice, System.Decimal? contractLastPrice, System.DateTime? contractSignedDate, 
			System.DateTime? contractFromDate, System.DateTime? contractToDate, System.DateTime? contractRealFromDate, System.DateTime? contractRealToDate, 
			System.Int32? contractStatus, System.Boolean? contractIsApprove, System.Boolean? contractIsActive, System.Int64? contractIsPrinted, 
			System.Int32? contractCurrencyUnitId, System.Int32? contractContractType, System.Int32? contractFromContactorId, System.Int32? contractToContactorId, 
			System.Double? contractVATTax, System.Double? contractPITTax, System.Double? contractCITTax, System.Decimal? contractOther, 
			System.Int32? contractCreationUserId, System.DateTime? contractCreationDate, System.Int32? contractLastModificationUserId, 
			System.DateTime? contractLastModificationDate, System.Int32? contractExchangeRate)
		{
			this.entityData = new ContractEntityData();
			this.backupData = null;

			this.FromContactName = contractFromContactName;
			this.ToContactName = contractToContactName;
			this.Type = contractType;
			this.ConstructDeptId = contractConstructDeptId;
			this.DesignDeptId = contractDesignDeptId;
			this.GroupId = contractGroupId;
			this.PartnerId = contractPartnerId;
			this.Code = contractCode;
			this.Number = contractNumber;
			this.Name = contractName;
			this.Description = contractDescription;
			this.Comment = contractComment;
			this.InitPrice = contractInitPrice;
			this.LastPrice = contractLastPrice;
			this.SignedDate = contractSignedDate;
			this.FromDate = contractFromDate;
			this.ToDate = contractToDate;
			this.RealFromDate = contractRealFromDate;
			this.RealToDate = contractRealToDate;
			this.Status = contractStatus;
			this.IsApprove = contractIsApprove;
			this.IsActive = contractIsActive;
			this.IsPrinted = contractIsPrinted;
			this.CurrencyUnitId = contractCurrencyUnitId;
			this.ContractType = contractContractType;
			this.FromContactorId = contractFromContactorId;
			this.ToContactorId = contractToContactorId;
			this.VATTax = contractVATTax;
			this.PITTax = contractPITTax;
			this.CITTax = contractCITTax;
			this.Other = contractOther;
			this.CreationUserId = contractCreationUserId;
			this.CreationDate = contractCreationDate;
			this.LastModificationUserId = contractLastModificationUserId;
			this.LastModificationDate = contractLastModificationDate;
			this.ExchangeRate = contractExchangeRate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Contract"/> instance.
		///</summary>
		///<param name="contractFromContactName"></param>
		///<param name="contractToContactName"></param>
		///<param name="contractType">TYpe of contract: nhan thau, giao thau</param>
		///<param name="contractConstructDeptId"></param>
		///<param name="contractDesignDeptId"></param>
		///<param name="contractGroupId"></param>
		///<param name="contractPartnerId"></param>
		///<param name="contractCode"></param>
		///<param name="contractNumber"></param>
		///<param name="contractName"></param>
		///<param name="contractDescription"></param>
		///<param name="contractComment"></param>
		///<param name="contractInitPrice"></param>
		///<param name="contractLastPrice"></param>
		///<param name="contractSignedDate">The data that contract was signed</param>
		///<param name="contractFromDate"></param>
		///<param name="contractToDate"></param>
		///<param name="contractRealFromDate"></param>
		///<param name="contractRealToDate"></param>
		///<param name="contractStatus"></param>
		///<param name="contractIsApprove"></param>
		///<param name="contractIsActive"></param>
		///<param name="contractIsPrinted"></param>
		///<param name="contractCurrencyUnitId"></param>
		///<param name="contractContractType">Electromechanical, Construction, ...</param>
		///<param name="contractFromContactorId">A representative</param>
		///<param name="contractToContactorId">B representative</param>
		///<param name="contractVATTax"></param>
		///<param name="contractPITTax"></param>
		///<param name="contractCITTax"></param>
		///<param name="contractOther"></param>
		///<param name="contractCreationUserId"></param>
		///<param name="contractCreationDate"></param>
		///<param name="contractLastModificationUserId"></param>
		///<param name="contractLastModificationDate"></param>
		///<param name="contractExchangeRate"></param>
		public static Contract CreateContract(System.String contractFromContactName, System.String contractToContactName, System.Int32? contractType, 
			System.Int32? contractConstructDeptId, System.Int32? contractDesignDeptId, System.Int32? contractGroupId, System.Int32? contractPartnerId, 
			System.String contractCode, System.String contractNumber, System.String contractName, System.String contractDescription, 
			System.String contractComment, System.Decimal? contractInitPrice, System.Decimal? contractLastPrice, System.DateTime? contractSignedDate, 
			System.DateTime? contractFromDate, System.DateTime? contractToDate, System.DateTime? contractRealFromDate, System.DateTime? contractRealToDate, 
			System.Int32? contractStatus, System.Boolean? contractIsApprove, System.Boolean? contractIsActive, System.Int64? contractIsPrinted, 
			System.Int32? contractCurrencyUnitId, System.Int32? contractContractType, System.Int32? contractFromContactorId, System.Int32? contractToContactorId, 
			System.Double? contractVATTax, System.Double? contractPITTax, System.Double? contractCITTax, System.Decimal? contractOther, 
			System.Int32? contractCreationUserId, System.DateTime? contractCreationDate, System.Int32? contractLastModificationUserId, 
			System.DateTime? contractLastModificationDate, System.Int32? contractExchangeRate)
		{
			Contract newContract = new Contract();
			newContract.FromContactName = contractFromContactName;
			newContract.ToContactName = contractToContactName;
			newContract.Type = contractType;
			newContract.ConstructDeptId = contractConstructDeptId;
			newContract.DesignDeptId = contractDesignDeptId;
			newContract.GroupId = contractGroupId;
			newContract.PartnerId = contractPartnerId;
			newContract.Code = contractCode;
			newContract.Number = contractNumber;
			newContract.Name = contractName;
			newContract.Description = contractDescription;
			newContract.Comment = contractComment;
			newContract.InitPrice = contractInitPrice;
			newContract.LastPrice = contractLastPrice;
			newContract.SignedDate = contractSignedDate;
			newContract.FromDate = contractFromDate;
			newContract.ToDate = contractToDate;
			newContract.RealFromDate = contractRealFromDate;
			newContract.RealToDate = contractRealToDate;
			newContract.Status = contractStatus;
			newContract.IsApprove = contractIsApprove;
			newContract.IsActive = contractIsActive;
			newContract.IsPrinted = contractIsPrinted;
			newContract.CurrencyUnitId = contractCurrencyUnitId;
			newContract.ContractType = contractContractType;
			newContract.FromContactorId = contractFromContactorId;
			newContract.ToContactorId = contractToContactorId;
			newContract.VATTax = contractVATTax;
			newContract.PITTax = contractPITTax;
			newContract.CITTax = contractCITTax;
			newContract.Other = contractOther;
			newContract.CreationUserId = contractCreationUserId;
			newContract.CreationDate = contractCreationDate;
			newContract.LastModificationUserId = contractLastModificationUserId;
			newContract.LastModificationDate = contractLastModificationDate;
			newContract.ExchangeRate = contractExchangeRate;
			return newContract;
		}
				
		#endregion Constructors
		
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ContractColumn"/> which has raised the event.</param>
		public void OnColumnChanging(ContractColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ContractColumn"/> which has raised the event.</param>
		public void OnColumnChanged(ContractColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ContractColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(ContractColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added)
				EntityManager.StopTracking(EntityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				ContractEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ContractEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ContractColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(ContractColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ContractEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ContractEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
				
		#region Properties	
				
		/// <summary>
		/// 	Gets or sets the ContractId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 ContractId
		{
			get
			{
				return this.entityData.ContractId; 
			}
			
			set
			{
				if (this.entityData.ContractId == value)
					return;
					
					
				OnColumnChanging(ContractColumn.ContractId, this.entityData.ContractId);
				this.entityData.ContractId = value;
				this.EntityId.ContractId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContractColumn.ContractId, this.entityData.ContractId);
				OnPropertyChanged("ContractId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FromContactName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String FromContactName
		{
			get
			{
				return this.entityData.FromContactName; 
			}
			
			set
			{
				if (this.entityData.FromContactName == value)
					return;
					
					
				OnColumnChanging(ContractColumn.FromContactName, this.entityData.FromContactName);
				this.entityData.FromContactName = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContractColumn.FromContactName, this.entityData.FromContactName);
				OnPropertyChanged("FromContactName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ToContactName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String ToContactName
		{
			get
			{
				return this.entityData.ToContactName; 
			}
			
			set
			{
				if (this.entityData.ToContactName == value)
					return;
					
					
				OnColumnChanging(ContractColumn.ToContactName, this.entityData.ToContactName);
				this.entityData.ToContactName = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContractColumn.ToContactName, this.entityData.ToContactName);
				OnPropertyChanged("ToContactName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Type property. 
		///		TYpe of contract: nhan thau, giao thau
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsTypeNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("TYpe of contract: nhan thau, giao thau"), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Type
		{
			get
			{
				return this.entityData.Type; 
			}
			
			set
			{
				if (this.entityData.Type == value)
					return;
					
					
				OnColumnChanging(ContractColumn.Type, this.entityData.Type);
				this.entityData.Type = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContractColumn.Type, this.entityData.Type);
				OnPropertyChanged("Type");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ConstructDeptId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsConstructDeptIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ConstructDeptId
		{
			get
			{
				return this.entityData.ConstructDeptId; 
			}
			
			set
			{
				if (this.entityData.ConstructDeptId == value)
					return;
					
					
				OnColumnChanging(ContractColumn.ConstructDeptId, this.entityData.ConstructDeptId);
				this.entityData.ConstructDeptId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContractColumn.ConstructDeptId, this.entityData.ConstructDeptId);
				OnPropertyChanged("ConstructDeptId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DesignDeptId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsDesignDeptIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? DesignDeptId
		{
			get
			{
				return this.entityData.DesignDeptId; 
			}
			
			set
			{
				if (this.entityData.DesignDeptId == value)
					return;
					
					
				OnColumnChanging(ContractColumn.DesignDeptId, this.entityData.DesignDeptId);
				this.entityData.DesignDeptId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContractColumn.DesignDeptId, this.entityData.DesignDeptId);
				OnPropertyChanged("DesignDeptId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GroupId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsGroupIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? GroupId
		{
			get
			{
				return this.entityData.GroupId; 
			}
			
			set
			{
				if (this.entityData.GroupId == value)
					return;
					
					
				OnColumnChanging(ContractColumn.GroupId, this.entityData.GroupId);
				this.entityData.GroupId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContractColumn.GroupId, this.entityData.GroupId);
				OnPropertyChanged("GroupId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PartnerId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsPartnerIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? PartnerId
		{
			get
			{
				return this.entityData.PartnerId; 
			}
			
			set
			{
				if (this.entityData.PartnerId == value)
					return;
					
					
				OnColumnChanging(ContractColumn.PartnerId, this.entityData.PartnerId);
				this.entityData.PartnerId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContractColumn.PartnerId, this.entityData.PartnerId);
				OnPropertyChanged("PartnerId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Code property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String Code
		{
			get
			{
				return this.entityData.Code; 
			}
			
			set
			{
				if (this.entityData.Code == value)
					return;
					
					
				OnColumnChanging(ContractColumn.Code, this.entityData.Code);
				this.entityData.Code = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContractColumn.Code, this.entityData.Code);
				OnPropertyChanged("Code");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Number property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String Number
		{
			get
			{
				return this.entityData.Number; 
			}
			
			set
			{
				if (this.entityData.Number == value)
					return;
					
					
				OnColumnChanging(ContractColumn.Number, this.entityData.Number);
				this.entityData.Number = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContractColumn.Number, this.entityData.Number);
				OnPropertyChanged("Number");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Name property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false, 500)]
		public virtual System.String Name
		{
			get
			{
				return this.entityData.Name; 
			}
			
			set
			{
				if (this.entityData.Name == value)
					return;
					
					
				OnColumnChanging(ContractColumn.Name, this.entityData.Name);
				this.entityData.Name = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContractColumn.Name, this.entityData.Name);
				OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Description property. 
		///		
		/// </summary>
		/// <value>This type is ntext.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String Description
		{
			get
			{
				return this.entityData.Description; 
			}
			
			set
			{
				if (this.entityData.Description == value)
					return;
					
					
				OnColumnChanging(ContractColumn.Description, this.entityData.Description);
				this.entityData.Description = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContractColumn.Description, this.entityData.Description);
				OnPropertyChanged("Description");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Comment property. 
		///		
		/// </summary>
		/// <value>This type is ntext.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String Comment
		{
			get
			{
				return this.entityData.Comment; 
			}
			
			set
			{
				if (this.entityData.Comment == value)
					return;
					
					
				OnColumnChanging(ContractColumn.Comment, this.entityData.Comment);
				this.entityData.Comment = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContractColumn.Comment, this.entityData.Comment);
				OnPropertyChanged("Comment");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the InitPrice property. 
		///		
		/// </summary>
		/// <value>This type is money.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0. It is up to the developer
		/// to check the value of IsInitPriceNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? InitPrice
		{
			get
			{
				return this.entityData.InitPrice; 
			}
			
			set
			{
				if (this.entityData.InitPrice == value)
					return;
					
					
				OnColumnChanging(ContractColumn.InitPrice, this.entityData.InitPrice);
				this.entityData.InitPrice = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContractColumn.InitPrice, this.entityData.InitPrice);
				OnPropertyChanged("InitPrice");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastPrice property. 
		///		
		/// </summary>
		/// <value>This type is money.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0. It is up to the developer
		/// to check the value of IsLastPriceNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? LastPrice
		{
			get
			{
				return this.entityData.LastPrice; 
			}
			
			set
			{
				if (this.entityData.LastPrice == value)
					return;
					
					
				OnColumnChanging(ContractColumn.LastPrice, this.entityData.LastPrice);
				this.entityData.LastPrice = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContractColumn.LastPrice, this.entityData.LastPrice);
				OnPropertyChanged("LastPrice");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SignedDate property. 
		///		The data that contract was signed
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsSignedDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("The data that contract was signed"), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? SignedDate
		{
			get
			{
				return this.entityData.SignedDate; 
			}
			
			set
			{
				if (this.entityData.SignedDate == value)
					return;
					
					
				OnColumnChanging(ContractColumn.SignedDate, this.entityData.SignedDate);
				this.entityData.SignedDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContractColumn.SignedDate, this.entityData.SignedDate);
				OnPropertyChanged("SignedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FromDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsFromDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? FromDate
		{
			get
			{
				return this.entityData.FromDate; 
			}
			
			set
			{
				if (this.entityData.FromDate == value)
					return;
					
					
				OnColumnChanging(ContractColumn.FromDate, this.entityData.FromDate);
				this.entityData.FromDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContractColumn.FromDate, this.entityData.FromDate);
				OnPropertyChanged("FromDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ToDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsToDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ToDate
		{
			get
			{
				return this.entityData.ToDate; 
			}
			
			set
			{
				if (this.entityData.ToDate == value)
					return;
					
					
				OnColumnChanging(ContractColumn.ToDate, this.entityData.ToDate);
				this.entityData.ToDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContractColumn.ToDate, this.entityData.ToDate);
				OnPropertyChanged("ToDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RealFromDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsRealFromDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? RealFromDate
		{
			get
			{
				return this.entityData.RealFromDate; 
			}
			
			set
			{
				if (this.entityData.RealFromDate == value)
					return;
					
					
				OnColumnChanging(ContractColumn.RealFromDate, this.entityData.RealFromDate);
				this.entityData.RealFromDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContractColumn.RealFromDate, this.entityData.RealFromDate);
				OnPropertyChanged("RealFromDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RealToDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsRealToDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? RealToDate
		{
			get
			{
				return this.entityData.RealToDate; 
			}
			
			set
			{
				if (this.entityData.RealToDate == value)
					return;
					
					
				OnColumnChanging(ContractColumn.RealToDate, this.entityData.RealToDate);
				this.entityData.RealToDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContractColumn.RealToDate, this.entityData.RealToDate);
				OnPropertyChanged("RealToDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Status property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsStatusNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Status
		{
			get
			{
				return this.entityData.Status; 
			}
			
			set
			{
				if (this.entityData.Status == value)
					return;
					
					
				OnColumnChanging(ContractColumn.Status, this.entityData.Status);
				this.entityData.Status = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContractColumn.Status, this.entityData.Status);
				OnPropertyChanged("Status");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsApprove property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsApproveNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsApprove
		{
			get
			{
				return this.entityData.IsApprove; 
			}
			
			set
			{
				if (this.entityData.IsApprove == value)
					return;
					
					
				OnColumnChanging(ContractColumn.IsApprove, this.entityData.IsApprove);
				this.entityData.IsApprove = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContractColumn.IsApprove, this.entityData.IsApprove);
				OnPropertyChanged("IsApprove");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsActive property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsActiveNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsActive
		{
			get
			{
				return this.entityData.IsActive; 
			}
			
			set
			{
				if (this.entityData.IsActive == value)
					return;
					
					
				OnColumnChanging(ContractColumn.IsActive, this.entityData.IsActive);
				this.entityData.IsActive = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContractColumn.IsActive, this.entityData.IsActive);
				OnPropertyChanged("IsActive");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsPrinted property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsIsPrintedNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? IsPrinted
		{
			get
			{
				return this.entityData.IsPrinted; 
			}
			
			set
			{
				if (this.entityData.IsPrinted == value)
					return;
					
					
				OnColumnChanging(ContractColumn.IsPrinted, this.entityData.IsPrinted);
				this.entityData.IsPrinted = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContractColumn.IsPrinted, this.entityData.IsPrinted);
				OnPropertyChanged("IsPrinted");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CurrencyUnitId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCurrencyUnitIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CurrencyUnitId
		{
			get
			{
				return this.entityData.CurrencyUnitId; 
			}
			
			set
			{
				if (this.entityData.CurrencyUnitId == value)
					return;
					
					
				OnColumnChanging(ContractColumn.CurrencyUnitId, this.entityData.CurrencyUnitId);
				this.entityData.CurrencyUnitId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContractColumn.CurrencyUnitId, this.entityData.CurrencyUnitId);
				OnPropertyChanged("CurrencyUnitId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ContractType property. 
		///		Electromechanical, Construction, ...
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsContractTypeNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("Electromechanical, Construction, ..."), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ContractType
		{
			get
			{
				return this.entityData.ContractType; 
			}
			
			set
			{
				if (this.entityData.ContractType == value)
					return;
					
					
				OnColumnChanging(ContractColumn.ContractType, this.entityData.ContractType);
				this.entityData.ContractType = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContractColumn.ContractType, this.entityData.ContractType);
				OnPropertyChanged("ContractType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FromContactorId property. 
		///		A representative
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsFromContactorIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("A representative"), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? FromContactorId
		{
			get
			{
				return this.entityData.FromContactorId; 
			}
			
			set
			{
				if (this.entityData.FromContactorId == value)
					return;
					
					
				OnColumnChanging(ContractColumn.FromContactorId, this.entityData.FromContactorId);
				this.entityData.FromContactorId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContractColumn.FromContactorId, this.entityData.FromContactorId);
				OnPropertyChanged("FromContactorId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ToContactorId property. 
		///		B representative
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsToContactorIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("B representative"), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ToContactorId
		{
			get
			{
				return this.entityData.ToContactorId; 
			}
			
			set
			{
				if (this.entityData.ToContactorId == value)
					return;
					
					
				OnColumnChanging(ContractColumn.ToContactorId, this.entityData.ToContactorId);
				this.entityData.ToContactorId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContractColumn.ToContactorId, this.entityData.ToContactorId);
				OnPropertyChanged("ToContactorId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the VATTax property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsVATTaxNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Double? VATTax
		{
			get
			{
				return this.entityData.VATTax; 
			}
			
			set
			{
				if (this.entityData.VATTax == value)
					return;
					
					
				OnColumnChanging(ContractColumn.VATTax, this.entityData.VATTax);
				this.entityData.VATTax = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContractColumn.VATTax, this.entityData.VATTax);
				OnPropertyChanged("VATTax");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PITTax property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsPITTaxNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Double? PITTax
		{
			get
			{
				return this.entityData.PITTax; 
			}
			
			set
			{
				if (this.entityData.PITTax == value)
					return;
					
					
				OnColumnChanging(ContractColumn.PITTax, this.entityData.PITTax);
				this.entityData.PITTax = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContractColumn.PITTax, this.entityData.PITTax);
				OnPropertyChanged("PITTax");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CITTax property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsCITTaxNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Double? CITTax
		{
			get
			{
				return this.entityData.CITTax; 
			}
			
			set
			{
				if (this.entityData.CITTax == value)
					return;
					
					
				OnColumnChanging(ContractColumn.CITTax, this.entityData.CITTax);
				this.entityData.CITTax = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContractColumn.CITTax, this.entityData.CITTax);
				OnPropertyChanged("CITTax");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Other property. 
		///		
		/// </summary>
		/// <value>This type is money.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0. It is up to the developer
		/// to check the value of IsOtherNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Other
		{
			get
			{
				return this.entityData.Other; 
			}
			
			set
			{
				if (this.entityData.Other == value)
					return;
					
					
				OnColumnChanging(ContractColumn.Other, this.entityData.Other);
				this.entityData.Other = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContractColumn.Other, this.entityData.Other);
				OnPropertyChanged("Other");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreationUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCreationUserIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CreationUserId
		{
			get
			{
				return this.entityData.CreationUserId; 
			}
			
			set
			{
				if (this.entityData.CreationUserId == value)
					return;
					
					
				OnColumnChanging(ContractColumn.CreationUserId, this.entityData.CreationUserId);
				this.entityData.CreationUserId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContractColumn.CreationUserId, this.entityData.CreationUserId);
				OnPropertyChanged("CreationUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreationDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsCreationDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CreationDate
		{
			get
			{
				return this.entityData.CreationDate; 
			}
			
			set
			{
				if (this.entityData.CreationDate == value)
					return;
					
					
				OnColumnChanging(ContractColumn.CreationDate, this.entityData.CreationDate);
				this.entityData.CreationDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContractColumn.CreationDate, this.entityData.CreationDate);
				OnPropertyChanged("CreationDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModificationUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsLastModificationUserIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? LastModificationUserId
		{
			get
			{
				return this.entityData.LastModificationUserId; 
			}
			
			set
			{
				if (this.entityData.LastModificationUserId == value)
					return;
					
					
				OnColumnChanging(ContractColumn.LastModificationUserId, this.entityData.LastModificationUserId);
				this.entityData.LastModificationUserId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContractColumn.LastModificationUserId, this.entityData.LastModificationUserId);
				OnPropertyChanged("LastModificationUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModificationDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastModificationDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastModificationDate
		{
			get
			{
				return this.entityData.LastModificationDate; 
			}
			
			set
			{
				if (this.entityData.LastModificationDate == value)
					return;
					
					
				OnColumnChanging(ContractColumn.LastModificationDate, this.entityData.LastModificationDate);
				this.entityData.LastModificationDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContractColumn.LastModificationDate, this.entityData.LastModificationDate);
				OnPropertyChanged("LastModificationDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExchangeRate property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsExchangeRateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ExchangeRate
		{
			get
			{
				return this.entityData.ExchangeRate; 
			}
			
			set
			{
				if (this.entityData.ExchangeRate == value)
					return;
					
					
				OnColumnChanging(ContractColumn.ExchangeRate, this.entityData.ExchangeRate);
				this.entityData.ExchangeRate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContractColumn.ExchangeRate, this.entityData.ExchangeRate);
				OnPropertyChanged("ExchangeRate");
			}
		}
		

		#region Source Foreign Key Property
				
		private Group _groupIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Group"/>.
		/// </summary>
		/// <value>The source Group for GroupId.</value>
        [XmlIgnore()]
		[Browsable(false), BindableAttribute()]
		public virtual Group GroupIdSource
      	{
            get { return this._groupIdSource; }
            set { this._groupIdSource = value; }
      	}
		#endregion
			
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Contract"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ContractId", "FromContactName", "ToContactName", "Type", "ConstructDeptId", "DesignDeptId", "GroupId", "PartnerId", "Code", "Number", "Name", "Description", "Comment", "InitPrice", "LastPrice", "SignedDate", "FromDate", "ToDate", "RealFromDate", "RealToDate", "Status", "IsApprove", "IsActive", "IsPrinted", "CurrencyUnitId", "ContractType", "FromContactorId", "ToContactorId", "VATTax", "PITTax", "CITTax", "Other", "CreationUserId", "CreationDate", "LastModificationUserId", "LastModificationDate", "ExchangeRate"};
			}
		}
		#endregion 
		
	
		/// <summary>
		///	Holds a collection of ProjectPhase objects
		///	which are related to this object through the relation FK_ProjectPhase_Contract
		/// </summary>	
		[BindableAttribute()]
		public TList<ProjectPhase> ProjectPhaseCollection
		{
			get { return entityData.ProjectPhaseCollection; }
			set { entityData.ProjectPhaseCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of RelatedContract objects
		///	which are related to this object through the relation FK_RelatedContract_Contract
		/// </summary>	
		[BindableAttribute()]
		public TList<RelatedContract> RelatedContractCollectionByFromContractId
		{
			get { return entityData.RelatedContractCollectionByFromContractId; }
			set { entityData.RelatedContractCollectionByFromContractId = value; }	
		}
	
		/// <summary>
		///	Holds a collection of RelatedContract objects
		///	which are related to this object through the relation FK_RelatedContract_Contract1
		/// </summary>	
		[BindableAttribute()]
		public TList<RelatedContract> RelatedContractCollectionByToContractId
		{
			get { return entityData.RelatedContractCollectionByToContractId; }
			set { entityData.RelatedContractCollectionByToContractId = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ItemInProject objects
		///	which are related to this object through the relation FK_ItemInProjects_Contracts
		/// </summary>	
		[BindableAttribute()]
		public TList<ItemInProject> ItemInProjectCollection
		{
			get { return entityData.ItemInProjectCollection; }
			set { entityData.ItemInProjectCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Project objects
		///	which are related to this object through the relation FK_Projects_Contracts
		/// </summary>	
		[BindableAttribute()]
		public TList<Project> ProjectCollection
		{
			get { return entityData.ProjectCollection; }
			set { entityData.ProjectCollection = value; }	
		}
		
		#endregion
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ContractEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Contract) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return (object)this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Contract>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Contract);
	        }
	    }


		#endregion
		
		#region Methods	
			
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();
		}	
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Contract Entity 
		///</summary>
		public virtual Contract Copy()
		{
			//shallow copy entity
			Contract copy = new Contract();
			copy.ContractId = this.ContractId;
			copy.FromContactName = this.FromContactName;
			copy.ToContactName = this.ToContactName;
			copy.Type = this.Type;
			copy.ConstructDeptId = this.ConstructDeptId;
			copy.DesignDeptId = this.DesignDeptId;
			copy.GroupId = this.GroupId;
			copy.PartnerId = this.PartnerId;
			copy.Code = this.Code;
			copy.Number = this.Number;
			copy.Name = this.Name;
			copy.Description = this.Description;
			copy.Comment = this.Comment;
			copy.InitPrice = this.InitPrice;
			copy.LastPrice = this.LastPrice;
			copy.SignedDate = this.SignedDate;
			copy.FromDate = this.FromDate;
			copy.ToDate = this.ToDate;
			copy.RealFromDate = this.RealFromDate;
			copy.RealToDate = this.RealToDate;
			copy.Status = this.Status;
			copy.IsApprove = this.IsApprove;
			copy.IsActive = this.IsActive;
			copy.IsPrinted = this.IsPrinted;
			copy.CurrencyUnitId = this.CurrencyUnitId;
			copy.ContractType = this.ContractType;
			copy.FromContactorId = this.FromContactorId;
			copy.ToContactorId = this.ToContactorId;
			copy.VATTax = this.VATTax;
			copy.PITTax = this.PITTax;
			copy.CITTax = this.CITTax;
			copy.Other = this.Other;
			copy.CreationUserId = this.CreationUserId;
			copy.CreationDate = this.CreationDate;
			copy.LastModificationUserId = this.LastModificationUserId;
			copy.LastModificationDate = this.LastModificationDate;
			copy.ExchangeRate = this.ExchangeRate;
					
			copy.AcceptChanges();
			return (Contract)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed Contract Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Contract DeepCopy()
		{
			return EntityHelper.Clone<Contract>(this as Contract);	
		}
		#endregion
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ContractBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ContractBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="ContractBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="ContractBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ContractBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(ContractBase Object1, ContractBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.ContractId != Object2.ContractId)
				equal = false;
			if ( Object1.FromContactName != null && Object2.FromContactName != null )
			{
				if (Object1.FromContactName != Object2.FromContactName)
					equal = false;
			}
			else if (Object1.FromContactName == null ^ Object2.FromContactName == null )
			{
				equal = false;
			}
			if ( Object1.ToContactName != null && Object2.ToContactName != null )
			{
				if (Object1.ToContactName != Object2.ToContactName)
					equal = false;
			}
			else if (Object1.ToContactName == null ^ Object2.ToContactName == null )
			{
				equal = false;
			}
			if ( Object1.Type != null && Object2.Type != null )
			{
				if (Object1.Type != Object2.Type)
					equal = false;
			}
			else if (Object1.Type == null ^ Object2.Type == null )
			{
				equal = false;
			}
			if ( Object1.ConstructDeptId != null && Object2.ConstructDeptId != null )
			{
				if (Object1.ConstructDeptId != Object2.ConstructDeptId)
					equal = false;
			}
			else if (Object1.ConstructDeptId == null ^ Object2.ConstructDeptId == null )
			{
				equal = false;
			}
			if ( Object1.DesignDeptId != null && Object2.DesignDeptId != null )
			{
				if (Object1.DesignDeptId != Object2.DesignDeptId)
					equal = false;
			}
			else if (Object1.DesignDeptId == null ^ Object2.DesignDeptId == null )
			{
				equal = false;
			}
			if ( Object1.GroupId != null && Object2.GroupId != null )
			{
				if (Object1.GroupId != Object2.GroupId)
					equal = false;
			}
			else if (Object1.GroupId == null ^ Object2.GroupId == null )
			{
				equal = false;
			}
			if ( Object1.PartnerId != null && Object2.PartnerId != null )
			{
				if (Object1.PartnerId != Object2.PartnerId)
					equal = false;
			}
			else if (Object1.PartnerId == null ^ Object2.PartnerId == null )
			{
				equal = false;
			}
			if ( Object1.Code != null && Object2.Code != null )
			{
				if (Object1.Code != Object2.Code)
					equal = false;
			}
			else if (Object1.Code == null ^ Object2.Code == null )
			{
				equal = false;
			}
			if ( Object1.Number != null && Object2.Number != null )
			{
				if (Object1.Number != Object2.Number)
					equal = false;
			}
			else if (Object1.Number == null ^ Object2.Number == null )
			{
				equal = false;
			}
			if (Object1.Name != Object2.Name)
				equal = false;
			if ( Object1.Description != null && Object2.Description != null )
			{
				if (Object1.Description != Object2.Description)
					equal = false;
			}
			else if (Object1.Description == null ^ Object2.Description == null )
			{
				equal = false;
			}
			if ( Object1.Comment != null && Object2.Comment != null )
			{
				if (Object1.Comment != Object2.Comment)
					equal = false;
			}
			else if (Object1.Comment == null ^ Object2.Comment == null )
			{
				equal = false;
			}
			if ( Object1.InitPrice != null && Object2.InitPrice != null )
			{
				if (Object1.InitPrice != Object2.InitPrice)
					equal = false;
			}
			else if (Object1.InitPrice == null ^ Object2.InitPrice == null )
			{
				equal = false;
			}
			if ( Object1.LastPrice != null && Object2.LastPrice != null )
			{
				if (Object1.LastPrice != Object2.LastPrice)
					equal = false;
			}
			else if (Object1.LastPrice == null ^ Object2.LastPrice == null )
			{
				equal = false;
			}
			if ( Object1.SignedDate != null && Object2.SignedDate != null )
			{
				if (Object1.SignedDate != Object2.SignedDate)
					equal = false;
			}
			else if (Object1.SignedDate == null ^ Object2.SignedDate == null )
			{
				equal = false;
			}
			if ( Object1.FromDate != null && Object2.FromDate != null )
			{
				if (Object1.FromDate != Object2.FromDate)
					equal = false;
			}
			else if (Object1.FromDate == null ^ Object2.FromDate == null )
			{
				equal = false;
			}
			if ( Object1.ToDate != null && Object2.ToDate != null )
			{
				if (Object1.ToDate != Object2.ToDate)
					equal = false;
			}
			else if (Object1.ToDate == null ^ Object2.ToDate == null )
			{
				equal = false;
			}
			if ( Object1.RealFromDate != null && Object2.RealFromDate != null )
			{
				if (Object1.RealFromDate != Object2.RealFromDate)
					equal = false;
			}
			else if (Object1.RealFromDate == null ^ Object2.RealFromDate == null )
			{
				equal = false;
			}
			if ( Object1.RealToDate != null && Object2.RealToDate != null )
			{
				if (Object1.RealToDate != Object2.RealToDate)
					equal = false;
			}
			else if (Object1.RealToDate == null ^ Object2.RealToDate == null )
			{
				equal = false;
			}
			if ( Object1.Status != null && Object2.Status != null )
			{
				if (Object1.Status != Object2.Status)
					equal = false;
			}
			else if (Object1.Status == null ^ Object2.Status == null )
			{
				equal = false;
			}
			if ( Object1.IsApprove != null && Object2.IsApprove != null )
			{
				if (Object1.IsApprove != Object2.IsApprove)
					equal = false;
			}
			else if (Object1.IsApprove == null ^ Object2.IsApprove == null )
			{
				equal = false;
			}
			if ( Object1.IsActive != null && Object2.IsActive != null )
			{
				if (Object1.IsActive != Object2.IsActive)
					equal = false;
			}
			else if (Object1.IsActive == null ^ Object2.IsActive == null )
			{
				equal = false;
			}
			if ( Object1.IsPrinted != null && Object2.IsPrinted != null )
			{
				if (Object1.IsPrinted != Object2.IsPrinted)
					equal = false;
			}
			else if (Object1.IsPrinted == null ^ Object2.IsPrinted == null )
			{
				equal = false;
			}
			if ( Object1.CurrencyUnitId != null && Object2.CurrencyUnitId != null )
			{
				if (Object1.CurrencyUnitId != Object2.CurrencyUnitId)
					equal = false;
			}
			else if (Object1.CurrencyUnitId == null ^ Object2.CurrencyUnitId == null )
			{
				equal = false;
			}
			if ( Object1.ContractType != null && Object2.ContractType != null )
			{
				if (Object1.ContractType != Object2.ContractType)
					equal = false;
			}
			else if (Object1.ContractType == null ^ Object2.ContractType == null )
			{
				equal = false;
			}
			if ( Object1.FromContactorId != null && Object2.FromContactorId != null )
			{
				if (Object1.FromContactorId != Object2.FromContactorId)
					equal = false;
			}
			else if (Object1.FromContactorId == null ^ Object2.FromContactorId == null )
			{
				equal = false;
			}
			if ( Object1.ToContactorId != null && Object2.ToContactorId != null )
			{
				if (Object1.ToContactorId != Object2.ToContactorId)
					equal = false;
			}
			else if (Object1.ToContactorId == null ^ Object2.ToContactorId == null )
			{
				equal = false;
			}
			if ( Object1.VATTax != null && Object2.VATTax != null )
			{
				if (Object1.VATTax != Object2.VATTax)
					equal = false;
			}
			else if (Object1.VATTax == null ^ Object2.VATTax == null )
			{
				equal = false;
			}
			if ( Object1.PITTax != null && Object2.PITTax != null )
			{
				if (Object1.PITTax != Object2.PITTax)
					equal = false;
			}
			else if (Object1.PITTax == null ^ Object2.PITTax == null )
			{
				equal = false;
			}
			if ( Object1.CITTax != null && Object2.CITTax != null )
			{
				if (Object1.CITTax != Object2.CITTax)
					equal = false;
			}
			else if (Object1.CITTax == null ^ Object2.CITTax == null )
			{
				equal = false;
			}
			if ( Object1.Other != null && Object2.Other != null )
			{
				if (Object1.Other != Object2.Other)
					equal = false;
			}
			else if (Object1.Other == null ^ Object2.Other == null )
			{
				equal = false;
			}
			if ( Object1.CreationUserId != null && Object2.CreationUserId != null )
			{
				if (Object1.CreationUserId != Object2.CreationUserId)
					equal = false;
			}
			else if (Object1.CreationUserId == null ^ Object2.CreationUserId == null )
			{
				equal = false;
			}
			if ( Object1.CreationDate != null && Object2.CreationDate != null )
			{
				if (Object1.CreationDate != Object2.CreationDate)
					equal = false;
			}
			else if (Object1.CreationDate == null ^ Object2.CreationDate == null )
			{
				equal = false;
			}
			if ( Object1.LastModificationUserId != null && Object2.LastModificationUserId != null )
			{
				if (Object1.LastModificationUserId != Object2.LastModificationUserId)
					equal = false;
			}
			else if (Object1.LastModificationUserId == null ^ Object2.LastModificationUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastModificationDate != null && Object2.LastModificationDate != null )
			{
				if (Object1.LastModificationDate != Object2.LastModificationDate)
					equal = false;
			}
			else if (Object1.LastModificationDate == null ^ Object2.LastModificationDate == null )
			{
				equal = false;
			}
			if ( Object1.ExchangeRate != null && Object2.ExchangeRate != null )
			{
				if (Object1.ExchangeRate != Object2.ExchangeRate)
					equal = false;
			}
			else if (Object1.ExchangeRate == null ^ Object2.ExchangeRate == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			// TODO -> generate a strongly typed IComparer in the concrete class
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name) .CompareTo(((ContractBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name));
		}
		
		/*
		// static method to get a Comparer object
        public static ContractComparer GetComparer()
        {
            return new ContractComparer();
        }
        */

        // Comparer delegates back to Contract
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Contract rhs, ContractColumn which)
        {
            switch (which)
            {
            	
            	
            	case ContractColumn.ContractId:
            		return this.ContractId.CompareTo(rhs.ContractId);
            		
            		                 
            	
            	
            	case ContractColumn.FromContactName:
            		return this.FromContactName.CompareTo(rhs.FromContactName);
            		
            		                 
            	
            	
            	case ContractColumn.ToContactName:
            		return this.ToContactName.CompareTo(rhs.ToContactName);
            		
            		                 
            	
            	
            	case ContractColumn.Type:
            		return this.Type.Value.CompareTo(rhs.Type.Value);
            		
            		                 
            	
            	
            	case ContractColumn.ConstructDeptId:
            		return this.ConstructDeptId.Value.CompareTo(rhs.ConstructDeptId.Value);
            		
            		                 
            	
            	
            	case ContractColumn.DesignDeptId:
            		return this.DesignDeptId.Value.CompareTo(rhs.DesignDeptId.Value);
            		
            		                 
            	
            	
            	case ContractColumn.GroupId:
            		return this.GroupId.Value.CompareTo(rhs.GroupId.Value);
            		
            		                 
            	
            	
            	case ContractColumn.PartnerId:
            		return this.PartnerId.Value.CompareTo(rhs.PartnerId.Value);
            		
            		                 
            	
            	
            	case ContractColumn.Code:
            		return this.Code.CompareTo(rhs.Code);
            		
            		                 
            	
            	
            	case ContractColumn.Number:
            		return this.Number.CompareTo(rhs.Number);
            		
            		                 
            	
            	
            	case ContractColumn.Name:
            		return this.Name.CompareTo(rhs.Name);
            		
            		                 
            	
            	
            	case ContractColumn.Description:
            		return this.Description.CompareTo(rhs.Description);
            		
            		                 
            	
            	
            	case ContractColumn.Comment:
            		return this.Comment.CompareTo(rhs.Comment);
            		
            		                 
            	
            	
            	case ContractColumn.InitPrice:
            		return this.InitPrice.Value.CompareTo(rhs.InitPrice.Value);
            		
            		                 
            	
            	
            	case ContractColumn.LastPrice:
            		return this.LastPrice.Value.CompareTo(rhs.LastPrice.Value);
            		
            		                 
            	
            	
            	case ContractColumn.SignedDate:
            		return this.SignedDate.Value.CompareTo(rhs.SignedDate.Value);
            		
            		                 
            	
            	
            	case ContractColumn.FromDate:
            		return this.FromDate.Value.CompareTo(rhs.FromDate.Value);
            		
            		                 
            	
            	
            	case ContractColumn.ToDate:
            		return this.ToDate.Value.CompareTo(rhs.ToDate.Value);
            		
            		                 
            	
            	
            	case ContractColumn.RealFromDate:
            		return this.RealFromDate.Value.CompareTo(rhs.RealFromDate.Value);
            		
            		                 
            	
            	
            	case ContractColumn.RealToDate:
            		return this.RealToDate.Value.CompareTo(rhs.RealToDate.Value);
            		
            		                 
            	
            	
            	case ContractColumn.Status:
            		return this.Status.Value.CompareTo(rhs.Status.Value);
            		
            		                 
            	
            	
            	case ContractColumn.IsApprove:
            		return this.IsApprove.Value.CompareTo(rhs.IsApprove.Value);
            		
            		                 
            	
            	
            	case ContractColumn.IsActive:
            		return this.IsActive.Value.CompareTo(rhs.IsActive.Value);
            		
            		                 
            	
            	
            	case ContractColumn.IsPrinted:
            		return this.IsPrinted.Value.CompareTo(rhs.IsPrinted.Value);
            		
            		                 
            	
            	
            	case ContractColumn.CurrencyUnitId:
            		return this.CurrencyUnitId.Value.CompareTo(rhs.CurrencyUnitId.Value);
            		
            		                 
            	
            	
            	case ContractColumn.ContractType:
            		return this.ContractType.Value.CompareTo(rhs.ContractType.Value);
            		
            		                 
            	
            	
            	case ContractColumn.FromContactorId:
            		return this.FromContactorId.Value.CompareTo(rhs.FromContactorId.Value);
            		
            		                 
            	
            	
            	case ContractColumn.ToContactorId:
            		return this.ToContactorId.Value.CompareTo(rhs.ToContactorId.Value);
            		
            		                 
            	
            	
            	case ContractColumn.VATTax:
            		return this.VATTax.Value.CompareTo(rhs.VATTax.Value);
            		
            		                 
            	
            	
            	case ContractColumn.PITTax:
            		return this.PITTax.Value.CompareTo(rhs.PITTax.Value);
            		
            		                 
            	
            	
            	case ContractColumn.CITTax:
            		return this.CITTax.Value.CompareTo(rhs.CITTax.Value);
            		
            		                 
            	
            	
            	case ContractColumn.Other:
            		return this.Other.Value.CompareTo(rhs.Other.Value);
            		
            		                 
            	
            	
            	case ContractColumn.CreationUserId:
            		return this.CreationUserId.Value.CompareTo(rhs.CreationUserId.Value);
            		
            		                 
            	
            	
            	case ContractColumn.CreationDate:
            		return this.CreationDate.Value.CompareTo(rhs.CreationDate.Value);
            		
            		                 
            	
            	
            	case ContractColumn.LastModificationUserId:
            		return this.LastModificationUserId.Value.CompareTo(rhs.LastModificationUserId.Value);
            		
            		                 
            	
            	
            	case ContractColumn.LastModificationDate:
            		return this.LastModificationDate.Value.CompareTo(rhs.LastModificationDate.Value);
            		
            		                 
            	
            	
            	case ContractColumn.ExchangeRate:
            		return this.ExchangeRate.Value.CompareTo(rhs.ExchangeRate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ContractKey> Members
		
		// member variable for the EntityId property
		private ContractKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public ContractKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ContractKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = @"Contract" 
					+ this.ContractId.ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{38}{37}- ContractId: {0}{37}- FromContactName: {1}{37}- ToContactName: {2}{37}- Type: {3}{37}- ConstructDeptId: {4}{37}- DesignDeptId: {5}{37}- GroupId: {6}{37}- PartnerId: {7}{37}- Code: {8}{37}- Number: {9}{37}- Name: {10}{37}- Description: {11}{37}- Comment: {12}{37}- InitPrice: {13}{37}- LastPrice: {14}{37}- SignedDate: {15}{37}- FromDate: {16}{37}- ToDate: {17}{37}- RealFromDate: {18}{37}- RealToDate: {19}{37}- Status: {20}{37}- IsApprove: {21}{37}- IsActive: {22}{37}- IsPrinted: {23}{37}- CurrencyUnitId: {24}{37}- ContractType: {25}{37}- FromContactorId: {26}{37}- ToContactorId: {27}{37}- VATTax: {28}{37}- PITTax: {29}{37}- CITTax: {30}{37}- Other: {31}{37}- CreationUserId: {32}{37}- CreationDate: {33}{37}- LastModificationUserId: {34}{37}- LastModificationDate: {35}{37}- ExchangeRate: {36}{37}", 
				this.ContractId,
				(this.FromContactName == null) ? string.Empty : this.FromContactName.ToString(),
				(this.ToContactName == null) ? string.Empty : this.ToContactName.ToString(),
				(this.Type == null) ? string.Empty : this.Type.ToString(),
				(this.ConstructDeptId == null) ? string.Empty : this.ConstructDeptId.ToString(),
				(this.DesignDeptId == null) ? string.Empty : this.DesignDeptId.ToString(),
				(this.GroupId == null) ? string.Empty : this.GroupId.ToString(),
				(this.PartnerId == null) ? string.Empty : this.PartnerId.ToString(),
				(this.Code == null) ? string.Empty : this.Code.ToString(),
				(this.Number == null) ? string.Empty : this.Number.ToString(),
				this.Name,
				(this.Description == null) ? string.Empty : this.Description.ToString(),
				(this.Comment == null) ? string.Empty : this.Comment.ToString(),
				(this.InitPrice == null) ? string.Empty : this.InitPrice.ToString(),
				(this.LastPrice == null) ? string.Empty : this.LastPrice.ToString(),
				(this.SignedDate == null) ? string.Empty : this.SignedDate.ToString(),
				(this.FromDate == null) ? string.Empty : this.FromDate.ToString(),
				(this.ToDate == null) ? string.Empty : this.ToDate.ToString(),
				(this.RealFromDate == null) ? string.Empty : this.RealFromDate.ToString(),
				(this.RealToDate == null) ? string.Empty : this.RealToDate.ToString(),
				(this.Status == null) ? string.Empty : this.Status.ToString(),
				(this.IsApprove == null) ? string.Empty : this.IsApprove.ToString(),
				(this.IsActive == null) ? string.Empty : this.IsActive.ToString(),
				(this.IsPrinted == null) ? string.Empty : this.IsPrinted.ToString(),
				(this.CurrencyUnitId == null) ? string.Empty : this.CurrencyUnitId.ToString(),
				(this.ContractType == null) ? string.Empty : this.ContractType.ToString(),
				(this.FromContactorId == null) ? string.Empty : this.FromContactorId.ToString(),
				(this.ToContactorId == null) ? string.Empty : this.ToContactorId.ToString(),
				(this.VATTax == null) ? string.Empty : this.VATTax.ToString(),
				(this.PITTax == null) ? string.Empty : this.PITTax.ToString(),
				(this.CITTax == null) ? string.Empty : this.CITTax.ToString(),
				(this.Other == null) ? string.Empty : this.Other.ToString(),
				(this.CreationUserId == null) ? string.Empty : this.CreationUserId.ToString(),
				(this.CreationDate == null) ? string.Empty : this.CreationDate.ToString(),
				(this.LastModificationUserId == null) ? string.Empty : this.LastModificationUserId.ToString(),
				(this.LastModificationDate == null) ? string.Empty : this.LastModificationDate.ToString(),
				(this.ExchangeRate == null) ? string.Empty : this.ExchangeRate.ToString(),
				Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Contract' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal class ContractEntityData : ICloneable
	{
		#region Variable Declarations
		
		#region Primary key(s)
			/// <summary>			
			/// ContractId : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "Contract"</remarks>
			public System.Int32 ContractId;
				
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// FromContactName : 
		/// </summary>
		public System.String		  FromContactName = string.Empty;
		
		/// <summary>
		/// ToContactName : 
		/// </summary>
		public System.String		  ToContactName = string.Empty;
		
		/// <summary>
		/// Type : TYpe of contract: nhan thau, giao thau
		/// </summary>
		public System.Int32?		  Type = (int)0;
		
		/// <summary>
		/// ConstructDeptId : 
		/// </summary>
		public System.Int32?		  ConstructDeptId = (int)0;
		
		/// <summary>
		/// DesignDeptId : 
		/// </summary>
		public System.Int32?		  DesignDeptId = (int)0;
		
		/// <summary>
		/// GroupId : 
		/// </summary>
		public System.Int32?		  GroupId = (int)0;
		
		/// <summary>
		/// PartnerId : 
		/// </summary>
		public System.Int32?		  PartnerId = (int)0;
		
		/// <summary>
		/// Code : 
		/// </summary>
		public System.String		  Code = string.Empty;
		
		/// <summary>
		/// Number : 
		/// </summary>
		public System.String		  Number = string.Empty;
		
		/// <summary>
		/// Name : 
		/// </summary>
		public System.String		  Name = string.Empty;
		
		/// <summary>
		/// Description : 
		/// </summary>
		public System.String		  Description = string.Empty;
		
		/// <summary>
		/// Comment : 
		/// </summary>
		public System.String		  Comment = string.Empty;
		
		/// <summary>
		/// InitPrice : 
		/// </summary>
		public System.Decimal?		  InitPrice = 0;
		
		/// <summary>
		/// LastPrice : 
		/// </summary>
		public System.Decimal?		  LastPrice = 0;
		
		/// <summary>
		/// SignedDate : The data that contract was signed
		/// </summary>
		public System.DateTime?		  SignedDate = DateTime.MinValue;
		
		/// <summary>
		/// FromDate : 
		/// </summary>
		public System.DateTime?		  FromDate = DateTime.MinValue;
		
		/// <summary>
		/// ToDate : 
		/// </summary>
		public System.DateTime?		  ToDate = DateTime.MinValue;
		
		/// <summary>
		/// RealFromDate : 
		/// </summary>
		public System.DateTime?		  RealFromDate = DateTime.MinValue;
		
		/// <summary>
		/// RealToDate : 
		/// </summary>
		public System.DateTime?		  RealToDate = DateTime.MinValue;
		
		/// <summary>
		/// Status : 
		/// </summary>
		public System.Int32?		  Status = (int)0;
		
		/// <summary>
		/// IsApprove : 
		/// </summary>
		public System.Boolean?		  IsApprove = false;
		
		/// <summary>
		/// IsActive : 
		/// </summary>
		public System.Boolean?		  IsActive = false;
		
		/// <summary>
		/// IsPrinted : 
		/// </summary>
		public System.Int64?		  IsPrinted = (long)0;
		
		/// <summary>
		/// CurrencyUnitId : 
		/// </summary>
		public System.Int32?		  CurrencyUnitId = (int)0;
		
		/// <summary>
		/// ContractType : Electromechanical, Construction, ...
		/// </summary>
		public System.Int32?		  ContractType = (int)0;
		
		/// <summary>
		/// FromContactorId : A representative
		/// </summary>
		public System.Int32?		  FromContactorId = (int)0;
		
		/// <summary>
		/// ToContactorId : B representative
		/// </summary>
		public System.Int32?		  ToContactorId = (int)0;
		
		/// <summary>
		/// VATTax : 
		/// </summary>
		public System.Double?		  VATTax = 0.0f;
		
		/// <summary>
		/// PITTax : 
		/// </summary>
		public System.Double?		  PITTax = 0.0f;
		
		/// <summary>
		/// CITTax : 
		/// </summary>
		public System.Double?		  CITTax = 0.0f;
		
		/// <summary>
		/// Other : 
		/// </summary>
		public System.Decimal?		  Other = 0;
		
		/// <summary>
		/// CreationUserId : 
		/// </summary>
		public System.Int32?		  CreationUserId = (int)0;
		
		/// <summary>
		/// CreationDate : 
		/// </summary>
		public System.DateTime?		  CreationDate = DateTime.MinValue;
		
		/// <summary>
		/// LastModificationUserId : 
		/// </summary>
		public System.Int32?		  LastModificationUserId = (int)0;
		
		/// <summary>
		/// LastModificationDate : 
		/// </summary>
		public System.DateTime?		  LastModificationDate = DateTime.MinValue;
		
		/// <summary>
		/// ExchangeRate : 
		/// </summary>
		public System.Int32?		  ExchangeRate = (int)0;
		#endregion
			
		#endregion Variable Declarations
		
		#region Clone
		public Object Clone()
		{
			ContractEntityData _tmp = new ContractEntityData();
						
			_tmp.ContractId = this.ContractId;
			
			_tmp.FromContactName = this.FromContactName;
			_tmp.ToContactName = this.ToContactName;
			_tmp.Type = this.Type;
			_tmp.ConstructDeptId = this.ConstructDeptId;
			_tmp.DesignDeptId = this.DesignDeptId;
			_tmp.GroupId = this.GroupId;
			_tmp.PartnerId = this.PartnerId;
			_tmp.Code = this.Code;
			_tmp.Number = this.Number;
			_tmp.Name = this.Name;
			_tmp.Description = this.Description;
			_tmp.Comment = this.Comment;
			_tmp.InitPrice = this.InitPrice;
			_tmp.LastPrice = this.LastPrice;
			_tmp.SignedDate = this.SignedDate;
			_tmp.FromDate = this.FromDate;
			_tmp.ToDate = this.ToDate;
			_tmp.RealFromDate = this.RealFromDate;
			_tmp.RealToDate = this.RealToDate;
			_tmp.Status = this.Status;
			_tmp.IsApprove = this.IsApprove;
			_tmp.IsActive = this.IsActive;
			_tmp.IsPrinted = this.IsPrinted;
			_tmp.CurrencyUnitId = this.CurrencyUnitId;
			_tmp.ContractType = this.ContractType;
			_tmp.FromContactorId = this.FromContactorId;
			_tmp.ToContactorId = this.ToContactorId;
			_tmp.VATTax = this.VATTax;
			_tmp.PITTax = this.PITTax;
			_tmp.CITTax = this.CITTax;
			_tmp.Other = this.Other;
			_tmp.CreationUserId = this.CreationUserId;
			_tmp.CreationDate = this.CreationDate;
			_tmp.LastModificationUserId = this.LastModificationUserId;
			_tmp.LastModificationDate = this.LastModificationDate;
			_tmp.ExchangeRate = this.ExchangeRate;
			
			return _tmp;
		}
		#endregion 
		
		#region Data Properties

		#region ProjectPhaseCollection
		
		private TList<ProjectPhase> projectPhaseContractId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation projectPhaseContractId
		/// </summary>	
		public TList<ProjectPhase> ProjectPhaseCollection
		{
			get
			{
				if (projectPhaseContractId == null)
				{
				projectPhaseContractId = new TList<ProjectPhase>();
				}
	
				return projectPhaseContractId;
			}
			set { projectPhaseContractId = value; }
		}
		
		#endregion

		#region RelatedContractCollectionByFromContractId
		
		private TList<RelatedContract> relatedContractFromContractId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation relatedContractFromContractId
		/// </summary>	
		public TList<RelatedContract> RelatedContractCollectionByFromContractId
		{
			get
			{
				if (relatedContractFromContractId == null)
				{
				relatedContractFromContractId = new TList<RelatedContract>();
				}
	
				return relatedContractFromContractId;
			}
			set { relatedContractFromContractId = value; }
		}
		
		#endregion

		#region RelatedContractCollectionByToContractId
		
		private TList<RelatedContract> relatedContractToContractId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation relatedContractToContractId
		/// </summary>	
		public TList<RelatedContract> RelatedContractCollectionByToContractId
		{
			get
			{
				if (relatedContractToContractId == null)
				{
				relatedContractToContractId = new TList<RelatedContract>();
				}
	
				return relatedContractToContractId;
			}
			set { relatedContractToContractId = value; }
		}
		
		#endregion

		#region ItemInProjectCollection
		
		private TList<ItemInProject> itemInProjectContractId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation itemInProjectContractId
		/// </summary>	
		public TList<ItemInProject> ItemInProjectCollection
		{
			get
			{
				if (itemInProjectContractId == null)
				{
				itemInProjectContractId = new TList<ItemInProject>();
				}
	
				return itemInProjectContractId;
			}
			set { itemInProjectContractId = value; }
		}
		
		#endregion

		#region ProjectCollection
		
		private TList<Project> projectContractId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation projectContractId
		/// </summary>	
		public TList<Project> ProjectCollection
		{
			get
			{
				if (projectContractId == null)
				{
				projectContractId = new TList<Project>();
				}
	
				return projectContractId;
			}
			set { projectContractId = value; }
		}
		
		#endregion

		#endregion Data Properties

	}//End struct


		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("FromContactName",200));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("ToContactName",200));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Code",200));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Number",200));
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"Name");
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Name",500));
		}
   		#endregion
	
	} // End Class
	
	#region ContractComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ContractComparer : System.Collections.Generic.IComparer<Contract>
	{
		ContractColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ContractComparer"/> class.
        /// </summary>
		public ContractComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ContractComparer(ContractColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="Contract"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="Contract"/> to compare.</param>
        /// <param name="b">The second <c>Contract</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Contract a, Contract b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Contract entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Contract a, Contract b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ContractColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ContractKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Contract"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ContractKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ContractKey class.
		/// </summary>
		public ContractKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ContractKey class.
		/// </summary>
		public ContractKey(ContractBase entity)
		{
			Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.contractId = entity.ContractId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ContractKey class.
		/// </summary>
		public ContractKey(System.Int32 contractId)
		{
			#region Init Properties

			this.contractId = contractId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ContractBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ContractBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the ContractId property
		private System.Int32 contractId;
		
		/// <summary>
		/// Gets or sets the ContractId property.
		/// </summary>
		public System.Int32 ContractId
		{
			get { return contractId; }
			set
			{
				if ( Entity != null )
				{
					Entity.ContractId = value;
				}
				
				contractId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				ContractId = ( values["ContractId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["ContractId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("ContractId", ContractId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("ContractId: {0}{1}",
								ContractId,
								Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ContractColumn Enum
	
	/// <summary>
	/// Enumerate the Contract columns.
	/// </summary>
	[Serializable]
	public enum ContractColumn : int
	{
		/// <summary>
		/// ContractId : 
		/// </summary>
		[EnumTextValue("ContractId")]
		[ColumnEnum("ContractId", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		ContractId = 1,
		/// <summary>
		/// FromContactName : 
		/// </summary>
		[EnumTextValue("FromContactName")]
		[ColumnEnum("FromContactName", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		FromContactName = 2,
		/// <summary>
		/// ToContactName : 
		/// </summary>
		[EnumTextValue("ToContactName")]
		[ColumnEnum("ToContactName", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		ToContactName = 3,
		/// <summary>
		/// Type : TYpe of contract: nhan thau, giao thau
		/// </summary>
		[EnumTextValue("Type")]
		[ColumnEnum("Type", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Type = 4,
		/// <summary>
		/// ConstructDeptId : 
		/// </summary>
		[EnumTextValue("ConstructDeptId")]
		[ColumnEnum("ConstructDeptId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ConstructDeptId = 5,
		/// <summary>
		/// DesignDeptId : 
		/// </summary>
		[EnumTextValue("DesignDeptId")]
		[ColumnEnum("DesignDeptId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		DesignDeptId = 6,
		/// <summary>
		/// GroupId : 
		/// </summary>
		[EnumTextValue("GroupId")]
		[ColumnEnum("GroupId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		GroupId = 7,
		/// <summary>
		/// PartnerId : 
		/// </summary>
		[EnumTextValue("PartnerId")]
		[ColumnEnum("PartnerId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		PartnerId = 8,
		/// <summary>
		/// Code : 
		/// </summary>
		[EnumTextValue("Code")]
		[ColumnEnum("Code", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		Code = 9,
		/// <summary>
		/// Number : 
		/// </summary>
		[EnumTextValue("Number")]
		[ColumnEnum("Number", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		Number = 10,
		/// <summary>
		/// Name : 
		/// </summary>
		[EnumTextValue("Name")]
		[ColumnEnum("Name", typeof(System.String), System.Data.DbType.String, false, false, false, 500)]
		Name = 11,
		/// <summary>
		/// Description : 
		/// </summary>
		[EnumTextValue("Description")]
		[ColumnEnum("Description", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Description = 12,
		/// <summary>
		/// Comment : 
		/// </summary>
		[EnumTextValue("Comment")]
		[ColumnEnum("Comment", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Comment = 13,
		/// <summary>
		/// InitPrice : 
		/// </summary>
		[EnumTextValue("InitPrice")]
		[ColumnEnum("InitPrice", typeof(System.Decimal), System.Data.DbType.Currency, false, false, true)]
		InitPrice = 14,
		/// <summary>
		/// LastPrice : 
		/// </summary>
		[EnumTextValue("LastPrice")]
		[ColumnEnum("LastPrice", typeof(System.Decimal), System.Data.DbType.Currency, false, false, true)]
		LastPrice = 15,
		/// <summary>
		/// SignedDate : The data that contract was signed
		/// </summary>
		[EnumTextValue("SignedDate")]
		[ColumnEnum("SignedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		SignedDate = 16,
		/// <summary>
		/// FromDate : 
		/// </summary>
		[EnumTextValue("FromDate")]
		[ColumnEnum("FromDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		FromDate = 17,
		/// <summary>
		/// ToDate : 
		/// </summary>
		[EnumTextValue("ToDate")]
		[ColumnEnum("ToDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ToDate = 18,
		/// <summary>
		/// RealFromDate : 
		/// </summary>
		[EnumTextValue("RealFromDate")]
		[ColumnEnum("RealFromDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		RealFromDate = 19,
		/// <summary>
		/// RealToDate : 
		/// </summary>
		[EnumTextValue("RealToDate")]
		[ColumnEnum("RealToDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		RealToDate = 20,
		/// <summary>
		/// Status : 
		/// </summary>
		[EnumTextValue("Status")]
		[ColumnEnum("Status", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Status = 21,
		/// <summary>
		/// IsApprove : 
		/// </summary>
		[EnumTextValue("IsApprove")]
		[ColumnEnum("IsApprove", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsApprove = 22,
		/// <summary>
		/// IsActive : 
		/// </summary>
		[EnumTextValue("IsActive")]
		[ColumnEnum("IsActive", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsActive = 23,
		/// <summary>
		/// IsPrinted : 
		/// </summary>
		[EnumTextValue("IsPrinted")]
		[ColumnEnum("IsPrinted", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		IsPrinted = 24,
		/// <summary>
		/// CurrencyUnitId : 
		/// </summary>
		[EnumTextValue("CurrencyUnitId")]
		[ColumnEnum("CurrencyUnitId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CurrencyUnitId = 25,
		/// <summary>
		/// ContractType : Electromechanical, Construction, ...
		/// </summary>
		[EnumTextValue("ContractType")]
		[ColumnEnum("ContractType", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ContractType = 26,
		/// <summary>
		/// FromContactorId : A representative
		/// </summary>
		[EnumTextValue("FromContactorId")]
		[ColumnEnum("FromContactorId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		FromContactorId = 27,
		/// <summary>
		/// ToContactorId : B representative
		/// </summary>
		[EnumTextValue("ToContactorId")]
		[ColumnEnum("ToContactorId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ToContactorId = 28,
		/// <summary>
		/// VATTax : 
		/// </summary>
		[EnumTextValue("VATTax")]
		[ColumnEnum("VATTax", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		VATTax = 29,
		/// <summary>
		/// PITTax : 
		/// </summary>
		[EnumTextValue("PITTax")]
		[ColumnEnum("PITTax", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		PITTax = 30,
		/// <summary>
		/// CITTax : 
		/// </summary>
		[EnumTextValue("CITTax")]
		[ColumnEnum("CITTax", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		CITTax = 31,
		/// <summary>
		/// Other : 
		/// </summary>
		[EnumTextValue("Other")]
		[ColumnEnum("Other", typeof(System.Decimal), System.Data.DbType.Currency, false, false, true)]
		Other = 32,
		/// <summary>
		/// CreationUserId : 
		/// </summary>
		[EnumTextValue("CreationUserId")]
		[ColumnEnum("CreationUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CreationUserId = 33,
		/// <summary>
		/// CreationDate : 
		/// </summary>
		[EnumTextValue("CreationDate")]
		[ColumnEnum("CreationDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CreationDate = 34,
		/// <summary>
		/// LastModificationUserId : 
		/// </summary>
		[EnumTextValue("LastModificationUserId")]
		[ColumnEnum("LastModificationUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		LastModificationUserId = 35,
		/// <summary>
		/// LastModificationDate : 
		/// </summary>
		[EnumTextValue("LastModificationDate")]
		[ColumnEnum("LastModificationDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastModificationDate = 36,
		/// <summary>
		/// ExchangeRate : 
		/// </summary>
		[EnumTextValue("ExchangeRate")]
		[ColumnEnum("ExchangeRate", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ExchangeRate = 37
	}//End enum

	#endregion ContractColumn Enum

} // end namespace
