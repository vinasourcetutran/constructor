	
/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : Tuesday, May 03, 2011
	Important: Do not modify this file. Edit the file ItemMovement.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace RLM.Construction.Entities
{
	#region ItemMovementEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="ItemMovement"/> object.
	/// </remarks>
	public class ItemMovementEventArgs : System.EventArgs
	{
		private ItemMovementColumn column;
		private object value;
		
		
		///<summary>
		/// Initalizes a new Instance of the ItemMovementEventArgs class.
		///</summary>
		public ItemMovementEventArgs(ItemMovementColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ItemMovementEventArgs class.
		///</summary>
		public ItemMovementEventArgs(ItemMovementColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		
		///<summary>
		/// The ItemMovementColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ItemMovementColumn" />
		public ItemMovementColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	
	///<summary>
	/// Define a delegate for all ItemMovement related events.
	///</summary>
	public delegate void ItemMovementEventHandler(object sender, ItemMovementEventArgs e);
	
	///<summary>
	/// An object representation of the 'ItemMovement' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	//[ToolboxItem(typeof(ItemMovement))]
	public abstract partial class ItemMovementBase : EntityBase, IEntityId<ItemMovementKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		/// 	Old the inner data of the entity.
		/// </summary>
		private ItemMovementEntityData entityData;
		
		// <summary>
		// 	Old the original data of the entity.
		// </summary>
		//ItemMovementEntityData originalData;
		
		/// <summary>
		/// 	Old a backup of the inner data of the entity.
		/// </summary>
		private ItemMovementEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		[NonSerialized]
		private TList<ItemMovement> parentCollection;
		private bool inTxn = false;

		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event ItemMovementEventHandler ColumnChanging;
		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ItemMovementEventHandler ColumnChanged;		
		#endregion "Variable Declarations"
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ItemMovementBase"/> instance.
		///</summary>
		public ItemMovementBase()
		{
			this.entityData = new ItemMovementEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ItemMovementBase"/> instance.
		///</summary>
		///<param name="itemMovementItemId"></param>
		///<param name="itemMovementFromRepositoryId"></param>
		///<param name="itemMovementToRepositoryId"></param>
		///<param name="itemMovementFromRepositoryManagerId"></param>
		///<param name="itemMovementToRepositoryManagerId"></param>
		///<param name="itemMovementTransferUserId"></param>
		///<param name="itemMovementReceiverUserId"></param>
		///<param name="itemMovementUnitPrice"></param>
		///<param name="itemMovementPriceUnitId"></param>
		///<param name="itemMovementExchangeRate"></param>
		///<param name="itemMovementTotalQuantity"></param>
		///<param name="itemMovementTotalAmount"></param>
		///<param name="itemMovementStatus"></param>
		///<param name="itemMovementIsActive"></param>
		///<param name="itemMovementIsApprove"></param>
		///<param name="itemMovementDeliveryDate">Date of delivery items</param>
		///<param name="itemMovementReceivedDate">Date that receiver receive items</param>
		///<param name="itemMovementCreationDate"></param>
		///<param name="itemMovementCreationUserId"></param>
		///<param name="itemMovementLastModificationDate"></param>
		///<param name="itemMovementLastModificationUserId"></param>
		public ItemMovementBase(System.Int64? itemMovementItemId, System.Int32? itemMovementFromRepositoryId, System.Int32? itemMovementToRepositoryId, 
			System.Int32? itemMovementFromRepositoryManagerId, System.Int32? itemMovementToRepositoryManagerId, System.Int32? itemMovementTransferUserId, 
			System.Int32? itemMovementReceiverUserId, System.Decimal? itemMovementUnitPrice, System.Int32? itemMovementPriceUnitId, 
			System.Int32? itemMovementExchangeRate, System.Int64? itemMovementTotalQuantity, System.Decimal? itemMovementTotalAmount, 
			System.Int32? itemMovementStatus, System.Int64? itemMovementIsActive, System.Boolean? itemMovementIsApprove, System.DateTime? itemMovementDeliveryDate, 
			System.DateTime? itemMovementReceivedDate, System.DateTime? itemMovementCreationDate, System.Int32? itemMovementCreationUserId, 
			System.DateTime? itemMovementLastModificationDate, System.Int32? itemMovementLastModificationUserId)
		{
			this.entityData = new ItemMovementEntityData();
			this.backupData = null;

			this.ItemId = itemMovementItemId;
			this.FromRepositoryId = itemMovementFromRepositoryId;
			this.ToRepositoryId = itemMovementToRepositoryId;
			this.FromRepositoryManagerId = itemMovementFromRepositoryManagerId;
			this.ToRepositoryManagerId = itemMovementToRepositoryManagerId;
			this.TransferUserId = itemMovementTransferUserId;
			this.ReceiverUserId = itemMovementReceiverUserId;
			this.UnitPrice = itemMovementUnitPrice;
			this.PriceUnitId = itemMovementPriceUnitId;
			this.ExchangeRate = itemMovementExchangeRate;
			this.TotalQuantity = itemMovementTotalQuantity;
			this.TotalAmount = itemMovementTotalAmount;
			this.Status = itemMovementStatus;
			this.IsActive = itemMovementIsActive;
			this.IsApprove = itemMovementIsApprove;
			this.DeliveryDate = itemMovementDeliveryDate;
			this.ReceivedDate = itemMovementReceivedDate;
			this.CreationDate = itemMovementCreationDate;
			this.CreationUserId = itemMovementCreationUserId;
			this.LastModificationDate = itemMovementLastModificationDate;
			this.LastModificationUserId = itemMovementLastModificationUserId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ItemMovement"/> instance.
		///</summary>
		///<param name="itemMovementItemId"></param>
		///<param name="itemMovementFromRepositoryId"></param>
		///<param name="itemMovementToRepositoryId"></param>
		///<param name="itemMovementFromRepositoryManagerId"></param>
		///<param name="itemMovementToRepositoryManagerId"></param>
		///<param name="itemMovementTransferUserId"></param>
		///<param name="itemMovementReceiverUserId"></param>
		///<param name="itemMovementUnitPrice"></param>
		///<param name="itemMovementPriceUnitId"></param>
		///<param name="itemMovementExchangeRate"></param>
		///<param name="itemMovementTotalQuantity"></param>
		///<param name="itemMovementTotalAmount"></param>
		///<param name="itemMovementStatus"></param>
		///<param name="itemMovementIsActive"></param>
		///<param name="itemMovementIsApprove"></param>
		///<param name="itemMovementDeliveryDate">Date of delivery items</param>
		///<param name="itemMovementReceivedDate">Date that receiver receive items</param>
		///<param name="itemMovementCreationDate"></param>
		///<param name="itemMovementCreationUserId"></param>
		///<param name="itemMovementLastModificationDate"></param>
		///<param name="itemMovementLastModificationUserId"></param>
		public static ItemMovement CreateItemMovement(System.Int64? itemMovementItemId, System.Int32? itemMovementFromRepositoryId, System.Int32? itemMovementToRepositoryId, 
			System.Int32? itemMovementFromRepositoryManagerId, System.Int32? itemMovementToRepositoryManagerId, System.Int32? itemMovementTransferUserId, 
			System.Int32? itemMovementReceiverUserId, System.Decimal? itemMovementUnitPrice, System.Int32? itemMovementPriceUnitId, 
			System.Int32? itemMovementExchangeRate, System.Int64? itemMovementTotalQuantity, System.Decimal? itemMovementTotalAmount, 
			System.Int32? itemMovementStatus, System.Int64? itemMovementIsActive, System.Boolean? itemMovementIsApprove, System.DateTime? itemMovementDeliveryDate, 
			System.DateTime? itemMovementReceivedDate, System.DateTime? itemMovementCreationDate, System.Int32? itemMovementCreationUserId, 
			System.DateTime? itemMovementLastModificationDate, System.Int32? itemMovementLastModificationUserId)
		{
			ItemMovement newItemMovement = new ItemMovement();
			newItemMovement.ItemId = itemMovementItemId;
			newItemMovement.FromRepositoryId = itemMovementFromRepositoryId;
			newItemMovement.ToRepositoryId = itemMovementToRepositoryId;
			newItemMovement.FromRepositoryManagerId = itemMovementFromRepositoryManagerId;
			newItemMovement.ToRepositoryManagerId = itemMovementToRepositoryManagerId;
			newItemMovement.TransferUserId = itemMovementTransferUserId;
			newItemMovement.ReceiverUserId = itemMovementReceiverUserId;
			newItemMovement.UnitPrice = itemMovementUnitPrice;
			newItemMovement.PriceUnitId = itemMovementPriceUnitId;
			newItemMovement.ExchangeRate = itemMovementExchangeRate;
			newItemMovement.TotalQuantity = itemMovementTotalQuantity;
			newItemMovement.TotalAmount = itemMovementTotalAmount;
			newItemMovement.Status = itemMovementStatus;
			newItemMovement.IsActive = itemMovementIsActive;
			newItemMovement.IsApprove = itemMovementIsApprove;
			newItemMovement.DeliveryDate = itemMovementDeliveryDate;
			newItemMovement.ReceivedDate = itemMovementReceivedDate;
			newItemMovement.CreationDate = itemMovementCreationDate;
			newItemMovement.CreationUserId = itemMovementCreationUserId;
			newItemMovement.LastModificationDate = itemMovementLastModificationDate;
			newItemMovement.LastModificationUserId = itemMovementLastModificationUserId;
			return newItemMovement;
		}
				
		#endregion Constructors
		
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ItemMovementColumn"/> which has raised the event.</param>
		public void OnColumnChanging(ItemMovementColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ItemMovementColumn"/> which has raised the event.</param>
		public void OnColumnChanged(ItemMovementColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ItemMovementColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(ItemMovementColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added)
				EntityManager.StopTracking(EntityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				ItemMovementEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ItemMovementEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ItemMovementColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(ItemMovementColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ItemMovementEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ItemMovementEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
				
		#region Properties	
				
		/// <summary>
		/// 	Gets or sets the RepositoryMovementId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 RepositoryMovementId
		{
			get
			{
				return this.entityData.RepositoryMovementId; 
			}
			
			set
			{
				if (this.entityData.RepositoryMovementId == value)
					return;
					
					
				OnColumnChanging(ItemMovementColumn.RepositoryMovementId, this.entityData.RepositoryMovementId);
				this.entityData.RepositoryMovementId = value;
				this.EntityId.RepositoryMovementId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemMovementColumn.RepositoryMovementId, this.entityData.RepositoryMovementId);
				OnPropertyChanged("RepositoryMovementId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ItemId property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsItemIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? ItemId
		{
			get
			{
				return this.entityData.ItemId; 
			}
			
			set
			{
				if (this.entityData.ItemId == value)
					return;
					
					
				OnColumnChanging(ItemMovementColumn.ItemId, this.entityData.ItemId);
				this.entityData.ItemId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemMovementColumn.ItemId, this.entityData.ItemId);
				OnPropertyChanged("ItemId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FromRepositoryId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsFromRepositoryIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? FromRepositoryId
		{
			get
			{
				return this.entityData.FromRepositoryId; 
			}
			
			set
			{
				if (this.entityData.FromRepositoryId == value)
					return;
					
					
				OnColumnChanging(ItemMovementColumn.FromRepositoryId, this.entityData.FromRepositoryId);
				this.entityData.FromRepositoryId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemMovementColumn.FromRepositoryId, this.entityData.FromRepositoryId);
				OnPropertyChanged("FromRepositoryId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ToRepositoryId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsToRepositoryIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ToRepositoryId
		{
			get
			{
				return this.entityData.ToRepositoryId; 
			}
			
			set
			{
				if (this.entityData.ToRepositoryId == value)
					return;
					
					
				OnColumnChanging(ItemMovementColumn.ToRepositoryId, this.entityData.ToRepositoryId);
				this.entityData.ToRepositoryId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemMovementColumn.ToRepositoryId, this.entityData.ToRepositoryId);
				OnPropertyChanged("ToRepositoryId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FromRepositoryManagerId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsFromRepositoryManagerIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? FromRepositoryManagerId
		{
			get
			{
				return this.entityData.FromRepositoryManagerId; 
			}
			
			set
			{
				if (this.entityData.FromRepositoryManagerId == value)
					return;
					
					
				OnColumnChanging(ItemMovementColumn.FromRepositoryManagerId, this.entityData.FromRepositoryManagerId);
				this.entityData.FromRepositoryManagerId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemMovementColumn.FromRepositoryManagerId, this.entityData.FromRepositoryManagerId);
				OnPropertyChanged("FromRepositoryManagerId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ToRepositoryManagerId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsToRepositoryManagerIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ToRepositoryManagerId
		{
			get
			{
				return this.entityData.ToRepositoryManagerId; 
			}
			
			set
			{
				if (this.entityData.ToRepositoryManagerId == value)
					return;
					
					
				OnColumnChanging(ItemMovementColumn.ToRepositoryManagerId, this.entityData.ToRepositoryManagerId);
				this.entityData.ToRepositoryManagerId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemMovementColumn.ToRepositoryManagerId, this.entityData.ToRepositoryManagerId);
				OnPropertyChanged("ToRepositoryManagerId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TransferUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsTransferUserIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? TransferUserId
		{
			get
			{
				return this.entityData.TransferUserId; 
			}
			
			set
			{
				if (this.entityData.TransferUserId == value)
					return;
					
					
				OnColumnChanging(ItemMovementColumn.TransferUserId, this.entityData.TransferUserId);
				this.entityData.TransferUserId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemMovementColumn.TransferUserId, this.entityData.TransferUserId);
				OnPropertyChanged("TransferUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReceiverUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsReceiverUserIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ReceiverUserId
		{
			get
			{
				return this.entityData.ReceiverUserId; 
			}
			
			set
			{
				if (this.entityData.ReceiverUserId == value)
					return;
					
					
				OnColumnChanging(ItemMovementColumn.ReceiverUserId, this.entityData.ReceiverUserId);
				this.entityData.ReceiverUserId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemMovementColumn.ReceiverUserId, this.entityData.ReceiverUserId);
				OnPropertyChanged("ReceiverUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UnitPrice property. 
		///		
		/// </summary>
		/// <value>This type is money.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0. It is up to the developer
		/// to check the value of IsUnitPriceNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? UnitPrice
		{
			get
			{
				return this.entityData.UnitPrice; 
			}
			
			set
			{
				if (this.entityData.UnitPrice == value)
					return;
					
					
				OnColumnChanging(ItemMovementColumn.UnitPrice, this.entityData.UnitPrice);
				this.entityData.UnitPrice = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemMovementColumn.UnitPrice, this.entityData.UnitPrice);
				OnPropertyChanged("UnitPrice");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PriceUnitId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsPriceUnitIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? PriceUnitId
		{
			get
			{
				return this.entityData.PriceUnitId; 
			}
			
			set
			{
				if (this.entityData.PriceUnitId == value)
					return;
					
					
				OnColumnChanging(ItemMovementColumn.PriceUnitId, this.entityData.PriceUnitId);
				this.entityData.PriceUnitId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemMovementColumn.PriceUnitId, this.entityData.PriceUnitId);
				OnPropertyChanged("PriceUnitId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExchangeRate property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsExchangeRateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ExchangeRate
		{
			get
			{
				return this.entityData.ExchangeRate; 
			}
			
			set
			{
				if (this.entityData.ExchangeRate == value)
					return;
					
					
				OnColumnChanging(ItemMovementColumn.ExchangeRate, this.entityData.ExchangeRate);
				this.entityData.ExchangeRate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemMovementColumn.ExchangeRate, this.entityData.ExchangeRate);
				OnPropertyChanged("ExchangeRate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalQuantity property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsTotalQuantityNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? TotalQuantity
		{
			get
			{
				return this.entityData.TotalQuantity; 
			}
			
			set
			{
				if (this.entityData.TotalQuantity == value)
					return;
					
					
				OnColumnChanging(ItemMovementColumn.TotalQuantity, this.entityData.TotalQuantity);
				this.entityData.TotalQuantity = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemMovementColumn.TotalQuantity, this.entityData.TotalQuantity);
				OnPropertyChanged("TotalQuantity");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalAmount property. 
		///		
		/// </summary>
		/// <value>This type is money.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0. It is up to the developer
		/// to check the value of IsTotalAmountNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TotalAmount
		{
			get
			{
				return this.entityData.TotalAmount; 
			}
			
			set
			{
				if (this.entityData.TotalAmount == value)
					return;
					
					
				OnColumnChanging(ItemMovementColumn.TotalAmount, this.entityData.TotalAmount);
				this.entityData.TotalAmount = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemMovementColumn.TotalAmount, this.entityData.TotalAmount);
				OnPropertyChanged("TotalAmount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Status property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsStatusNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Status
		{
			get
			{
				return this.entityData.Status; 
			}
			
			set
			{
				if (this.entityData.Status == value)
					return;
					
					
				OnColumnChanging(ItemMovementColumn.Status, this.entityData.Status);
				this.entityData.Status = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemMovementColumn.Status, this.entityData.Status);
				OnPropertyChanged("Status");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsActive property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsIsActiveNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? IsActive
		{
			get
			{
				return this.entityData.IsActive; 
			}
			
			set
			{
				if (this.entityData.IsActive == value)
					return;
					
					
				OnColumnChanging(ItemMovementColumn.IsActive, this.entityData.IsActive);
				this.entityData.IsActive = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemMovementColumn.IsActive, this.entityData.IsActive);
				OnPropertyChanged("IsActive");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsApprove property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsApproveNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsApprove
		{
			get
			{
				return this.entityData.IsApprove; 
			}
			
			set
			{
				if (this.entityData.IsApprove == value)
					return;
					
					
				OnColumnChanging(ItemMovementColumn.IsApprove, this.entityData.IsApprove);
				this.entityData.IsApprove = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemMovementColumn.IsApprove, this.entityData.IsApprove);
				OnPropertyChanged("IsApprove");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DeliveryDate property. 
		///		Date of delivery items
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsDeliveryDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("Date of delivery items"), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? DeliveryDate
		{
			get
			{
				return this.entityData.DeliveryDate; 
			}
			
			set
			{
				if (this.entityData.DeliveryDate == value)
					return;
					
					
				OnColumnChanging(ItemMovementColumn.DeliveryDate, this.entityData.DeliveryDate);
				this.entityData.DeliveryDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemMovementColumn.DeliveryDate, this.entityData.DeliveryDate);
				OnPropertyChanged("DeliveryDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReceivedDate property. 
		///		Date that receiver receive items
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsReceivedDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("Date that receiver receive items"), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ReceivedDate
		{
			get
			{
				return this.entityData.ReceivedDate; 
			}
			
			set
			{
				if (this.entityData.ReceivedDate == value)
					return;
					
					
				OnColumnChanging(ItemMovementColumn.ReceivedDate, this.entityData.ReceivedDate);
				this.entityData.ReceivedDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemMovementColumn.ReceivedDate, this.entityData.ReceivedDate);
				OnPropertyChanged("ReceivedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreationDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsCreationDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CreationDate
		{
			get
			{
				return this.entityData.CreationDate; 
			}
			
			set
			{
				if (this.entityData.CreationDate == value)
					return;
					
					
				OnColumnChanging(ItemMovementColumn.CreationDate, this.entityData.CreationDate);
				this.entityData.CreationDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemMovementColumn.CreationDate, this.entityData.CreationDate);
				OnPropertyChanged("CreationDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreationUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCreationUserIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CreationUserId
		{
			get
			{
				return this.entityData.CreationUserId; 
			}
			
			set
			{
				if (this.entityData.CreationUserId == value)
					return;
					
					
				OnColumnChanging(ItemMovementColumn.CreationUserId, this.entityData.CreationUserId);
				this.entityData.CreationUserId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemMovementColumn.CreationUserId, this.entityData.CreationUserId);
				OnPropertyChanged("CreationUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModificationDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastModificationDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastModificationDate
		{
			get
			{
				return this.entityData.LastModificationDate; 
			}
			
			set
			{
				if (this.entityData.LastModificationDate == value)
					return;
					
					
				OnColumnChanging(ItemMovementColumn.LastModificationDate, this.entityData.LastModificationDate);
				this.entityData.LastModificationDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemMovementColumn.LastModificationDate, this.entityData.LastModificationDate);
				OnPropertyChanged("LastModificationDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModificationUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsLastModificationUserIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? LastModificationUserId
		{
			get
			{
				return this.entityData.LastModificationUserId; 
			}
			
			set
			{
				if (this.entityData.LastModificationUserId == value)
					return;
					
					
				OnColumnChanging(ItemMovementColumn.LastModificationUserId, this.entityData.LastModificationUserId);
				this.entityData.LastModificationUserId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemMovementColumn.LastModificationUserId, this.entityData.LastModificationUserId);
				OnPropertyChanged("LastModificationUserId");
			}
		}
		

		#region Source Foreign Key Property
				
		private Item _itemIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Item"/>.
		/// </summary>
		/// <value>The source Item for ItemId.</value>
        [XmlIgnore()]
		[Browsable(false), BindableAttribute()]
		public virtual Item ItemIdSource
      	{
            get { return this._itemIdSource; }
            set { this._itemIdSource = value; }
      	}
		private Repository _fromRepositoryIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Repository"/>.
		/// </summary>
		/// <value>The source Repository for FromRepositoryId.</value>
        [XmlIgnore()]
		[Browsable(false), BindableAttribute()]
		public virtual Repository FromRepositoryIdSource
      	{
            get { return this._fromRepositoryIdSource; }
            set { this._fromRepositoryIdSource = value; }
      	}
		private Repository _toRepositoryIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Repository"/>.
		/// </summary>
		/// <value>The source Repository for ToRepositoryId.</value>
        [XmlIgnore()]
		[Browsable(false), BindableAttribute()]
		public virtual Repository ToRepositoryIdSource
      	{
            get { return this._toRepositoryIdSource; }
            set { this._toRepositoryIdSource = value; }
      	}
		#endregion
			
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ItemMovement"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"RepositoryMovementId", "ItemId", "FromRepositoryId", "ToRepositoryId", "FromRepositoryManagerId", "ToRepositoryManagerId", "TransferUserId", "ReceiverUserId", "UnitPrice", "PriceUnitId", "ExchangeRate", "TotalQuantity", "TotalAmount", "Status", "IsActive", "IsApprove", "DeliveryDate", "ReceivedDate", "CreationDate", "CreationUserId", "LastModificationDate", "LastModificationUserId"};
			}
		}
		#endregion 
		
		
		#endregion
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ItemMovementEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (ItemMovement) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return (object)this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<ItemMovement>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as ItemMovement);
	        }
	    }


		#endregion
		
		#region Methods	
			
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();
		}	
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ItemMovement Entity 
		///</summary>
		public virtual ItemMovement Copy()
		{
			//shallow copy entity
			ItemMovement copy = new ItemMovement();
			copy.RepositoryMovementId = this.RepositoryMovementId;
			copy.ItemId = this.ItemId;
			copy.FromRepositoryId = this.FromRepositoryId;
			copy.ToRepositoryId = this.ToRepositoryId;
			copy.FromRepositoryManagerId = this.FromRepositoryManagerId;
			copy.ToRepositoryManagerId = this.ToRepositoryManagerId;
			copy.TransferUserId = this.TransferUserId;
			copy.ReceiverUserId = this.ReceiverUserId;
			copy.UnitPrice = this.UnitPrice;
			copy.PriceUnitId = this.PriceUnitId;
			copy.ExchangeRate = this.ExchangeRate;
			copy.TotalQuantity = this.TotalQuantity;
			copy.TotalAmount = this.TotalAmount;
			copy.Status = this.Status;
			copy.IsActive = this.IsActive;
			copy.IsApprove = this.IsApprove;
			copy.DeliveryDate = this.DeliveryDate;
			copy.ReceivedDate = this.ReceivedDate;
			copy.CreationDate = this.CreationDate;
			copy.CreationUserId = this.CreationUserId;
			copy.LastModificationDate = this.LastModificationDate;
			copy.LastModificationUserId = this.LastModificationUserId;
					
			copy.AcceptChanges();
			return (ItemMovement)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed ItemMovement Entity which is a deep copy of the current entity.
		///</summary>
		public virtual ItemMovement DeepCopy()
		{
			return EntityHelper.Clone<ItemMovement>(this as ItemMovement);	
		}
		#endregion
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ItemMovementBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ItemMovementBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="ItemMovementBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="ItemMovementBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ItemMovementBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(ItemMovementBase Object1, ItemMovementBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.RepositoryMovementId != Object2.RepositoryMovementId)
				equal = false;
			if ( Object1.ItemId != null && Object2.ItemId != null )
			{
				if (Object1.ItemId != Object2.ItemId)
					equal = false;
			}
			else if (Object1.ItemId == null ^ Object2.ItemId == null )
			{
				equal = false;
			}
			if ( Object1.FromRepositoryId != null && Object2.FromRepositoryId != null )
			{
				if (Object1.FromRepositoryId != Object2.FromRepositoryId)
					equal = false;
			}
			else if (Object1.FromRepositoryId == null ^ Object2.FromRepositoryId == null )
			{
				equal = false;
			}
			if ( Object1.ToRepositoryId != null && Object2.ToRepositoryId != null )
			{
				if (Object1.ToRepositoryId != Object2.ToRepositoryId)
					equal = false;
			}
			else if (Object1.ToRepositoryId == null ^ Object2.ToRepositoryId == null )
			{
				equal = false;
			}
			if ( Object1.FromRepositoryManagerId != null && Object2.FromRepositoryManagerId != null )
			{
				if (Object1.FromRepositoryManagerId != Object2.FromRepositoryManagerId)
					equal = false;
			}
			else if (Object1.FromRepositoryManagerId == null ^ Object2.FromRepositoryManagerId == null )
			{
				equal = false;
			}
			if ( Object1.ToRepositoryManagerId != null && Object2.ToRepositoryManagerId != null )
			{
				if (Object1.ToRepositoryManagerId != Object2.ToRepositoryManagerId)
					equal = false;
			}
			else if (Object1.ToRepositoryManagerId == null ^ Object2.ToRepositoryManagerId == null )
			{
				equal = false;
			}
			if ( Object1.TransferUserId != null && Object2.TransferUserId != null )
			{
				if (Object1.TransferUserId != Object2.TransferUserId)
					equal = false;
			}
			else if (Object1.TransferUserId == null ^ Object2.TransferUserId == null )
			{
				equal = false;
			}
			if ( Object1.ReceiverUserId != null && Object2.ReceiverUserId != null )
			{
				if (Object1.ReceiverUserId != Object2.ReceiverUserId)
					equal = false;
			}
			else if (Object1.ReceiverUserId == null ^ Object2.ReceiverUserId == null )
			{
				equal = false;
			}
			if ( Object1.UnitPrice != null && Object2.UnitPrice != null )
			{
				if (Object1.UnitPrice != Object2.UnitPrice)
					equal = false;
			}
			else if (Object1.UnitPrice == null ^ Object2.UnitPrice == null )
			{
				equal = false;
			}
			if ( Object1.PriceUnitId != null && Object2.PriceUnitId != null )
			{
				if (Object1.PriceUnitId != Object2.PriceUnitId)
					equal = false;
			}
			else if (Object1.PriceUnitId == null ^ Object2.PriceUnitId == null )
			{
				equal = false;
			}
			if ( Object1.ExchangeRate != null && Object2.ExchangeRate != null )
			{
				if (Object1.ExchangeRate != Object2.ExchangeRate)
					equal = false;
			}
			else if (Object1.ExchangeRate == null ^ Object2.ExchangeRate == null )
			{
				equal = false;
			}
			if ( Object1.TotalQuantity != null && Object2.TotalQuantity != null )
			{
				if (Object1.TotalQuantity != Object2.TotalQuantity)
					equal = false;
			}
			else if (Object1.TotalQuantity == null ^ Object2.TotalQuantity == null )
			{
				equal = false;
			}
			if ( Object1.TotalAmount != null && Object2.TotalAmount != null )
			{
				if (Object1.TotalAmount != Object2.TotalAmount)
					equal = false;
			}
			else if (Object1.TotalAmount == null ^ Object2.TotalAmount == null )
			{
				equal = false;
			}
			if ( Object1.Status != null && Object2.Status != null )
			{
				if (Object1.Status != Object2.Status)
					equal = false;
			}
			else if (Object1.Status == null ^ Object2.Status == null )
			{
				equal = false;
			}
			if ( Object1.IsActive != null && Object2.IsActive != null )
			{
				if (Object1.IsActive != Object2.IsActive)
					equal = false;
			}
			else if (Object1.IsActive == null ^ Object2.IsActive == null )
			{
				equal = false;
			}
			if ( Object1.IsApprove != null && Object2.IsApprove != null )
			{
				if (Object1.IsApprove != Object2.IsApprove)
					equal = false;
			}
			else if (Object1.IsApprove == null ^ Object2.IsApprove == null )
			{
				equal = false;
			}
			if ( Object1.DeliveryDate != null && Object2.DeliveryDate != null )
			{
				if (Object1.DeliveryDate != Object2.DeliveryDate)
					equal = false;
			}
			else if (Object1.DeliveryDate == null ^ Object2.DeliveryDate == null )
			{
				equal = false;
			}
			if ( Object1.ReceivedDate != null && Object2.ReceivedDate != null )
			{
				if (Object1.ReceivedDate != Object2.ReceivedDate)
					equal = false;
			}
			else if (Object1.ReceivedDate == null ^ Object2.ReceivedDate == null )
			{
				equal = false;
			}
			if ( Object1.CreationDate != null && Object2.CreationDate != null )
			{
				if (Object1.CreationDate != Object2.CreationDate)
					equal = false;
			}
			else if (Object1.CreationDate == null ^ Object2.CreationDate == null )
			{
				equal = false;
			}
			if ( Object1.CreationUserId != null && Object2.CreationUserId != null )
			{
				if (Object1.CreationUserId != Object2.CreationUserId)
					equal = false;
			}
			else if (Object1.CreationUserId == null ^ Object2.CreationUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastModificationDate != null && Object2.LastModificationDate != null )
			{
				if (Object1.LastModificationDate != Object2.LastModificationDate)
					equal = false;
			}
			else if (Object1.LastModificationDate == null ^ Object2.LastModificationDate == null )
			{
				equal = false;
			}
			if ( Object1.LastModificationUserId != null && Object2.LastModificationUserId != null )
			{
				if (Object1.LastModificationUserId != Object2.LastModificationUserId)
					equal = false;
			}
			else if (Object1.LastModificationUserId == null ^ Object2.LastModificationUserId == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			// TODO -> generate a strongly typed IComparer in the concrete class
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name) .CompareTo(((ItemMovementBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name));
		}
		
		/*
		// static method to get a Comparer object
        public static ItemMovementComparer GetComparer()
        {
            return new ItemMovementComparer();
        }
        */

        // Comparer delegates back to ItemMovement
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(ItemMovement rhs, ItemMovementColumn which)
        {
            switch (which)
            {
            	
            	
            	case ItemMovementColumn.RepositoryMovementId:
            		return this.RepositoryMovementId.CompareTo(rhs.RepositoryMovementId);
            		
            		                 
            	
            	
            	case ItemMovementColumn.ItemId:
            		return this.ItemId.Value.CompareTo(rhs.ItemId.Value);
            		
            		                 
            	
            	
            	case ItemMovementColumn.FromRepositoryId:
            		return this.FromRepositoryId.Value.CompareTo(rhs.FromRepositoryId.Value);
            		
            		                 
            	
            	
            	case ItemMovementColumn.ToRepositoryId:
            		return this.ToRepositoryId.Value.CompareTo(rhs.ToRepositoryId.Value);
            		
            		                 
            	
            	
            	case ItemMovementColumn.FromRepositoryManagerId:
            		return this.FromRepositoryManagerId.Value.CompareTo(rhs.FromRepositoryManagerId.Value);
            		
            		                 
            	
            	
            	case ItemMovementColumn.ToRepositoryManagerId:
            		return this.ToRepositoryManagerId.Value.CompareTo(rhs.ToRepositoryManagerId.Value);
            		
            		                 
            	
            	
            	case ItemMovementColumn.TransferUserId:
            		return this.TransferUserId.Value.CompareTo(rhs.TransferUserId.Value);
            		
            		                 
            	
            	
            	case ItemMovementColumn.ReceiverUserId:
            		return this.ReceiverUserId.Value.CompareTo(rhs.ReceiverUserId.Value);
            		
            		                 
            	
            	
            	case ItemMovementColumn.UnitPrice:
            		return this.UnitPrice.Value.CompareTo(rhs.UnitPrice.Value);
            		
            		                 
            	
            	
            	case ItemMovementColumn.PriceUnitId:
            		return this.PriceUnitId.Value.CompareTo(rhs.PriceUnitId.Value);
            		
            		                 
            	
            	
            	case ItemMovementColumn.ExchangeRate:
            		return this.ExchangeRate.Value.CompareTo(rhs.ExchangeRate.Value);
            		
            		                 
            	
            	
            	case ItemMovementColumn.TotalQuantity:
            		return this.TotalQuantity.Value.CompareTo(rhs.TotalQuantity.Value);
            		
            		                 
            	
            	
            	case ItemMovementColumn.TotalAmount:
            		return this.TotalAmount.Value.CompareTo(rhs.TotalAmount.Value);
            		
            		                 
            	
            	
            	case ItemMovementColumn.Status:
            		return this.Status.Value.CompareTo(rhs.Status.Value);
            		
            		                 
            	
            	
            	case ItemMovementColumn.IsActive:
            		return this.IsActive.Value.CompareTo(rhs.IsActive.Value);
            		
            		                 
            	
            	
            	case ItemMovementColumn.IsApprove:
            		return this.IsApprove.Value.CompareTo(rhs.IsApprove.Value);
            		
            		                 
            	
            	
            	case ItemMovementColumn.DeliveryDate:
            		return this.DeliveryDate.Value.CompareTo(rhs.DeliveryDate.Value);
            		
            		                 
            	
            	
            	case ItemMovementColumn.ReceivedDate:
            		return this.ReceivedDate.Value.CompareTo(rhs.ReceivedDate.Value);
            		
            		                 
            	
            	
            	case ItemMovementColumn.CreationDate:
            		return this.CreationDate.Value.CompareTo(rhs.CreationDate.Value);
            		
            		                 
            	
            	
            	case ItemMovementColumn.CreationUserId:
            		return this.CreationUserId.Value.CompareTo(rhs.CreationUserId.Value);
            		
            		                 
            	
            	
            	case ItemMovementColumn.LastModificationDate:
            		return this.LastModificationDate.Value.CompareTo(rhs.LastModificationDate.Value);
            		
            		                 
            	
            	
            	case ItemMovementColumn.LastModificationUserId:
            		return this.LastModificationUserId.Value.CompareTo(rhs.LastModificationUserId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ItemMovementKey> Members
		
		// member variable for the EntityId property
		private ItemMovementKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public ItemMovementKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ItemMovementKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = @"ItemMovement" 
					+ this.RepositoryMovementId.ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{23}{22}- RepositoryMovementId: {0}{22}- ItemId: {1}{22}- FromRepositoryId: {2}{22}- ToRepositoryId: {3}{22}- FromRepositoryManagerId: {4}{22}- ToRepositoryManagerId: {5}{22}- TransferUserId: {6}{22}- ReceiverUserId: {7}{22}- UnitPrice: {8}{22}- PriceUnitId: {9}{22}- ExchangeRate: {10}{22}- TotalQuantity: {11}{22}- TotalAmount: {12}{22}- Status: {13}{22}- IsActive: {14}{22}- IsApprove: {15}{22}- DeliveryDate: {16}{22}- ReceivedDate: {17}{22}- CreationDate: {18}{22}- CreationUserId: {19}{22}- LastModificationDate: {20}{22}- LastModificationUserId: {21}{22}", 
				this.RepositoryMovementId,
				(this.ItemId == null) ? string.Empty : this.ItemId.ToString(),
				(this.FromRepositoryId == null) ? string.Empty : this.FromRepositoryId.ToString(),
				(this.ToRepositoryId == null) ? string.Empty : this.ToRepositoryId.ToString(),
				(this.FromRepositoryManagerId == null) ? string.Empty : this.FromRepositoryManagerId.ToString(),
				(this.ToRepositoryManagerId == null) ? string.Empty : this.ToRepositoryManagerId.ToString(),
				(this.TransferUserId == null) ? string.Empty : this.TransferUserId.ToString(),
				(this.ReceiverUserId == null) ? string.Empty : this.ReceiverUserId.ToString(),
				(this.UnitPrice == null) ? string.Empty : this.UnitPrice.ToString(),
				(this.PriceUnitId == null) ? string.Empty : this.PriceUnitId.ToString(),
				(this.ExchangeRate == null) ? string.Empty : this.ExchangeRate.ToString(),
				(this.TotalQuantity == null) ? string.Empty : this.TotalQuantity.ToString(),
				(this.TotalAmount == null) ? string.Empty : this.TotalAmount.ToString(),
				(this.Status == null) ? string.Empty : this.Status.ToString(),
				(this.IsActive == null) ? string.Empty : this.IsActive.ToString(),
				(this.IsApprove == null) ? string.Empty : this.IsApprove.ToString(),
				(this.DeliveryDate == null) ? string.Empty : this.DeliveryDate.ToString(),
				(this.ReceivedDate == null) ? string.Empty : this.ReceivedDate.ToString(),
				(this.CreationDate == null) ? string.Empty : this.CreationDate.ToString(),
				(this.CreationUserId == null) ? string.Empty : this.CreationUserId.ToString(),
				(this.LastModificationDate == null) ? string.Empty : this.LastModificationDate.ToString(),
				(this.LastModificationUserId == null) ? string.Empty : this.LastModificationUserId.ToString(),
				Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ItemMovement' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal class ItemMovementEntityData : ICloneable
	{
		#region Variable Declarations
		
		#region Primary key(s)
			/// <summary>			
			/// RepositoryMovementId : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "ItemMovement"</remarks>
			public System.Int32 RepositoryMovementId;
				
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ItemId : 
		/// </summary>
		public System.Int64?		  ItemId = (long)0;
		
		/// <summary>
		/// FromRepositoryId : 
		/// </summary>
		public System.Int32?		  FromRepositoryId = (int)0;
		
		/// <summary>
		/// ToRepositoryId : 
		/// </summary>
		public System.Int32?		  ToRepositoryId = (int)0;
		
		/// <summary>
		/// FromRepositoryManagerId : 
		/// </summary>
		public System.Int32?		  FromRepositoryManagerId = (int)0;
		
		/// <summary>
		/// ToRepositoryManagerId : 
		/// </summary>
		public System.Int32?		  ToRepositoryManagerId = (int)0;
		
		/// <summary>
		/// TransferUserId : 
		/// </summary>
		public System.Int32?		  TransferUserId = (int)0;
		
		/// <summary>
		/// ReceiverUserId : 
		/// </summary>
		public System.Int32?		  ReceiverUserId = (int)0;
		
		/// <summary>
		/// UnitPrice : 
		/// </summary>
		public System.Decimal?		  UnitPrice = 0;
		
		/// <summary>
		/// PriceUnitId : 
		/// </summary>
		public System.Int32?		  PriceUnitId = (int)0;
		
		/// <summary>
		/// ExchangeRate : 
		/// </summary>
		public System.Int32?		  ExchangeRate = (int)0;
		
		/// <summary>
		/// TotalQuantity : 
		/// </summary>
		public System.Int64?		  TotalQuantity = (long)0;
		
		/// <summary>
		/// TotalAmount : 
		/// </summary>
		public System.Decimal?		  TotalAmount = 0;
		
		/// <summary>
		/// Status : 
		/// </summary>
		public System.Int32?		  Status = (int)0;
		
		/// <summary>
		/// IsActive : 
		/// </summary>
		public System.Int64?		  IsActive = (long)0;
		
		/// <summary>
		/// IsApprove : 
		/// </summary>
		public System.Boolean?		  IsApprove = false;
		
		/// <summary>
		/// DeliveryDate : Date of delivery items
		/// </summary>
		public System.DateTime?		  DeliveryDate = DateTime.MinValue;
		
		/// <summary>
		/// ReceivedDate : Date that receiver receive items
		/// </summary>
		public System.DateTime?		  ReceivedDate = DateTime.MinValue;
		
		/// <summary>
		/// CreationDate : 
		/// </summary>
		public System.DateTime?		  CreationDate = DateTime.MinValue;
		
		/// <summary>
		/// CreationUserId : 
		/// </summary>
		public System.Int32?		  CreationUserId = (int)0;
		
		/// <summary>
		/// LastModificationDate : 
		/// </summary>
		public System.DateTime?		  LastModificationDate = DateTime.MinValue;
		
		/// <summary>
		/// LastModificationUserId : 
		/// </summary>
		public System.Int32?		  LastModificationUserId = (int)0;
		#endregion
			
		#endregion Variable Declarations
		
		#region Clone
		public Object Clone()
		{
			ItemMovementEntityData _tmp = new ItemMovementEntityData();
						
			_tmp.RepositoryMovementId = this.RepositoryMovementId;
			
			_tmp.ItemId = this.ItemId;
			_tmp.FromRepositoryId = this.FromRepositoryId;
			_tmp.ToRepositoryId = this.ToRepositoryId;
			_tmp.FromRepositoryManagerId = this.FromRepositoryManagerId;
			_tmp.ToRepositoryManagerId = this.ToRepositoryManagerId;
			_tmp.TransferUserId = this.TransferUserId;
			_tmp.ReceiverUserId = this.ReceiverUserId;
			_tmp.UnitPrice = this.UnitPrice;
			_tmp.PriceUnitId = this.PriceUnitId;
			_tmp.ExchangeRate = this.ExchangeRate;
			_tmp.TotalQuantity = this.TotalQuantity;
			_tmp.TotalAmount = this.TotalAmount;
			_tmp.Status = this.Status;
			_tmp.IsActive = this.IsActive;
			_tmp.IsApprove = this.IsApprove;
			_tmp.DeliveryDate = this.DeliveryDate;
			_tmp.ReceivedDate = this.ReceivedDate;
			_tmp.CreationDate = this.CreationDate;
			_tmp.CreationUserId = this.CreationUserId;
			_tmp.LastModificationDate = this.LastModificationDate;
			_tmp.LastModificationUserId = this.LastModificationUserId;
			
			return _tmp;
		}
		#endregion 
		
		#region Data Properties

		#endregion Data Properties

	}//End struct


		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
	
	} // End Class
	
	#region ItemMovementComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ItemMovementComparer : System.Collections.Generic.IComparer<ItemMovement>
	{
		ItemMovementColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ItemMovementComparer"/> class.
        /// </summary>
		public ItemMovementComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ItemMovementComparer(ItemMovementColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="ItemMovement"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="ItemMovement"/> to compare.</param>
        /// <param name="b">The second <c>ItemMovement</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(ItemMovement a, ItemMovement b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(ItemMovement entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(ItemMovement a, ItemMovement b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ItemMovementColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ItemMovementKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="ItemMovement"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ItemMovementKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ItemMovementKey class.
		/// </summary>
		public ItemMovementKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ItemMovementKey class.
		/// </summary>
		public ItemMovementKey(ItemMovementBase entity)
		{
			Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.repositoryMovementId = entity.RepositoryMovementId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ItemMovementKey class.
		/// </summary>
		public ItemMovementKey(System.Int32 repositoryMovementId)
		{
			#region Init Properties

			this.repositoryMovementId = repositoryMovementId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ItemMovementBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ItemMovementBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the RepositoryMovementId property
		private System.Int32 repositoryMovementId;
		
		/// <summary>
		/// Gets or sets the RepositoryMovementId property.
		/// </summary>
		public System.Int32 RepositoryMovementId
		{
			get { return repositoryMovementId; }
			set
			{
				if ( Entity != null )
				{
					Entity.RepositoryMovementId = value;
				}
				
				repositoryMovementId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				RepositoryMovementId = ( values["RepositoryMovementId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["RepositoryMovementId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("RepositoryMovementId", RepositoryMovementId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("RepositoryMovementId: {0}{1}",
								RepositoryMovementId,
								Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ItemMovementColumn Enum
	
	/// <summary>
	/// Enumerate the ItemMovement columns.
	/// </summary>
	[Serializable]
	public enum ItemMovementColumn : int
	{
		/// <summary>
		/// RepositoryMovementId : 
		/// </summary>
		[EnumTextValue("RepositoryMovementId")]
		[ColumnEnum("RepositoryMovementId", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		RepositoryMovementId = 1,
		/// <summary>
		/// ItemId : 
		/// </summary>
		[EnumTextValue("ItemId")]
		[ColumnEnum("ItemId", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		ItemId = 2,
		/// <summary>
		/// FromRepositoryId : 
		/// </summary>
		[EnumTextValue("FromRepositoryId")]
		[ColumnEnum("FromRepositoryId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		FromRepositoryId = 3,
		/// <summary>
		/// ToRepositoryId : 
		/// </summary>
		[EnumTextValue("ToRepositoryId")]
		[ColumnEnum("ToRepositoryId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ToRepositoryId = 4,
		/// <summary>
		/// FromRepositoryManagerId : 
		/// </summary>
		[EnumTextValue("FromRepositoryManagerId")]
		[ColumnEnum("FromRepositoryManagerId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		FromRepositoryManagerId = 5,
		/// <summary>
		/// ToRepositoryManagerId : 
		/// </summary>
		[EnumTextValue("ToRepositoryManagerId")]
		[ColumnEnum("ToRepositoryManagerId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ToRepositoryManagerId = 6,
		/// <summary>
		/// TransferUserId : 
		/// </summary>
		[EnumTextValue("TransferUserId")]
		[ColumnEnum("TransferUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		TransferUserId = 7,
		/// <summary>
		/// ReceiverUserId : 
		/// </summary>
		[EnumTextValue("ReceiverUserId")]
		[ColumnEnum("ReceiverUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ReceiverUserId = 8,
		/// <summary>
		/// UnitPrice : 
		/// </summary>
		[EnumTextValue("UnitPrice")]
		[ColumnEnum("UnitPrice", typeof(System.Decimal), System.Data.DbType.Currency, false, false, true)]
		UnitPrice = 9,
		/// <summary>
		/// PriceUnitId : 
		/// </summary>
		[EnumTextValue("PriceUnitId")]
		[ColumnEnum("PriceUnitId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		PriceUnitId = 10,
		/// <summary>
		/// ExchangeRate : 
		/// </summary>
		[EnumTextValue("ExchangeRate")]
		[ColumnEnum("ExchangeRate", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ExchangeRate = 11,
		/// <summary>
		/// TotalQuantity : 
		/// </summary>
		[EnumTextValue("TotalQuantity")]
		[ColumnEnum("TotalQuantity", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		TotalQuantity = 12,
		/// <summary>
		/// TotalAmount : 
		/// </summary>
		[EnumTextValue("TotalAmount")]
		[ColumnEnum("TotalAmount", typeof(System.Decimal), System.Data.DbType.Currency, false, false, true)]
		TotalAmount = 13,
		/// <summary>
		/// Status : 
		/// </summary>
		[EnumTextValue("Status")]
		[ColumnEnum("Status", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Status = 14,
		/// <summary>
		/// IsActive : 
		/// </summary>
		[EnumTextValue("IsActive")]
		[ColumnEnum("IsActive", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		IsActive = 15,
		/// <summary>
		/// IsApprove : 
		/// </summary>
		[EnumTextValue("IsApprove")]
		[ColumnEnum("IsApprove", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsApprove = 16,
		/// <summary>
		/// DeliveryDate : Date of delivery items
		/// </summary>
		[EnumTextValue("DeliveryDate")]
		[ColumnEnum("DeliveryDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		DeliveryDate = 17,
		/// <summary>
		/// ReceivedDate : Date that receiver receive items
		/// </summary>
		[EnumTextValue("ReceivedDate")]
		[ColumnEnum("ReceivedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ReceivedDate = 18,
		/// <summary>
		/// CreationDate : 
		/// </summary>
		[EnumTextValue("CreationDate")]
		[ColumnEnum("CreationDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CreationDate = 19,
		/// <summary>
		/// CreationUserId : 
		/// </summary>
		[EnumTextValue("CreationUserId")]
		[ColumnEnum("CreationUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CreationUserId = 20,
		/// <summary>
		/// LastModificationDate : 
		/// </summary>
		[EnumTextValue("LastModificationDate")]
		[ColumnEnum("LastModificationDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastModificationDate = 21,
		/// <summary>
		/// LastModificationUserId : 
		/// </summary>
		[EnumTextValue("LastModificationUserId")]
		[ColumnEnum("LastModificationUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		LastModificationUserId = 22
	}//End enum

	#endregion ItemMovementColumn Enum

} // end namespace
