	
/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : Saturday, December 11, 2010
	Important: Do not modify this file. Edit the file User.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace RLM.Construction.Entities
{
	#region UserEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="User"/> object.
	/// </remarks>
	public class UserEventArgs : System.EventArgs
	{
		private UserColumn column;
		private object value;
		
		
		///<summary>
		/// Initalizes a new Instance of the UserEventArgs class.
		///</summary>
		public UserEventArgs(UserColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the UserEventArgs class.
		///</summary>
		public UserEventArgs(UserColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		
		///<summary>
		/// The UserColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="UserColumn" />
		public UserColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	
	///<summary>
	/// Define a delegate for all User related events.
	///</summary>
	public delegate void UserEventHandler(object sender, UserEventArgs e);
	
	///<summary>
	/// An object representation of the 'User' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	//[ToolboxItem(typeof(User))]
	public abstract partial class UserBase : EntityBase, IEntityId<UserKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		/// 	Old the inner data of the entity.
		/// </summary>
		private UserEntityData entityData;
		
		// <summary>
		// 	Old the original data of the entity.
		// </summary>
		//UserEntityData originalData;
		
		/// <summary>
		/// 	Old a backup of the inner data of the entity.
		/// </summary>
		private UserEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		[NonSerialized]
		private TList<User> parentCollection;
		private bool inTxn = false;

		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event UserEventHandler ColumnChanging;
		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event UserEventHandler ColumnChanged;		
		#endregion "Variable Declarations"
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="UserBase"/> instance.
		///</summary>
		public UserBase()
		{
			this.entityData = new UserEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="UserBase"/> instance.
		///</summary>
		///<param name="userUserGroupId"></param>
		///<param name="userEmail"></param>
		///<param name="userPwd"></param>
		///<param name="userPwdFormat">Format of pwd, example: 0: plain text, 1: MD5, 2: 3-DES</param>
		///<param name="userFullName"></param>
		///<param name="userPhone"></param>
		///<param name="userIsDeletable">true if user can not be deleted (built-in user)</param>
		///<param name="userIsActive">false if user account was deactive. An deactive user account can not logged into the system</param>
		///<param name="userIsFirstLoggedIn">true if user did not logged in</param>
		///<param name="userIsLocked">true if account was locked, example: after 3 times logged-in fail. User account will be locked</param>
		///<param name="userLogInFail">number of login fail</param>
		///<param name="userLastLoginDate">Last log-in time</param>
		///<param name="userCreationDate"></param>
		///<param name="userCreationUserId"></param>
		///<param name="userLastModificationDate"></param>
		///<param name="userLastModificationUserId"></param>
		///<param name="userIsLoggedIn"></param>
		///<param name="userLoggedInGuid"></param>
		public UserBase(System.Int32? userUserGroupId, System.String userEmail, System.String userPwd, System.Int32? userPwdFormat, 
			System.String userFullName, System.String userPhone, System.Boolean? userIsDeletable, System.Boolean? userIsActive, System.Boolean? userIsFirstLoggedIn, 
			System.Boolean? userIsLocked, System.Int32? userLogInFail, System.DateTime? userLastLoginDate, System.DateTime? userCreationDate, 
			System.Int32? userCreationUserId, System.DateTime? userLastModificationDate, System.Int32? userLastModificationUserId, 
			System.Boolean? userIsLoggedIn, System.Guid? userLoggedInGuid)
		{
			this.entityData = new UserEntityData();
			this.backupData = null;

			this.UserGroupId = userUserGroupId;
			this.Email = userEmail;
			this.Pwd = userPwd;
			this.PwdFormat = userPwdFormat;
			this.FullName = userFullName;
			this.Phone = userPhone;
			this.IsDeletable = userIsDeletable;
			this.IsActive = userIsActive;
			this.IsFirstLoggedIn = userIsFirstLoggedIn;
			this.IsLocked = userIsLocked;
			this.LogInFail = userLogInFail;
			this.LastLoginDate = userLastLoginDate;
			this.CreationDate = userCreationDate;
			this.CreationUserId = userCreationUserId;
			this.LastModificationDate = userLastModificationDate;
			this.LastModificationUserId = userLastModificationUserId;
			this.IsLoggedIn = userIsLoggedIn;
			this.LoggedInGuid = userLoggedInGuid;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="User"/> instance.
		///</summary>
		///<param name="userUserGroupId"></param>
		///<param name="userEmail"></param>
		///<param name="userPwd"></param>
		///<param name="userPwdFormat">Format of pwd, example: 0: plain text, 1: MD5, 2: 3-DES</param>
		///<param name="userFullName"></param>
		///<param name="userPhone"></param>
		///<param name="userIsDeletable">true if user can not be deleted (built-in user)</param>
		///<param name="userIsActive">false if user account was deactive. An deactive user account can not logged into the system</param>
		///<param name="userIsFirstLoggedIn">true if user did not logged in</param>
		///<param name="userIsLocked">true if account was locked, example: after 3 times logged-in fail. User account will be locked</param>
		///<param name="userLogInFail">number of login fail</param>
		///<param name="userLastLoginDate">Last log-in time</param>
		///<param name="userCreationDate"></param>
		///<param name="userCreationUserId"></param>
		///<param name="userLastModificationDate"></param>
		///<param name="userLastModificationUserId"></param>
		///<param name="userIsLoggedIn"></param>
		///<param name="userLoggedInGuid"></param>
		public static User CreateUser(System.Int32? userUserGroupId, System.String userEmail, System.String userPwd, System.Int32? userPwdFormat, 
			System.String userFullName, System.String userPhone, System.Boolean? userIsDeletable, System.Boolean? userIsActive, System.Boolean? userIsFirstLoggedIn, 
			System.Boolean? userIsLocked, System.Int32? userLogInFail, System.DateTime? userLastLoginDate, System.DateTime? userCreationDate, 
			System.Int32? userCreationUserId, System.DateTime? userLastModificationDate, System.Int32? userLastModificationUserId, 
			System.Boolean? userIsLoggedIn, System.Guid? userLoggedInGuid)
		{
			User newUser = new User();
			newUser.UserGroupId = userUserGroupId;
			newUser.Email = userEmail;
			newUser.Pwd = userPwd;
			newUser.PwdFormat = userPwdFormat;
			newUser.FullName = userFullName;
			newUser.Phone = userPhone;
			newUser.IsDeletable = userIsDeletable;
			newUser.IsActive = userIsActive;
			newUser.IsFirstLoggedIn = userIsFirstLoggedIn;
			newUser.IsLocked = userIsLocked;
			newUser.LogInFail = userLogInFail;
			newUser.LastLoginDate = userLastLoginDate;
			newUser.CreationDate = userCreationDate;
			newUser.CreationUserId = userCreationUserId;
			newUser.LastModificationDate = userLastModificationDate;
			newUser.LastModificationUserId = userLastModificationUserId;
			newUser.IsLoggedIn = userIsLoggedIn;
			newUser.LoggedInGuid = userLoggedInGuid;
			return newUser;
		}
				
		#endregion Constructors
		
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="UserColumn"/> which has raised the event.</param>
		public void OnColumnChanging(UserColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="UserColumn"/> which has raised the event.</param>
		public void OnColumnChanged(UserColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="UserColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(UserColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added)
				EntityManager.StopTracking(EntityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				UserEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new UserEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="UserColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(UserColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				UserEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new UserEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
				
		#region Properties	
				
		/// <summary>
		/// 	Gets or sets the UserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 UserId
		{
			get
			{
				return this.entityData.UserId; 
			}
			
			set
			{
				if (this.entityData.UserId == value)
					return;
					
					
				OnColumnChanging(UserColumn.UserId, this.entityData.UserId);
				this.entityData.UserId = value;
				this.EntityId.UserId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(UserColumn.UserId, this.entityData.UserId);
				OnPropertyChanged("UserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UserGroupId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsUserGroupIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? UserGroupId
		{
			get
			{
				return this.entityData.UserGroupId; 
			}
			
			set
			{
				if (this.entityData.UserGroupId == value)
					return;
					
					
				OnColumnChanging(UserColumn.UserGroupId, this.entityData.UserGroupId);
				this.entityData.UserGroupId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(UserColumn.UserGroupId, this.entityData.UserGroupId);
				OnPropertyChanged("UserGroupId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Email property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false, 100)]
		public virtual System.String Email
		{
			get
			{
				return this.entityData.Email; 
			}
			
			set
			{
				if (this.entityData.Email == value)
					return;
					
					
				OnColumnChanging(UserColumn.Email, this.entityData.Email);
				this.entityData.Email = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(UserColumn.Email, this.entityData.Email);
				OnPropertyChanged("Email");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Pwd property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String Pwd
		{
			get
			{
				return this.entityData.Pwd; 
			}
			
			set
			{
				if (this.entityData.Pwd == value)
					return;
					
					
				OnColumnChanging(UserColumn.Pwd, this.entityData.Pwd);
				this.entityData.Pwd = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(UserColumn.Pwd, this.entityData.Pwd);
				OnPropertyChanged("Pwd");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PwdFormat property. 
		///		Format of pwd, example: 0: plain text, 1: MD5, 2: 3-DES
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsPwdFormatNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("Format of pwd, example: 0: plain text, 1: MD5, 2: 3-DES"), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? PwdFormat
		{
			get
			{
				return this.entityData.PwdFormat; 
			}
			
			set
			{
				if (this.entityData.PwdFormat == value)
					return;
					
					
				OnColumnChanging(UserColumn.PwdFormat, this.entityData.PwdFormat);
				this.entityData.PwdFormat = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(UserColumn.PwdFormat, this.entityData.PwdFormat);
				OnPropertyChanged("PwdFormat");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FullName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false, 200)]
		public virtual System.String FullName
		{
			get
			{
				return this.entityData.FullName; 
			}
			
			set
			{
				if (this.entityData.FullName == value)
					return;
					
					
				OnColumnChanging(UserColumn.FullName, this.entityData.FullName);
				this.entityData.FullName = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(UserColumn.FullName, this.entityData.FullName);
				OnPropertyChanged("FullName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Phone property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String Phone
		{
			get
			{
				return this.entityData.Phone; 
			}
			
			set
			{
				if (this.entityData.Phone == value)
					return;
					
					
				OnColumnChanging(UserColumn.Phone, this.entityData.Phone);
				this.entityData.Phone = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(UserColumn.Phone, this.entityData.Phone);
				OnPropertyChanged("Phone");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsDeletable property. 
		///		true if user can not be deleted (built-in user)
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsDeletableNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("true if user can not be deleted (built-in user)"), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsDeletable
		{
			get
			{
				return this.entityData.IsDeletable; 
			}
			
			set
			{
				if (this.entityData.IsDeletable == value)
					return;
					
					
				OnColumnChanging(UserColumn.IsDeletable, this.entityData.IsDeletable);
				this.entityData.IsDeletable = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(UserColumn.IsDeletable, this.entityData.IsDeletable);
				OnPropertyChanged("IsDeletable");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsActive property. 
		///		false if user account was deactive. An deactive user account can not logged into the system
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsActiveNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("false if user account was deactive. An deactive user account can not logged into the system"), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsActive
		{
			get
			{
				return this.entityData.IsActive; 
			}
			
			set
			{
				if (this.entityData.IsActive == value)
					return;
					
					
				OnColumnChanging(UserColumn.IsActive, this.entityData.IsActive);
				this.entityData.IsActive = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(UserColumn.IsActive, this.entityData.IsActive);
				OnPropertyChanged("IsActive");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsFirstLoggedIn property. 
		///		true if user did not logged in
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsFirstLoggedInNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("true if user did not logged in"), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsFirstLoggedIn
		{
			get
			{
				return this.entityData.IsFirstLoggedIn; 
			}
			
			set
			{
				if (this.entityData.IsFirstLoggedIn == value)
					return;
					
					
				OnColumnChanging(UserColumn.IsFirstLoggedIn, this.entityData.IsFirstLoggedIn);
				this.entityData.IsFirstLoggedIn = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(UserColumn.IsFirstLoggedIn, this.entityData.IsFirstLoggedIn);
				OnPropertyChanged("IsFirstLoggedIn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsLocked property. 
		///		true if account was locked, example: after 3 times logged-in fail. User account will be locked
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsLockedNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("true if account was locked, example: after 3 times logged-in fail. User account will be locked"), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsLocked
		{
			get
			{
				return this.entityData.IsLocked; 
			}
			
			set
			{
				if (this.entityData.IsLocked == value)
					return;
					
					
				OnColumnChanging(UserColumn.IsLocked, this.entityData.IsLocked);
				this.entityData.IsLocked = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(UserColumn.IsLocked, this.entityData.IsLocked);
				OnPropertyChanged("IsLocked");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LogInFail property. 
		///		number of login fail
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsLogInFailNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("number of login fail"), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? LogInFail
		{
			get
			{
				return this.entityData.LogInFail; 
			}
			
			set
			{
				if (this.entityData.LogInFail == value)
					return;
					
					
				OnColumnChanging(UserColumn.LogInFail, this.entityData.LogInFail);
				this.entityData.LogInFail = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(UserColumn.LogInFail, this.entityData.LogInFail);
				OnPropertyChanged("LogInFail");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastLoginDate property. 
		///		Last log-in time
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastLoginDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("Last log-in time"), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastLoginDate
		{
			get
			{
				return this.entityData.LastLoginDate; 
			}
			
			set
			{
				if (this.entityData.LastLoginDate == value)
					return;
					
					
				OnColumnChanging(UserColumn.LastLoginDate, this.entityData.LastLoginDate);
				this.entityData.LastLoginDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(UserColumn.LastLoginDate, this.entityData.LastLoginDate);
				OnPropertyChanged("LastLoginDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreationDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsCreationDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CreationDate
		{
			get
			{
				return this.entityData.CreationDate; 
			}
			
			set
			{
				if (this.entityData.CreationDate == value)
					return;
					
					
				OnColumnChanging(UserColumn.CreationDate, this.entityData.CreationDate);
				this.entityData.CreationDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(UserColumn.CreationDate, this.entityData.CreationDate);
				OnPropertyChanged("CreationDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreationUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCreationUserIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CreationUserId
		{
			get
			{
				return this.entityData.CreationUserId; 
			}
			
			set
			{
				if (this.entityData.CreationUserId == value)
					return;
					
					
				OnColumnChanging(UserColumn.CreationUserId, this.entityData.CreationUserId);
				this.entityData.CreationUserId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(UserColumn.CreationUserId, this.entityData.CreationUserId);
				OnPropertyChanged("CreationUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModificationDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastModificationDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastModificationDate
		{
			get
			{
				return this.entityData.LastModificationDate; 
			}
			
			set
			{
				if (this.entityData.LastModificationDate == value)
					return;
					
					
				OnColumnChanging(UserColumn.LastModificationDate, this.entityData.LastModificationDate);
				this.entityData.LastModificationDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(UserColumn.LastModificationDate, this.entityData.LastModificationDate);
				OnPropertyChanged("LastModificationDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModificationUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsLastModificationUserIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? LastModificationUserId
		{
			get
			{
				return this.entityData.LastModificationUserId; 
			}
			
			set
			{
				if (this.entityData.LastModificationUserId == value)
					return;
					
					
				OnColumnChanging(UserColumn.LastModificationUserId, this.entityData.LastModificationUserId);
				this.entityData.LastModificationUserId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(UserColumn.LastModificationUserId, this.entityData.LastModificationUserId);
				OnPropertyChanged("LastModificationUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsLoggedIn property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsLoggedInNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsLoggedIn
		{
			get
			{
				return this.entityData.IsLoggedIn; 
			}
			
			set
			{
				if (this.entityData.IsLoggedIn == value)
					return;
					
					
				OnColumnChanging(UserColumn.IsLoggedIn, this.entityData.IsLoggedIn);
				this.entityData.IsLoggedIn = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(UserColumn.IsLoggedIn, this.entityData.IsLoggedIn);
				OnPropertyChanged("IsLoggedIn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LoggedInGuid property. 
		///		
		/// </summary>
		/// <value>This type is uniqueidentifier.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return Guid.Empty. It is up to the developer
		/// to check the value of IsLoggedInGuidNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Guid? LoggedInGuid
		{
			get
			{
				return this.entityData.LoggedInGuid; 
			}
			
			set
			{
				if (this.entityData.LoggedInGuid == value)
					return;
					
					
				OnColumnChanging(UserColumn.LoggedInGuid, this.entityData.LoggedInGuid);
				this.entityData.LoggedInGuid = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(UserColumn.LoggedInGuid, this.entityData.LoggedInGuid);
				OnPropertyChanged("LoggedInGuid");
			}
		}
		

		#region Source Foreign Key Property
				
		private UserGroup _userGroupIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="UserGroup"/>.
		/// </summary>
		/// <value>The source UserGroup for UserGroupId.</value>
        [XmlIgnore()]
		[Browsable(false), BindableAttribute()]
		public virtual UserGroup UserGroupIdSource
      	{
            get { return this._userGroupIdSource; }
            set { this._userGroupIdSource = value; }
      	}
		#endregion
			
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "User"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"UserId", "UserGroupId", "Email", "Pwd", "PwdFormat", "FullName", "Phone", "IsDeletable", "IsActive", "IsFirstLoggedIn", "IsLocked", "LogInFail", "LastLoginDate", "CreationDate", "CreationUserId", "LastModificationDate", "LastModificationUserId", "IsLoggedIn", "LoggedInGuid"};
			}
		}
		#endregion 
		
	
		/// <summary>
		///	Holds a collection of Staff objects
		///	which are related to this object through the relation FK_Staffs_Users
		/// </summary>	
		[BindableAttribute()]
		public TList<Staff> StaffCollection
		{
			get { return entityData.StaffCollection; }
			set { entityData.StaffCollection = value; }	
		}
		
		#endregion
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as UserEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (User) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return (object)this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<User>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as User);
	        }
	    }


		#endregion
		
		#region Methods	
			
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();
		}	
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed User Entity 
		///</summary>
		public virtual User Copy()
		{
			//shallow copy entity
			User copy = new User();
			copy.UserId = this.UserId;
			copy.UserGroupId = this.UserGroupId;
			copy.Email = this.Email;
			copy.Pwd = this.Pwd;
			copy.PwdFormat = this.PwdFormat;
			copy.FullName = this.FullName;
			copy.Phone = this.Phone;
			copy.IsDeletable = this.IsDeletable;
			copy.IsActive = this.IsActive;
			copy.IsFirstLoggedIn = this.IsFirstLoggedIn;
			copy.IsLocked = this.IsLocked;
			copy.LogInFail = this.LogInFail;
			copy.LastLoginDate = this.LastLoginDate;
			copy.CreationDate = this.CreationDate;
			copy.CreationUserId = this.CreationUserId;
			copy.LastModificationDate = this.LastModificationDate;
			copy.LastModificationUserId = this.LastModificationUserId;
			copy.IsLoggedIn = this.IsLoggedIn;
			copy.LoggedInGuid = this.LoggedInGuid;
					
			copy.AcceptChanges();
			return (User)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed User Entity which is a deep copy of the current entity.
		///</summary>
		public virtual User DeepCopy()
		{
			return EntityHelper.Clone<User>(this as User);	
		}
		#endregion
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="UserBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(UserBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="UserBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="UserBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="UserBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(UserBase Object1, UserBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.UserId != Object2.UserId)
				equal = false;
			if ( Object1.UserGroupId != null && Object2.UserGroupId != null )
			{
				if (Object1.UserGroupId != Object2.UserGroupId)
					equal = false;
			}
			else if (Object1.UserGroupId == null ^ Object2.UserGroupId == null )
			{
				equal = false;
			}
			if (Object1.Email != Object2.Email)
				equal = false;
			if (Object1.Pwd != Object2.Pwd)
				equal = false;
			if ( Object1.PwdFormat != null && Object2.PwdFormat != null )
			{
				if (Object1.PwdFormat != Object2.PwdFormat)
					equal = false;
			}
			else if (Object1.PwdFormat == null ^ Object2.PwdFormat == null )
			{
				equal = false;
			}
			if (Object1.FullName != Object2.FullName)
				equal = false;
			if ( Object1.Phone != null && Object2.Phone != null )
			{
				if (Object1.Phone != Object2.Phone)
					equal = false;
			}
			else if (Object1.Phone == null ^ Object2.Phone == null )
			{
				equal = false;
			}
			if ( Object1.IsDeletable != null && Object2.IsDeletable != null )
			{
				if (Object1.IsDeletable != Object2.IsDeletable)
					equal = false;
			}
			else if (Object1.IsDeletable == null ^ Object2.IsDeletable == null )
			{
				equal = false;
			}
			if ( Object1.IsActive != null && Object2.IsActive != null )
			{
				if (Object1.IsActive != Object2.IsActive)
					equal = false;
			}
			else if (Object1.IsActive == null ^ Object2.IsActive == null )
			{
				equal = false;
			}
			if ( Object1.IsFirstLoggedIn != null && Object2.IsFirstLoggedIn != null )
			{
				if (Object1.IsFirstLoggedIn != Object2.IsFirstLoggedIn)
					equal = false;
			}
			else if (Object1.IsFirstLoggedIn == null ^ Object2.IsFirstLoggedIn == null )
			{
				equal = false;
			}
			if ( Object1.IsLocked != null && Object2.IsLocked != null )
			{
				if (Object1.IsLocked != Object2.IsLocked)
					equal = false;
			}
			else if (Object1.IsLocked == null ^ Object2.IsLocked == null )
			{
				equal = false;
			}
			if ( Object1.LogInFail != null && Object2.LogInFail != null )
			{
				if (Object1.LogInFail != Object2.LogInFail)
					equal = false;
			}
			else if (Object1.LogInFail == null ^ Object2.LogInFail == null )
			{
				equal = false;
			}
			if ( Object1.LastLoginDate != null && Object2.LastLoginDate != null )
			{
				if (Object1.LastLoginDate != Object2.LastLoginDate)
					equal = false;
			}
			else if (Object1.LastLoginDate == null ^ Object2.LastLoginDate == null )
			{
				equal = false;
			}
			if ( Object1.CreationDate != null && Object2.CreationDate != null )
			{
				if (Object1.CreationDate != Object2.CreationDate)
					equal = false;
			}
			else if (Object1.CreationDate == null ^ Object2.CreationDate == null )
			{
				equal = false;
			}
			if ( Object1.CreationUserId != null && Object2.CreationUserId != null )
			{
				if (Object1.CreationUserId != Object2.CreationUserId)
					equal = false;
			}
			else if (Object1.CreationUserId == null ^ Object2.CreationUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastModificationDate != null && Object2.LastModificationDate != null )
			{
				if (Object1.LastModificationDate != Object2.LastModificationDate)
					equal = false;
			}
			else if (Object1.LastModificationDate == null ^ Object2.LastModificationDate == null )
			{
				equal = false;
			}
			if ( Object1.LastModificationUserId != null && Object2.LastModificationUserId != null )
			{
				if (Object1.LastModificationUserId != Object2.LastModificationUserId)
					equal = false;
			}
			else if (Object1.LastModificationUserId == null ^ Object2.LastModificationUserId == null )
			{
				equal = false;
			}
			if ( Object1.IsLoggedIn != null && Object2.IsLoggedIn != null )
			{
				if (Object1.IsLoggedIn != Object2.IsLoggedIn)
					equal = false;
			}
			else if (Object1.IsLoggedIn == null ^ Object2.IsLoggedIn == null )
			{
				equal = false;
			}
			if ( Object1.LoggedInGuid != null && Object2.LoggedInGuid != null )
			{
				if (Object1.LoggedInGuid != Object2.LoggedInGuid)
					equal = false;
			}
			else if (Object1.LoggedInGuid == null ^ Object2.LoggedInGuid == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			// TODO -> generate a strongly typed IComparer in the concrete class
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name) .CompareTo(((UserBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name));
		}
		
		/*
		// static method to get a Comparer object
        public static UserComparer GetComparer()
        {
            return new UserComparer();
        }
        */

        // Comparer delegates back to User
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(User rhs, UserColumn which)
        {
            switch (which)
            {
            	
            	
            	case UserColumn.UserId:
            		return this.UserId.CompareTo(rhs.UserId);
            		
            		                 
            	
            	
            	case UserColumn.UserGroupId:
            		return this.UserGroupId.Value.CompareTo(rhs.UserGroupId.Value);
            		
            		                 
            	
            	
            	case UserColumn.Email:
            		return this.Email.CompareTo(rhs.Email);
            		
            		                 
            	
            	
            	case UserColumn.Pwd:
            		return this.Pwd.CompareTo(rhs.Pwd);
            		
            		                 
            	
            	
            	case UserColumn.PwdFormat:
            		return this.PwdFormat.Value.CompareTo(rhs.PwdFormat.Value);
            		
            		                 
            	
            	
            	case UserColumn.FullName:
            		return this.FullName.CompareTo(rhs.FullName);
            		
            		                 
            	
            	
            	case UserColumn.Phone:
            		return this.Phone.CompareTo(rhs.Phone);
            		
            		                 
            	
            	
            	case UserColumn.IsDeletable:
            		return this.IsDeletable.Value.CompareTo(rhs.IsDeletable.Value);
            		
            		                 
            	
            	
            	case UserColumn.IsActive:
            		return this.IsActive.Value.CompareTo(rhs.IsActive.Value);
            		
            		                 
            	
            	
            	case UserColumn.IsFirstLoggedIn:
            		return this.IsFirstLoggedIn.Value.CompareTo(rhs.IsFirstLoggedIn.Value);
            		
            		                 
            	
            	
            	case UserColumn.IsLocked:
            		return this.IsLocked.Value.CompareTo(rhs.IsLocked.Value);
            		
            		                 
            	
            	
            	case UserColumn.LogInFail:
            		return this.LogInFail.Value.CompareTo(rhs.LogInFail.Value);
            		
            		                 
            	
            	
            	case UserColumn.LastLoginDate:
            		return this.LastLoginDate.Value.CompareTo(rhs.LastLoginDate.Value);
            		
            		                 
            	
            	
            	case UserColumn.CreationDate:
            		return this.CreationDate.Value.CompareTo(rhs.CreationDate.Value);
            		
            		                 
            	
            	
            	case UserColumn.CreationUserId:
            		return this.CreationUserId.Value.CompareTo(rhs.CreationUserId.Value);
            		
            		                 
            	
            	
            	case UserColumn.LastModificationDate:
            		return this.LastModificationDate.Value.CompareTo(rhs.LastModificationDate.Value);
            		
            		                 
            	
            	
            	case UserColumn.LastModificationUserId:
            		return this.LastModificationUserId.Value.CompareTo(rhs.LastModificationUserId.Value);
            		
            		                 
            	
            	
            	case UserColumn.IsLoggedIn:
            		return this.IsLoggedIn.Value.CompareTo(rhs.IsLoggedIn.Value);
            		
            		                 
            	
            	
            	case UserColumn.LoggedInGuid:
            		return this.LoggedInGuid.Value.CompareTo(rhs.LoggedInGuid.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<UserKey> Members
		
		// member variable for the EntityId property
		private UserKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public UserKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new UserKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = @"User" 
					+ this.UserId.ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{20}{19}- UserId: {0}{19}- UserGroupId: {1}{19}- Email: {2}{19}- Pwd: {3}{19}- PwdFormat: {4}{19}- FullName: {5}{19}- Phone: {6}{19}- IsDeletable: {7}{19}- IsActive: {8}{19}- IsFirstLoggedIn: {9}{19}- IsLocked: {10}{19}- LogInFail: {11}{19}- LastLoginDate: {12}{19}- CreationDate: {13}{19}- CreationUserId: {14}{19}- LastModificationDate: {15}{19}- LastModificationUserId: {16}{19}- IsLoggedIn: {17}{19}- LoggedInGuid: {18}{19}", 
				this.UserId,
				(this.UserGroupId == null) ? string.Empty : this.UserGroupId.ToString(),
				this.Email,
				this.Pwd,
				(this.PwdFormat == null) ? string.Empty : this.PwdFormat.ToString(),
				this.FullName,
				(this.Phone == null) ? string.Empty : this.Phone.ToString(),
				(this.IsDeletable == null) ? string.Empty : this.IsDeletable.ToString(),
				(this.IsActive == null) ? string.Empty : this.IsActive.ToString(),
				(this.IsFirstLoggedIn == null) ? string.Empty : this.IsFirstLoggedIn.ToString(),
				(this.IsLocked == null) ? string.Empty : this.IsLocked.ToString(),
				(this.LogInFail == null) ? string.Empty : this.LogInFail.ToString(),
				(this.LastLoginDate == null) ? string.Empty : this.LastLoginDate.ToString(),
				(this.CreationDate == null) ? string.Empty : this.CreationDate.ToString(),
				(this.CreationUserId == null) ? string.Empty : this.CreationUserId.ToString(),
				(this.LastModificationDate == null) ? string.Empty : this.LastModificationDate.ToString(),
				(this.LastModificationUserId == null) ? string.Empty : this.LastModificationUserId.ToString(),
				(this.IsLoggedIn == null) ? string.Empty : this.IsLoggedIn.ToString(),
				(this.LoggedInGuid == null) ? string.Empty : this.LoggedInGuid.ToString(),
				Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'User' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal class UserEntityData : ICloneable
	{
		#region Variable Declarations
		
		#region Primary key(s)
			/// <summary>			
			/// UserId : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "User"</remarks>
			public System.Int32 UserId;
				
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// UserGroupId : 
		/// </summary>
		public System.Int32?		  UserGroupId = (int)0;
		
		/// <summary>
		/// Email : 
		/// </summary>
		public System.String		  Email = string.Empty;
		
		/// <summary>
		/// Pwd : 
		/// </summary>
		public System.String		  Pwd = string.Empty;
		
		/// <summary>
		/// PwdFormat : Format of pwd, example: 0: plain text, 1: MD5, 2: 3-DES
		/// </summary>
		public System.Int32?		  PwdFormat = (int)0;
		
		/// <summary>
		/// FullName : 
		/// </summary>
		public System.String		  FullName = string.Empty;
		
		/// <summary>
		/// Phone : 
		/// </summary>
		public System.String		  Phone = string.Empty;
		
		/// <summary>
		/// IsDeletable : true if user can not be deleted (built-in user)
		/// </summary>
		public System.Boolean?		  IsDeletable = false;
		
		/// <summary>
		/// IsActive : false if user account was deactive. An deactive user account can not logged into the system
		/// </summary>
		public System.Boolean?		  IsActive = false;
		
		/// <summary>
		/// IsFirstLoggedIn : true if user did not logged in
		/// </summary>
		public System.Boolean?		  IsFirstLoggedIn = false;
		
		/// <summary>
		/// IsLocked : true if account was locked, example: after 3 times logged-in fail. User account will be locked
		/// </summary>
		public System.Boolean?		  IsLocked = false;
		
		/// <summary>
		/// LogInFail : number of login fail
		/// </summary>
		public System.Int32?		  LogInFail = (int)0;
		
		/// <summary>
		/// LastLoginDate : Last log-in time
		/// </summary>
		public System.DateTime?		  LastLoginDate = DateTime.MinValue;
		
		/// <summary>
		/// CreationDate : 
		/// </summary>
		public System.DateTime?		  CreationDate = DateTime.MinValue;
		
		/// <summary>
		/// CreationUserId : 
		/// </summary>
		public System.Int32?		  CreationUserId = (int)0;
		
		/// <summary>
		/// LastModificationDate : 
		/// </summary>
		public System.DateTime?		  LastModificationDate = DateTime.MinValue;
		
		/// <summary>
		/// LastModificationUserId : 
		/// </summary>
		public System.Int32?		  LastModificationUserId = (int)0;
		
		/// <summary>
		/// IsLoggedIn : 
		/// </summary>
		public System.Boolean?		  IsLoggedIn = false;
		
		/// <summary>
		/// LoggedInGuid : 
		/// </summary>
		public System.Guid?		  LoggedInGuid = Guid.Empty;
		#endregion
			
		#endregion Variable Declarations
		
		#region Clone
		public Object Clone()
		{
			UserEntityData _tmp = new UserEntityData();
						
			_tmp.UserId = this.UserId;
			
			_tmp.UserGroupId = this.UserGroupId;
			_tmp.Email = this.Email;
			_tmp.Pwd = this.Pwd;
			_tmp.PwdFormat = this.PwdFormat;
			_tmp.FullName = this.FullName;
			_tmp.Phone = this.Phone;
			_tmp.IsDeletable = this.IsDeletable;
			_tmp.IsActive = this.IsActive;
			_tmp.IsFirstLoggedIn = this.IsFirstLoggedIn;
			_tmp.IsLocked = this.IsLocked;
			_tmp.LogInFail = this.LogInFail;
			_tmp.LastLoginDate = this.LastLoginDate;
			_tmp.CreationDate = this.CreationDate;
			_tmp.CreationUserId = this.CreationUserId;
			_tmp.LastModificationDate = this.LastModificationDate;
			_tmp.LastModificationUserId = this.LastModificationUserId;
			_tmp.IsLoggedIn = this.IsLoggedIn;
			_tmp.LoggedInGuid = this.LoggedInGuid;
			
			return _tmp;
		}
		#endregion 
		
		#region Data Properties

		#region StaffCollection
		
		private TList<Staff> staffUserId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation staffUserId
		/// </summary>	
		public TList<Staff> StaffCollection
		{
			get
			{
				if (staffUserId == null)
				{
				staffUserId = new TList<Staff>();
				}
	
				return staffUserId;
			}
			set { staffUserId = value; }
		}
		
		#endregion

		#endregion Data Properties

	}//End struct


		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"Email");
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Email",100));
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"Pwd");
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Pwd",50));
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"FullName");
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("FullName",200));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Phone",100));
		}
   		#endregion
	
	} // End Class
	
	#region UserComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class UserComparer : System.Collections.Generic.IComparer<User>
	{
		UserColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:UserComparer"/> class.
        /// </summary>
		public UserComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public UserComparer(UserColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="User"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="User"/> to compare.</param>
        /// <param name="b">The second <c>User</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(User a, User b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(User entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(User a, User b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public UserColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region UserKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="User"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class UserKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the UserKey class.
		/// </summary>
		public UserKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the UserKey class.
		/// </summary>
		public UserKey(UserBase entity)
		{
			Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.userId = entity.UserId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the UserKey class.
		/// </summary>
		public UserKey(System.Int32 userId)
		{
			#region Init Properties

			this.userId = userId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private UserBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public UserBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the UserId property
		private System.Int32 userId;
		
		/// <summary>
		/// Gets or sets the UserId property.
		/// </summary>
		public System.Int32 UserId
		{
			get { return userId; }
			set
			{
				if ( Entity != null )
				{
					Entity.UserId = value;
				}
				
				userId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				UserId = ( values["UserId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["UserId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("UserId", UserId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("UserId: {0}{1}",
								UserId,
								Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region UserColumn Enum
	
	/// <summary>
	/// Enumerate the User columns.
	/// </summary>
	[Serializable]
	public enum UserColumn : int
	{
		/// <summary>
		/// UserId : 
		/// </summary>
		[EnumTextValue("UserId")]
		[ColumnEnum("UserId", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		UserId = 1,
		/// <summary>
		/// UserGroupId : 
		/// </summary>
		[EnumTextValue("UserGroupId")]
		[ColumnEnum("UserGroupId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		UserGroupId = 2,
		/// <summary>
		/// Email : 
		/// </summary>
		[EnumTextValue("Email")]
		[ColumnEnum("Email", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 100)]
		Email = 3,
		/// <summary>
		/// Pwd : 
		/// </summary>
		[EnumTextValue("Pwd")]
		[ColumnEnum("Pwd", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 50)]
		Pwd = 4,
		/// <summary>
		/// PwdFormat : Format of pwd, example: 0: plain text, 1: MD5, 2: 3-DES
		/// </summary>
		[EnumTextValue("PwdFormat")]
		[ColumnEnum("PwdFormat", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		PwdFormat = 5,
		/// <summary>
		/// FullName : 
		/// </summary>
		[EnumTextValue("FullName")]
		[ColumnEnum("FullName", typeof(System.String), System.Data.DbType.String, false, false, false, 200)]
		FullName = 6,
		/// <summary>
		/// Phone : 
		/// </summary>
		[EnumTextValue("Phone")]
		[ColumnEnum("Phone", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		Phone = 7,
		/// <summary>
		/// IsDeletable : true if user can not be deleted (built-in user)
		/// </summary>
		[EnumTextValue("IsDeletable")]
		[ColumnEnum("IsDeletable", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsDeletable = 8,
		/// <summary>
		/// IsActive : false if user account was deactive. An deactive user account can not logged into the system
		/// </summary>
		[EnumTextValue("IsActive")]
		[ColumnEnum("IsActive", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsActive = 9,
		/// <summary>
		/// IsFirstLoggedIn : true if user did not logged in
		/// </summary>
		[EnumTextValue("IsFirstLoggedIn")]
		[ColumnEnum("IsFirstLoggedIn", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsFirstLoggedIn = 10,
		/// <summary>
		/// IsLocked : true if account was locked, example: after 3 times logged-in fail. User account will be locked
		/// </summary>
		[EnumTextValue("IsLocked")]
		[ColumnEnum("IsLocked", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsLocked = 11,
		/// <summary>
		/// LogInFail : number of login fail
		/// </summary>
		[EnumTextValue("LogInFail")]
		[ColumnEnum("LogInFail", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		LogInFail = 12,
		/// <summary>
		/// LastLoginDate : Last log-in time
		/// </summary>
		[EnumTextValue("LastLoginDate")]
		[ColumnEnum("LastLoginDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastLoginDate = 13,
		/// <summary>
		/// CreationDate : 
		/// </summary>
		[EnumTextValue("CreationDate")]
		[ColumnEnum("CreationDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CreationDate = 14,
		/// <summary>
		/// CreationUserId : 
		/// </summary>
		[EnumTextValue("CreationUserId")]
		[ColumnEnum("CreationUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CreationUserId = 15,
		/// <summary>
		/// LastModificationDate : 
		/// </summary>
		[EnumTextValue("LastModificationDate")]
		[ColumnEnum("LastModificationDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastModificationDate = 16,
		/// <summary>
		/// LastModificationUserId : 
		/// </summary>
		[EnumTextValue("LastModificationUserId")]
		[ColumnEnum("LastModificationUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		LastModificationUserId = 17,
		/// <summary>
		/// IsLoggedIn : 
		/// </summary>
		[EnumTextValue("IsLoggedIn")]
		[ColumnEnum("IsLoggedIn", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsLoggedIn = 18,
		/// <summary>
		/// LoggedInGuid : 
		/// </summary>
		[EnumTextValue("LoggedInGuid")]
		[ColumnEnum("LoggedInGuid", typeof(System.Guid), System.Data.DbType.Guid, false, false, true)]
		LoggedInGuid = 19
	}//End enum

	#endregion UserColumn Enum

} // end namespace
