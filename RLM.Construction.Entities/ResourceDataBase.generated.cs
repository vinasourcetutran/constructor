	
/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : Monday, January 17, 2011
	Important: Do not modify this file. Edit the file ResourceData.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace RLM.Construction.Entities
{
	#region ResourceDataEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="ResourceData"/> object.
	/// </remarks>
	public class ResourceDataEventArgs : System.EventArgs
	{
		private ResourceDataColumn column;
		private object value;
		
		
		///<summary>
		/// Initalizes a new Instance of the ResourceDataEventArgs class.
		///</summary>
		public ResourceDataEventArgs(ResourceDataColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ResourceDataEventArgs class.
		///</summary>
		public ResourceDataEventArgs(ResourceDataColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		
		///<summary>
		/// The ResourceDataColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ResourceDataColumn" />
		public ResourceDataColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	
	///<summary>
	/// Define a delegate for all ResourceData related events.
	///</summary>
	public delegate void ResourceDataEventHandler(object sender, ResourceDataEventArgs e);
	
	///<summary>
	/// An object representation of the 'ResourceData' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	//[ToolboxItem(typeof(ResourceData))]
	public abstract partial class ResourceDataBase : EntityBase, IEntityId<ResourceDataKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		/// 	Old the inner data of the entity.
		/// </summary>
		private ResourceDataEntityData entityData;
		
		// <summary>
		// 	Old the original data of the entity.
		// </summary>
		//ResourceDataEntityData originalData;
		
		/// <summary>
		/// 	Old a backup of the inner data of the entity.
		/// </summary>
		private ResourceDataEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		[NonSerialized]
		private TList<ResourceData> parentCollection;
		private bool inTxn = false;

		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event ResourceDataEventHandler ColumnChanging;
		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ResourceDataEventHandler ColumnChanged;		
		#endregion "Variable Declarations"
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ResourceDataBase"/> instance.
		///</summary>
		public ResourceDataBase()
		{
			this.entityData = new ResourceDataEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ResourceDataBase"/> instance.
		///</summary>
		///<param name="resourceDataName"></param>
		///<param name="resourceDataTitle"></param>
		///<param name="resourceDataContent"></param>
		///<param name="resourceDataDescription"></param>
		///<param name="resourceDataOther"></param>
		///<param name="resourceDataResourceType"></param>
		///<param name="resourceDataResourceId"></param>
		///<param name="resourceDataContentType"></param>
		///<param name="resourceDataSubContentType"></param>
		///<param name="resourceDataXMLContent"></param>
		///<param name="resourceDataPriority"></param>
		///<param name="resourceDataIsActive"></param>
		///<param name="resourceDataCreationDate"></param>
		///<param name="resourceDataCreationUserId"></param>
		///<param name="resourceDataLastModificationDate"></param>
		///<param name="resourceDataLastModificationUserId"></param>
		public ResourceDataBase(System.String resourceDataName, System.String resourceDataTitle, System.String resourceDataContent, 
			System.String resourceDataDescription, System.String resourceDataOther, System.Int32 resourceDataResourceType, System.Int32 resourceDataResourceId, 
			System.Int32? resourceDataContentType, System.Int32? resourceDataSubContentType, System.String resourceDataXMLContent, 
			System.Int32? resourceDataPriority, System.Boolean? resourceDataIsActive, System.DateTime? resourceDataCreationDate, System.Int32? resourceDataCreationUserId, 
			System.DateTime? resourceDataLastModificationDate, System.Int32? resourceDataLastModificationUserId)
		{
			this.entityData = new ResourceDataEntityData();
			this.backupData = null;

			this.Name = resourceDataName;
			this.Title = resourceDataTitle;
			this.Content = resourceDataContent;
			this.Description = resourceDataDescription;
			this.Other = resourceDataOther;
			this.ResourceType = resourceDataResourceType;
			this.ResourceId = resourceDataResourceId;
			this.ContentType = resourceDataContentType;
			this.SubContentType = resourceDataSubContentType;
			this.XMLContent = resourceDataXMLContent;
			this.Priority = resourceDataPriority;
			this.IsActive = resourceDataIsActive;
			this.CreationDate = resourceDataCreationDate;
			this.CreationUserId = resourceDataCreationUserId;
			this.LastModificationDate = resourceDataLastModificationDate;
			this.LastModificationUserId = resourceDataLastModificationUserId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ResourceData"/> instance.
		///</summary>
		///<param name="resourceDataName"></param>
		///<param name="resourceDataTitle"></param>
		///<param name="resourceDataContent"></param>
		///<param name="resourceDataDescription"></param>
		///<param name="resourceDataOther"></param>
		///<param name="resourceDataResourceType"></param>
		///<param name="resourceDataResourceId"></param>
		///<param name="resourceDataContentType"></param>
		///<param name="resourceDataSubContentType"></param>
		///<param name="resourceDataXMLContent"></param>
		///<param name="resourceDataPriority"></param>
		///<param name="resourceDataIsActive"></param>
		///<param name="resourceDataCreationDate"></param>
		///<param name="resourceDataCreationUserId"></param>
		///<param name="resourceDataLastModificationDate"></param>
		///<param name="resourceDataLastModificationUserId"></param>
		public static ResourceData CreateResourceData(System.String resourceDataName, System.String resourceDataTitle, System.String resourceDataContent, 
			System.String resourceDataDescription, System.String resourceDataOther, System.Int32 resourceDataResourceType, System.Int32 resourceDataResourceId, 
			System.Int32? resourceDataContentType, System.Int32? resourceDataSubContentType, System.String resourceDataXMLContent, 
			System.Int32? resourceDataPriority, System.Boolean? resourceDataIsActive, System.DateTime? resourceDataCreationDate, System.Int32? resourceDataCreationUserId, 
			System.DateTime? resourceDataLastModificationDate, System.Int32? resourceDataLastModificationUserId)
		{
			ResourceData newResourceData = new ResourceData();
			newResourceData.Name = resourceDataName;
			newResourceData.Title = resourceDataTitle;
			newResourceData.Content = resourceDataContent;
			newResourceData.Description = resourceDataDescription;
			newResourceData.Other = resourceDataOther;
			newResourceData.ResourceType = resourceDataResourceType;
			newResourceData.ResourceId = resourceDataResourceId;
			newResourceData.ContentType = resourceDataContentType;
			newResourceData.SubContentType = resourceDataSubContentType;
			newResourceData.XMLContent = resourceDataXMLContent;
			newResourceData.Priority = resourceDataPriority;
			newResourceData.IsActive = resourceDataIsActive;
			newResourceData.CreationDate = resourceDataCreationDate;
			newResourceData.CreationUserId = resourceDataCreationUserId;
			newResourceData.LastModificationDate = resourceDataLastModificationDate;
			newResourceData.LastModificationUserId = resourceDataLastModificationUserId;
			return newResourceData;
		}
				
		#endregion Constructors
		
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ResourceDataColumn"/> which has raised the event.</param>
		public void OnColumnChanging(ResourceDataColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ResourceDataColumn"/> which has raised the event.</param>
		public void OnColumnChanged(ResourceDataColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ResourceDataColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(ResourceDataColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added)
				EntityManager.StopTracking(EntityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				ResourceDataEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ResourceDataEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ResourceDataColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(ResourceDataColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ResourceDataEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ResourceDataEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
				
		#region Properties	
				
		/// <summary>
		/// 	Gets or sets the ResourceDataId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 ResourceDataId
		{
			get
			{
				return this.entityData.ResourceDataId; 
			}
			
			set
			{
				if (this.entityData.ResourceDataId == value)
					return;
					
					
				OnColumnChanging(ResourceDataColumn.ResourceDataId, this.entityData.ResourceDataId);
				this.entityData.ResourceDataId = value;
				this.EntityId.ResourceDataId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ResourceDataColumn.ResourceDataId, this.entityData.ResourceDataId);
				OnPropertyChanged("ResourceDataId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Name property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Name
		{
			get
			{
				return this.entityData.Name; 
			}
			
			set
			{
				if (this.entityData.Name == value)
					return;
					
					
				OnColumnChanging(ResourceDataColumn.Name, this.entityData.Name);
				this.entityData.Name = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ResourceDataColumn.Name, this.entityData.Name);
				OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Title property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String Title
		{
			get
			{
				return this.entityData.Title; 
			}
			
			set
			{
				if (this.entityData.Title == value)
					return;
					
					
				OnColumnChanging(ResourceDataColumn.Title, this.entityData.Title);
				this.entityData.Title = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ResourceDataColumn.Title, this.entityData.Title);
				OnPropertyChanged("Title");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Content property. 
		///		
		/// </summary>
		/// <value>This type is ntext.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String Content
		{
			get
			{
				return this.entityData.Content; 
			}
			
			set
			{
				if (this.entityData.Content == value)
					return;
					
					
				OnColumnChanging(ResourceDataColumn.Content, this.entityData.Content);
				this.entityData.Content = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ResourceDataColumn.Content, this.entityData.Content);
				OnPropertyChanged("Content");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Description property. 
		///		
		/// </summary>
		/// <value>This type is ntext.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String Description
		{
			get
			{
				return this.entityData.Description; 
			}
			
			set
			{
				if (this.entityData.Description == value)
					return;
					
					
				OnColumnChanging(ResourceDataColumn.Description, this.entityData.Description);
				this.entityData.Description = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ResourceDataColumn.Description, this.entityData.Description);
				OnPropertyChanged("Description");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Other property. 
		///		
		/// </summary>
		/// <value>This type is ntext.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String Other
		{
			get
			{
				return this.entityData.Other; 
			}
			
			set
			{
				if (this.entityData.Other == value)
					return;
					
					
				OnColumnChanging(ResourceDataColumn.Other, this.entityData.Other);
				this.entityData.Other = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ResourceDataColumn.Other, this.entityData.Other);
				OnPropertyChanged("Other");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ResourceType property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 ResourceType
		{
			get
			{
				return this.entityData.ResourceType; 
			}
			
			set
			{
				if (this.entityData.ResourceType == value)
					return;
					
					
				OnColumnChanging(ResourceDataColumn.ResourceType, this.entityData.ResourceType);
				this.entityData.ResourceType = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ResourceDataColumn.ResourceType, this.entityData.ResourceType);
				OnPropertyChanged("ResourceType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ResourceId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 ResourceId
		{
			get
			{
				return this.entityData.ResourceId; 
			}
			
			set
			{
				if (this.entityData.ResourceId == value)
					return;
					
					
				OnColumnChanging(ResourceDataColumn.ResourceId, this.entityData.ResourceId);
				this.entityData.ResourceId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ResourceDataColumn.ResourceId, this.entityData.ResourceId);
				OnPropertyChanged("ResourceId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ContentType property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsContentTypeNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ContentType
		{
			get
			{
				return this.entityData.ContentType; 
			}
			
			set
			{
				if (this.entityData.ContentType == value)
					return;
					
					
				OnColumnChanging(ResourceDataColumn.ContentType, this.entityData.ContentType);
				this.entityData.ContentType = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ResourceDataColumn.ContentType, this.entityData.ContentType);
				OnPropertyChanged("ContentType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SubContentType property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsSubContentTypeNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SubContentType
		{
			get
			{
				return this.entityData.SubContentType; 
			}
			
			set
			{
				if (this.entityData.SubContentType == value)
					return;
					
					
				OnColumnChanging(ResourceDataColumn.SubContentType, this.entityData.SubContentType);
				this.entityData.SubContentType = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ResourceDataColumn.SubContentType, this.entityData.SubContentType);
				OnPropertyChanged("SubContentType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the XMLContent property. 
		///		
		/// </summary>
		/// <value>This type is ntext.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String XMLContent
		{
			get
			{
				return this.entityData.XMLContent; 
			}
			
			set
			{
				if (this.entityData.XMLContent == value)
					return;
					
					
				OnColumnChanging(ResourceDataColumn.XMLContent, this.entityData.XMLContent);
				this.entityData.XMLContent = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ResourceDataColumn.XMLContent, this.entityData.XMLContent);
				OnPropertyChanged("XMLContent");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Priority property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsPriorityNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Priority
		{
			get
			{
				return this.entityData.Priority; 
			}
			
			set
			{
				if (this.entityData.Priority == value)
					return;
					
					
				OnColumnChanging(ResourceDataColumn.Priority, this.entityData.Priority);
				this.entityData.Priority = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ResourceDataColumn.Priority, this.entityData.Priority);
				OnPropertyChanged("Priority");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsActive property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsActiveNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsActive
		{
			get
			{
				return this.entityData.IsActive; 
			}
			
			set
			{
				if (this.entityData.IsActive == value)
					return;
					
					
				OnColumnChanging(ResourceDataColumn.IsActive, this.entityData.IsActive);
				this.entityData.IsActive = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ResourceDataColumn.IsActive, this.entityData.IsActive);
				OnPropertyChanged("IsActive");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreationDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsCreationDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CreationDate
		{
			get
			{
				return this.entityData.CreationDate; 
			}
			
			set
			{
				if (this.entityData.CreationDate == value)
					return;
					
					
				OnColumnChanging(ResourceDataColumn.CreationDate, this.entityData.CreationDate);
				this.entityData.CreationDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ResourceDataColumn.CreationDate, this.entityData.CreationDate);
				OnPropertyChanged("CreationDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreationUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCreationUserIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CreationUserId
		{
			get
			{
				return this.entityData.CreationUserId; 
			}
			
			set
			{
				if (this.entityData.CreationUserId == value)
					return;
					
					
				OnColumnChanging(ResourceDataColumn.CreationUserId, this.entityData.CreationUserId);
				this.entityData.CreationUserId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ResourceDataColumn.CreationUserId, this.entityData.CreationUserId);
				OnPropertyChanged("CreationUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModificationDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastModificationDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastModificationDate
		{
			get
			{
				return this.entityData.LastModificationDate; 
			}
			
			set
			{
				if (this.entityData.LastModificationDate == value)
					return;
					
					
				OnColumnChanging(ResourceDataColumn.LastModificationDate, this.entityData.LastModificationDate);
				this.entityData.LastModificationDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ResourceDataColumn.LastModificationDate, this.entityData.LastModificationDate);
				OnPropertyChanged("LastModificationDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModificationUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsLastModificationUserIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? LastModificationUserId
		{
			get
			{
				return this.entityData.LastModificationUserId; 
			}
			
			set
			{
				if (this.entityData.LastModificationUserId == value)
					return;
					
					
				OnColumnChanging(ResourceDataColumn.LastModificationUserId, this.entityData.LastModificationUserId);
				this.entityData.LastModificationUserId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ResourceDataColumn.LastModificationUserId, this.entityData.LastModificationUserId);
				OnPropertyChanged("LastModificationUserId");
			}
		}
		

		#region Source Foreign Key Property
				
		#endregion
			
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ResourceData"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ResourceDataId", "Name", "Title", "Content", "Description", "Other", "ResourceType", "ResourceId", "ContentType", "SubContentType", "XMLContent", "Priority", "IsActive", "CreationDate", "CreationUserId", "LastModificationDate", "LastModificationUserId"};
			}
		}
		#endregion 
		
		
		#endregion
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ResourceDataEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (ResourceData) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return (object)this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<ResourceData>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as ResourceData);
	        }
	    }


		#endregion
		
		#region Methods	
			
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();
		}	
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ResourceData Entity 
		///</summary>
		public virtual ResourceData Copy()
		{
			//shallow copy entity
			ResourceData copy = new ResourceData();
			copy.ResourceDataId = this.ResourceDataId;
			copy.Name = this.Name;
			copy.Title = this.Title;
			copy.Content = this.Content;
			copy.Description = this.Description;
			copy.Other = this.Other;
			copy.ResourceType = this.ResourceType;
			copy.ResourceId = this.ResourceId;
			copy.ContentType = this.ContentType;
			copy.SubContentType = this.SubContentType;
			copy.XMLContent = this.XMLContent;
			copy.Priority = this.Priority;
			copy.IsActive = this.IsActive;
			copy.CreationDate = this.CreationDate;
			copy.CreationUserId = this.CreationUserId;
			copy.LastModificationDate = this.LastModificationDate;
			copy.LastModificationUserId = this.LastModificationUserId;
					
			copy.AcceptChanges();
			return (ResourceData)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed ResourceData Entity which is a deep copy of the current entity.
		///</summary>
		public virtual ResourceData DeepCopy()
		{
			return EntityHelper.Clone<ResourceData>(this as ResourceData);	
		}
		#endregion
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ResourceDataBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ResourceDataBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="ResourceDataBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="ResourceDataBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ResourceDataBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(ResourceDataBase Object1, ResourceDataBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.ResourceDataId != Object2.ResourceDataId)
				equal = false;
			if ( Object1.Name != null && Object2.Name != null )
			{
				if (Object1.Name != Object2.Name)
					equal = false;
			}
			else if (Object1.Name == null ^ Object2.Name == null )
			{
				equal = false;
			}
			if ( Object1.Title != null && Object2.Title != null )
			{
				if (Object1.Title != Object2.Title)
					equal = false;
			}
			else if (Object1.Title == null ^ Object2.Title == null )
			{
				equal = false;
			}
			if ( Object1.Content != null && Object2.Content != null )
			{
				if (Object1.Content != Object2.Content)
					equal = false;
			}
			else if (Object1.Content == null ^ Object2.Content == null )
			{
				equal = false;
			}
			if ( Object1.Description != null && Object2.Description != null )
			{
				if (Object1.Description != Object2.Description)
					equal = false;
			}
			else if (Object1.Description == null ^ Object2.Description == null )
			{
				equal = false;
			}
			if ( Object1.Other != null && Object2.Other != null )
			{
				if (Object1.Other != Object2.Other)
					equal = false;
			}
			else if (Object1.Other == null ^ Object2.Other == null )
			{
				equal = false;
			}
			if (Object1.ResourceType != Object2.ResourceType)
				equal = false;
			if (Object1.ResourceId != Object2.ResourceId)
				equal = false;
			if ( Object1.ContentType != null && Object2.ContentType != null )
			{
				if (Object1.ContentType != Object2.ContentType)
					equal = false;
			}
			else if (Object1.ContentType == null ^ Object2.ContentType == null )
			{
				equal = false;
			}
			if ( Object1.SubContentType != null && Object2.SubContentType != null )
			{
				if (Object1.SubContentType != Object2.SubContentType)
					equal = false;
			}
			else if (Object1.SubContentType == null ^ Object2.SubContentType == null )
			{
				equal = false;
			}
			if ( Object1.XMLContent != null && Object2.XMLContent != null )
			{
				if (Object1.XMLContent != Object2.XMLContent)
					equal = false;
			}
			else if (Object1.XMLContent == null ^ Object2.XMLContent == null )
			{
				equal = false;
			}
			if ( Object1.Priority != null && Object2.Priority != null )
			{
				if (Object1.Priority != Object2.Priority)
					equal = false;
			}
			else if (Object1.Priority == null ^ Object2.Priority == null )
			{
				equal = false;
			}
			if ( Object1.IsActive != null && Object2.IsActive != null )
			{
				if (Object1.IsActive != Object2.IsActive)
					equal = false;
			}
			else if (Object1.IsActive == null ^ Object2.IsActive == null )
			{
				equal = false;
			}
			if ( Object1.CreationDate != null && Object2.CreationDate != null )
			{
				if (Object1.CreationDate != Object2.CreationDate)
					equal = false;
			}
			else if (Object1.CreationDate == null ^ Object2.CreationDate == null )
			{
				equal = false;
			}
			if ( Object1.CreationUserId != null && Object2.CreationUserId != null )
			{
				if (Object1.CreationUserId != Object2.CreationUserId)
					equal = false;
			}
			else if (Object1.CreationUserId == null ^ Object2.CreationUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastModificationDate != null && Object2.LastModificationDate != null )
			{
				if (Object1.LastModificationDate != Object2.LastModificationDate)
					equal = false;
			}
			else if (Object1.LastModificationDate == null ^ Object2.LastModificationDate == null )
			{
				equal = false;
			}
			if ( Object1.LastModificationUserId != null && Object2.LastModificationUserId != null )
			{
				if (Object1.LastModificationUserId != Object2.LastModificationUserId)
					equal = false;
			}
			else if (Object1.LastModificationUserId == null ^ Object2.LastModificationUserId == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			// TODO -> generate a strongly typed IComparer in the concrete class
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name) .CompareTo(((ResourceDataBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name));
		}
		
		/*
		// static method to get a Comparer object
        public static ResourceDataComparer GetComparer()
        {
            return new ResourceDataComparer();
        }
        */

        // Comparer delegates back to ResourceData
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(ResourceData rhs, ResourceDataColumn which)
        {
            switch (which)
            {
            	
            	
            	case ResourceDataColumn.ResourceDataId:
            		return this.ResourceDataId.CompareTo(rhs.ResourceDataId);
            		
            		                 
            	
            	
            	case ResourceDataColumn.Name:
            		return this.Name.CompareTo(rhs.Name);
            		
            		                 
            	
            	
            	case ResourceDataColumn.Title:
            		return this.Title.CompareTo(rhs.Title);
            		
            		                 
            	
            	
            	case ResourceDataColumn.Content:
            		return this.Content.CompareTo(rhs.Content);
            		
            		                 
            	
            	
            	case ResourceDataColumn.Description:
            		return this.Description.CompareTo(rhs.Description);
            		
            		                 
            	
            	
            	case ResourceDataColumn.Other:
            		return this.Other.CompareTo(rhs.Other);
            		
            		                 
            	
            	
            	case ResourceDataColumn.ResourceType:
            		return this.ResourceType.CompareTo(rhs.ResourceType);
            		
            		                 
            	
            	
            	case ResourceDataColumn.ResourceId:
            		return this.ResourceId.CompareTo(rhs.ResourceId);
            		
            		                 
            	
            	
            	case ResourceDataColumn.ContentType:
            		return this.ContentType.Value.CompareTo(rhs.ContentType.Value);
            		
            		                 
            	
            	
            	case ResourceDataColumn.SubContentType:
            		return this.SubContentType.Value.CompareTo(rhs.SubContentType.Value);
            		
            		                 
            	
            	
            	case ResourceDataColumn.XMLContent:
            		return this.XMLContent.CompareTo(rhs.XMLContent);
            		
            		                 
            	
            	
            	case ResourceDataColumn.Priority:
            		return this.Priority.Value.CompareTo(rhs.Priority.Value);
            		
            		                 
            	
            	
            	case ResourceDataColumn.IsActive:
            		return this.IsActive.Value.CompareTo(rhs.IsActive.Value);
            		
            		                 
            	
            	
            	case ResourceDataColumn.CreationDate:
            		return this.CreationDate.Value.CompareTo(rhs.CreationDate.Value);
            		
            		                 
            	
            	
            	case ResourceDataColumn.CreationUserId:
            		return this.CreationUserId.Value.CompareTo(rhs.CreationUserId.Value);
            		
            		                 
            	
            	
            	case ResourceDataColumn.LastModificationDate:
            		return this.LastModificationDate.Value.CompareTo(rhs.LastModificationDate.Value);
            		
            		                 
            	
            	
            	case ResourceDataColumn.LastModificationUserId:
            		return this.LastModificationUserId.Value.CompareTo(rhs.LastModificationUserId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ResourceDataKey> Members
		
		// member variable for the EntityId property
		private ResourceDataKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public ResourceDataKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ResourceDataKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = @"ResourceData" 
					+ this.ResourceDataId.ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{18}{17}- ResourceDataId: {0}{17}- Name: {1}{17}- Title: {2}{17}- Content: {3}{17}- Description: {4}{17}- Other: {5}{17}- ResourceType: {6}{17}- ResourceId: {7}{17}- ContentType: {8}{17}- SubContentType: {9}{17}- XMLContent: {10}{17}- Priority: {11}{17}- IsActive: {12}{17}- CreationDate: {13}{17}- CreationUserId: {14}{17}- LastModificationDate: {15}{17}- LastModificationUserId: {16}{17}", 
				this.ResourceDataId,
				(this.Name == null) ? string.Empty : this.Name.ToString(),
				(this.Title == null) ? string.Empty : this.Title.ToString(),
				(this.Content == null) ? string.Empty : this.Content.ToString(),
				(this.Description == null) ? string.Empty : this.Description.ToString(),
				(this.Other == null) ? string.Empty : this.Other.ToString(),
				this.ResourceType,
				this.ResourceId,
				(this.ContentType == null) ? string.Empty : this.ContentType.ToString(),
				(this.SubContentType == null) ? string.Empty : this.SubContentType.ToString(),
				(this.XMLContent == null) ? string.Empty : this.XMLContent.ToString(),
				(this.Priority == null) ? string.Empty : this.Priority.ToString(),
				(this.IsActive == null) ? string.Empty : this.IsActive.ToString(),
				(this.CreationDate == null) ? string.Empty : this.CreationDate.ToString(),
				(this.CreationUserId == null) ? string.Empty : this.CreationUserId.ToString(),
				(this.LastModificationDate == null) ? string.Empty : this.LastModificationDate.ToString(),
				(this.LastModificationUserId == null) ? string.Empty : this.LastModificationUserId.ToString(),
				Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ResourceData' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal class ResourceDataEntityData : ICloneable
	{
		#region Variable Declarations
		
		#region Primary key(s)
			/// <summary>			
			/// ResourceDataId : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "ResourceData"</remarks>
			public System.Int32 ResourceDataId;
				
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// Name : 
		/// </summary>
		public System.String		  Name = string.Empty;
		
		/// <summary>
		/// Title : 
		/// </summary>
		public System.String		  Title = string.Empty;
		
		/// <summary>
		/// Content : 
		/// </summary>
		public System.String		  Content = string.Empty;
		
		/// <summary>
		/// Description : 
		/// </summary>
		public System.String		  Description = string.Empty;
		
		/// <summary>
		/// Other : 
		/// </summary>
		public System.String		  Other = string.Empty;
		
		/// <summary>
		/// ResourceType : 
		/// </summary>
		public System.Int32		  ResourceType = (int)0;
		
		/// <summary>
		/// ResourceId : 
		/// </summary>
		public System.Int32		  ResourceId = (int)0;
		
		/// <summary>
		/// ContentType : 
		/// </summary>
		public System.Int32?		  ContentType = (int)0;
		
		/// <summary>
		/// SubContentType : 
		/// </summary>
		public System.Int32?		  SubContentType = (int)0;
		
		/// <summary>
		/// XMLContent : 
		/// </summary>
		public System.String		  XMLContent = string.Empty;
		
		/// <summary>
		/// Priority : 
		/// </summary>
		public System.Int32?		  Priority = (int)0;
		
		/// <summary>
		/// IsActive : 
		/// </summary>
		public System.Boolean?		  IsActive = false;
		
		/// <summary>
		/// CreationDate : 
		/// </summary>
		public System.DateTime?		  CreationDate = DateTime.MinValue;
		
		/// <summary>
		/// CreationUserId : 
		/// </summary>
		public System.Int32?		  CreationUserId = (int)0;
		
		/// <summary>
		/// LastModificationDate : 
		/// </summary>
		public System.DateTime?		  LastModificationDate = DateTime.MinValue;
		
		/// <summary>
		/// LastModificationUserId : 
		/// </summary>
		public System.Int32?		  LastModificationUserId = (int)0;
		#endregion
			
		#endregion Variable Declarations
		
		#region Clone
		public Object Clone()
		{
			ResourceDataEntityData _tmp = new ResourceDataEntityData();
						
			_tmp.ResourceDataId = this.ResourceDataId;
			
			_tmp.Name = this.Name;
			_tmp.Title = this.Title;
			_tmp.Content = this.Content;
			_tmp.Description = this.Description;
			_tmp.Other = this.Other;
			_tmp.ResourceType = this.ResourceType;
			_tmp.ResourceId = this.ResourceId;
			_tmp.ContentType = this.ContentType;
			_tmp.SubContentType = this.SubContentType;
			_tmp.XMLContent = this.XMLContent;
			_tmp.Priority = this.Priority;
			_tmp.IsActive = this.IsActive;
			_tmp.CreationDate = this.CreationDate;
			_tmp.CreationUserId = this.CreationUserId;
			_tmp.LastModificationDate = this.LastModificationDate;
			_tmp.LastModificationUserId = this.LastModificationUserId;
			
			return _tmp;
		}
		#endregion 
		
		#region Data Properties

		#endregion Data Properties

	}//End struct


		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Name",50));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Title",200));
		}
   		#endregion
	
	} // End Class
	
	#region ResourceDataComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ResourceDataComparer : System.Collections.Generic.IComparer<ResourceData>
	{
		ResourceDataColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ResourceDataComparer"/> class.
        /// </summary>
		public ResourceDataComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ResourceDataComparer(ResourceDataColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="ResourceData"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="ResourceData"/> to compare.</param>
        /// <param name="b">The second <c>ResourceData</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(ResourceData a, ResourceData b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(ResourceData entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(ResourceData a, ResourceData b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ResourceDataColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ResourceDataKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="ResourceData"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ResourceDataKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ResourceDataKey class.
		/// </summary>
		public ResourceDataKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ResourceDataKey class.
		/// </summary>
		public ResourceDataKey(ResourceDataBase entity)
		{
			Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.resourceDataId = entity.ResourceDataId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ResourceDataKey class.
		/// </summary>
		public ResourceDataKey(System.Int32 resourceDataId)
		{
			#region Init Properties

			this.resourceDataId = resourceDataId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ResourceDataBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ResourceDataBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the ResourceDataId property
		private System.Int32 resourceDataId;
		
		/// <summary>
		/// Gets or sets the ResourceDataId property.
		/// </summary>
		public System.Int32 ResourceDataId
		{
			get { return resourceDataId; }
			set
			{
				if ( Entity != null )
				{
					Entity.ResourceDataId = value;
				}
				
				resourceDataId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				ResourceDataId = ( values["ResourceDataId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["ResourceDataId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("ResourceDataId", ResourceDataId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("ResourceDataId: {0}{1}",
								ResourceDataId,
								Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ResourceDataColumn Enum
	
	/// <summary>
	/// Enumerate the ResourceData columns.
	/// </summary>
	[Serializable]
	public enum ResourceDataColumn : int
	{
		/// <summary>
		/// ResourceDataId : 
		/// </summary>
		[EnumTextValue("ResourceDataId")]
		[ColumnEnum("ResourceDataId", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		ResourceDataId = 1,
		/// <summary>
		/// Name : 
		/// </summary>
		[EnumTextValue("Name")]
		[ColumnEnum("Name", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Name = 2,
		/// <summary>
		/// Title : 
		/// </summary>
		[EnumTextValue("Title")]
		[ColumnEnum("Title", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		Title = 3,
		/// <summary>
		/// Content : 
		/// </summary>
		[EnumTextValue("Content")]
		[ColumnEnum("Content", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Content = 4,
		/// <summary>
		/// Description : 
		/// </summary>
		[EnumTextValue("Description")]
		[ColumnEnum("Description", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Description = 5,
		/// <summary>
		/// Other : 
		/// </summary>
		[EnumTextValue("Other")]
		[ColumnEnum("Other", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Other = 6,
		/// <summary>
		/// ResourceType : 
		/// </summary>
		[EnumTextValue("ResourceType")]
		[ColumnEnum("ResourceType", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ResourceType = 7,
		/// <summary>
		/// ResourceId : 
		/// </summary>
		[EnumTextValue("ResourceId")]
		[ColumnEnum("ResourceId", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ResourceId = 8,
		/// <summary>
		/// ContentType : 
		/// </summary>
		[EnumTextValue("ContentType")]
		[ColumnEnum("ContentType", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ContentType = 9,
		/// <summary>
		/// SubContentType : 
		/// </summary>
		[EnumTextValue("SubContentType")]
		[ColumnEnum("SubContentType", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SubContentType = 10,
		/// <summary>
		/// XMLContent : 
		/// </summary>
		[EnumTextValue("XMLContent")]
		[ColumnEnum("XMLContent", typeof(System.String), System.Data.DbType.String, false, false, true)]
		XMLContent = 11,
		/// <summary>
		/// Priority : 
		/// </summary>
		[EnumTextValue("Priority")]
		[ColumnEnum("Priority", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Priority = 12,
		/// <summary>
		/// IsActive : 
		/// </summary>
		[EnumTextValue("IsActive")]
		[ColumnEnum("IsActive", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsActive = 13,
		/// <summary>
		/// CreationDate : 
		/// </summary>
		[EnumTextValue("CreationDate")]
		[ColumnEnum("CreationDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CreationDate = 14,
		/// <summary>
		/// CreationUserId : 
		/// </summary>
		[EnumTextValue("CreationUserId")]
		[ColumnEnum("CreationUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CreationUserId = 15,
		/// <summary>
		/// LastModificationDate : 
		/// </summary>
		[EnumTextValue("LastModificationDate")]
		[ColumnEnum("LastModificationDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastModificationDate = 16,
		/// <summary>
		/// LastModificationUserId : 
		/// </summary>
		[EnumTextValue("LastModificationUserId")]
		[ColumnEnum("LastModificationUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		LastModificationUserId = 17
	}//End enum

	#endregion ResourceDataColumn Enum

} // end namespace
