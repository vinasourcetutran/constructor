	
/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : Saturday, December 11, 2010
	Important: Do not modify this file. Edit the file Item.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace RLM.Construction.Entities
{
	#region ItemEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Item"/> object.
	/// </remarks>
	public class ItemEventArgs : System.EventArgs
	{
		private ItemColumn column;
		private object value;
		
		
		///<summary>
		/// Initalizes a new Instance of the ItemEventArgs class.
		///</summary>
		public ItemEventArgs(ItemColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ItemEventArgs class.
		///</summary>
		public ItemEventArgs(ItemColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		
		///<summary>
		/// The ItemColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ItemColumn" />
		public ItemColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	
	///<summary>
	/// Define a delegate for all Item related events.
	///</summary>
	public delegate void ItemEventHandler(object sender, ItemEventArgs e);
	
	///<summary>
	/// An object representation of the 'Item' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	//[ToolboxItem(typeof(Item))]
	public abstract partial class ItemBase : EntityBase, IEntityId<ItemKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		/// 	Old the inner data of the entity.
		/// </summary>
		private ItemEntityData entityData;
		
		// <summary>
		// 	Old the original data of the entity.
		// </summary>
		//ItemEntityData originalData;
		
		/// <summary>
		/// 	Old a backup of the inner data of the entity.
		/// </summary>
		private ItemEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		[NonSerialized]
		private TList<Item> parentCollection;
		private bool inTxn = false;

		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event ItemEventHandler ColumnChanging;
		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ItemEventHandler ColumnChanged;		
		#endregion "Variable Declarations"
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ItemBase"/> instance.
		///</summary>
		public ItemBase()
		{
			this.entityData = new ItemEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ItemBase"/> instance.
		///</summary>
		///<param name="itemGroupId">Item group</param>
		///<param name="itemParentItemId"></param>
		///<param name="itemCode"></param>
		///<param name="itemName"></param>
		///<param name="itemDescription"></param>
		///<param name="itemBaseUnitId">Base unit of product, It can not be change base in any time</param>
		///<param name="itemUsedUnitId">Current unit id, It can be change base on repository</param>
		///<param name="itemDensity">the value of UsedUnitId/BaseUnitId. it is constant</param>
		///<param name="itemTotalQuantity">Total of item in all repositories</param>
		///<param name="itemAvailabelQuantity">Total availabel of all item in all repositories</param>
		///<param name="itemReserveQuantity">Total amount that waiting for approve to do some action (repository movement). ReserveQuantity + AvailabelQuantity + ReturnQuantity=TotalQuantity</param>
		///<param name="itemReturnQuantity">Total quantity that have been returned to provider</param>
		///<param name="itemAdjustQuantity"></param>
		///<param name="itemStatus">Status of item</param>
		///<param name="itemIsActive">Is false, item can be assigned to any project</param>
		///<param name="itemIsDeletable">true if item can be delete</param>
		///<param name="itemPriority"></param>
		///<param name="itemLastComputeDate"></param>
		///<param name="itemCreationDate"></param>
		///<param name="itemCreationUserId"></param>
		///<param name="itemLastModificationDate"></param>
		///<param name="itemLastModificationUserId"></param>
		public ItemBase(System.Int32? itemGroupId, System.Int32? itemParentItemId, System.String itemCode, 
			System.String itemName, System.String itemDescription, System.Int32? itemBaseUnitId, System.Int32? itemUsedUnitId, System.Double? itemDensity, 
			System.Int64? itemTotalQuantity, System.Int64? itemAvailabelQuantity, System.Int64? itemReserveQuantity, System.Int64? itemReturnQuantity, 
			System.Int64? itemAdjustQuantity, System.Int32? itemStatus, System.Boolean? itemIsActive, System.Boolean? itemIsDeletable, 
			System.Int32? itemPriority, System.DateTime? itemLastComputeDate, System.DateTime? itemCreationDate, System.Int32? itemCreationUserId, 
			System.DateTime? itemLastModificationDate, System.Int32? itemLastModificationUserId)
		{
			this.entityData = new ItemEntityData();
			this.backupData = null;

			this.GroupId = itemGroupId;
			this.ParentItemId = itemParentItemId;
			this.Code = itemCode;
			this.Name = itemName;
			this.Description = itemDescription;
			this.BaseUnitId = itemBaseUnitId;
			this.UsedUnitId = itemUsedUnitId;
			this.Density = itemDensity;
			this.TotalQuantity = itemTotalQuantity;
			this.AvailabelQuantity = itemAvailabelQuantity;
			this.ReserveQuantity = itemReserveQuantity;
			this.ReturnQuantity = itemReturnQuantity;
			this.AdjustQuantity = itemAdjustQuantity;
			this.Status = itemStatus;
			this.IsActive = itemIsActive;
			this.IsDeletable = itemIsDeletable;
			this.Priority = itemPriority;
			this.LastComputeDate = itemLastComputeDate;
			this.CreationDate = itemCreationDate;
			this.CreationUserId = itemCreationUserId;
			this.LastModificationDate = itemLastModificationDate;
			this.LastModificationUserId = itemLastModificationUserId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Item"/> instance.
		///</summary>
		///<param name="itemGroupId">Item group</param>
		///<param name="itemParentItemId"></param>
		///<param name="itemCode"></param>
		///<param name="itemName"></param>
		///<param name="itemDescription"></param>
		///<param name="itemBaseUnitId">Base unit of product, It can not be change base in any time</param>
		///<param name="itemUsedUnitId">Current unit id, It can be change base on repository</param>
		///<param name="itemDensity">the value of UsedUnitId/BaseUnitId. it is constant</param>
		///<param name="itemTotalQuantity">Total of item in all repositories</param>
		///<param name="itemAvailabelQuantity">Total availabel of all item in all repositories</param>
		///<param name="itemReserveQuantity">Total amount that waiting for approve to do some action (repository movement). ReserveQuantity + AvailabelQuantity + ReturnQuantity=TotalQuantity</param>
		///<param name="itemReturnQuantity">Total quantity that have been returned to provider</param>
		///<param name="itemAdjustQuantity"></param>
		///<param name="itemStatus">Status of item</param>
		///<param name="itemIsActive">Is false, item can be assigned to any project</param>
		///<param name="itemIsDeletable">true if item can be delete</param>
		///<param name="itemPriority"></param>
		///<param name="itemLastComputeDate"></param>
		///<param name="itemCreationDate"></param>
		///<param name="itemCreationUserId"></param>
		///<param name="itemLastModificationDate"></param>
		///<param name="itemLastModificationUserId"></param>
		public static Item CreateItem(System.Int32? itemGroupId, System.Int32? itemParentItemId, System.String itemCode, 
			System.String itemName, System.String itemDescription, System.Int32? itemBaseUnitId, System.Int32? itemUsedUnitId, System.Double? itemDensity, 
			System.Int64? itemTotalQuantity, System.Int64? itemAvailabelQuantity, System.Int64? itemReserveQuantity, System.Int64? itemReturnQuantity, 
			System.Int64? itemAdjustQuantity, System.Int32? itemStatus, System.Boolean? itemIsActive, System.Boolean? itemIsDeletable, 
			System.Int32? itemPriority, System.DateTime? itemLastComputeDate, System.DateTime? itemCreationDate, System.Int32? itemCreationUserId, 
			System.DateTime? itemLastModificationDate, System.Int32? itemLastModificationUserId)
		{
			Item newItem = new Item();
			newItem.GroupId = itemGroupId;
			newItem.ParentItemId = itemParentItemId;
			newItem.Code = itemCode;
			newItem.Name = itemName;
			newItem.Description = itemDescription;
			newItem.BaseUnitId = itemBaseUnitId;
			newItem.UsedUnitId = itemUsedUnitId;
			newItem.Density = itemDensity;
			newItem.TotalQuantity = itemTotalQuantity;
			newItem.AvailabelQuantity = itemAvailabelQuantity;
			newItem.ReserveQuantity = itemReserveQuantity;
			newItem.ReturnQuantity = itemReturnQuantity;
			newItem.AdjustQuantity = itemAdjustQuantity;
			newItem.Status = itemStatus;
			newItem.IsActive = itemIsActive;
			newItem.IsDeletable = itemIsDeletable;
			newItem.Priority = itemPriority;
			newItem.LastComputeDate = itemLastComputeDate;
			newItem.CreationDate = itemCreationDate;
			newItem.CreationUserId = itemCreationUserId;
			newItem.LastModificationDate = itemLastModificationDate;
			newItem.LastModificationUserId = itemLastModificationUserId;
			return newItem;
		}
				
		#endregion Constructors
		
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ItemColumn"/> which has raised the event.</param>
		public void OnColumnChanging(ItemColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ItemColumn"/> which has raised the event.</param>
		public void OnColumnChanged(ItemColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ItemColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(ItemColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added)
				EntityManager.StopTracking(EntityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				ItemEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ItemEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ItemColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(ItemColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ItemEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ItemEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
				
		#region Properties	
				
		/// <summary>
		/// 	Gets or sets the ItemId property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(true, true, false)]
		public virtual System.Int64 ItemId
		{
			get
			{
				return this.entityData.ItemId; 
			}
			
			set
			{
				if (this.entityData.ItemId == value)
					return;
					
					
				OnColumnChanging(ItemColumn.ItemId, this.entityData.ItemId);
				this.entityData.ItemId = value;
				this.EntityId.ItemId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemColumn.ItemId, this.entityData.ItemId);
				OnPropertyChanged("ItemId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GroupId property. 
		///		Item group
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsGroupIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("Item group"), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? GroupId
		{
			get
			{
				return this.entityData.GroupId; 
			}
			
			set
			{
				if (this.entityData.GroupId == value)
					return;
					
					
				OnColumnChanging(ItemColumn.GroupId, this.entityData.GroupId);
				this.entityData.GroupId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemColumn.GroupId, this.entityData.GroupId);
				OnPropertyChanged("GroupId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ParentItemId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsParentItemIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ParentItemId
		{
			get
			{
				return this.entityData.ParentItemId; 
			}
			
			set
			{
				if (this.entityData.ParentItemId == value)
					return;
					
					
				OnColumnChanging(ItemColumn.ParentItemId, this.entityData.ParentItemId);
				this.entityData.ParentItemId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemColumn.ParentItemId, this.entityData.ParentItemId);
				OnPropertyChanged("ParentItemId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Code property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String Code
		{
			get
			{
				return this.entityData.Code; 
			}
			
			set
			{
				if (this.entityData.Code == value)
					return;
					
					
				OnColumnChanging(ItemColumn.Code, this.entityData.Code);
				this.entityData.Code = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemColumn.Code, this.entityData.Code);
				OnPropertyChanged("Code");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Name property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false, 500)]
		public virtual System.String Name
		{
			get
			{
				return this.entityData.Name; 
			}
			
			set
			{
				if (this.entityData.Name == value)
					return;
					
					
				OnColumnChanging(ItemColumn.Name, this.entityData.Name);
				this.entityData.Name = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemColumn.Name, this.entityData.Name);
				OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Description property. 
		///		
		/// </summary>
		/// <value>This type is ntext.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String Description
		{
			get
			{
				return this.entityData.Description; 
			}
			
			set
			{
				if (this.entityData.Description == value)
					return;
					
					
				OnColumnChanging(ItemColumn.Description, this.entityData.Description);
				this.entityData.Description = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemColumn.Description, this.entityData.Description);
				OnPropertyChanged("Description");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BaseUnitId property. 
		///		Base unit of product, It can not be change base in any time
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsBaseUnitIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("Base unit of product, It can not be change base in any time"), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? BaseUnitId
		{
			get
			{
				return this.entityData.BaseUnitId; 
			}
			
			set
			{
				if (this.entityData.BaseUnitId == value)
					return;
					
					
				OnColumnChanging(ItemColumn.BaseUnitId, this.entityData.BaseUnitId);
				this.entityData.BaseUnitId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemColumn.BaseUnitId, this.entityData.BaseUnitId);
				OnPropertyChanged("BaseUnitId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UsedUnitId property. 
		///		Current unit id, It can be change base on repository
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsUsedUnitIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("Current unit id, It can be change base on repository"), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? UsedUnitId
		{
			get
			{
				return this.entityData.UsedUnitId; 
			}
			
			set
			{
				if (this.entityData.UsedUnitId == value)
					return;
					
					
				OnColumnChanging(ItemColumn.UsedUnitId, this.entityData.UsedUnitId);
				this.entityData.UsedUnitId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemColumn.UsedUnitId, this.entityData.UsedUnitId);
				OnPropertyChanged("UsedUnitId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Density property. 
		///		the value of UsedUnitId/BaseUnitId. it is constant
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsDensityNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("the value of UsedUnitId/BaseUnitId. it is constant"), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Double? Density
		{
			get
			{
				return this.entityData.Density; 
			}
			
			set
			{
				if (this.entityData.Density == value)
					return;
					
					
				OnColumnChanging(ItemColumn.Density, this.entityData.Density);
				this.entityData.Density = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemColumn.Density, this.entityData.Density);
				OnPropertyChanged("Density");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalQuantity property. 
		///		Total of item in all repositories
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsTotalQuantityNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("Total of item in all repositories"), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? TotalQuantity
		{
			get
			{
				return this.entityData.TotalQuantity; 
			}
			
			set
			{
				if (this.entityData.TotalQuantity == value)
					return;
					
					
				OnColumnChanging(ItemColumn.TotalQuantity, this.entityData.TotalQuantity);
				this.entityData.TotalQuantity = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemColumn.TotalQuantity, this.entityData.TotalQuantity);
				OnPropertyChanged("TotalQuantity");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AvailabelQuantity property. 
		///		Total availabel of all item in all repositories
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsAvailabelQuantityNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("Total availabel of all item in all repositories"), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? AvailabelQuantity
		{
			get
			{
				return this.entityData.AvailabelQuantity; 
			}
			
			set
			{
				if (this.entityData.AvailabelQuantity == value)
					return;
					
					
				OnColumnChanging(ItemColumn.AvailabelQuantity, this.entityData.AvailabelQuantity);
				this.entityData.AvailabelQuantity = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemColumn.AvailabelQuantity, this.entityData.AvailabelQuantity);
				OnPropertyChanged("AvailabelQuantity");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReserveQuantity property. 
		///		Total amount that waiting for approve to do some action (repository movement). ReserveQuantity + AvailabelQuantity + ReturnQuantity=TotalQuantity
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsReserveQuantityNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("Total amount that waiting for approve to do some action (repository movement). ReserveQuantity + AvailabelQuantity + ReturnQuantity=TotalQuantity"), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? ReserveQuantity
		{
			get
			{
				return this.entityData.ReserveQuantity; 
			}
			
			set
			{
				if (this.entityData.ReserveQuantity == value)
					return;
					
					
				OnColumnChanging(ItemColumn.ReserveQuantity, this.entityData.ReserveQuantity);
				this.entityData.ReserveQuantity = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemColumn.ReserveQuantity, this.entityData.ReserveQuantity);
				OnPropertyChanged("ReserveQuantity");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReturnQuantity property. 
		///		Total quantity that have been returned to provider
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsReturnQuantityNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("Total quantity that have been returned to provider"), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? ReturnQuantity
		{
			get
			{
				return this.entityData.ReturnQuantity; 
			}
			
			set
			{
				if (this.entityData.ReturnQuantity == value)
					return;
					
					
				OnColumnChanging(ItemColumn.ReturnQuantity, this.entityData.ReturnQuantity);
				this.entityData.ReturnQuantity = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemColumn.ReturnQuantity, this.entityData.ReturnQuantity);
				OnPropertyChanged("ReturnQuantity");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdjustQuantity property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsAdjustQuantityNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? AdjustQuantity
		{
			get
			{
				return this.entityData.AdjustQuantity; 
			}
			
			set
			{
				if (this.entityData.AdjustQuantity == value)
					return;
					
					
				OnColumnChanging(ItemColumn.AdjustQuantity, this.entityData.AdjustQuantity);
				this.entityData.AdjustQuantity = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemColumn.AdjustQuantity, this.entityData.AdjustQuantity);
				OnPropertyChanged("AdjustQuantity");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Status property. 
		///		Status of item
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsStatusNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("Status of item"), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Status
		{
			get
			{
				return this.entityData.Status; 
			}
			
			set
			{
				if (this.entityData.Status == value)
					return;
					
					
				OnColumnChanging(ItemColumn.Status, this.entityData.Status);
				this.entityData.Status = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemColumn.Status, this.entityData.Status);
				OnPropertyChanged("Status");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsActive property. 
		///		Is false, item can be assigned to any project
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsActiveNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("Is false, item can be assigned to any project"), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsActive
		{
			get
			{
				return this.entityData.IsActive; 
			}
			
			set
			{
				if (this.entityData.IsActive == value)
					return;
					
					
				OnColumnChanging(ItemColumn.IsActive, this.entityData.IsActive);
				this.entityData.IsActive = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemColumn.IsActive, this.entityData.IsActive);
				OnPropertyChanged("IsActive");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsDeletable property. 
		///		true if item can be delete
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsDeletableNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("true if item can be delete"), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsDeletable
		{
			get
			{
				return this.entityData.IsDeletable; 
			}
			
			set
			{
				if (this.entityData.IsDeletable == value)
					return;
					
					
				OnColumnChanging(ItemColumn.IsDeletable, this.entityData.IsDeletable);
				this.entityData.IsDeletable = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemColumn.IsDeletable, this.entityData.IsDeletable);
				OnPropertyChanged("IsDeletable");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Priority property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsPriorityNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Priority
		{
			get
			{
				return this.entityData.Priority; 
			}
			
			set
			{
				if (this.entityData.Priority == value)
					return;
					
					
				OnColumnChanging(ItemColumn.Priority, this.entityData.Priority);
				this.entityData.Priority = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemColumn.Priority, this.entityData.Priority);
				OnPropertyChanged("Priority");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastComputeDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastComputeDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastComputeDate
		{
			get
			{
				return this.entityData.LastComputeDate; 
			}
			
			set
			{
				if (this.entityData.LastComputeDate == value)
					return;
					
					
				OnColumnChanging(ItemColumn.LastComputeDate, this.entityData.LastComputeDate);
				this.entityData.LastComputeDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemColumn.LastComputeDate, this.entityData.LastComputeDate);
				OnPropertyChanged("LastComputeDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreationDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsCreationDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CreationDate
		{
			get
			{
				return this.entityData.CreationDate; 
			}
			
			set
			{
				if (this.entityData.CreationDate == value)
					return;
					
					
				OnColumnChanging(ItemColumn.CreationDate, this.entityData.CreationDate);
				this.entityData.CreationDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemColumn.CreationDate, this.entityData.CreationDate);
				OnPropertyChanged("CreationDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreationUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCreationUserIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CreationUserId
		{
			get
			{
				return this.entityData.CreationUserId; 
			}
			
			set
			{
				if (this.entityData.CreationUserId == value)
					return;
					
					
				OnColumnChanging(ItemColumn.CreationUserId, this.entityData.CreationUserId);
				this.entityData.CreationUserId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemColumn.CreationUserId, this.entityData.CreationUserId);
				OnPropertyChanged("CreationUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModificationDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastModificationDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastModificationDate
		{
			get
			{
				return this.entityData.LastModificationDate; 
			}
			
			set
			{
				if (this.entityData.LastModificationDate == value)
					return;
					
					
				OnColumnChanging(ItemColumn.LastModificationDate, this.entityData.LastModificationDate);
				this.entityData.LastModificationDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemColumn.LastModificationDate, this.entityData.LastModificationDate);
				OnPropertyChanged("LastModificationDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModificationUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsLastModificationUserIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? LastModificationUserId
		{
			get
			{
				return this.entityData.LastModificationUserId; 
			}
			
			set
			{
				if (this.entityData.LastModificationUserId == value)
					return;
					
					
				OnColumnChanging(ItemColumn.LastModificationUserId, this.entityData.LastModificationUserId);
				this.entityData.LastModificationUserId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemColumn.LastModificationUserId, this.entityData.LastModificationUserId);
				OnPropertyChanged("LastModificationUserId");
			}
		}
		

		#region Source Foreign Key Property
				
		private Unit _baseUnitIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Unit"/>.
		/// </summary>
		/// <value>The source Unit for BaseUnitId.</value>
        [XmlIgnore()]
		[Browsable(false), BindableAttribute()]
		public virtual Unit BaseUnitIdSource
      	{
            get { return this._baseUnitIdSource; }
            set { this._baseUnitIdSource = value; }
      	}
		private Unit _usedUnitIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Unit"/>.
		/// </summary>
		/// <value>The source Unit for UsedUnitId.</value>
        [XmlIgnore()]
		[Browsable(false), BindableAttribute()]
		public virtual Unit UsedUnitIdSource
      	{
            get { return this._usedUnitIdSource; }
            set { this._usedUnitIdSource = value; }
      	}
		private Group _groupIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Group"/>.
		/// </summary>
		/// <value>The source Group for GroupId.</value>
        [XmlIgnore()]
		[Browsable(false), BindableAttribute()]
		public virtual Group GroupIdSource
      	{
            get { return this._groupIdSource; }
            set { this._groupIdSource = value; }
      	}
		#endregion
			
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Item"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ItemId", "GroupId", "ParentItemId", "Code", "Name", "Description", "BaseUnitId", "UsedUnitId", "Density", "TotalQuantity", "AvailabelQuantity", "ReserveQuantity", "ReturnQuantity", "AdjustQuantity", "Status", "IsActive", "IsDeletable", "Priority", "LastComputeDate", "CreationDate", "CreationUserId", "LastModificationDate", "LastModificationUserId"};
			}
		}
		#endregion 
		
	
		/// <summary>
		///	Holds a collection of ItemInItem objects
		///	which are related to this object through the relation FK_ItemInItem_Item
		/// </summary>	
		[BindableAttribute()]
		public TList<ItemInItem> ItemInItemCollectionByFromItemId
		{
			get { return entityData.ItemInItemCollectionByFromItemId; }
			set { entityData.ItemInItemCollectionByFromItemId = value; }	
		}

		/// <summary>
		///	Holds a collection of RepositoryFromItemInRepository objects
		///	which are related to this object through the junction table ItemInRepository
		/// </summary>	
		[BindableAttribute()]
		public TList<Repository> RepositoryCollection_From_ItemInRepository
		{
			get { return entityData.RepositoryCollection_From_ItemInRepository; }
			set { entityData.RepositoryCollection_From_ItemInRepository = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ItemMovement objects
		///	which are related to this object through the relation FK_ItemMovements_Items
		/// </summary>	
		[BindableAttribute()]
		public TList<ItemMovement> ItemMovementCollection
		{
			get { return entityData.ItemMovementCollection; }
			set { entityData.ItemMovementCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ItemInItem objects
		///	which are related to this object through the relation FK_ItemInItem_Item1
		/// </summary>	
		[BindableAttribute()]
		public TList<ItemInItem> ItemInItemCollectionByToItemId
		{
			get { return entityData.ItemInItemCollectionByToItemId; }
			set { entityData.ItemInItemCollectionByToItemId = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ItemInProject objects
		///	which are related to this object through the relation FK_ItemInProjects_Items
		/// </summary>	
		[BindableAttribute()]
		public TList<ItemInProject> ItemInProjectCollection
		{
			get { return entityData.ItemInProjectCollection; }
			set { entityData.ItemInProjectCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ItemInRepository objects
		///	which are related to this object through the relation FK_ItemInRepositories_Items
		/// </summary>	
		[BindableAttribute()]
		public TList<ItemInRepository> ItemInRepositoryCollection
		{
			get { return entityData.ItemInRepositoryCollection; }
			set { entityData.ItemInRepositoryCollection = value; }	
		}
		
		#endregion
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ItemEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Item) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return (object)this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Item>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Item);
	        }
	    }


		#endregion
		
		#region Methods	
			
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();
		}	
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Item Entity 
		///</summary>
		public virtual Item Copy()
		{
			//shallow copy entity
			Item copy = new Item();
			copy.ItemId = this.ItemId;
			copy.GroupId = this.GroupId;
			copy.ParentItemId = this.ParentItemId;
			copy.Code = this.Code;
			copy.Name = this.Name;
			copy.Description = this.Description;
			copy.BaseUnitId = this.BaseUnitId;
			copy.UsedUnitId = this.UsedUnitId;
			copy.Density = this.Density;
			copy.TotalQuantity = this.TotalQuantity;
			copy.AvailabelQuantity = this.AvailabelQuantity;
			copy.ReserveQuantity = this.ReserveQuantity;
			copy.ReturnQuantity = this.ReturnQuantity;
			copy.AdjustQuantity = this.AdjustQuantity;
			copy.Status = this.Status;
			copy.IsActive = this.IsActive;
			copy.IsDeletable = this.IsDeletable;
			copy.Priority = this.Priority;
			copy.LastComputeDate = this.LastComputeDate;
			copy.CreationDate = this.CreationDate;
			copy.CreationUserId = this.CreationUserId;
			copy.LastModificationDate = this.LastModificationDate;
			copy.LastModificationUserId = this.LastModificationUserId;
					
			copy.AcceptChanges();
			return (Item)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed Item Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Item DeepCopy()
		{
			return EntityHelper.Clone<Item>(this as Item);	
		}
		#endregion
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ItemBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ItemBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="ItemBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="ItemBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ItemBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(ItemBase Object1, ItemBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.ItemId != Object2.ItemId)
				equal = false;
			if ( Object1.GroupId != null && Object2.GroupId != null )
			{
				if (Object1.GroupId != Object2.GroupId)
					equal = false;
			}
			else if (Object1.GroupId == null ^ Object2.GroupId == null )
			{
				equal = false;
			}
			if ( Object1.ParentItemId != null && Object2.ParentItemId != null )
			{
				if (Object1.ParentItemId != Object2.ParentItemId)
					equal = false;
			}
			else if (Object1.ParentItemId == null ^ Object2.ParentItemId == null )
			{
				equal = false;
			}
			if ( Object1.Code != null && Object2.Code != null )
			{
				if (Object1.Code != Object2.Code)
					equal = false;
			}
			else if (Object1.Code == null ^ Object2.Code == null )
			{
				equal = false;
			}
			if (Object1.Name != Object2.Name)
				equal = false;
			if ( Object1.Description != null && Object2.Description != null )
			{
				if (Object1.Description != Object2.Description)
					equal = false;
			}
			else if (Object1.Description == null ^ Object2.Description == null )
			{
				equal = false;
			}
			if ( Object1.BaseUnitId != null && Object2.BaseUnitId != null )
			{
				if (Object1.BaseUnitId != Object2.BaseUnitId)
					equal = false;
			}
			else if (Object1.BaseUnitId == null ^ Object2.BaseUnitId == null )
			{
				equal = false;
			}
			if ( Object1.UsedUnitId != null && Object2.UsedUnitId != null )
			{
				if (Object1.UsedUnitId != Object2.UsedUnitId)
					equal = false;
			}
			else if (Object1.UsedUnitId == null ^ Object2.UsedUnitId == null )
			{
				equal = false;
			}
			if ( Object1.Density != null && Object2.Density != null )
			{
				if (Object1.Density != Object2.Density)
					equal = false;
			}
			else if (Object1.Density == null ^ Object2.Density == null )
			{
				equal = false;
			}
			if ( Object1.TotalQuantity != null && Object2.TotalQuantity != null )
			{
				if (Object1.TotalQuantity != Object2.TotalQuantity)
					equal = false;
			}
			else if (Object1.TotalQuantity == null ^ Object2.TotalQuantity == null )
			{
				equal = false;
			}
			if ( Object1.AvailabelQuantity != null && Object2.AvailabelQuantity != null )
			{
				if (Object1.AvailabelQuantity != Object2.AvailabelQuantity)
					equal = false;
			}
			else if (Object1.AvailabelQuantity == null ^ Object2.AvailabelQuantity == null )
			{
				equal = false;
			}
			if ( Object1.ReserveQuantity != null && Object2.ReserveQuantity != null )
			{
				if (Object1.ReserveQuantity != Object2.ReserveQuantity)
					equal = false;
			}
			else if (Object1.ReserveQuantity == null ^ Object2.ReserveQuantity == null )
			{
				equal = false;
			}
			if ( Object1.ReturnQuantity != null && Object2.ReturnQuantity != null )
			{
				if (Object1.ReturnQuantity != Object2.ReturnQuantity)
					equal = false;
			}
			else if (Object1.ReturnQuantity == null ^ Object2.ReturnQuantity == null )
			{
				equal = false;
			}
			if ( Object1.AdjustQuantity != null && Object2.AdjustQuantity != null )
			{
				if (Object1.AdjustQuantity != Object2.AdjustQuantity)
					equal = false;
			}
			else if (Object1.AdjustQuantity == null ^ Object2.AdjustQuantity == null )
			{
				equal = false;
			}
			if ( Object1.Status != null && Object2.Status != null )
			{
				if (Object1.Status != Object2.Status)
					equal = false;
			}
			else if (Object1.Status == null ^ Object2.Status == null )
			{
				equal = false;
			}
			if ( Object1.IsActive != null && Object2.IsActive != null )
			{
				if (Object1.IsActive != Object2.IsActive)
					equal = false;
			}
			else if (Object1.IsActive == null ^ Object2.IsActive == null )
			{
				equal = false;
			}
			if ( Object1.IsDeletable != null && Object2.IsDeletable != null )
			{
				if (Object1.IsDeletable != Object2.IsDeletable)
					equal = false;
			}
			else if (Object1.IsDeletable == null ^ Object2.IsDeletable == null )
			{
				equal = false;
			}
			if ( Object1.Priority != null && Object2.Priority != null )
			{
				if (Object1.Priority != Object2.Priority)
					equal = false;
			}
			else if (Object1.Priority == null ^ Object2.Priority == null )
			{
				equal = false;
			}
			if ( Object1.LastComputeDate != null && Object2.LastComputeDate != null )
			{
				if (Object1.LastComputeDate != Object2.LastComputeDate)
					equal = false;
			}
			else if (Object1.LastComputeDate == null ^ Object2.LastComputeDate == null )
			{
				equal = false;
			}
			if ( Object1.CreationDate != null && Object2.CreationDate != null )
			{
				if (Object1.CreationDate != Object2.CreationDate)
					equal = false;
			}
			else if (Object1.CreationDate == null ^ Object2.CreationDate == null )
			{
				equal = false;
			}
			if ( Object1.CreationUserId != null && Object2.CreationUserId != null )
			{
				if (Object1.CreationUserId != Object2.CreationUserId)
					equal = false;
			}
			else if (Object1.CreationUserId == null ^ Object2.CreationUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastModificationDate != null && Object2.LastModificationDate != null )
			{
				if (Object1.LastModificationDate != Object2.LastModificationDate)
					equal = false;
			}
			else if (Object1.LastModificationDate == null ^ Object2.LastModificationDate == null )
			{
				equal = false;
			}
			if ( Object1.LastModificationUserId != null && Object2.LastModificationUserId != null )
			{
				if (Object1.LastModificationUserId != Object2.LastModificationUserId)
					equal = false;
			}
			else if (Object1.LastModificationUserId == null ^ Object2.LastModificationUserId == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			// TODO -> generate a strongly typed IComparer in the concrete class
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name) .CompareTo(((ItemBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name));
		}
		
		/*
		// static method to get a Comparer object
        public static ItemComparer GetComparer()
        {
            return new ItemComparer();
        }
        */

        // Comparer delegates back to Item
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Item rhs, ItemColumn which)
        {
            switch (which)
            {
            	
            	
            	case ItemColumn.ItemId:
            		return this.ItemId.CompareTo(rhs.ItemId);
            		
            		                 
            	
            	
            	case ItemColumn.GroupId:
            		return this.GroupId.Value.CompareTo(rhs.GroupId.Value);
            		
            		                 
            	
            	
            	case ItemColumn.ParentItemId:
            		return this.ParentItemId.Value.CompareTo(rhs.ParentItemId.Value);
            		
            		                 
            	
            	
            	case ItemColumn.Code:
            		return this.Code.CompareTo(rhs.Code);
            		
            		                 
            	
            	
            	case ItemColumn.Name:
            		return this.Name.CompareTo(rhs.Name);
            		
            		                 
            	
            	
            	case ItemColumn.Description:
            		return this.Description.CompareTo(rhs.Description);
            		
            		                 
            	
            	
            	case ItemColumn.BaseUnitId:
            		return this.BaseUnitId.Value.CompareTo(rhs.BaseUnitId.Value);
            		
            		                 
            	
            	
            	case ItemColumn.UsedUnitId:
            		return this.UsedUnitId.Value.CompareTo(rhs.UsedUnitId.Value);
            		
            		                 
            	
            	
            	case ItemColumn.Density:
            		return this.Density.Value.CompareTo(rhs.Density.Value);
            		
            		                 
            	
            	
            	case ItemColumn.TotalQuantity:
            		return this.TotalQuantity.Value.CompareTo(rhs.TotalQuantity.Value);
            		
            		                 
            	
            	
            	case ItemColumn.AvailabelQuantity:
            		return this.AvailabelQuantity.Value.CompareTo(rhs.AvailabelQuantity.Value);
            		
            		                 
            	
            	
            	case ItemColumn.ReserveQuantity:
            		return this.ReserveQuantity.Value.CompareTo(rhs.ReserveQuantity.Value);
            		
            		                 
            	
            	
            	case ItemColumn.ReturnQuantity:
            		return this.ReturnQuantity.Value.CompareTo(rhs.ReturnQuantity.Value);
            		
            		                 
            	
            	
            	case ItemColumn.AdjustQuantity:
            		return this.AdjustQuantity.Value.CompareTo(rhs.AdjustQuantity.Value);
            		
            		                 
            	
            	
            	case ItemColumn.Status:
            		return this.Status.Value.CompareTo(rhs.Status.Value);
            		
            		                 
            	
            	
            	case ItemColumn.IsActive:
            		return this.IsActive.Value.CompareTo(rhs.IsActive.Value);
            		
            		                 
            	
            	
            	case ItemColumn.IsDeletable:
            		return this.IsDeletable.Value.CompareTo(rhs.IsDeletable.Value);
            		
            		                 
            	
            	
            	case ItemColumn.Priority:
            		return this.Priority.Value.CompareTo(rhs.Priority.Value);
            		
            		                 
            	
            	
            	case ItemColumn.LastComputeDate:
            		return this.LastComputeDate.Value.CompareTo(rhs.LastComputeDate.Value);
            		
            		                 
            	
            	
            	case ItemColumn.CreationDate:
            		return this.CreationDate.Value.CompareTo(rhs.CreationDate.Value);
            		
            		                 
            	
            	
            	case ItemColumn.CreationUserId:
            		return this.CreationUserId.Value.CompareTo(rhs.CreationUserId.Value);
            		
            		                 
            	
            	
            	case ItemColumn.LastModificationDate:
            		return this.LastModificationDate.Value.CompareTo(rhs.LastModificationDate.Value);
            		
            		                 
            	
            	
            	case ItemColumn.LastModificationUserId:
            		return this.LastModificationUserId.Value.CompareTo(rhs.LastModificationUserId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ItemKey> Members
		
		// member variable for the EntityId property
		private ItemKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public ItemKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ItemKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = @"Item" 
					+ this.ItemId.ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{24}{23}- ItemId: {0}{23}- GroupId: {1}{23}- ParentItemId: {2}{23}- Code: {3}{23}- Name: {4}{23}- Description: {5}{23}- BaseUnitId: {6}{23}- UsedUnitId: {7}{23}- Density: {8}{23}- TotalQuantity: {9}{23}- AvailabelQuantity: {10}{23}- ReserveQuantity: {11}{23}- ReturnQuantity: {12}{23}- AdjustQuantity: {13}{23}- Status: {14}{23}- IsActive: {15}{23}- IsDeletable: {16}{23}- Priority: {17}{23}- LastComputeDate: {18}{23}- CreationDate: {19}{23}- CreationUserId: {20}{23}- LastModificationDate: {21}{23}- LastModificationUserId: {22}{23}", 
				this.ItemId,
				(this.GroupId == null) ? string.Empty : this.GroupId.ToString(),
				(this.ParentItemId == null) ? string.Empty : this.ParentItemId.ToString(),
				(this.Code == null) ? string.Empty : this.Code.ToString(),
				this.Name,
				(this.Description == null) ? string.Empty : this.Description.ToString(),
				(this.BaseUnitId == null) ? string.Empty : this.BaseUnitId.ToString(),
				(this.UsedUnitId == null) ? string.Empty : this.UsedUnitId.ToString(),
				(this.Density == null) ? string.Empty : this.Density.ToString(),
				(this.TotalQuantity == null) ? string.Empty : this.TotalQuantity.ToString(),
				(this.AvailabelQuantity == null) ? string.Empty : this.AvailabelQuantity.ToString(),
				(this.ReserveQuantity == null) ? string.Empty : this.ReserveQuantity.ToString(),
				(this.ReturnQuantity == null) ? string.Empty : this.ReturnQuantity.ToString(),
				(this.AdjustQuantity == null) ? string.Empty : this.AdjustQuantity.ToString(),
				(this.Status == null) ? string.Empty : this.Status.ToString(),
				(this.IsActive == null) ? string.Empty : this.IsActive.ToString(),
				(this.IsDeletable == null) ? string.Empty : this.IsDeletable.ToString(),
				(this.Priority == null) ? string.Empty : this.Priority.ToString(),
				(this.LastComputeDate == null) ? string.Empty : this.LastComputeDate.ToString(),
				(this.CreationDate == null) ? string.Empty : this.CreationDate.ToString(),
				(this.CreationUserId == null) ? string.Empty : this.CreationUserId.ToString(),
				(this.LastModificationDate == null) ? string.Empty : this.LastModificationDate.ToString(),
				(this.LastModificationUserId == null) ? string.Empty : this.LastModificationUserId.ToString(),
				Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Item' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal class ItemEntityData : ICloneable
	{
		#region Variable Declarations
		
		#region Primary key(s)
			/// <summary>			
			/// ItemId : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "Item"</remarks>
			public System.Int64 ItemId;
				
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// GroupId : Item group
		/// </summary>
		public System.Int32?		  GroupId = (int)0;
		
		/// <summary>
		/// ParentItemId : 
		/// </summary>
		public System.Int32?		  ParentItemId = (int)0;
		
		/// <summary>
		/// Code : 
		/// </summary>
		public System.String		  Code = string.Empty;
		
		/// <summary>
		/// Name : 
		/// </summary>
		public System.String		  Name = string.Empty;
		
		/// <summary>
		/// Description : 
		/// </summary>
		public System.String		  Description = string.Empty;
		
		/// <summary>
		/// BaseUnitId : Base unit of product, It can not be change base in any time
		/// </summary>
		public System.Int32?		  BaseUnitId = (int)0;
		
		/// <summary>
		/// UsedUnitId : Current unit id, It can be change base on repository
		/// </summary>
		public System.Int32?		  UsedUnitId = (int)0;
		
		/// <summary>
		/// Density : the value of UsedUnitId/BaseUnitId. it is constant
		/// </summary>
		public System.Double?		  Density = 0.0f;
		
		/// <summary>
		/// TotalQuantity : Total of item in all repositories
		/// </summary>
		public System.Int64?		  TotalQuantity = (long)0;
		
		/// <summary>
		/// AvailabelQuantity : Total availabel of all item in all repositories
		/// </summary>
		public System.Int64?		  AvailabelQuantity = (long)0;
		
		/// <summary>
		/// ReserveQuantity : Total amount that waiting for approve to do some action (repository movement). ReserveQuantity + AvailabelQuantity + ReturnQuantity=TotalQuantity
		/// </summary>
		public System.Int64?		  ReserveQuantity = (long)0;
		
		/// <summary>
		/// ReturnQuantity : Total quantity that have been returned to provider
		/// </summary>
		public System.Int64?		  ReturnQuantity = (long)0;
		
		/// <summary>
		/// AdjustQuantity : 
		/// </summary>
		public System.Int64?		  AdjustQuantity = (long)0;
		
		/// <summary>
		/// Status : Status of item
		/// </summary>
		public System.Int32?		  Status = (int)0;
		
		/// <summary>
		/// IsActive : Is false, item can be assigned to any project
		/// </summary>
		public System.Boolean?		  IsActive = false;
		
		/// <summary>
		/// IsDeletable : true if item can be delete
		/// </summary>
		public System.Boolean?		  IsDeletable = false;
		
		/// <summary>
		/// Priority : 
		/// </summary>
		public System.Int32?		  Priority = (int)0;
		
		/// <summary>
		/// LastComputeDate : 
		/// </summary>
		public System.DateTime?		  LastComputeDate = DateTime.MinValue;
		
		/// <summary>
		/// CreationDate : 
		/// </summary>
		public System.DateTime?		  CreationDate = DateTime.MinValue;
		
		/// <summary>
		/// CreationUserId : 
		/// </summary>
		public System.Int32?		  CreationUserId = (int)0;
		
		/// <summary>
		/// LastModificationDate : 
		/// </summary>
		public System.DateTime?		  LastModificationDate = DateTime.MinValue;
		
		/// <summary>
		/// LastModificationUserId : 
		/// </summary>
		public System.Int32?		  LastModificationUserId = (int)0;
		#endregion
			
		#endregion Variable Declarations
		
		#region Clone
		public Object Clone()
		{
			ItemEntityData _tmp = new ItemEntityData();
						
			_tmp.ItemId = this.ItemId;
			
			_tmp.GroupId = this.GroupId;
			_tmp.ParentItemId = this.ParentItemId;
			_tmp.Code = this.Code;
			_tmp.Name = this.Name;
			_tmp.Description = this.Description;
			_tmp.BaseUnitId = this.BaseUnitId;
			_tmp.UsedUnitId = this.UsedUnitId;
			_tmp.Density = this.Density;
			_tmp.TotalQuantity = this.TotalQuantity;
			_tmp.AvailabelQuantity = this.AvailabelQuantity;
			_tmp.ReserveQuantity = this.ReserveQuantity;
			_tmp.ReturnQuantity = this.ReturnQuantity;
			_tmp.AdjustQuantity = this.AdjustQuantity;
			_tmp.Status = this.Status;
			_tmp.IsActive = this.IsActive;
			_tmp.IsDeletable = this.IsDeletable;
			_tmp.Priority = this.Priority;
			_tmp.LastComputeDate = this.LastComputeDate;
			_tmp.CreationDate = this.CreationDate;
			_tmp.CreationUserId = this.CreationUserId;
			_tmp.LastModificationDate = this.LastModificationDate;
			_tmp.LastModificationUserId = this.LastModificationUserId;
			
			return _tmp;
		}
		#endregion 
		
		#region Data Properties

		#region ItemInItemCollectionByFromItemId
		
		private TList<ItemInItem> itemInItemFromItemId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation itemInItemFromItemId
		/// </summary>	
		public TList<ItemInItem> ItemInItemCollectionByFromItemId
		{
			get
			{
				if (itemInItemFromItemId == null)
				{
				itemInItemFromItemId = new TList<ItemInItem>();
				}
	
				return itemInItemFromItemId;
			}
			set { itemInItemFromItemId = value; }
		}
		
		#endregion

		#region RepositoryCollection_From_ItemInRepository
		
		private TList<Repository> dFromItemInRepository;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the junction table dFromItemInRepository
		/// </summary>	
		public TList<Repository> RepositoryCollection_From_ItemInRepository
		{
			get
			{
				if (dFromItemInRepository == null)
				{
				dFromItemInRepository = new TList<Repository>();
				}
	
				return dFromItemInRepository;
			}
			set { dFromItemInRepository = value; }
		}
		
		#endregion 

		#region ItemMovementCollection
		
		private TList<ItemMovement> itemMovementItemId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation itemMovementItemId
		/// </summary>	
		public TList<ItemMovement> ItemMovementCollection
		{
			get
			{
				if (itemMovementItemId == null)
				{
				itemMovementItemId = new TList<ItemMovement>();
				}
	
				return itemMovementItemId;
			}
			set { itemMovementItemId = value; }
		}
		
		#endregion

		#region ItemInItemCollectionByToItemId
		
		private TList<ItemInItem> itemInItemToItemId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation itemInItemToItemId
		/// </summary>	
		public TList<ItemInItem> ItemInItemCollectionByToItemId
		{
			get
			{
				if (itemInItemToItemId == null)
				{
				itemInItemToItemId = new TList<ItemInItem>();
				}
	
				return itemInItemToItemId;
			}
			set { itemInItemToItemId = value; }
		}
		
		#endregion

		#region ItemInProjectCollection
		
		private TList<ItemInProject> itemInProjectItemId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation itemInProjectItemId
		/// </summary>	
		public TList<ItemInProject> ItemInProjectCollection
		{
			get
			{
				if (itemInProjectItemId == null)
				{
				itemInProjectItemId = new TList<ItemInProject>();
				}
	
				return itemInProjectItemId;
			}
			set { itemInProjectItemId = value; }
		}
		
		#endregion

		#region ItemInRepositoryCollection
		
		private TList<ItemInRepository> itemInRepositoryItemId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation itemInRepositoryItemId
		/// </summary>	
		public TList<ItemInRepository> ItemInRepositoryCollection
		{
			get
			{
				if (itemInRepositoryItemId == null)
				{
				itemInRepositoryItemId = new TList<ItemInRepository>();
				}
	
				return itemInRepositoryItemId;
			}
			set { itemInRepositoryItemId = value; }
		}
		
		#endregion

		#endregion Data Properties

	}//End struct


		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Code",200));
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"Name");
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Name",500));
		}
   		#endregion
	
	} // End Class
	
	#region ItemComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ItemComparer : System.Collections.Generic.IComparer<Item>
	{
		ItemColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ItemComparer"/> class.
        /// </summary>
		public ItemComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ItemComparer(ItemColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="Item"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="Item"/> to compare.</param>
        /// <param name="b">The second <c>Item</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Item a, Item b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Item entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Item a, Item b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ItemColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ItemKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Item"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ItemKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ItemKey class.
		/// </summary>
		public ItemKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ItemKey class.
		/// </summary>
		public ItemKey(ItemBase entity)
		{
			Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.itemId = entity.ItemId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ItemKey class.
		/// </summary>
		public ItemKey(System.Int64 itemId)
		{
			#region Init Properties

			this.itemId = itemId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ItemBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ItemBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the ItemId property
		private System.Int64 itemId;
		
		/// <summary>
		/// Gets or sets the ItemId property.
		/// </summary>
		public System.Int64 ItemId
		{
			get { return itemId; }
			set
			{
				if ( Entity != null )
				{
					Entity.ItemId = value;
				}
				
				itemId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				ItemId = ( values["ItemId"] != null ) ? (System.Int64) EntityUtil.ChangeType(values["ItemId"], typeof(System.Int64)) : (long)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("ItemId", ItemId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("ItemId: {0}{1}",
								ItemId,
								Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ItemColumn Enum
	
	/// <summary>
	/// Enumerate the Item columns.
	/// </summary>
	[Serializable]
	public enum ItemColumn : int
	{
		/// <summary>
		/// ItemId : 
		/// </summary>
		[EnumTextValue("ItemId")]
		[ColumnEnum("ItemId", typeof(System.Int64), System.Data.DbType.Int64, true, true, false)]
		ItemId = 1,
		/// <summary>
		/// GroupId : Item group
		/// </summary>
		[EnumTextValue("GroupId")]
		[ColumnEnum("GroupId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		GroupId = 2,
		/// <summary>
		/// ParentItemId : 
		/// </summary>
		[EnumTextValue("ParentItemId")]
		[ColumnEnum("ParentItemId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ParentItemId = 3,
		/// <summary>
		/// Code : 
		/// </summary>
		[EnumTextValue("Code")]
		[ColumnEnum("Code", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 200)]
		Code = 4,
		/// <summary>
		/// Name : 
		/// </summary>
		[EnumTextValue("Name")]
		[ColumnEnum("Name", typeof(System.String), System.Data.DbType.String, false, false, false, 500)]
		Name = 5,
		/// <summary>
		/// Description : 
		/// </summary>
		[EnumTextValue("Description")]
		[ColumnEnum("Description", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Description = 6,
		/// <summary>
		/// BaseUnitId : Base unit of product, It can not be change base in any time
		/// </summary>
		[EnumTextValue("BaseUnitId")]
		[ColumnEnum("BaseUnitId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		BaseUnitId = 7,
		/// <summary>
		/// UsedUnitId : Current unit id, It can be change base on repository
		/// </summary>
		[EnumTextValue("UsedUnitId")]
		[ColumnEnum("UsedUnitId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		UsedUnitId = 8,
		/// <summary>
		/// Density : the value of UsedUnitId/BaseUnitId. it is constant
		/// </summary>
		[EnumTextValue("Density")]
		[ColumnEnum("Density", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Density = 9,
		/// <summary>
		/// TotalQuantity : Total of item in all repositories
		/// </summary>
		[EnumTextValue("TotalQuantity")]
		[ColumnEnum("TotalQuantity", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		TotalQuantity = 10,
		/// <summary>
		/// AvailabelQuantity : Total availabel of all item in all repositories
		/// </summary>
		[EnumTextValue("AvailabelQuantity")]
		[ColumnEnum("AvailabelQuantity", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		AvailabelQuantity = 11,
		/// <summary>
		/// ReserveQuantity : Total amount that waiting for approve to do some action (repository movement). ReserveQuantity + AvailabelQuantity + ReturnQuantity=TotalQuantity
		/// </summary>
		[EnumTextValue("ReserveQuantity")]
		[ColumnEnum("ReserveQuantity", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		ReserveQuantity = 12,
		/// <summary>
		/// ReturnQuantity : Total quantity that have been returned to provider
		/// </summary>
		[EnumTextValue("ReturnQuantity")]
		[ColumnEnum("ReturnQuantity", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		ReturnQuantity = 13,
		/// <summary>
		/// AdjustQuantity : 
		/// </summary>
		[EnumTextValue("AdjustQuantity")]
		[ColumnEnum("AdjustQuantity", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		AdjustQuantity = 14,
		/// <summary>
		/// Status : Status of item
		/// </summary>
		[EnumTextValue("Status")]
		[ColumnEnum("Status", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Status = 15,
		/// <summary>
		/// IsActive : Is false, item can be assigned to any project
		/// </summary>
		[EnumTextValue("IsActive")]
		[ColumnEnum("IsActive", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsActive = 16,
		/// <summary>
		/// IsDeletable : true if item can be delete
		/// </summary>
		[EnumTextValue("IsDeletable")]
		[ColumnEnum("IsDeletable", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsDeletable = 17,
		/// <summary>
		/// Priority : 
		/// </summary>
		[EnumTextValue("Priority")]
		[ColumnEnum("Priority", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Priority = 18,
		/// <summary>
		/// LastComputeDate : 
		/// </summary>
		[EnumTextValue("LastComputeDate")]
		[ColumnEnum("LastComputeDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastComputeDate = 19,
		/// <summary>
		/// CreationDate : 
		/// </summary>
		[EnumTextValue("CreationDate")]
		[ColumnEnum("CreationDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CreationDate = 20,
		/// <summary>
		/// CreationUserId : 
		/// </summary>
		[EnumTextValue("CreationUserId")]
		[ColumnEnum("CreationUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CreationUserId = 21,
		/// <summary>
		/// LastModificationDate : 
		/// </summary>
		[EnumTextValue("LastModificationDate")]
		[ColumnEnum("LastModificationDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastModificationDate = 22,
		/// <summary>
		/// LastModificationUserId : 
		/// </summary>
		[EnumTextValue("LastModificationUserId")]
		[ColumnEnum("LastModificationUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		LastModificationUserId = 23
	}//End enum

	#endregion ItemColumn Enum

} // end namespace
