	
/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : Tuesday, May 03, 2011
	Important: Do not modify this file. Edit the file ItemInRepository.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace RLM.Construction.Entities
{
	#region ItemInRepositoryEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="ItemInRepository"/> object.
	/// </remarks>
	public class ItemInRepositoryEventArgs : System.EventArgs
	{
		private ItemInRepositoryColumn column;
		private object value;
		
		
		///<summary>
		/// Initalizes a new Instance of the ItemInRepositoryEventArgs class.
		///</summary>
		public ItemInRepositoryEventArgs(ItemInRepositoryColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ItemInRepositoryEventArgs class.
		///</summary>
		public ItemInRepositoryEventArgs(ItemInRepositoryColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		
		///<summary>
		/// The ItemInRepositoryColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ItemInRepositoryColumn" />
		public ItemInRepositoryColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	
	///<summary>
	/// Define a delegate for all ItemInRepository related events.
	///</summary>
	public delegate void ItemInRepositoryEventHandler(object sender, ItemInRepositoryEventArgs e);
	
	///<summary>
	/// An object representation of the 'ItemInRepository' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	//[ToolboxItem(typeof(ItemInRepository))]
	public abstract partial class ItemInRepositoryBase : EntityBase, IEntityId<ItemInRepositoryKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		/// 	Old the inner data of the entity.
		/// </summary>
		private ItemInRepositoryEntityData entityData;
		
		// <summary>
		// 	Old the original data of the entity.
		// </summary>
		//ItemInRepositoryEntityData originalData;
		
		/// <summary>
		/// 	Old a backup of the inner data of the entity.
		/// </summary>
		private ItemInRepositoryEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		[NonSerialized]
		private TList<ItemInRepository> parentCollection;
		private bool inTxn = false;

		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event ItemInRepositoryEventHandler ColumnChanging;
		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ItemInRepositoryEventHandler ColumnChanged;		
		#endregion "Variable Declarations"
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ItemInRepositoryBase"/> instance.
		///</summary>
		public ItemInRepositoryBase()
		{
			this.entityData = new ItemInRepositoryEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ItemInRepositoryBase"/> instance.
		///</summary>
		///<param name="itemInRepositoryRepositoryId"></param>
		///<param name="itemInRepositoryItemId"></param>
		///<param name="itemInRepositoryPriceUnitId"></param>
		///<param name="itemInRepositoryExchangeRate"></param>
		///<param name="itemInRepositoryTotalQuantity"></param>
		///<param name="itemInRepositoryAvailabelQuantity"></param>
		///<param name="itemInRepositoryReserveQuantity"></param>
		///<param name="itemInRepositoryReturnQuantity"></param>
		///<param name="itemInRepositoryAdjustQuantity">the total number of adjust of this item in this repository</param>
		///<param name="itemInRepositoryIsActive"></param>
		///<param name="itemInRepositoryIsDeletable"></param>
		///<param name="itemInRepositoryStatus">the same as item.status</param>
		///<param name="itemInRepositoryPriority"></param>
		///<param name="itemInRepositoryBaseUnitId"></param>
		///<param name="itemInRepositoryCreationDate"></param>
		///<param name="itemInRepositoryCreationUserId"></param>
		///<param name="itemInRepositoryLastModificationDate"></param>
		///<param name="itemInRepositoryLastModificationUserId"></param>
		public ItemInRepositoryBase(System.Int32 itemInRepositoryRepositoryId, System.Int64 itemInRepositoryItemId, 
			System.Int32? itemInRepositoryPriceUnitId, System.Int32? itemInRepositoryExchangeRate, System.Int64? itemInRepositoryTotalQuantity, 
			System.Int64? itemInRepositoryAvailabelQuantity, System.Int64? itemInRepositoryReserveQuantity, System.Int64? itemInRepositoryReturnQuantity, 
			System.Int64? itemInRepositoryAdjustQuantity, System.Boolean? itemInRepositoryIsActive, System.Boolean? itemInRepositoryIsDeletable, 
			System.Int32? itemInRepositoryStatus, System.Int32? itemInRepositoryPriority, System.Int32? itemInRepositoryBaseUnitId, 
			System.DateTime? itemInRepositoryCreationDate, System.Int32? itemInRepositoryCreationUserId, System.DateTime? itemInRepositoryLastModificationDate, 
			System.Int32? itemInRepositoryLastModificationUserId)
		{
			this.entityData = new ItemInRepositoryEntityData();
			this.backupData = null;

			this.RepositoryId = itemInRepositoryRepositoryId;
			this.ItemId = itemInRepositoryItemId;
			this.PriceUnitId = itemInRepositoryPriceUnitId;
			this.ExchangeRate = itemInRepositoryExchangeRate;
			this.TotalQuantity = itemInRepositoryTotalQuantity;
			this.AvailabelQuantity = itemInRepositoryAvailabelQuantity;
			this.ReserveQuantity = itemInRepositoryReserveQuantity;
			this.ReturnQuantity = itemInRepositoryReturnQuantity;
			this.AdjustQuantity = itemInRepositoryAdjustQuantity;
			this.IsActive = itemInRepositoryIsActive;
			this.IsDeletable = itemInRepositoryIsDeletable;
			this.Status = itemInRepositoryStatus;
			this.Priority = itemInRepositoryPriority;
			this.BaseUnitId = itemInRepositoryBaseUnitId;
			this.CreationDate = itemInRepositoryCreationDate;
			this.CreationUserId = itemInRepositoryCreationUserId;
			this.LastModificationDate = itemInRepositoryLastModificationDate;
			this.LastModificationUserId = itemInRepositoryLastModificationUserId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ItemInRepository"/> instance.
		///</summary>
		///<param name="itemInRepositoryRepositoryId"></param>
		///<param name="itemInRepositoryItemId"></param>
		///<param name="itemInRepositoryPriceUnitId"></param>
		///<param name="itemInRepositoryExchangeRate"></param>
		///<param name="itemInRepositoryTotalQuantity"></param>
		///<param name="itemInRepositoryAvailabelQuantity"></param>
		///<param name="itemInRepositoryReserveQuantity"></param>
		///<param name="itemInRepositoryReturnQuantity"></param>
		///<param name="itemInRepositoryAdjustQuantity">the total number of adjust of this item in this repository</param>
		///<param name="itemInRepositoryIsActive"></param>
		///<param name="itemInRepositoryIsDeletable"></param>
		///<param name="itemInRepositoryStatus">the same as item.status</param>
		///<param name="itemInRepositoryPriority"></param>
		///<param name="itemInRepositoryBaseUnitId"></param>
		///<param name="itemInRepositoryCreationDate"></param>
		///<param name="itemInRepositoryCreationUserId"></param>
		///<param name="itemInRepositoryLastModificationDate"></param>
		///<param name="itemInRepositoryLastModificationUserId"></param>
		public static ItemInRepository CreateItemInRepository(System.Int32 itemInRepositoryRepositoryId, System.Int64 itemInRepositoryItemId, 
			System.Int32? itemInRepositoryPriceUnitId, System.Int32? itemInRepositoryExchangeRate, System.Int64? itemInRepositoryTotalQuantity, 
			System.Int64? itemInRepositoryAvailabelQuantity, System.Int64? itemInRepositoryReserveQuantity, System.Int64? itemInRepositoryReturnQuantity, 
			System.Int64? itemInRepositoryAdjustQuantity, System.Boolean? itemInRepositoryIsActive, System.Boolean? itemInRepositoryIsDeletable, 
			System.Int32? itemInRepositoryStatus, System.Int32? itemInRepositoryPriority, System.Int32? itemInRepositoryBaseUnitId, 
			System.DateTime? itemInRepositoryCreationDate, System.Int32? itemInRepositoryCreationUserId, System.DateTime? itemInRepositoryLastModificationDate, 
			System.Int32? itemInRepositoryLastModificationUserId)
		{
			ItemInRepository newItemInRepository = new ItemInRepository();
			newItemInRepository.RepositoryId = itemInRepositoryRepositoryId;
			newItemInRepository.ItemId = itemInRepositoryItemId;
			newItemInRepository.PriceUnitId = itemInRepositoryPriceUnitId;
			newItemInRepository.ExchangeRate = itemInRepositoryExchangeRate;
			newItemInRepository.TotalQuantity = itemInRepositoryTotalQuantity;
			newItemInRepository.AvailabelQuantity = itemInRepositoryAvailabelQuantity;
			newItemInRepository.ReserveQuantity = itemInRepositoryReserveQuantity;
			newItemInRepository.ReturnQuantity = itemInRepositoryReturnQuantity;
			newItemInRepository.AdjustQuantity = itemInRepositoryAdjustQuantity;
			newItemInRepository.IsActive = itemInRepositoryIsActive;
			newItemInRepository.IsDeletable = itemInRepositoryIsDeletable;
			newItemInRepository.Status = itemInRepositoryStatus;
			newItemInRepository.Priority = itemInRepositoryPriority;
			newItemInRepository.BaseUnitId = itemInRepositoryBaseUnitId;
			newItemInRepository.CreationDate = itemInRepositoryCreationDate;
			newItemInRepository.CreationUserId = itemInRepositoryCreationUserId;
			newItemInRepository.LastModificationDate = itemInRepositoryLastModificationDate;
			newItemInRepository.LastModificationUserId = itemInRepositoryLastModificationUserId;
			return newItemInRepository;
		}
				
		#endregion Constructors
		
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ItemInRepositoryColumn"/> which has raised the event.</param>
		public void OnColumnChanging(ItemInRepositoryColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ItemInRepositoryColumn"/> which has raised the event.</param>
		public void OnColumnChanged(ItemInRepositoryColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ItemInRepositoryColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(ItemInRepositoryColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added)
				EntityManager.StopTracking(EntityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				ItemInRepositoryEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ItemInRepositoryEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ItemInRepositoryColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(ItemInRepositoryColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ItemInRepositoryEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ItemInRepositoryEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
				
		#region Properties	
				
		/// <summary>
		/// 	Gets or sets the RepositoryId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(true, false, false)]
		public virtual System.Int32 RepositoryId
		{
			get
			{
				return this.entityData.RepositoryId; 
			}
			
			set
			{
				if (this.entityData.RepositoryId == value)
					return;
					
					
				OnColumnChanging(ItemInRepositoryColumn.RepositoryId, this.entityData.RepositoryId);
				this.entityData.RepositoryId = value;
				this.EntityId.RepositoryId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemInRepositoryColumn.RepositoryId, this.entityData.RepositoryId);
				OnPropertyChanged("RepositoryId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the RepositoryId property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the RepositoryId property.</remarks>
		/// <value>This type is int</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Int32 OriginalRepositoryId
		{
			get { return this.entityData.OriginalRepositoryId; }
			set { this.entityData.OriginalRepositoryId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the ItemId property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(true, false, false)]
		public virtual System.Int64 ItemId
		{
			get
			{
				return this.entityData.ItemId; 
			}
			
			set
			{
				if (this.entityData.ItemId == value)
					return;
					
					
				OnColumnChanging(ItemInRepositoryColumn.ItemId, this.entityData.ItemId);
				this.entityData.ItemId = value;
				this.EntityId.ItemId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemInRepositoryColumn.ItemId, this.entityData.ItemId);
				OnPropertyChanged("ItemId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ItemId property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ItemId property.</remarks>
		/// <value>This type is bigint</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Int64 OriginalItemId
		{
			get { return this.entityData.OriginalItemId; }
			set { this.entityData.OriginalItemId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the PriceUnitId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsPriceUnitIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? PriceUnitId
		{
			get
			{
				return this.entityData.PriceUnitId; 
			}
			
			set
			{
				if (this.entityData.PriceUnitId == value)
					return;
					
					
				OnColumnChanging(ItemInRepositoryColumn.PriceUnitId, this.entityData.PriceUnitId);
				this.entityData.PriceUnitId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemInRepositoryColumn.PriceUnitId, this.entityData.PriceUnitId);
				OnPropertyChanged("PriceUnitId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExchangeRate property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsExchangeRateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ExchangeRate
		{
			get
			{
				return this.entityData.ExchangeRate; 
			}
			
			set
			{
				if (this.entityData.ExchangeRate == value)
					return;
					
					
				OnColumnChanging(ItemInRepositoryColumn.ExchangeRate, this.entityData.ExchangeRate);
				this.entityData.ExchangeRate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemInRepositoryColumn.ExchangeRate, this.entityData.ExchangeRate);
				OnPropertyChanged("ExchangeRate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalQuantity property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsTotalQuantityNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? TotalQuantity
		{
			get
			{
				return this.entityData.TotalQuantity; 
			}
			
			set
			{
				if (this.entityData.TotalQuantity == value)
					return;
					
					
				OnColumnChanging(ItemInRepositoryColumn.TotalQuantity, this.entityData.TotalQuantity);
				this.entityData.TotalQuantity = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemInRepositoryColumn.TotalQuantity, this.entityData.TotalQuantity);
				OnPropertyChanged("TotalQuantity");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AvailabelQuantity property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsAvailabelQuantityNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? AvailabelQuantity
		{
			get
			{
				return this.entityData.AvailabelQuantity; 
			}
			
			set
			{
				if (this.entityData.AvailabelQuantity == value)
					return;
					
					
				OnColumnChanging(ItemInRepositoryColumn.AvailabelQuantity, this.entityData.AvailabelQuantity);
				this.entityData.AvailabelQuantity = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemInRepositoryColumn.AvailabelQuantity, this.entityData.AvailabelQuantity);
				OnPropertyChanged("AvailabelQuantity");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReserveQuantity property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsReserveQuantityNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? ReserveQuantity
		{
			get
			{
				return this.entityData.ReserveQuantity; 
			}
			
			set
			{
				if (this.entityData.ReserveQuantity == value)
					return;
					
					
				OnColumnChanging(ItemInRepositoryColumn.ReserveQuantity, this.entityData.ReserveQuantity);
				this.entityData.ReserveQuantity = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemInRepositoryColumn.ReserveQuantity, this.entityData.ReserveQuantity);
				OnPropertyChanged("ReserveQuantity");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReturnQuantity property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsReturnQuantityNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? ReturnQuantity
		{
			get
			{
				return this.entityData.ReturnQuantity; 
			}
			
			set
			{
				if (this.entityData.ReturnQuantity == value)
					return;
					
					
				OnColumnChanging(ItemInRepositoryColumn.ReturnQuantity, this.entityData.ReturnQuantity);
				this.entityData.ReturnQuantity = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemInRepositoryColumn.ReturnQuantity, this.entityData.ReturnQuantity);
				OnPropertyChanged("ReturnQuantity");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdjustQuantity property. 
		///		the total number of adjust of this item in this repository
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsAdjustQuantityNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("the total number of adjust of this item in this repository"), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? AdjustQuantity
		{
			get
			{
				return this.entityData.AdjustQuantity; 
			}
			
			set
			{
				if (this.entityData.AdjustQuantity == value)
					return;
					
					
				OnColumnChanging(ItemInRepositoryColumn.AdjustQuantity, this.entityData.AdjustQuantity);
				this.entityData.AdjustQuantity = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemInRepositoryColumn.AdjustQuantity, this.entityData.AdjustQuantity);
				OnPropertyChanged("AdjustQuantity");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsActive property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsActiveNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsActive
		{
			get
			{
				return this.entityData.IsActive; 
			}
			
			set
			{
				if (this.entityData.IsActive == value)
					return;
					
					
				OnColumnChanging(ItemInRepositoryColumn.IsActive, this.entityData.IsActive);
				this.entityData.IsActive = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemInRepositoryColumn.IsActive, this.entityData.IsActive);
				OnPropertyChanged("IsActive");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsDeletable property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsDeletableNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsDeletable
		{
			get
			{
				return this.entityData.IsDeletable; 
			}
			
			set
			{
				if (this.entityData.IsDeletable == value)
					return;
					
					
				OnColumnChanging(ItemInRepositoryColumn.IsDeletable, this.entityData.IsDeletable);
				this.entityData.IsDeletable = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemInRepositoryColumn.IsDeletable, this.entityData.IsDeletable);
				OnPropertyChanged("IsDeletable");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Status property. 
		///		the same as item.status
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsStatusNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("the same as item.status"), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Status
		{
			get
			{
				return this.entityData.Status; 
			}
			
			set
			{
				if (this.entityData.Status == value)
					return;
					
					
				OnColumnChanging(ItemInRepositoryColumn.Status, this.entityData.Status);
				this.entityData.Status = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemInRepositoryColumn.Status, this.entityData.Status);
				OnPropertyChanged("Status");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Priority property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsPriorityNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Priority
		{
			get
			{
				return this.entityData.Priority; 
			}
			
			set
			{
				if (this.entityData.Priority == value)
					return;
					
					
				OnColumnChanging(ItemInRepositoryColumn.Priority, this.entityData.Priority);
				this.entityData.Priority = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemInRepositoryColumn.Priority, this.entityData.Priority);
				OnPropertyChanged("Priority");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BaseUnitId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsBaseUnitIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? BaseUnitId
		{
			get
			{
				return this.entityData.BaseUnitId; 
			}
			
			set
			{
				if (this.entityData.BaseUnitId == value)
					return;
					
					
				OnColumnChanging(ItemInRepositoryColumn.BaseUnitId, this.entityData.BaseUnitId);
				this.entityData.BaseUnitId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemInRepositoryColumn.BaseUnitId, this.entityData.BaseUnitId);
				OnPropertyChanged("BaseUnitId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreationDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsCreationDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CreationDate
		{
			get
			{
				return this.entityData.CreationDate; 
			}
			
			set
			{
				if (this.entityData.CreationDate == value)
					return;
					
					
				OnColumnChanging(ItemInRepositoryColumn.CreationDate, this.entityData.CreationDate);
				this.entityData.CreationDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemInRepositoryColumn.CreationDate, this.entityData.CreationDate);
				OnPropertyChanged("CreationDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreationUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCreationUserIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CreationUserId
		{
			get
			{
				return this.entityData.CreationUserId; 
			}
			
			set
			{
				if (this.entityData.CreationUserId == value)
					return;
					
					
				OnColumnChanging(ItemInRepositoryColumn.CreationUserId, this.entityData.CreationUserId);
				this.entityData.CreationUserId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemInRepositoryColumn.CreationUserId, this.entityData.CreationUserId);
				OnPropertyChanged("CreationUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModificationDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastModificationDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastModificationDate
		{
			get
			{
				return this.entityData.LastModificationDate; 
			}
			
			set
			{
				if (this.entityData.LastModificationDate == value)
					return;
					
					
				OnColumnChanging(ItemInRepositoryColumn.LastModificationDate, this.entityData.LastModificationDate);
				this.entityData.LastModificationDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemInRepositoryColumn.LastModificationDate, this.entityData.LastModificationDate);
				OnPropertyChanged("LastModificationDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModificationUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsLastModificationUserIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? LastModificationUserId
		{
			get
			{
				return this.entityData.LastModificationUserId; 
			}
			
			set
			{
				if (this.entityData.LastModificationUserId == value)
					return;
					
					
				OnColumnChanging(ItemInRepositoryColumn.LastModificationUserId, this.entityData.LastModificationUserId);
				this.entityData.LastModificationUserId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemInRepositoryColumn.LastModificationUserId, this.entityData.LastModificationUserId);
				OnPropertyChanged("LastModificationUserId");
			}
		}
		

		#region Source Foreign Key Property
				
		private Item _itemIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Item"/>.
		/// </summary>
		/// <value>The source Item for ItemId.</value>
        [XmlIgnore()]
		[Browsable(false), BindableAttribute()]
		public virtual Item ItemIdSource
      	{
            get { return this._itemIdSource; }
            set { this._itemIdSource = value; }
      	}
		private Repository _repositoryIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Repository"/>.
		/// </summary>
		/// <value>The source Repository for RepositoryId.</value>
        [XmlIgnore()]
		[Browsable(false), BindableAttribute()]
		public virtual Repository RepositoryIdSource
      	{
            get { return this._repositoryIdSource; }
            set { this._repositoryIdSource = value; }
      	}
		private Unit _priceUnitIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Unit"/>.
		/// </summary>
		/// <value>The source Unit for PriceUnitId.</value>
        [XmlIgnore()]
		[Browsable(false), BindableAttribute()]
		public virtual Unit PriceUnitIdSource
      	{
            get { return this._priceUnitIdSource; }
            set { this._priceUnitIdSource = value; }
      	}
		#endregion
			
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ItemInRepository"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"RepositoryId", "ItemId", "PriceUnitId", "ExchangeRate", "TotalQuantity", "AvailabelQuantity", "ReserveQuantity", "ReturnQuantity", "AdjustQuantity", "IsActive", "IsDeletable", "Status", "Priority", "BaseUnitId", "CreationDate", "CreationUserId", "LastModificationDate", "LastModificationUserId"};
			}
		}
		#endregion 
		
		
		#endregion
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ItemInRepositoryEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (ItemInRepository) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return (object)this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<ItemInRepository>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as ItemInRepository);
	        }
	    }


		#endregion
		
		#region Methods	
			
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();
		}	
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ItemInRepository Entity 
		///</summary>
		public virtual ItemInRepository Copy()
		{
			//shallow copy entity
			ItemInRepository copy = new ItemInRepository();
			copy.RepositoryId = this.RepositoryId;
			copy.OriginalRepositoryId = this.OriginalRepositoryId;
			copy.ItemId = this.ItemId;
			copy.OriginalItemId = this.OriginalItemId;
			copy.PriceUnitId = this.PriceUnitId;
			copy.ExchangeRate = this.ExchangeRate;
			copy.TotalQuantity = this.TotalQuantity;
			copy.AvailabelQuantity = this.AvailabelQuantity;
			copy.ReserveQuantity = this.ReserveQuantity;
			copy.ReturnQuantity = this.ReturnQuantity;
			copy.AdjustQuantity = this.AdjustQuantity;
			copy.IsActive = this.IsActive;
			copy.IsDeletable = this.IsDeletable;
			copy.Status = this.Status;
			copy.Priority = this.Priority;
			copy.BaseUnitId = this.BaseUnitId;
			copy.CreationDate = this.CreationDate;
			copy.CreationUserId = this.CreationUserId;
			copy.LastModificationDate = this.LastModificationDate;
			copy.LastModificationUserId = this.LastModificationUserId;
					
			copy.AcceptChanges();
			return (ItemInRepository)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed ItemInRepository Entity which is a deep copy of the current entity.
		///</summary>
		public virtual ItemInRepository DeepCopy()
		{
			return EntityHelper.Clone<ItemInRepository>(this as ItemInRepository);	
		}
		#endregion
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ItemInRepositoryBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ItemInRepositoryBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="ItemInRepositoryBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="ItemInRepositoryBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ItemInRepositoryBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(ItemInRepositoryBase Object1, ItemInRepositoryBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.RepositoryId != Object2.RepositoryId)
				equal = false;
			if (Object1.ItemId != Object2.ItemId)
				equal = false;
			if ( Object1.PriceUnitId != null && Object2.PriceUnitId != null )
			{
				if (Object1.PriceUnitId != Object2.PriceUnitId)
					equal = false;
			}
			else if (Object1.PriceUnitId == null ^ Object2.PriceUnitId == null )
			{
				equal = false;
			}
			if ( Object1.ExchangeRate != null && Object2.ExchangeRate != null )
			{
				if (Object1.ExchangeRate != Object2.ExchangeRate)
					equal = false;
			}
			else if (Object1.ExchangeRate == null ^ Object2.ExchangeRate == null )
			{
				equal = false;
			}
			if ( Object1.TotalQuantity != null && Object2.TotalQuantity != null )
			{
				if (Object1.TotalQuantity != Object2.TotalQuantity)
					equal = false;
			}
			else if (Object1.TotalQuantity == null ^ Object2.TotalQuantity == null )
			{
				equal = false;
			}
			if ( Object1.AvailabelQuantity != null && Object2.AvailabelQuantity != null )
			{
				if (Object1.AvailabelQuantity != Object2.AvailabelQuantity)
					equal = false;
			}
			else if (Object1.AvailabelQuantity == null ^ Object2.AvailabelQuantity == null )
			{
				equal = false;
			}
			if ( Object1.ReserveQuantity != null && Object2.ReserveQuantity != null )
			{
				if (Object1.ReserveQuantity != Object2.ReserveQuantity)
					equal = false;
			}
			else if (Object1.ReserveQuantity == null ^ Object2.ReserveQuantity == null )
			{
				equal = false;
			}
			if ( Object1.ReturnQuantity != null && Object2.ReturnQuantity != null )
			{
				if (Object1.ReturnQuantity != Object2.ReturnQuantity)
					equal = false;
			}
			else if (Object1.ReturnQuantity == null ^ Object2.ReturnQuantity == null )
			{
				equal = false;
			}
			if ( Object1.AdjustQuantity != null && Object2.AdjustQuantity != null )
			{
				if (Object1.AdjustQuantity != Object2.AdjustQuantity)
					equal = false;
			}
			else if (Object1.AdjustQuantity == null ^ Object2.AdjustQuantity == null )
			{
				equal = false;
			}
			if ( Object1.IsActive != null && Object2.IsActive != null )
			{
				if (Object1.IsActive != Object2.IsActive)
					equal = false;
			}
			else if (Object1.IsActive == null ^ Object2.IsActive == null )
			{
				equal = false;
			}
			if ( Object1.IsDeletable != null && Object2.IsDeletable != null )
			{
				if (Object1.IsDeletable != Object2.IsDeletable)
					equal = false;
			}
			else if (Object1.IsDeletable == null ^ Object2.IsDeletable == null )
			{
				equal = false;
			}
			if ( Object1.Status != null && Object2.Status != null )
			{
				if (Object1.Status != Object2.Status)
					equal = false;
			}
			else if (Object1.Status == null ^ Object2.Status == null )
			{
				equal = false;
			}
			if ( Object1.Priority != null && Object2.Priority != null )
			{
				if (Object1.Priority != Object2.Priority)
					equal = false;
			}
			else if (Object1.Priority == null ^ Object2.Priority == null )
			{
				equal = false;
			}
			if ( Object1.BaseUnitId != null && Object2.BaseUnitId != null )
			{
				if (Object1.BaseUnitId != Object2.BaseUnitId)
					equal = false;
			}
			else if (Object1.BaseUnitId == null ^ Object2.BaseUnitId == null )
			{
				equal = false;
			}
			if ( Object1.CreationDate != null && Object2.CreationDate != null )
			{
				if (Object1.CreationDate != Object2.CreationDate)
					equal = false;
			}
			else if (Object1.CreationDate == null ^ Object2.CreationDate == null )
			{
				equal = false;
			}
			if ( Object1.CreationUserId != null && Object2.CreationUserId != null )
			{
				if (Object1.CreationUserId != Object2.CreationUserId)
					equal = false;
			}
			else if (Object1.CreationUserId == null ^ Object2.CreationUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastModificationDate != null && Object2.LastModificationDate != null )
			{
				if (Object1.LastModificationDate != Object2.LastModificationDate)
					equal = false;
			}
			else if (Object1.LastModificationDate == null ^ Object2.LastModificationDate == null )
			{
				equal = false;
			}
			if ( Object1.LastModificationUserId != null && Object2.LastModificationUserId != null )
			{
				if (Object1.LastModificationUserId != Object2.LastModificationUserId)
					equal = false;
			}
			else if (Object1.LastModificationUserId == null ^ Object2.LastModificationUserId == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			// TODO -> generate a strongly typed IComparer in the concrete class
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name) .CompareTo(((ItemInRepositoryBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name));
		}
		
		/*
		// static method to get a Comparer object
        public static ItemInRepositoryComparer GetComparer()
        {
            return new ItemInRepositoryComparer();
        }
        */

        // Comparer delegates back to ItemInRepository
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(ItemInRepository rhs, ItemInRepositoryColumn which)
        {
            switch (which)
            {
            	
            	
            	case ItemInRepositoryColumn.RepositoryId:
            		return this.RepositoryId.CompareTo(rhs.RepositoryId);
            		
            		                 
            	
            	
            	case ItemInRepositoryColumn.ItemId:
            		return this.ItemId.CompareTo(rhs.ItemId);
            		
            		                 
            	
            	
            	case ItemInRepositoryColumn.PriceUnitId:
            		return this.PriceUnitId.Value.CompareTo(rhs.PriceUnitId.Value);
            		
            		                 
            	
            	
            	case ItemInRepositoryColumn.ExchangeRate:
            		return this.ExchangeRate.Value.CompareTo(rhs.ExchangeRate.Value);
            		
            		                 
            	
            	
            	case ItemInRepositoryColumn.TotalQuantity:
            		return this.TotalQuantity.Value.CompareTo(rhs.TotalQuantity.Value);
            		
            		                 
            	
            	
            	case ItemInRepositoryColumn.AvailabelQuantity:
            		return this.AvailabelQuantity.Value.CompareTo(rhs.AvailabelQuantity.Value);
            		
            		                 
            	
            	
            	case ItemInRepositoryColumn.ReserveQuantity:
            		return this.ReserveQuantity.Value.CompareTo(rhs.ReserveQuantity.Value);
            		
            		                 
            	
            	
            	case ItemInRepositoryColumn.ReturnQuantity:
            		return this.ReturnQuantity.Value.CompareTo(rhs.ReturnQuantity.Value);
            		
            		                 
            	
            	
            	case ItemInRepositoryColumn.AdjustQuantity:
            		return this.AdjustQuantity.Value.CompareTo(rhs.AdjustQuantity.Value);
            		
            		                 
            	
            	
            	case ItemInRepositoryColumn.IsActive:
            		return this.IsActive.Value.CompareTo(rhs.IsActive.Value);
            		
            		                 
            	
            	
            	case ItemInRepositoryColumn.IsDeletable:
            		return this.IsDeletable.Value.CompareTo(rhs.IsDeletable.Value);
            		
            		                 
            	
            	
            	case ItemInRepositoryColumn.Status:
            		return this.Status.Value.CompareTo(rhs.Status.Value);
            		
            		                 
            	
            	
            	case ItemInRepositoryColumn.Priority:
            		return this.Priority.Value.CompareTo(rhs.Priority.Value);
            		
            		                 
            	
            	
            	case ItemInRepositoryColumn.BaseUnitId:
            		return this.BaseUnitId.Value.CompareTo(rhs.BaseUnitId.Value);
            		
            		                 
            	
            	
            	case ItemInRepositoryColumn.CreationDate:
            		return this.CreationDate.Value.CompareTo(rhs.CreationDate.Value);
            		
            		                 
            	
            	
            	case ItemInRepositoryColumn.CreationUserId:
            		return this.CreationUserId.Value.CompareTo(rhs.CreationUserId.Value);
            		
            		                 
            	
            	
            	case ItemInRepositoryColumn.LastModificationDate:
            		return this.LastModificationDate.Value.CompareTo(rhs.LastModificationDate.Value);
            		
            		                 
            	
            	
            	case ItemInRepositoryColumn.LastModificationUserId:
            		return this.LastModificationUserId.Value.CompareTo(rhs.LastModificationUserId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ItemInRepositoryKey> Members
		
		// member variable for the EntityId property
		private ItemInRepositoryKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public ItemInRepositoryKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ItemInRepositoryKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = @"ItemInRepository" 
					+ this.RepositoryId.ToString()
					+ this.ItemId.ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{19}{18}- RepositoryId: {0}{18}- ItemId: {1}{18}- PriceUnitId: {2}{18}- ExchangeRate: {3}{18}- TotalQuantity: {4}{18}- AvailabelQuantity: {5}{18}- ReserveQuantity: {6}{18}- ReturnQuantity: {7}{18}- AdjustQuantity: {8}{18}- IsActive: {9}{18}- IsDeletable: {10}{18}- Status: {11}{18}- Priority: {12}{18}- BaseUnitId: {13}{18}- CreationDate: {14}{18}- CreationUserId: {15}{18}- LastModificationDate: {16}{18}- LastModificationUserId: {17}{18}", 
				this.RepositoryId,
				this.ItemId,
				(this.PriceUnitId == null) ? string.Empty : this.PriceUnitId.ToString(),
				(this.ExchangeRate == null) ? string.Empty : this.ExchangeRate.ToString(),
				(this.TotalQuantity == null) ? string.Empty : this.TotalQuantity.ToString(),
				(this.AvailabelQuantity == null) ? string.Empty : this.AvailabelQuantity.ToString(),
				(this.ReserveQuantity == null) ? string.Empty : this.ReserveQuantity.ToString(),
				(this.ReturnQuantity == null) ? string.Empty : this.ReturnQuantity.ToString(),
				(this.AdjustQuantity == null) ? string.Empty : this.AdjustQuantity.ToString(),
				(this.IsActive == null) ? string.Empty : this.IsActive.ToString(),
				(this.IsDeletable == null) ? string.Empty : this.IsDeletable.ToString(),
				(this.Status == null) ? string.Empty : this.Status.ToString(),
				(this.Priority == null) ? string.Empty : this.Priority.ToString(),
				(this.BaseUnitId == null) ? string.Empty : this.BaseUnitId.ToString(),
				(this.CreationDate == null) ? string.Empty : this.CreationDate.ToString(),
				(this.CreationUserId == null) ? string.Empty : this.CreationUserId.ToString(),
				(this.LastModificationDate == null) ? string.Empty : this.LastModificationDate.ToString(),
				(this.LastModificationUserId == null) ? string.Empty : this.LastModificationUserId.ToString(),
				Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ItemInRepository' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal class ItemInRepositoryEntityData : ICloneable
	{
		#region Variable Declarations
		
		#region Primary key(s)
			/// <summary>			
			/// RepositoryId : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "ItemInRepository"</remarks>
			public System.Int32 RepositoryId;
				
			/// <summary>
			/// keep a copy of the original so it can be used for editable primary keys.
			/// </summary>
			public System.Int32 OriginalRepositoryId;
			
			/// <summary>			
			/// ItemId : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "ItemInRepository"</remarks>
			public System.Int64 ItemId;
				
			/// <summary>
			/// keep a copy of the original so it can be used for editable primary keys.
			/// </summary>
			public System.Int64 OriginalItemId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// PriceUnitId : 
		/// </summary>
		public System.Int32?		  PriceUnitId = (int)0;
		
		/// <summary>
		/// ExchangeRate : 
		/// </summary>
		public System.Int32?		  ExchangeRate = (int)0;
		
		/// <summary>
		/// TotalQuantity : 
		/// </summary>
		public System.Int64?		  TotalQuantity = (long)0;
		
		/// <summary>
		/// AvailabelQuantity : 
		/// </summary>
		public System.Int64?		  AvailabelQuantity = (long)0;
		
		/// <summary>
		/// ReserveQuantity : 
		/// </summary>
		public System.Int64?		  ReserveQuantity = (long)0;
		
		/// <summary>
		/// ReturnQuantity : 
		/// </summary>
		public System.Int64?		  ReturnQuantity = (long)0;
		
		/// <summary>
		/// AdjustQuantity : the total number of adjust of this item in this repository
		/// </summary>
		public System.Int64?		  AdjustQuantity = (long)0;
		
		/// <summary>
		/// IsActive : 
		/// </summary>
		public System.Boolean?		  IsActive = false;
		
		/// <summary>
		/// IsDeletable : 
		/// </summary>
		public System.Boolean?		  IsDeletable = false;
		
		/// <summary>
		/// Status : the same as item.status
		/// </summary>
		public System.Int32?		  Status = (int)0;
		
		/// <summary>
		/// Priority : 
		/// </summary>
		public System.Int32?		  Priority = (int)0;
		
		/// <summary>
		/// BaseUnitId : 
		/// </summary>
		public System.Int32?		  BaseUnitId = (int)0;
		
		/// <summary>
		/// CreationDate : 
		/// </summary>
		public System.DateTime?		  CreationDate = DateTime.MinValue;
		
		/// <summary>
		/// CreationUserId : 
		/// </summary>
		public System.Int32?		  CreationUserId = (int)0;
		
		/// <summary>
		/// LastModificationDate : 
		/// </summary>
		public System.DateTime?		  LastModificationDate = DateTime.MinValue;
		
		/// <summary>
		/// LastModificationUserId : 
		/// </summary>
		public System.Int32?		  LastModificationUserId = (int)0;
		#endregion
			
		#endregion Variable Declarations
		
		#region Clone
		public Object Clone()
		{
			ItemInRepositoryEntityData _tmp = new ItemInRepositoryEntityData();
						
			_tmp.RepositoryId = this.RepositoryId;
			_tmp.OriginalRepositoryId = this.OriginalRepositoryId;
			_tmp.ItemId = this.ItemId;
			_tmp.OriginalItemId = this.OriginalItemId;
			
			_tmp.PriceUnitId = this.PriceUnitId;
			_tmp.ExchangeRate = this.ExchangeRate;
			_tmp.TotalQuantity = this.TotalQuantity;
			_tmp.AvailabelQuantity = this.AvailabelQuantity;
			_tmp.ReserveQuantity = this.ReserveQuantity;
			_tmp.ReturnQuantity = this.ReturnQuantity;
			_tmp.AdjustQuantity = this.AdjustQuantity;
			_tmp.IsActive = this.IsActive;
			_tmp.IsDeletable = this.IsDeletable;
			_tmp.Status = this.Status;
			_tmp.Priority = this.Priority;
			_tmp.BaseUnitId = this.BaseUnitId;
			_tmp.CreationDate = this.CreationDate;
			_tmp.CreationUserId = this.CreationUserId;
			_tmp.LastModificationDate = this.LastModificationDate;
			_tmp.LastModificationUserId = this.LastModificationUserId;
			
			return _tmp;
		}
		#endregion 
		
		#region Data Properties

		#endregion Data Properties

	}//End struct


		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
	
	} // End Class
	
	#region ItemInRepositoryComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ItemInRepositoryComparer : System.Collections.Generic.IComparer<ItemInRepository>
	{
		ItemInRepositoryColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ItemInRepositoryComparer"/> class.
        /// </summary>
		public ItemInRepositoryComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ItemInRepositoryComparer(ItemInRepositoryColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="ItemInRepository"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="ItemInRepository"/> to compare.</param>
        /// <param name="b">The second <c>ItemInRepository</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(ItemInRepository a, ItemInRepository b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(ItemInRepository entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(ItemInRepository a, ItemInRepository b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ItemInRepositoryColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ItemInRepositoryKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="ItemInRepository"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ItemInRepositoryKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ItemInRepositoryKey class.
		/// </summary>
		public ItemInRepositoryKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ItemInRepositoryKey class.
		/// </summary>
		public ItemInRepositoryKey(ItemInRepositoryBase entity)
		{
			Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.repositoryId = entity.RepositoryId;
				this.itemId = entity.ItemId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ItemInRepositoryKey class.
		/// </summary>
		public ItemInRepositoryKey(System.Int32 repositoryId, System.Int64 itemId)
		{
			#region Init Properties

			this.repositoryId = repositoryId;
			this.itemId = itemId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ItemInRepositoryBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ItemInRepositoryBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the RepositoryId property
		private System.Int32 repositoryId;
		
		/// <summary>
		/// Gets or sets the RepositoryId property.
		/// </summary>
		public System.Int32 RepositoryId
		{
			get { return repositoryId; }
			set
			{
				if ( Entity != null )
				{
					Entity.RepositoryId = value;
				}
				
				repositoryId = value;
			}
		}
		
		// member variable for the ItemId property
		private System.Int64 itemId;
		
		/// <summary>
		/// Gets or sets the ItemId property.
		/// </summary>
		public System.Int64 ItemId
		{
			get { return itemId; }
			set
			{
				if ( Entity != null )
				{
					Entity.ItemId = value;
				}
				
				itemId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				RepositoryId = ( values["RepositoryId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["RepositoryId"], typeof(System.Int32)) : (int)0;
				ItemId = ( values["ItemId"] != null ) ? (System.Int64) EntityUtil.ChangeType(values["ItemId"], typeof(System.Int64)) : (long)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("RepositoryId", RepositoryId);
			values.Add("ItemId", ItemId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("RepositoryId: {0}{2}ItemId: {1}{2}",
								RepositoryId,
								ItemId,
								Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ItemInRepositoryColumn Enum
	
	/// <summary>
	/// Enumerate the ItemInRepository columns.
	/// </summary>
	[Serializable]
	public enum ItemInRepositoryColumn : int
	{
		/// <summary>
		/// RepositoryId : 
		/// </summary>
		[EnumTextValue("RepositoryId")]
		[ColumnEnum("RepositoryId", typeof(System.Int32), System.Data.DbType.Int32, true, false, false)]
		RepositoryId = 1,
		/// <summary>
		/// ItemId : 
		/// </summary>
		[EnumTextValue("ItemId")]
		[ColumnEnum("ItemId", typeof(System.Int64), System.Data.DbType.Int64, true, false, false)]
		ItemId = 2,
		/// <summary>
		/// PriceUnitId : 
		/// </summary>
		[EnumTextValue("PriceUnitId")]
		[ColumnEnum("PriceUnitId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		PriceUnitId = 3,
		/// <summary>
		/// ExchangeRate : 
		/// </summary>
		[EnumTextValue("ExchangeRate")]
		[ColumnEnum("ExchangeRate", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ExchangeRate = 4,
		/// <summary>
		/// TotalQuantity : 
		/// </summary>
		[EnumTextValue("TotalQuantity")]
		[ColumnEnum("TotalQuantity", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		TotalQuantity = 5,
		/// <summary>
		/// AvailabelQuantity : 
		/// </summary>
		[EnumTextValue("AvailabelQuantity")]
		[ColumnEnum("AvailabelQuantity", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		AvailabelQuantity = 6,
		/// <summary>
		/// ReserveQuantity : 
		/// </summary>
		[EnumTextValue("ReserveQuantity")]
		[ColumnEnum("ReserveQuantity", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		ReserveQuantity = 7,
		/// <summary>
		/// ReturnQuantity : 
		/// </summary>
		[EnumTextValue("ReturnQuantity")]
		[ColumnEnum("ReturnQuantity", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		ReturnQuantity = 8,
		/// <summary>
		/// AdjustQuantity : the total number of adjust of this item in this repository
		/// </summary>
		[EnumTextValue("AdjustQuantity")]
		[ColumnEnum("AdjustQuantity", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		AdjustQuantity = 9,
		/// <summary>
		/// IsActive : 
		/// </summary>
		[EnumTextValue("IsActive")]
		[ColumnEnum("IsActive", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsActive = 10,
		/// <summary>
		/// IsDeletable : 
		/// </summary>
		[EnumTextValue("IsDeletable")]
		[ColumnEnum("IsDeletable", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsDeletable = 11,
		/// <summary>
		/// Status : the same as item.status
		/// </summary>
		[EnumTextValue("Status")]
		[ColumnEnum("Status", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Status = 12,
		/// <summary>
		/// Priority : 
		/// </summary>
		[EnumTextValue("Priority")]
		[ColumnEnum("Priority", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Priority = 13,
		/// <summary>
		/// BaseUnitId : 
		/// </summary>
		[EnumTextValue("BaseUnitId")]
		[ColumnEnum("BaseUnitId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		BaseUnitId = 14,
		/// <summary>
		/// CreationDate : 
		/// </summary>
		[EnumTextValue("CreationDate")]
		[ColumnEnum("CreationDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CreationDate = 15,
		/// <summary>
		/// CreationUserId : 
		/// </summary>
		[EnumTextValue("CreationUserId")]
		[ColumnEnum("CreationUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CreationUserId = 16,
		/// <summary>
		/// LastModificationDate : 
		/// </summary>
		[EnumTextValue("LastModificationDate")]
		[ColumnEnum("LastModificationDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastModificationDate = 17,
		/// <summary>
		/// LastModificationUserId : 
		/// </summary>
		[EnumTextValue("LastModificationUserId")]
		[ColumnEnum("LastModificationUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		LastModificationUserId = 18
	}//End enum

	#endregion ItemInRepositoryColumn Enum

} // end namespace
