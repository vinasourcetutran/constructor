	
/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : Thursday, December 23, 2010
	Important: Do not modify this file. Edit the file Comment.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace RLM.Construction.Entities
{
	#region CommentEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Comment"/> object.
	/// </remarks>
	public class CommentEventArgs : System.EventArgs
	{
		private CommentColumn column;
		private object value;
		
		
		///<summary>
		/// Initalizes a new Instance of the CommentEventArgs class.
		///</summary>
		public CommentEventArgs(CommentColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the CommentEventArgs class.
		///</summary>
		public CommentEventArgs(CommentColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		
		///<summary>
		/// The CommentColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="CommentColumn" />
		public CommentColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	
	///<summary>
	/// Define a delegate for all Comment related events.
	///</summary>
	public delegate void CommentEventHandler(object sender, CommentEventArgs e);
	
	///<summary>
	/// An object representation of the 'Comment' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	//[ToolboxItem(typeof(Comment))]
	public abstract partial class CommentBase : EntityBase, IEntityId<CommentKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		/// 	Old the inner data of the entity.
		/// </summary>
		private CommentEntityData entityData;
		
		// <summary>
		// 	Old the original data of the entity.
		// </summary>
		//CommentEntityData originalData;
		
		/// <summary>
		/// 	Old a backup of the inner data of the entity.
		/// </summary>
		private CommentEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		[NonSerialized]
		private TList<Comment> parentCollection;
		private bool inTxn = false;

		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event CommentEventHandler ColumnChanging;
		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event CommentEventHandler ColumnChanged;		
		#endregion "Variable Declarations"
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="CommentBase"/> instance.
		///</summary>
		public CommentBase()
		{
			this.entityData = new CommentEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="CommentBase"/> instance.
		///</summary>
		///<param name="commentContent"></param>
		///<param name="commentResourceType">Task, ....</param>
		///<param name="commentResourceId"></param>
		///<param name="commentCreationDate"></param>
		///<param name="commentCreationUserId"></param>
		public CommentBase(System.String commentContent, System.Int32 commentResourceType, System.Int32 commentResourceId, 
			System.DateTime commentCreationDate, System.Int32 commentCreationUserId)
		{
			this.entityData = new CommentEntityData();
			this.backupData = null;

			this.Content = commentContent;
			this.ResourceType = commentResourceType;
			this.ResourceId = commentResourceId;
			this.CreationDate = commentCreationDate;
			this.CreationUserId = commentCreationUserId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Comment"/> instance.
		///</summary>
		///<param name="commentContent"></param>
		///<param name="commentResourceType">Task, ....</param>
		///<param name="commentResourceId"></param>
		///<param name="commentCreationDate"></param>
		///<param name="commentCreationUserId"></param>
		public static Comment CreateComment(System.String commentContent, System.Int32 commentResourceType, System.Int32 commentResourceId, 
			System.DateTime commentCreationDate, System.Int32 commentCreationUserId)
		{
			Comment newComment = new Comment();
			newComment.Content = commentContent;
			newComment.ResourceType = commentResourceType;
			newComment.ResourceId = commentResourceId;
			newComment.CreationDate = commentCreationDate;
			newComment.CreationUserId = commentCreationUserId;
			return newComment;
		}
				
		#endregion Constructors
		
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CommentColumn"/> which has raised the event.</param>
		public void OnColumnChanging(CommentColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CommentColumn"/> which has raised the event.</param>
		public void OnColumnChanged(CommentColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CommentColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(CommentColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added)
				EntityManager.StopTracking(EntityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				CommentEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new CommentEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CommentColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(CommentColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				CommentEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new CommentEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
				
		#region Properties	
				
		/// <summary>
		/// 	Gets or sets the CommentId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 CommentId
		{
			get
			{
				return this.entityData.CommentId; 
			}
			
			set
			{
				if (this.entityData.CommentId == value)
					return;
					
					
				OnColumnChanging(CommentColumn.CommentId, this.entityData.CommentId);
				this.entityData.CommentId = value;
				this.EntityId.CommentId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(CommentColumn.CommentId, this.entityData.CommentId);
				OnPropertyChanged("CommentId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Content property. 
		///		
		/// </summary>
		/// <value>This type is ntext.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.String Content
		{
			get
			{
				return this.entityData.Content; 
			}
			
			set
			{
				if (this.entityData.Content == value)
					return;
					
					
				OnColumnChanging(CommentColumn.Content, this.entityData.Content);
				this.entityData.Content = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(CommentColumn.Content, this.entityData.Content);
				OnPropertyChanged("Content");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ResourceType property. 
		///		Task, ....
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute("Task, ...."), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 ResourceType
		{
			get
			{
				return this.entityData.ResourceType; 
			}
			
			set
			{
				if (this.entityData.ResourceType == value)
					return;
					
					
				OnColumnChanging(CommentColumn.ResourceType, this.entityData.ResourceType);
				this.entityData.ResourceType = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(CommentColumn.ResourceType, this.entityData.ResourceType);
				OnPropertyChanged("ResourceType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ResourceId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 ResourceId
		{
			get
			{
				return this.entityData.ResourceId; 
			}
			
			set
			{
				if (this.entityData.ResourceId == value)
					return;
					
					
				OnColumnChanging(CommentColumn.ResourceId, this.entityData.ResourceId);
				this.entityData.ResourceId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(CommentColumn.ResourceId, this.entityData.ResourceId);
				OnPropertyChanged("ResourceId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreationDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime CreationDate
		{
			get
			{
				return this.entityData.CreationDate; 
			}
			
			set
			{
				if (this.entityData.CreationDate == value)
					return;
					
					
				OnColumnChanging(CommentColumn.CreationDate, this.entityData.CreationDate);
				this.entityData.CreationDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(CommentColumn.CreationDate, this.entityData.CreationDate);
				OnPropertyChanged("CreationDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreationUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 CreationUserId
		{
			get
			{
				return this.entityData.CreationUserId; 
			}
			
			set
			{
				if (this.entityData.CreationUserId == value)
					return;
					
					
				OnColumnChanging(CommentColumn.CreationUserId, this.entityData.CreationUserId);
				this.entityData.CreationUserId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(CommentColumn.CreationUserId, this.entityData.CreationUserId);
				OnPropertyChanged("CreationUserId");
			}
		}
		

		#region Source Foreign Key Property
				
		#endregion
			
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Comment"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"CommentId", "Content", "ResourceType", "ResourceId", "CreationDate", "CreationUserId"};
			}
		}
		#endregion 
		
		
		#endregion
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as CommentEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Comment) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return (object)this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Comment>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Comment);
	        }
	    }


		#endregion
		
		#region Methods	
			
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();
		}	
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Comment Entity 
		///</summary>
		public virtual Comment Copy()
		{
			//shallow copy entity
			Comment copy = new Comment();
			copy.CommentId = this.CommentId;
			copy.Content = this.Content;
			copy.ResourceType = this.ResourceType;
			copy.ResourceId = this.ResourceId;
			copy.CreationDate = this.CreationDate;
			copy.CreationUserId = this.CreationUserId;
					
			copy.AcceptChanges();
			return (Comment)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed Comment Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Comment DeepCopy()
		{
			return EntityHelper.Clone<Comment>(this as Comment);	
		}
		#endregion
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="CommentBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(CommentBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="CommentBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="CommentBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="CommentBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(CommentBase Object1, CommentBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.CommentId != Object2.CommentId)
				equal = false;
			if (Object1.Content != Object2.Content)
				equal = false;
			if (Object1.ResourceType != Object2.ResourceType)
				equal = false;
			if (Object1.ResourceId != Object2.ResourceId)
				equal = false;
			if (Object1.CreationDate != Object2.CreationDate)
				equal = false;
			if (Object1.CreationUserId != Object2.CreationUserId)
				equal = false;
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			// TODO -> generate a strongly typed IComparer in the concrete class
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name) .CompareTo(((CommentBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name));
		}
		
		/*
		// static method to get a Comparer object
        public static CommentComparer GetComparer()
        {
            return new CommentComparer();
        }
        */

        // Comparer delegates back to Comment
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Comment rhs, CommentColumn which)
        {
            switch (which)
            {
            	
            	
            	case CommentColumn.CommentId:
            		return this.CommentId.CompareTo(rhs.CommentId);
            		
            		                 
            	
            	
            	case CommentColumn.Content:
            		return this.Content.CompareTo(rhs.Content);
            		
            		                 
            	
            	
            	case CommentColumn.ResourceType:
            		return this.ResourceType.CompareTo(rhs.ResourceType);
            		
            		                 
            	
            	
            	case CommentColumn.ResourceId:
            		return this.ResourceId.CompareTo(rhs.ResourceId);
            		
            		                 
            	
            	
            	case CommentColumn.CreationDate:
            		return this.CreationDate.CompareTo(rhs.CreationDate);
            		
            		                 
            	
            	
            	case CommentColumn.CreationUserId:
            		return this.CreationUserId.CompareTo(rhs.CreationUserId);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<CommentKey> Members
		
		// member variable for the EntityId property
		private CommentKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public CommentKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new CommentKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = @"Comment" 
					+ this.CommentId.ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{7}{6}- CommentId: {0}{6}- Content: {1}{6}- ResourceType: {2}{6}- ResourceId: {3}{6}- CreationDate: {4}{6}- CreationUserId: {5}{6}", 
				this.CommentId,
				this.Content,
				this.ResourceType,
				this.ResourceId,
				this.CreationDate,
				this.CreationUserId,
				Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Comment' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal class CommentEntityData : ICloneable
	{
		#region Variable Declarations
		
		#region Primary key(s)
			/// <summary>			
			/// CommentId : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "Comment"</remarks>
			public System.Int32 CommentId;
				
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// Content : 
		/// </summary>
		public System.String		  Content = string.Empty;
		
		/// <summary>
		/// ResourceType : Task, ....
		/// </summary>
		public System.Int32		  ResourceType = (int)0;
		
		/// <summary>
		/// ResourceId : 
		/// </summary>
		public System.Int32		  ResourceId = (int)0;
		
		/// <summary>
		/// CreationDate : 
		/// </summary>
		public System.DateTime		  CreationDate = DateTime.MinValue;
		
		/// <summary>
		/// CreationUserId : 
		/// </summary>
		public System.Int32		  CreationUserId = (int)0;
		#endregion
			
		#endregion Variable Declarations
		
		#region Clone
		public Object Clone()
		{
			CommentEntityData _tmp = new CommentEntityData();
						
			_tmp.CommentId = this.CommentId;
			
			_tmp.Content = this.Content;
			_tmp.ResourceType = this.ResourceType;
			_tmp.ResourceId = this.ResourceId;
			_tmp.CreationDate = this.CreationDate;
			_tmp.CreationUserId = this.CreationUserId;
			
			return _tmp;
		}
		#endregion 
		
		#region Data Properties

		#endregion Data Properties

	}//End struct


		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"Content");
		}
   		#endregion
	
	} // End Class
	
	#region CommentComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class CommentComparer : System.Collections.Generic.IComparer<Comment>
	{
		CommentColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:CommentComparer"/> class.
        /// </summary>
		public CommentComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public CommentComparer(CommentColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="Comment"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="Comment"/> to compare.</param>
        /// <param name="b">The second <c>Comment</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Comment a, Comment b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Comment entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Comment a, Comment b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public CommentColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region CommentKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Comment"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class CommentKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the CommentKey class.
		/// </summary>
		public CommentKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the CommentKey class.
		/// </summary>
		public CommentKey(CommentBase entity)
		{
			Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.commentId = entity.CommentId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the CommentKey class.
		/// </summary>
		public CommentKey(System.Int32 commentId)
		{
			#region Init Properties

			this.commentId = commentId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private CommentBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public CommentBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the CommentId property
		private System.Int32 commentId;
		
		/// <summary>
		/// Gets or sets the CommentId property.
		/// </summary>
		public System.Int32 CommentId
		{
			get { return commentId; }
			set
			{
				if ( Entity != null )
				{
					Entity.CommentId = value;
				}
				
				commentId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				CommentId = ( values["CommentId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["CommentId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("CommentId", CommentId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("CommentId: {0}{1}",
								CommentId,
								Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region CommentColumn Enum
	
	/// <summary>
	/// Enumerate the Comment columns.
	/// </summary>
	[Serializable]
	public enum CommentColumn : int
	{
		/// <summary>
		/// CommentId : 
		/// </summary>
		[EnumTextValue("CommentId")]
		[ColumnEnum("CommentId", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		CommentId = 1,
		/// <summary>
		/// Content : 
		/// </summary>
		[EnumTextValue("Content")]
		[ColumnEnum("Content", typeof(System.String), System.Data.DbType.String, false, false, false)]
		Content = 2,
		/// <summary>
		/// ResourceType : Task, ....
		/// </summary>
		[EnumTextValue("ResourceType")]
		[ColumnEnum("ResourceType", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ResourceType = 3,
		/// <summary>
		/// ResourceId : 
		/// </summary>
		[EnumTextValue("ResourceId")]
		[ColumnEnum("ResourceId", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ResourceId = 4,
		/// <summary>
		/// CreationDate : 
		/// </summary>
		[EnumTextValue("CreationDate")]
		[ColumnEnum("CreationDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		CreationDate = 5,
		/// <summary>
		/// CreationUserId : 
		/// </summary>
		[EnumTextValue("CreationUserId")]
		[ColumnEnum("CreationUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		CreationUserId = 6
	}//End enum

	#endregion CommentColumn Enum

} // end namespace
