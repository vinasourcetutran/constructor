	
/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : Tuesday, May 03, 2011
	Important: Do not modify this file. Edit the file Contactor.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace RLM.Construction.Entities
{
	#region ContactorEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Contactor"/> object.
	/// </remarks>
	public class ContactorEventArgs : System.EventArgs
	{
		private ContactorColumn column;
		private object value;
		
		
		///<summary>
		/// Initalizes a new Instance of the ContactorEventArgs class.
		///</summary>
		public ContactorEventArgs(ContactorColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ContactorEventArgs class.
		///</summary>
		public ContactorEventArgs(ContactorColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		
		///<summary>
		/// The ContactorColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ContactorColumn" />
		public ContactorColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	
	///<summary>
	/// Define a delegate for all Contactor related events.
	///</summary>
	public delegate void ContactorEventHandler(object sender, ContactorEventArgs e);
	
	///<summary>
	/// An object representation of the 'Contactor' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	//[ToolboxItem(typeof(Contactor))]
	public abstract partial class ContactorBase : EntityBase, IEntityId<ContactorKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		/// 	Old the inner data of the entity.
		/// </summary>
		private ContactorEntityData entityData;
		
		// <summary>
		// 	Old the original data of the entity.
		// </summary>
		//ContactorEntityData originalData;
		
		/// <summary>
		/// 	Old a backup of the inner data of the entity.
		/// </summary>
		private ContactorEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		[NonSerialized]
		private TList<Contactor> parentCollection;
		private bool inTxn = false;

		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event ContactorEventHandler ColumnChanging;
		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ContactorEventHandler ColumnChanged;		
		#endregion "Variable Declarations"
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ContactorBase"/> instance.
		///</summary>
		public ContactorBase()
		{
			this.entityData = new ContactorEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ContactorBase"/> instance.
		///</summary>
		///<param name="contactorPartnerId">Id of department, company that this contactor is being belong to</param>
		///<param name="contactorGroupId">group to classify contactor</param>
		///<param name="contactorCode"></param>
		///<param name="contactorName"></param>
		///<param name="contactorJobTitle">Job title of contactor in their company</param>
		///<param name="contactorEmail"></param>
		///<param name="contactorMobile"></param>
		///<param name="contactorPhone"></param>
		///<param name="contactorExt"></param>
		///<param name="contactorIsActive"></param>
		///<param name="contactorPriority"></param>
		///<param name="contactorComment"></param>
		///<param name="contactorCreationDate"></param>
		///<param name="contactorCreationUserId"></param>
		///<param name="contactorLastModificationDate"></param>
		///<param name="contactorLastModificationUserId"></param>
		public ContactorBase(System.Int32? contactorPartnerId, System.Int32? contactorGroupId, System.String contactorCode, 
			System.String contactorName, System.String contactorJobTitle, System.String contactorEmail, System.String contactorMobile, 
			System.String contactorPhone, System.String contactorExt, System.Boolean? contactorIsActive, System.Int32? contactorPriority, 
			System.String contactorComment, System.DateTime? contactorCreationDate, System.Int32? contactorCreationUserId, System.DateTime? contactorLastModificationDate, 
			System.Int32? contactorLastModificationUserId)
		{
			this.entityData = new ContactorEntityData();
			this.backupData = null;

			this.PartnerId = contactorPartnerId;
			this.GroupId = contactorGroupId;
			this.Code = contactorCode;
			this.Name = contactorName;
			this.JobTitle = contactorJobTitle;
			this.Email = contactorEmail;
			this.Mobile = contactorMobile;
			this.Phone = contactorPhone;
			this.Ext = contactorExt;
			this.IsActive = contactorIsActive;
			this.Priority = contactorPriority;
			this.Comment = contactorComment;
			this.CreationDate = contactorCreationDate;
			this.CreationUserId = contactorCreationUserId;
			this.LastModificationDate = contactorLastModificationDate;
			this.LastModificationUserId = contactorLastModificationUserId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Contactor"/> instance.
		///</summary>
		///<param name="contactorPartnerId">Id of department, company that this contactor is being belong to</param>
		///<param name="contactorGroupId">group to classify contactor</param>
		///<param name="contactorCode"></param>
		///<param name="contactorName"></param>
		///<param name="contactorJobTitle">Job title of contactor in their company</param>
		///<param name="contactorEmail"></param>
		///<param name="contactorMobile"></param>
		///<param name="contactorPhone"></param>
		///<param name="contactorExt"></param>
		///<param name="contactorIsActive"></param>
		///<param name="contactorPriority"></param>
		///<param name="contactorComment"></param>
		///<param name="contactorCreationDate"></param>
		///<param name="contactorCreationUserId"></param>
		///<param name="contactorLastModificationDate"></param>
		///<param name="contactorLastModificationUserId"></param>
		public static Contactor CreateContactor(System.Int32? contactorPartnerId, System.Int32? contactorGroupId, System.String contactorCode, 
			System.String contactorName, System.String contactorJobTitle, System.String contactorEmail, System.String contactorMobile, 
			System.String contactorPhone, System.String contactorExt, System.Boolean? contactorIsActive, System.Int32? contactorPriority, 
			System.String contactorComment, System.DateTime? contactorCreationDate, System.Int32? contactorCreationUserId, System.DateTime? contactorLastModificationDate, 
			System.Int32? contactorLastModificationUserId)
		{
			Contactor newContactor = new Contactor();
			newContactor.PartnerId = contactorPartnerId;
			newContactor.GroupId = contactorGroupId;
			newContactor.Code = contactorCode;
			newContactor.Name = contactorName;
			newContactor.JobTitle = contactorJobTitle;
			newContactor.Email = contactorEmail;
			newContactor.Mobile = contactorMobile;
			newContactor.Phone = contactorPhone;
			newContactor.Ext = contactorExt;
			newContactor.IsActive = contactorIsActive;
			newContactor.Priority = contactorPriority;
			newContactor.Comment = contactorComment;
			newContactor.CreationDate = contactorCreationDate;
			newContactor.CreationUserId = contactorCreationUserId;
			newContactor.LastModificationDate = contactorLastModificationDate;
			newContactor.LastModificationUserId = contactorLastModificationUserId;
			return newContactor;
		}
				
		#endregion Constructors
		
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ContactorColumn"/> which has raised the event.</param>
		public void OnColumnChanging(ContactorColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ContactorColumn"/> which has raised the event.</param>
		public void OnColumnChanged(ContactorColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ContactorColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(ContactorColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added)
				EntityManager.StopTracking(EntityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				ContactorEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ContactorEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ContactorColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(ContactorColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ContactorEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ContactorEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
				
		#region Properties	
				
		/// <summary>
		/// 	Gets or sets the ContactorId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 ContactorId
		{
			get
			{
				return this.entityData.ContactorId; 
			}
			
			set
			{
				if (this.entityData.ContactorId == value)
					return;
					
					
				OnColumnChanging(ContactorColumn.ContactorId, this.entityData.ContactorId);
				this.entityData.ContactorId = value;
				this.EntityId.ContactorId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContactorColumn.ContactorId, this.entityData.ContactorId);
				OnPropertyChanged("ContactorId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PartnerId property. 
		///		Id of department, company that this contactor is being belong to
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsPartnerIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("Id of department, company that this contactor is being belong to"), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? PartnerId
		{
			get
			{
				return this.entityData.PartnerId; 
			}
			
			set
			{
				if (this.entityData.PartnerId == value)
					return;
					
					
				OnColumnChanging(ContactorColumn.PartnerId, this.entityData.PartnerId);
				this.entityData.PartnerId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContactorColumn.PartnerId, this.entityData.PartnerId);
				OnPropertyChanged("PartnerId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GroupId property. 
		///		group to classify contactor
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsGroupIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("group to classify contactor"), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? GroupId
		{
			get
			{
				return this.entityData.GroupId; 
			}
			
			set
			{
				if (this.entityData.GroupId == value)
					return;
					
					
				OnColumnChanging(ContactorColumn.GroupId, this.entityData.GroupId);
				this.entityData.GroupId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContactorColumn.GroupId, this.entityData.GroupId);
				OnPropertyChanged("GroupId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Code property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Code
		{
			get
			{
				return this.entityData.Code; 
			}
			
			set
			{
				if (this.entityData.Code == value)
					return;
					
					
				OnColumnChanging(ContactorColumn.Code, this.entityData.Code);
				this.entityData.Code = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContactorColumn.Code, this.entityData.Code);
				OnPropertyChanged("Code");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Name property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String Name
		{
			get
			{
				return this.entityData.Name; 
			}
			
			set
			{
				if (this.entityData.Name == value)
					return;
					
					
				OnColumnChanging(ContactorColumn.Name, this.entityData.Name);
				this.entityData.Name = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContactorColumn.Name, this.entityData.Name);
				OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the JobTitle property. 
		///		Job title of contactor in their company
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute("Job title of contactor in their company"), BindableAttribute()]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String JobTitle
		{
			get
			{
				return this.entityData.JobTitle; 
			}
			
			set
			{
				if (this.entityData.JobTitle == value)
					return;
					
					
				OnColumnChanging(ContactorColumn.JobTitle, this.entityData.JobTitle);
				this.entityData.JobTitle = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContactorColumn.JobTitle, this.entityData.JobTitle);
				OnPropertyChanged("JobTitle");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Email property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String Email
		{
			get
			{
				return this.entityData.Email; 
			}
			
			set
			{
				if (this.entityData.Email == value)
					return;
					
					
				OnColumnChanging(ContactorColumn.Email, this.entityData.Email);
				this.entityData.Email = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContactorColumn.Email, this.entityData.Email);
				OnPropertyChanged("Email");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Mobile property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String Mobile
		{
			get
			{
				return this.entityData.Mobile; 
			}
			
			set
			{
				if (this.entityData.Mobile == value)
					return;
					
					
				OnColumnChanging(ContactorColumn.Mobile, this.entityData.Mobile);
				this.entityData.Mobile = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContactorColumn.Mobile, this.entityData.Mobile);
				OnPropertyChanged("Mobile");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Phone property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String Phone
		{
			get
			{
				return this.entityData.Phone; 
			}
			
			set
			{
				if (this.entityData.Phone == value)
					return;
					
					
				OnColumnChanging(ContactorColumn.Phone, this.entityData.Phone);
				this.entityData.Phone = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContactorColumn.Phone, this.entityData.Phone);
				OnPropertyChanged("Phone");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Ext property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 5)]
		public virtual System.String Ext
		{
			get
			{
				return this.entityData.Ext; 
			}
			
			set
			{
				if (this.entityData.Ext == value)
					return;
					
					
				OnColumnChanging(ContactorColumn.Ext, this.entityData.Ext);
				this.entityData.Ext = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContactorColumn.Ext, this.entityData.Ext);
				OnPropertyChanged("Ext");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsActive property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsActiveNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsActive
		{
			get
			{
				return this.entityData.IsActive; 
			}
			
			set
			{
				if (this.entityData.IsActive == value)
					return;
					
					
				OnColumnChanging(ContactorColumn.IsActive, this.entityData.IsActive);
				this.entityData.IsActive = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContactorColumn.IsActive, this.entityData.IsActive);
				OnPropertyChanged("IsActive");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Priority property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsPriorityNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Priority
		{
			get
			{
				return this.entityData.Priority; 
			}
			
			set
			{
				if (this.entityData.Priority == value)
					return;
					
					
				OnColumnChanging(ContactorColumn.Priority, this.entityData.Priority);
				this.entityData.Priority = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContactorColumn.Priority, this.entityData.Priority);
				OnPropertyChanged("Priority");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Comment property. 
		///		
		/// </summary>
		/// <value>This type is ntext.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String Comment
		{
			get
			{
				return this.entityData.Comment; 
			}
			
			set
			{
				if (this.entityData.Comment == value)
					return;
					
					
				OnColumnChanging(ContactorColumn.Comment, this.entityData.Comment);
				this.entityData.Comment = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContactorColumn.Comment, this.entityData.Comment);
				OnPropertyChanged("Comment");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreationDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsCreationDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CreationDate
		{
			get
			{
				return this.entityData.CreationDate; 
			}
			
			set
			{
				if (this.entityData.CreationDate == value)
					return;
					
					
				OnColumnChanging(ContactorColumn.CreationDate, this.entityData.CreationDate);
				this.entityData.CreationDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContactorColumn.CreationDate, this.entityData.CreationDate);
				OnPropertyChanged("CreationDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreationUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCreationUserIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CreationUserId
		{
			get
			{
				return this.entityData.CreationUserId; 
			}
			
			set
			{
				if (this.entityData.CreationUserId == value)
					return;
					
					
				OnColumnChanging(ContactorColumn.CreationUserId, this.entityData.CreationUserId);
				this.entityData.CreationUserId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContactorColumn.CreationUserId, this.entityData.CreationUserId);
				OnPropertyChanged("CreationUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModificationDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastModificationDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastModificationDate
		{
			get
			{
				return this.entityData.LastModificationDate; 
			}
			
			set
			{
				if (this.entityData.LastModificationDate == value)
					return;
					
					
				OnColumnChanging(ContactorColumn.LastModificationDate, this.entityData.LastModificationDate);
				this.entityData.LastModificationDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContactorColumn.LastModificationDate, this.entityData.LastModificationDate);
				OnPropertyChanged("LastModificationDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModificationUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsLastModificationUserIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? LastModificationUserId
		{
			get
			{
				return this.entityData.LastModificationUserId; 
			}
			
			set
			{
				if (this.entityData.LastModificationUserId == value)
					return;
					
					
				OnColumnChanging(ContactorColumn.LastModificationUserId, this.entityData.LastModificationUserId);
				this.entityData.LastModificationUserId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ContactorColumn.LastModificationUserId, this.entityData.LastModificationUserId);
				OnPropertyChanged("LastModificationUserId");
			}
		}
		

		#region Source Foreign Key Property
				
		#endregion
			
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Contactor"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ContactorId", "PartnerId", "GroupId", "Code", "Name", "JobTitle", "Email", "Mobile", "Phone", "Ext", "IsActive", "Priority", "Comment", "CreationDate", "CreationUserId", "LastModificationDate", "LastModificationUserId"};
			}
		}
		#endregion 
		
		
		#endregion
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ContactorEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Contactor) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return (object)this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Contactor>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Contactor);
	        }
	    }


		#endregion
		
		#region Methods	
			
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();
		}	
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Contactor Entity 
		///</summary>
		public virtual Contactor Copy()
		{
			//shallow copy entity
			Contactor copy = new Contactor();
			copy.ContactorId = this.ContactorId;
			copy.PartnerId = this.PartnerId;
			copy.GroupId = this.GroupId;
			copy.Code = this.Code;
			copy.Name = this.Name;
			copy.JobTitle = this.JobTitle;
			copy.Email = this.Email;
			copy.Mobile = this.Mobile;
			copy.Phone = this.Phone;
			copy.Ext = this.Ext;
			copy.IsActive = this.IsActive;
			copy.Priority = this.Priority;
			copy.Comment = this.Comment;
			copy.CreationDate = this.CreationDate;
			copy.CreationUserId = this.CreationUserId;
			copy.LastModificationDate = this.LastModificationDate;
			copy.LastModificationUserId = this.LastModificationUserId;
					
			copy.AcceptChanges();
			return (Contactor)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed Contactor Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Contactor DeepCopy()
		{
			return EntityHelper.Clone<Contactor>(this as Contactor);	
		}
		#endregion
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ContactorBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ContactorBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="ContactorBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="ContactorBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ContactorBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(ContactorBase Object1, ContactorBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.ContactorId != Object2.ContactorId)
				equal = false;
			if ( Object1.PartnerId != null && Object2.PartnerId != null )
			{
				if (Object1.PartnerId != Object2.PartnerId)
					equal = false;
			}
			else if (Object1.PartnerId == null ^ Object2.PartnerId == null )
			{
				equal = false;
			}
			if ( Object1.GroupId != null && Object2.GroupId != null )
			{
				if (Object1.GroupId != Object2.GroupId)
					equal = false;
			}
			else if (Object1.GroupId == null ^ Object2.GroupId == null )
			{
				equal = false;
			}
			if ( Object1.Code != null && Object2.Code != null )
			{
				if (Object1.Code != Object2.Code)
					equal = false;
			}
			else if (Object1.Code == null ^ Object2.Code == null )
			{
				equal = false;
			}
			if ( Object1.Name != null && Object2.Name != null )
			{
				if (Object1.Name != Object2.Name)
					equal = false;
			}
			else if (Object1.Name == null ^ Object2.Name == null )
			{
				equal = false;
			}
			if ( Object1.JobTitle != null && Object2.JobTitle != null )
			{
				if (Object1.JobTitle != Object2.JobTitle)
					equal = false;
			}
			else if (Object1.JobTitle == null ^ Object2.JobTitle == null )
			{
				equal = false;
			}
			if ( Object1.Email != null && Object2.Email != null )
			{
				if (Object1.Email != Object2.Email)
					equal = false;
			}
			else if (Object1.Email == null ^ Object2.Email == null )
			{
				equal = false;
			}
			if ( Object1.Mobile != null && Object2.Mobile != null )
			{
				if (Object1.Mobile != Object2.Mobile)
					equal = false;
			}
			else if (Object1.Mobile == null ^ Object2.Mobile == null )
			{
				equal = false;
			}
			if ( Object1.Phone != null && Object2.Phone != null )
			{
				if (Object1.Phone != Object2.Phone)
					equal = false;
			}
			else if (Object1.Phone == null ^ Object2.Phone == null )
			{
				equal = false;
			}
			if ( Object1.Ext != null && Object2.Ext != null )
			{
				if (Object1.Ext != Object2.Ext)
					equal = false;
			}
			else if (Object1.Ext == null ^ Object2.Ext == null )
			{
				equal = false;
			}
			if ( Object1.IsActive != null && Object2.IsActive != null )
			{
				if (Object1.IsActive != Object2.IsActive)
					equal = false;
			}
			else if (Object1.IsActive == null ^ Object2.IsActive == null )
			{
				equal = false;
			}
			if ( Object1.Priority != null && Object2.Priority != null )
			{
				if (Object1.Priority != Object2.Priority)
					equal = false;
			}
			else if (Object1.Priority == null ^ Object2.Priority == null )
			{
				equal = false;
			}
			if ( Object1.Comment != null && Object2.Comment != null )
			{
				if (Object1.Comment != Object2.Comment)
					equal = false;
			}
			else if (Object1.Comment == null ^ Object2.Comment == null )
			{
				equal = false;
			}
			if ( Object1.CreationDate != null && Object2.CreationDate != null )
			{
				if (Object1.CreationDate != Object2.CreationDate)
					equal = false;
			}
			else if (Object1.CreationDate == null ^ Object2.CreationDate == null )
			{
				equal = false;
			}
			if ( Object1.CreationUserId != null && Object2.CreationUserId != null )
			{
				if (Object1.CreationUserId != Object2.CreationUserId)
					equal = false;
			}
			else if (Object1.CreationUserId == null ^ Object2.CreationUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastModificationDate != null && Object2.LastModificationDate != null )
			{
				if (Object1.LastModificationDate != Object2.LastModificationDate)
					equal = false;
			}
			else if (Object1.LastModificationDate == null ^ Object2.LastModificationDate == null )
			{
				equal = false;
			}
			if ( Object1.LastModificationUserId != null && Object2.LastModificationUserId != null )
			{
				if (Object1.LastModificationUserId != Object2.LastModificationUserId)
					equal = false;
			}
			else if (Object1.LastModificationUserId == null ^ Object2.LastModificationUserId == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			// TODO -> generate a strongly typed IComparer in the concrete class
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name) .CompareTo(((ContactorBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name));
		}
		
		/*
		// static method to get a Comparer object
        public static ContactorComparer GetComparer()
        {
            return new ContactorComparer();
        }
        */

        // Comparer delegates back to Contactor
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Contactor rhs, ContactorColumn which)
        {
            switch (which)
            {
            	
            	
            	case ContactorColumn.ContactorId:
            		return this.ContactorId.CompareTo(rhs.ContactorId);
            		
            		                 
            	
            	
            	case ContactorColumn.PartnerId:
            		return this.PartnerId.Value.CompareTo(rhs.PartnerId.Value);
            		
            		                 
            	
            	
            	case ContactorColumn.GroupId:
            		return this.GroupId.Value.CompareTo(rhs.GroupId.Value);
            		
            		                 
            	
            	
            	case ContactorColumn.Code:
            		return this.Code.CompareTo(rhs.Code);
            		
            		                 
            	
            	
            	case ContactorColumn.Name:
            		return this.Name.CompareTo(rhs.Name);
            		
            		                 
            	
            	
            	case ContactorColumn.JobTitle:
            		return this.JobTitle.CompareTo(rhs.JobTitle);
            		
            		                 
            	
            	
            	case ContactorColumn.Email:
            		return this.Email.CompareTo(rhs.Email);
            		
            		                 
            	
            	
            	case ContactorColumn.Mobile:
            		return this.Mobile.CompareTo(rhs.Mobile);
            		
            		                 
            	
            	
            	case ContactorColumn.Phone:
            		return this.Phone.CompareTo(rhs.Phone);
            		
            		                 
            	
            	
            	case ContactorColumn.Ext:
            		return this.Ext.CompareTo(rhs.Ext);
            		
            		                 
            	
            	
            	case ContactorColumn.IsActive:
            		return this.IsActive.Value.CompareTo(rhs.IsActive.Value);
            		
            		                 
            	
            	
            	case ContactorColumn.Priority:
            		return this.Priority.Value.CompareTo(rhs.Priority.Value);
            		
            		                 
            	
            	
            	case ContactorColumn.Comment:
            		return this.Comment.CompareTo(rhs.Comment);
            		
            		                 
            	
            	
            	case ContactorColumn.CreationDate:
            		return this.CreationDate.Value.CompareTo(rhs.CreationDate.Value);
            		
            		                 
            	
            	
            	case ContactorColumn.CreationUserId:
            		return this.CreationUserId.Value.CompareTo(rhs.CreationUserId.Value);
            		
            		                 
            	
            	
            	case ContactorColumn.LastModificationDate:
            		return this.LastModificationDate.Value.CompareTo(rhs.LastModificationDate.Value);
            		
            		                 
            	
            	
            	case ContactorColumn.LastModificationUserId:
            		return this.LastModificationUserId.Value.CompareTo(rhs.LastModificationUserId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ContactorKey> Members
		
		// member variable for the EntityId property
		private ContactorKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public ContactorKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ContactorKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = @"Contactor" 
					+ this.ContactorId.ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{18}{17}- ContactorId: {0}{17}- PartnerId: {1}{17}- GroupId: {2}{17}- Code: {3}{17}- Name: {4}{17}- JobTitle: {5}{17}- Email: {6}{17}- Mobile: {7}{17}- Phone: {8}{17}- Ext: {9}{17}- IsActive: {10}{17}- Priority: {11}{17}- Comment: {12}{17}- CreationDate: {13}{17}- CreationUserId: {14}{17}- LastModificationDate: {15}{17}- LastModificationUserId: {16}{17}", 
				this.ContactorId,
				(this.PartnerId == null) ? string.Empty : this.PartnerId.ToString(),
				(this.GroupId == null) ? string.Empty : this.GroupId.ToString(),
				(this.Code == null) ? string.Empty : this.Code.ToString(),
				(this.Name == null) ? string.Empty : this.Name.ToString(),
				(this.JobTitle == null) ? string.Empty : this.JobTitle.ToString(),
				(this.Email == null) ? string.Empty : this.Email.ToString(),
				(this.Mobile == null) ? string.Empty : this.Mobile.ToString(),
				(this.Phone == null) ? string.Empty : this.Phone.ToString(),
				(this.Ext == null) ? string.Empty : this.Ext.ToString(),
				(this.IsActive == null) ? string.Empty : this.IsActive.ToString(),
				(this.Priority == null) ? string.Empty : this.Priority.ToString(),
				(this.Comment == null) ? string.Empty : this.Comment.ToString(),
				(this.CreationDate == null) ? string.Empty : this.CreationDate.ToString(),
				(this.CreationUserId == null) ? string.Empty : this.CreationUserId.ToString(),
				(this.LastModificationDate == null) ? string.Empty : this.LastModificationDate.ToString(),
				(this.LastModificationUserId == null) ? string.Empty : this.LastModificationUserId.ToString(),
				Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Contactor' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal class ContactorEntityData : ICloneable
	{
		#region Variable Declarations
		
		#region Primary key(s)
			/// <summary>			
			/// ContactorId : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "Contactor"</remarks>
			public System.Int32 ContactorId;
				
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// PartnerId : Id of department, company that this contactor is being belong to
		/// </summary>
		public System.Int32?		  PartnerId = (int)0;
		
		/// <summary>
		/// GroupId : group to classify contactor
		/// </summary>
		public System.Int32?		  GroupId = (int)0;
		
		/// <summary>
		/// Code : 
		/// </summary>
		public System.String		  Code = string.Empty;
		
		/// <summary>
		/// Name : 
		/// </summary>
		public System.String		  Name = string.Empty;
		
		/// <summary>
		/// JobTitle : Job title of contactor in their company
		/// </summary>
		public System.String		  JobTitle = string.Empty;
		
		/// <summary>
		/// Email : 
		/// </summary>
		public System.String		  Email = string.Empty;
		
		/// <summary>
		/// Mobile : 
		/// </summary>
		public System.String		  Mobile = string.Empty;
		
		/// <summary>
		/// Phone : 
		/// </summary>
		public System.String		  Phone = string.Empty;
		
		/// <summary>
		/// Ext : 
		/// </summary>
		public System.String		  Ext = string.Empty;
		
		/// <summary>
		/// IsActive : 
		/// </summary>
		public System.Boolean?		  IsActive = false;
		
		/// <summary>
		/// Priority : 
		/// </summary>
		public System.Int32?		  Priority = (int)0;
		
		/// <summary>
		/// Comment : 
		/// </summary>
		public System.String		  Comment = string.Empty;
		
		/// <summary>
		/// CreationDate : 
		/// </summary>
		public System.DateTime?		  CreationDate = DateTime.MinValue;
		
		/// <summary>
		/// CreationUserId : 
		/// </summary>
		public System.Int32?		  CreationUserId = (int)0;
		
		/// <summary>
		/// LastModificationDate : 
		/// </summary>
		public System.DateTime?		  LastModificationDate = DateTime.MinValue;
		
		/// <summary>
		/// LastModificationUserId : 
		/// </summary>
		public System.Int32?		  LastModificationUserId = (int)0;
		#endregion
			
		#endregion Variable Declarations
		
		#region Clone
		public Object Clone()
		{
			ContactorEntityData _tmp = new ContactorEntityData();
						
			_tmp.ContactorId = this.ContactorId;
			
			_tmp.PartnerId = this.PartnerId;
			_tmp.GroupId = this.GroupId;
			_tmp.Code = this.Code;
			_tmp.Name = this.Name;
			_tmp.JobTitle = this.JobTitle;
			_tmp.Email = this.Email;
			_tmp.Mobile = this.Mobile;
			_tmp.Phone = this.Phone;
			_tmp.Ext = this.Ext;
			_tmp.IsActive = this.IsActive;
			_tmp.Priority = this.Priority;
			_tmp.Comment = this.Comment;
			_tmp.CreationDate = this.CreationDate;
			_tmp.CreationUserId = this.CreationUserId;
			_tmp.LastModificationDate = this.LastModificationDate;
			_tmp.LastModificationUserId = this.LastModificationUserId;
			
			return _tmp;
		}
		#endregion 
		
		#region Data Properties

		#endregion Data Properties

	}//End struct


		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Code",50));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Name",500));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("JobTitle",200));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Email",100));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Mobile",100));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Phone",100));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Ext",5));
		}
   		#endregion
	
	} // End Class
	
	#region ContactorComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ContactorComparer : System.Collections.Generic.IComparer<Contactor>
	{
		ContactorColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ContactorComparer"/> class.
        /// </summary>
		public ContactorComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ContactorComparer(ContactorColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="Contactor"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="Contactor"/> to compare.</param>
        /// <param name="b">The second <c>Contactor</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Contactor a, Contactor b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Contactor entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Contactor a, Contactor b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ContactorColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ContactorKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Contactor"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ContactorKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ContactorKey class.
		/// </summary>
		public ContactorKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ContactorKey class.
		/// </summary>
		public ContactorKey(ContactorBase entity)
		{
			Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.contactorId = entity.ContactorId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ContactorKey class.
		/// </summary>
		public ContactorKey(System.Int32 contactorId)
		{
			#region Init Properties

			this.contactorId = contactorId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ContactorBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ContactorBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the ContactorId property
		private System.Int32 contactorId;
		
		/// <summary>
		/// Gets or sets the ContactorId property.
		/// </summary>
		public System.Int32 ContactorId
		{
			get { return contactorId; }
			set
			{
				if ( Entity != null )
				{
					Entity.ContactorId = value;
				}
				
				contactorId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				ContactorId = ( values["ContactorId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["ContactorId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("ContactorId", ContactorId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("ContactorId: {0}{1}",
								ContactorId,
								Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ContactorColumn Enum
	
	/// <summary>
	/// Enumerate the Contactor columns.
	/// </summary>
	[Serializable]
	public enum ContactorColumn : int
	{
		/// <summary>
		/// ContactorId : 
		/// </summary>
		[EnumTextValue("ContactorId")]
		[ColumnEnum("ContactorId", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		ContactorId = 1,
		/// <summary>
		/// PartnerId : Id of department, company that this contactor is being belong to
		/// </summary>
		[EnumTextValue("PartnerId")]
		[ColumnEnum("PartnerId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		PartnerId = 2,
		/// <summary>
		/// GroupId : group to classify contactor
		/// </summary>
		[EnumTextValue("GroupId")]
		[ColumnEnum("GroupId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		GroupId = 3,
		/// <summary>
		/// Code : 
		/// </summary>
		[EnumTextValue("Code")]
		[ColumnEnum("Code", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		Code = 4,
		/// <summary>
		/// Name : 
		/// </summary>
		[EnumTextValue("Name")]
		[ColumnEnum("Name", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		Name = 5,
		/// <summary>
		/// JobTitle : Job title of contactor in their company
		/// </summary>
		[EnumTextValue("JobTitle")]
		[ColumnEnum("JobTitle", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		JobTitle = 6,
		/// <summary>
		/// Email : 
		/// </summary>
		[EnumTextValue("Email")]
		[ColumnEnum("Email", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		Email = 7,
		/// <summary>
		/// Mobile : 
		/// </summary>
		[EnumTextValue("Mobile")]
		[ColumnEnum("Mobile", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		Mobile = 8,
		/// <summary>
		/// Phone : 
		/// </summary>
		[EnumTextValue("Phone")]
		[ColumnEnum("Phone", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		Phone = 9,
		/// <summary>
		/// Ext : 
		/// </summary>
		[EnumTextValue("Ext")]
		[ColumnEnum("Ext", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 5)]
		Ext = 10,
		/// <summary>
		/// IsActive : 
		/// </summary>
		[EnumTextValue("IsActive")]
		[ColumnEnum("IsActive", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsActive = 11,
		/// <summary>
		/// Priority : 
		/// </summary>
		[EnumTextValue("Priority")]
		[ColumnEnum("Priority", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Priority = 12,
		/// <summary>
		/// Comment : 
		/// </summary>
		[EnumTextValue("Comment")]
		[ColumnEnum("Comment", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Comment = 13,
		/// <summary>
		/// CreationDate : 
		/// </summary>
		[EnumTextValue("CreationDate")]
		[ColumnEnum("CreationDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CreationDate = 14,
		/// <summary>
		/// CreationUserId : 
		/// </summary>
		[EnumTextValue("CreationUserId")]
		[ColumnEnum("CreationUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CreationUserId = 15,
		/// <summary>
		/// LastModificationDate : 
		/// </summary>
		[EnumTextValue("LastModificationDate")]
		[ColumnEnum("LastModificationDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastModificationDate = 16,
		/// <summary>
		/// LastModificationUserId : 
		/// </summary>
		[EnumTextValue("LastModificationUserId")]
		[ColumnEnum("LastModificationUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		LastModificationUserId = 17
	}//End enum

	#endregion ContactorColumn Enum

} // end namespace
