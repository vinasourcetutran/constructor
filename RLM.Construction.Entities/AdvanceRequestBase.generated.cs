	
/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : Saturday, December 11, 2010
	Important: Do not modify this file. Edit the file AdvanceRequest.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace RLM.Construction.Entities
{
	#region AdvanceRequestEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="AdvanceRequest"/> object.
	/// </remarks>
	public class AdvanceRequestEventArgs : System.EventArgs
	{
		private AdvanceRequestColumn column;
		private object value;
		
		
		///<summary>
		/// Initalizes a new Instance of the AdvanceRequestEventArgs class.
		///</summary>
		public AdvanceRequestEventArgs(AdvanceRequestColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the AdvanceRequestEventArgs class.
		///</summary>
		public AdvanceRequestEventArgs(AdvanceRequestColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		
		///<summary>
		/// The AdvanceRequestColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="AdvanceRequestColumn" />
		public AdvanceRequestColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	
	///<summary>
	/// Define a delegate for all AdvanceRequest related events.
	///</summary>
	public delegate void AdvanceRequestEventHandler(object sender, AdvanceRequestEventArgs e);
	
	///<summary>
	/// An object representation of the 'AdvanceRequest' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	//[ToolboxItem(typeof(AdvanceRequest))]
	public abstract partial class AdvanceRequestBase : EntityBase, IEntityId<AdvanceRequestKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		/// 	Old the inner data of the entity.
		/// </summary>
		private AdvanceRequestEntityData entityData;
		
		// <summary>
		// 	Old the original data of the entity.
		// </summary>
		//AdvanceRequestEntityData originalData;
		
		/// <summary>
		/// 	Old a backup of the inner data of the entity.
		/// </summary>
		private AdvanceRequestEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		[NonSerialized]
		private TList<AdvanceRequest> parentCollection;
		private bool inTxn = false;

		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event AdvanceRequestEventHandler ColumnChanging;
		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AdvanceRequestEventHandler ColumnChanged;		
		#endregion "Variable Declarations"
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="AdvanceRequestBase"/> instance.
		///</summary>
		public AdvanceRequestBase()
		{
			this.entityData = new AdvanceRequestEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="AdvanceRequestBase"/> instance.
		///</summary>
		///<param name="advanceRequestContractId"></param>
		///<param name="advanceRequestRequestContactorId"></param>
		///<param name="advanceRequestResponseContactorId"></param>
		///<param name="advanceRequestRequestDate"></param>
		///<param name="advanceRequestResponseDate"></param>
		///<param name="advanceRequestRequestAmount"></param>
		///<param name="advanceRequestResponseAmount"></param>
		///<param name="advanceRequestCurrencyUnitId"></param>
		///<param name="advanceRequestRequestComment"></param>
		///<param name="advanceRequestResponseComment"></param>
		///<param name="advanceRequestStatus"></param>
		///<param name="advanceRequestType"></param>
		///<param name="advanceRequestCreationDate"></param>
		///<param name="advanceRequestCreationUserId"></param>
		///<param name="advanceRequestLastModificationDate"></param>
		///<param name="advanceRequestLastModifidationUserId"></param>
		public AdvanceRequestBase(System.Int32? advanceRequestContractId, System.Int32 advanceRequestRequestContactorId, 
			System.Int32? advanceRequestResponseContactorId, System.DateTime? advanceRequestRequestDate, System.DateTime? advanceRequestResponseDate, 
			System.Decimal? advanceRequestRequestAmount, System.Decimal? advanceRequestResponseAmount, System.Int32? advanceRequestCurrencyUnitId, 
			System.String advanceRequestRequestComment, System.String advanceRequestResponseComment, System.Int32? advanceRequestStatus, 
			System.Int32? advanceRequestType, System.DateTime? advanceRequestCreationDate, System.Int32? advanceRequestCreationUserId, 
			System.DateTime? advanceRequestLastModificationDate, System.Int32? advanceRequestLastModifidationUserId)
		{
			this.entityData = new AdvanceRequestEntityData();
			this.backupData = null;

			this.ContractId = advanceRequestContractId;
			this.RequestContactorId = advanceRequestRequestContactorId;
			this.ResponseContactorId = advanceRequestResponseContactorId;
			this.RequestDate = advanceRequestRequestDate;
			this.ResponseDate = advanceRequestResponseDate;
			this.RequestAmount = advanceRequestRequestAmount;
			this.ResponseAmount = advanceRequestResponseAmount;
			this.CurrencyUnitId = advanceRequestCurrencyUnitId;
			this.RequestComment = advanceRequestRequestComment;
			this.ResponseComment = advanceRequestResponseComment;
			this.Status = advanceRequestStatus;
			this.Type = advanceRequestType;
			this.CreationDate = advanceRequestCreationDate;
			this.CreationUserId = advanceRequestCreationUserId;
			this.LastModificationDate = advanceRequestLastModificationDate;
			this.LastModifidationUserId = advanceRequestLastModifidationUserId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="AdvanceRequest"/> instance.
		///</summary>
		///<param name="advanceRequestContractId"></param>
		///<param name="advanceRequestRequestContactorId"></param>
		///<param name="advanceRequestResponseContactorId"></param>
		///<param name="advanceRequestRequestDate"></param>
		///<param name="advanceRequestResponseDate"></param>
		///<param name="advanceRequestRequestAmount"></param>
		///<param name="advanceRequestResponseAmount"></param>
		///<param name="advanceRequestCurrencyUnitId"></param>
		///<param name="advanceRequestRequestComment"></param>
		///<param name="advanceRequestResponseComment"></param>
		///<param name="advanceRequestStatus"></param>
		///<param name="advanceRequestType"></param>
		///<param name="advanceRequestCreationDate"></param>
		///<param name="advanceRequestCreationUserId"></param>
		///<param name="advanceRequestLastModificationDate"></param>
		///<param name="advanceRequestLastModifidationUserId"></param>
		public static AdvanceRequest CreateAdvanceRequest(System.Int32? advanceRequestContractId, System.Int32 advanceRequestRequestContactorId, 
			System.Int32? advanceRequestResponseContactorId, System.DateTime? advanceRequestRequestDate, System.DateTime? advanceRequestResponseDate, 
			System.Decimal? advanceRequestRequestAmount, System.Decimal? advanceRequestResponseAmount, System.Int32? advanceRequestCurrencyUnitId, 
			System.String advanceRequestRequestComment, System.String advanceRequestResponseComment, System.Int32? advanceRequestStatus, 
			System.Int32? advanceRequestType, System.DateTime? advanceRequestCreationDate, System.Int32? advanceRequestCreationUserId, 
			System.DateTime? advanceRequestLastModificationDate, System.Int32? advanceRequestLastModifidationUserId)
		{
			AdvanceRequest newAdvanceRequest = new AdvanceRequest();
			newAdvanceRequest.ContractId = advanceRequestContractId;
			newAdvanceRequest.RequestContactorId = advanceRequestRequestContactorId;
			newAdvanceRequest.ResponseContactorId = advanceRequestResponseContactorId;
			newAdvanceRequest.RequestDate = advanceRequestRequestDate;
			newAdvanceRequest.ResponseDate = advanceRequestResponseDate;
			newAdvanceRequest.RequestAmount = advanceRequestRequestAmount;
			newAdvanceRequest.ResponseAmount = advanceRequestResponseAmount;
			newAdvanceRequest.CurrencyUnitId = advanceRequestCurrencyUnitId;
			newAdvanceRequest.RequestComment = advanceRequestRequestComment;
			newAdvanceRequest.ResponseComment = advanceRequestResponseComment;
			newAdvanceRequest.Status = advanceRequestStatus;
			newAdvanceRequest.Type = advanceRequestType;
			newAdvanceRequest.CreationDate = advanceRequestCreationDate;
			newAdvanceRequest.CreationUserId = advanceRequestCreationUserId;
			newAdvanceRequest.LastModificationDate = advanceRequestLastModificationDate;
			newAdvanceRequest.LastModifidationUserId = advanceRequestLastModifidationUserId;
			return newAdvanceRequest;
		}
				
		#endregion Constructors
		
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdvanceRequestColumn"/> which has raised the event.</param>
		public void OnColumnChanging(AdvanceRequestColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdvanceRequestColumn"/> which has raised the event.</param>
		public void OnColumnChanged(AdvanceRequestColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdvanceRequestColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(AdvanceRequestColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added)
				EntityManager.StopTracking(EntityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				AdvanceRequestEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new AdvanceRequestEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdvanceRequestColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(AdvanceRequestColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				AdvanceRequestEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new AdvanceRequestEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
				
		#region Properties	
				
		/// <summary>
		/// 	Gets or sets the AdvanceRequestId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 AdvanceRequestId
		{
			get
			{
				return this.entityData.AdvanceRequestId; 
			}
			
			set
			{
				if (this.entityData.AdvanceRequestId == value)
					return;
					
					
				OnColumnChanging(AdvanceRequestColumn.AdvanceRequestId, this.entityData.AdvanceRequestId);
				this.entityData.AdvanceRequestId = value;
				this.EntityId.AdvanceRequestId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AdvanceRequestColumn.AdvanceRequestId, this.entityData.AdvanceRequestId);
				OnPropertyChanged("AdvanceRequestId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ContractId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsContractIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ContractId
		{
			get
			{
				return this.entityData.ContractId; 
			}
			
			set
			{
				if (this.entityData.ContractId == value)
					return;
					
					
				OnColumnChanging(AdvanceRequestColumn.ContractId, this.entityData.ContractId);
				this.entityData.ContractId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AdvanceRequestColumn.ContractId, this.entityData.ContractId);
				OnPropertyChanged("ContractId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RequestContactorId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 RequestContactorId
		{
			get
			{
				return this.entityData.RequestContactorId; 
			}
			
			set
			{
				if (this.entityData.RequestContactorId == value)
					return;
					
					
				OnColumnChanging(AdvanceRequestColumn.RequestContactorId, this.entityData.RequestContactorId);
				this.entityData.RequestContactorId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AdvanceRequestColumn.RequestContactorId, this.entityData.RequestContactorId);
				OnPropertyChanged("RequestContactorId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ResponseContactorId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsResponseContactorIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ResponseContactorId
		{
			get
			{
				return this.entityData.ResponseContactorId; 
			}
			
			set
			{
				if (this.entityData.ResponseContactorId == value)
					return;
					
					
				OnColumnChanging(AdvanceRequestColumn.ResponseContactorId, this.entityData.ResponseContactorId);
				this.entityData.ResponseContactorId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AdvanceRequestColumn.ResponseContactorId, this.entityData.ResponseContactorId);
				OnPropertyChanged("ResponseContactorId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RequestDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsRequestDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? RequestDate
		{
			get
			{
				return this.entityData.RequestDate; 
			}
			
			set
			{
				if (this.entityData.RequestDate == value)
					return;
					
					
				OnColumnChanging(AdvanceRequestColumn.RequestDate, this.entityData.RequestDate);
				this.entityData.RequestDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AdvanceRequestColumn.RequestDate, this.entityData.RequestDate);
				OnPropertyChanged("RequestDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ResponseDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsResponseDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ResponseDate
		{
			get
			{
				return this.entityData.ResponseDate; 
			}
			
			set
			{
				if (this.entityData.ResponseDate == value)
					return;
					
					
				OnColumnChanging(AdvanceRequestColumn.ResponseDate, this.entityData.ResponseDate);
				this.entityData.ResponseDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AdvanceRequestColumn.ResponseDate, this.entityData.ResponseDate);
				OnPropertyChanged("ResponseDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RequestAmount property. 
		///		
		/// </summary>
		/// <value>This type is money.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0. It is up to the developer
		/// to check the value of IsRequestAmountNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? RequestAmount
		{
			get
			{
				return this.entityData.RequestAmount; 
			}
			
			set
			{
				if (this.entityData.RequestAmount == value)
					return;
					
					
				OnColumnChanging(AdvanceRequestColumn.RequestAmount, this.entityData.RequestAmount);
				this.entityData.RequestAmount = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AdvanceRequestColumn.RequestAmount, this.entityData.RequestAmount);
				OnPropertyChanged("RequestAmount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ResponseAmount property. 
		///		
		/// </summary>
		/// <value>This type is money.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0. It is up to the developer
		/// to check the value of IsResponseAmountNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ResponseAmount
		{
			get
			{
				return this.entityData.ResponseAmount; 
			}
			
			set
			{
				if (this.entityData.ResponseAmount == value)
					return;
					
					
				OnColumnChanging(AdvanceRequestColumn.ResponseAmount, this.entityData.ResponseAmount);
				this.entityData.ResponseAmount = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AdvanceRequestColumn.ResponseAmount, this.entityData.ResponseAmount);
				OnPropertyChanged("ResponseAmount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CurrencyUnitId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCurrencyUnitIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CurrencyUnitId
		{
			get
			{
				return this.entityData.CurrencyUnitId; 
			}
			
			set
			{
				if (this.entityData.CurrencyUnitId == value)
					return;
					
					
				OnColumnChanging(AdvanceRequestColumn.CurrencyUnitId, this.entityData.CurrencyUnitId);
				this.entityData.CurrencyUnitId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AdvanceRequestColumn.CurrencyUnitId, this.entityData.CurrencyUnitId);
				OnPropertyChanged("CurrencyUnitId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RequestComment property. 
		///		
		/// </summary>
		/// <value>This type is ntext.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String RequestComment
		{
			get
			{
				return this.entityData.RequestComment; 
			}
			
			set
			{
				if (this.entityData.RequestComment == value)
					return;
					
					
				OnColumnChanging(AdvanceRequestColumn.RequestComment, this.entityData.RequestComment);
				this.entityData.RequestComment = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AdvanceRequestColumn.RequestComment, this.entityData.RequestComment);
				OnPropertyChanged("RequestComment");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ResponseComment property. 
		///		
		/// </summary>
		/// <value>This type is ntext.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String ResponseComment
		{
			get
			{
				return this.entityData.ResponseComment; 
			}
			
			set
			{
				if (this.entityData.ResponseComment == value)
					return;
					
					
				OnColumnChanging(AdvanceRequestColumn.ResponseComment, this.entityData.ResponseComment);
				this.entityData.ResponseComment = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AdvanceRequestColumn.ResponseComment, this.entityData.ResponseComment);
				OnPropertyChanged("ResponseComment");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Status property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsStatusNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Status
		{
			get
			{
				return this.entityData.Status; 
			}
			
			set
			{
				if (this.entityData.Status == value)
					return;
					
					
				OnColumnChanging(AdvanceRequestColumn.Status, this.entityData.Status);
				this.entityData.Status = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AdvanceRequestColumn.Status, this.entityData.Status);
				OnPropertyChanged("Status");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Type property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsTypeNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Type
		{
			get
			{
				return this.entityData.Type; 
			}
			
			set
			{
				if (this.entityData.Type == value)
					return;
					
					
				OnColumnChanging(AdvanceRequestColumn.Type, this.entityData.Type);
				this.entityData.Type = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AdvanceRequestColumn.Type, this.entityData.Type);
				OnPropertyChanged("Type");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreationDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsCreationDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CreationDate
		{
			get
			{
				return this.entityData.CreationDate; 
			}
			
			set
			{
				if (this.entityData.CreationDate == value)
					return;
					
					
				OnColumnChanging(AdvanceRequestColumn.CreationDate, this.entityData.CreationDate);
				this.entityData.CreationDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AdvanceRequestColumn.CreationDate, this.entityData.CreationDate);
				OnPropertyChanged("CreationDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreationUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCreationUserIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CreationUserId
		{
			get
			{
				return this.entityData.CreationUserId; 
			}
			
			set
			{
				if (this.entityData.CreationUserId == value)
					return;
					
					
				OnColumnChanging(AdvanceRequestColumn.CreationUserId, this.entityData.CreationUserId);
				this.entityData.CreationUserId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AdvanceRequestColumn.CreationUserId, this.entityData.CreationUserId);
				OnPropertyChanged("CreationUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModificationDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastModificationDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastModificationDate
		{
			get
			{
				return this.entityData.LastModificationDate; 
			}
			
			set
			{
				if (this.entityData.LastModificationDate == value)
					return;
					
					
				OnColumnChanging(AdvanceRequestColumn.LastModificationDate, this.entityData.LastModificationDate);
				this.entityData.LastModificationDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AdvanceRequestColumn.LastModificationDate, this.entityData.LastModificationDate);
				OnPropertyChanged("LastModificationDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModifidationUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsLastModifidationUserIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? LastModifidationUserId
		{
			get
			{
				return this.entityData.LastModifidationUserId; 
			}
			
			set
			{
				if (this.entityData.LastModifidationUserId == value)
					return;
					
					
				OnColumnChanging(AdvanceRequestColumn.LastModifidationUserId, this.entityData.LastModifidationUserId);
				this.entityData.LastModifidationUserId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AdvanceRequestColumn.LastModifidationUserId, this.entityData.LastModifidationUserId);
				OnPropertyChanged("LastModifidationUserId");
			}
		}
		

		#region Source Foreign Key Property
				
		#endregion
			
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "AdvanceRequest"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"AdvanceRequestId", "ContractId", "RequestContactorId", "ResponseContactorId", "RequestDate", "ResponseDate", "RequestAmount", "ResponseAmount", "CurrencyUnitId", "RequestComment", "ResponseComment", "Status", "Type", "CreationDate", "CreationUserId", "LastModificationDate", "LastModifidationUserId"};
			}
		}
		#endregion 
		
		
		#endregion
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as AdvanceRequestEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (AdvanceRequest) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return (object)this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<AdvanceRequest>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as AdvanceRequest);
	        }
	    }


		#endregion
		
		#region Methods	
			
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();
		}	
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed AdvanceRequest Entity 
		///</summary>
		public virtual AdvanceRequest Copy()
		{
			//shallow copy entity
			AdvanceRequest copy = new AdvanceRequest();
			copy.AdvanceRequestId = this.AdvanceRequestId;
			copy.ContractId = this.ContractId;
			copy.RequestContactorId = this.RequestContactorId;
			copy.ResponseContactorId = this.ResponseContactorId;
			copy.RequestDate = this.RequestDate;
			copy.ResponseDate = this.ResponseDate;
			copy.RequestAmount = this.RequestAmount;
			copy.ResponseAmount = this.ResponseAmount;
			copy.CurrencyUnitId = this.CurrencyUnitId;
			copy.RequestComment = this.RequestComment;
			copy.ResponseComment = this.ResponseComment;
			copy.Status = this.Status;
			copy.Type = this.Type;
			copy.CreationDate = this.CreationDate;
			copy.CreationUserId = this.CreationUserId;
			copy.LastModificationDate = this.LastModificationDate;
			copy.LastModifidationUserId = this.LastModifidationUserId;
					
			copy.AcceptChanges();
			return (AdvanceRequest)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed AdvanceRequest Entity which is a deep copy of the current entity.
		///</summary>
		public virtual AdvanceRequest DeepCopy()
		{
			return EntityHelper.Clone<AdvanceRequest>(this as AdvanceRequest);	
		}
		#endregion
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="AdvanceRequestBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(AdvanceRequestBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="AdvanceRequestBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="AdvanceRequestBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="AdvanceRequestBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(AdvanceRequestBase Object1, AdvanceRequestBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.AdvanceRequestId != Object2.AdvanceRequestId)
				equal = false;
			if ( Object1.ContractId != null && Object2.ContractId != null )
			{
				if (Object1.ContractId != Object2.ContractId)
					equal = false;
			}
			else if (Object1.ContractId == null ^ Object2.ContractId == null )
			{
				equal = false;
			}
			if (Object1.RequestContactorId != Object2.RequestContactorId)
				equal = false;
			if ( Object1.ResponseContactorId != null && Object2.ResponseContactorId != null )
			{
				if (Object1.ResponseContactorId != Object2.ResponseContactorId)
					equal = false;
			}
			else if (Object1.ResponseContactorId == null ^ Object2.ResponseContactorId == null )
			{
				equal = false;
			}
			if ( Object1.RequestDate != null && Object2.RequestDate != null )
			{
				if (Object1.RequestDate != Object2.RequestDate)
					equal = false;
			}
			else if (Object1.RequestDate == null ^ Object2.RequestDate == null )
			{
				equal = false;
			}
			if ( Object1.ResponseDate != null && Object2.ResponseDate != null )
			{
				if (Object1.ResponseDate != Object2.ResponseDate)
					equal = false;
			}
			else if (Object1.ResponseDate == null ^ Object2.ResponseDate == null )
			{
				equal = false;
			}
			if ( Object1.RequestAmount != null && Object2.RequestAmount != null )
			{
				if (Object1.RequestAmount != Object2.RequestAmount)
					equal = false;
			}
			else if (Object1.RequestAmount == null ^ Object2.RequestAmount == null )
			{
				equal = false;
			}
			if ( Object1.ResponseAmount != null && Object2.ResponseAmount != null )
			{
				if (Object1.ResponseAmount != Object2.ResponseAmount)
					equal = false;
			}
			else if (Object1.ResponseAmount == null ^ Object2.ResponseAmount == null )
			{
				equal = false;
			}
			if ( Object1.CurrencyUnitId != null && Object2.CurrencyUnitId != null )
			{
				if (Object1.CurrencyUnitId != Object2.CurrencyUnitId)
					equal = false;
			}
			else if (Object1.CurrencyUnitId == null ^ Object2.CurrencyUnitId == null )
			{
				equal = false;
			}
			if ( Object1.RequestComment != null && Object2.RequestComment != null )
			{
				if (Object1.RequestComment != Object2.RequestComment)
					equal = false;
			}
			else if (Object1.RequestComment == null ^ Object2.RequestComment == null )
			{
				equal = false;
			}
			if ( Object1.ResponseComment != null && Object2.ResponseComment != null )
			{
				if (Object1.ResponseComment != Object2.ResponseComment)
					equal = false;
			}
			else if (Object1.ResponseComment == null ^ Object2.ResponseComment == null )
			{
				equal = false;
			}
			if ( Object1.Status != null && Object2.Status != null )
			{
				if (Object1.Status != Object2.Status)
					equal = false;
			}
			else if (Object1.Status == null ^ Object2.Status == null )
			{
				equal = false;
			}
			if ( Object1.Type != null && Object2.Type != null )
			{
				if (Object1.Type != Object2.Type)
					equal = false;
			}
			else if (Object1.Type == null ^ Object2.Type == null )
			{
				equal = false;
			}
			if ( Object1.CreationDate != null && Object2.CreationDate != null )
			{
				if (Object1.CreationDate != Object2.CreationDate)
					equal = false;
			}
			else if (Object1.CreationDate == null ^ Object2.CreationDate == null )
			{
				equal = false;
			}
			if ( Object1.CreationUserId != null && Object2.CreationUserId != null )
			{
				if (Object1.CreationUserId != Object2.CreationUserId)
					equal = false;
			}
			else if (Object1.CreationUserId == null ^ Object2.CreationUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastModificationDate != null && Object2.LastModificationDate != null )
			{
				if (Object1.LastModificationDate != Object2.LastModificationDate)
					equal = false;
			}
			else if (Object1.LastModificationDate == null ^ Object2.LastModificationDate == null )
			{
				equal = false;
			}
			if ( Object1.LastModifidationUserId != null && Object2.LastModifidationUserId != null )
			{
				if (Object1.LastModifidationUserId != Object2.LastModifidationUserId)
					equal = false;
			}
			else if (Object1.LastModifidationUserId == null ^ Object2.LastModifidationUserId == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			// TODO -> generate a strongly typed IComparer in the concrete class
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name) .CompareTo(((AdvanceRequestBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name));
		}
		
		/*
		// static method to get a Comparer object
        public static AdvanceRequestComparer GetComparer()
        {
            return new AdvanceRequestComparer();
        }
        */

        // Comparer delegates back to AdvanceRequest
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(AdvanceRequest rhs, AdvanceRequestColumn which)
        {
            switch (which)
            {
            	
            	
            	case AdvanceRequestColumn.AdvanceRequestId:
            		return this.AdvanceRequestId.CompareTo(rhs.AdvanceRequestId);
            		
            		                 
            	
            	
            	case AdvanceRequestColumn.ContractId:
            		return this.ContractId.Value.CompareTo(rhs.ContractId.Value);
            		
            		                 
            	
            	
            	case AdvanceRequestColumn.RequestContactorId:
            		return this.RequestContactorId.CompareTo(rhs.RequestContactorId);
            		
            		                 
            	
            	
            	case AdvanceRequestColumn.ResponseContactorId:
            		return this.ResponseContactorId.Value.CompareTo(rhs.ResponseContactorId.Value);
            		
            		                 
            	
            	
            	case AdvanceRequestColumn.RequestDate:
            		return this.RequestDate.Value.CompareTo(rhs.RequestDate.Value);
            		
            		                 
            	
            	
            	case AdvanceRequestColumn.ResponseDate:
            		return this.ResponseDate.Value.CompareTo(rhs.ResponseDate.Value);
            		
            		                 
            	
            	
            	case AdvanceRequestColumn.RequestAmount:
            		return this.RequestAmount.Value.CompareTo(rhs.RequestAmount.Value);
            		
            		                 
            	
            	
            	case AdvanceRequestColumn.ResponseAmount:
            		return this.ResponseAmount.Value.CompareTo(rhs.ResponseAmount.Value);
            		
            		                 
            	
            	
            	case AdvanceRequestColumn.CurrencyUnitId:
            		return this.CurrencyUnitId.Value.CompareTo(rhs.CurrencyUnitId.Value);
            		
            		                 
            	
            	
            	case AdvanceRequestColumn.RequestComment:
            		return this.RequestComment.CompareTo(rhs.RequestComment);
            		
            		                 
            	
            	
            	case AdvanceRequestColumn.ResponseComment:
            		return this.ResponseComment.CompareTo(rhs.ResponseComment);
            		
            		                 
            	
            	
            	case AdvanceRequestColumn.Status:
            		return this.Status.Value.CompareTo(rhs.Status.Value);
            		
            		                 
            	
            	
            	case AdvanceRequestColumn.Type:
            		return this.Type.Value.CompareTo(rhs.Type.Value);
            		
            		                 
            	
            	
            	case AdvanceRequestColumn.CreationDate:
            		return this.CreationDate.Value.CompareTo(rhs.CreationDate.Value);
            		
            		                 
            	
            	
            	case AdvanceRequestColumn.CreationUserId:
            		return this.CreationUserId.Value.CompareTo(rhs.CreationUserId.Value);
            		
            		                 
            	
            	
            	case AdvanceRequestColumn.LastModificationDate:
            		return this.LastModificationDate.Value.CompareTo(rhs.LastModificationDate.Value);
            		
            		                 
            	
            	
            	case AdvanceRequestColumn.LastModifidationUserId:
            		return this.LastModifidationUserId.Value.CompareTo(rhs.LastModifidationUserId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<AdvanceRequestKey> Members
		
		// member variable for the EntityId property
		private AdvanceRequestKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public AdvanceRequestKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new AdvanceRequestKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = @"AdvanceRequest" 
					+ this.AdvanceRequestId.ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{18}{17}- AdvanceRequestId: {0}{17}- ContractId: {1}{17}- RequestContactorId: {2}{17}- ResponseContactorId: {3}{17}- RequestDate: {4}{17}- ResponseDate: {5}{17}- RequestAmount: {6}{17}- ResponseAmount: {7}{17}- CurrencyUnitId: {8}{17}- RequestComment: {9}{17}- ResponseComment: {10}{17}- Status: {11}{17}- Type: {12}{17}- CreationDate: {13}{17}- CreationUserId: {14}{17}- LastModificationDate: {15}{17}- LastModifidationUserId: {16}{17}", 
				this.AdvanceRequestId,
				(this.ContractId == null) ? string.Empty : this.ContractId.ToString(),
				this.RequestContactorId,
				(this.ResponseContactorId == null) ? string.Empty : this.ResponseContactorId.ToString(),
				(this.RequestDate == null) ? string.Empty : this.RequestDate.ToString(),
				(this.ResponseDate == null) ? string.Empty : this.ResponseDate.ToString(),
				(this.RequestAmount == null) ? string.Empty : this.RequestAmount.ToString(),
				(this.ResponseAmount == null) ? string.Empty : this.ResponseAmount.ToString(),
				(this.CurrencyUnitId == null) ? string.Empty : this.CurrencyUnitId.ToString(),
				(this.RequestComment == null) ? string.Empty : this.RequestComment.ToString(),
				(this.ResponseComment == null) ? string.Empty : this.ResponseComment.ToString(),
				(this.Status == null) ? string.Empty : this.Status.ToString(),
				(this.Type == null) ? string.Empty : this.Type.ToString(),
				(this.CreationDate == null) ? string.Empty : this.CreationDate.ToString(),
				(this.CreationUserId == null) ? string.Empty : this.CreationUserId.ToString(),
				(this.LastModificationDate == null) ? string.Empty : this.LastModificationDate.ToString(),
				(this.LastModifidationUserId == null) ? string.Empty : this.LastModifidationUserId.ToString(),
				Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'AdvanceRequest' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal class AdvanceRequestEntityData : ICloneable
	{
		#region Variable Declarations
		
		#region Primary key(s)
			/// <summary>			
			/// AdvanceRequestId : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "AdvanceRequest"</remarks>
			public System.Int32 AdvanceRequestId;
				
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ContractId : 
		/// </summary>
		public System.Int32?		  ContractId = (int)0;
		
		/// <summary>
		/// RequestContactorId : 
		/// </summary>
		public System.Int32		  RequestContactorId = (int)0;
		
		/// <summary>
		/// ResponseContactorId : 
		/// </summary>
		public System.Int32?		  ResponseContactorId = (int)0;
		
		/// <summary>
		/// RequestDate : 
		/// </summary>
		public System.DateTime?		  RequestDate = DateTime.MinValue;
		
		/// <summary>
		/// ResponseDate : 
		/// </summary>
		public System.DateTime?		  ResponseDate = DateTime.MinValue;
		
		/// <summary>
		/// RequestAmount : 
		/// </summary>
		public System.Decimal?		  RequestAmount = 0;
		
		/// <summary>
		/// ResponseAmount : 
		/// </summary>
		public System.Decimal?		  ResponseAmount = 0;
		
		/// <summary>
		/// CurrencyUnitId : 
		/// </summary>
		public System.Int32?		  CurrencyUnitId = (int)0;
		
		/// <summary>
		/// RequestComment : 
		/// </summary>
		public System.String		  RequestComment = string.Empty;
		
		/// <summary>
		/// ResponseComment : 
		/// </summary>
		public System.String		  ResponseComment = string.Empty;
		
		/// <summary>
		/// Status : 
		/// </summary>
		public System.Int32?		  Status = (int)0;
		
		/// <summary>
		/// Type : 
		/// </summary>
		public System.Int32?		  Type = (int)0;
		
		/// <summary>
		/// CreationDate : 
		/// </summary>
		public System.DateTime?		  CreationDate = DateTime.MinValue;
		
		/// <summary>
		/// CreationUserId : 
		/// </summary>
		public System.Int32?		  CreationUserId = (int)0;
		
		/// <summary>
		/// LastModificationDate : 
		/// </summary>
		public System.DateTime?		  LastModificationDate = DateTime.MinValue;
		
		/// <summary>
		/// LastModifidationUserId : 
		/// </summary>
		public System.Int32?		  LastModifidationUserId = (int)0;
		#endregion
			
		#endregion Variable Declarations
		
		#region Clone
		public Object Clone()
		{
			AdvanceRequestEntityData _tmp = new AdvanceRequestEntityData();
						
			_tmp.AdvanceRequestId = this.AdvanceRequestId;
			
			_tmp.ContractId = this.ContractId;
			_tmp.RequestContactorId = this.RequestContactorId;
			_tmp.ResponseContactorId = this.ResponseContactorId;
			_tmp.RequestDate = this.RequestDate;
			_tmp.ResponseDate = this.ResponseDate;
			_tmp.RequestAmount = this.RequestAmount;
			_tmp.ResponseAmount = this.ResponseAmount;
			_tmp.CurrencyUnitId = this.CurrencyUnitId;
			_tmp.RequestComment = this.RequestComment;
			_tmp.ResponseComment = this.ResponseComment;
			_tmp.Status = this.Status;
			_tmp.Type = this.Type;
			_tmp.CreationDate = this.CreationDate;
			_tmp.CreationUserId = this.CreationUserId;
			_tmp.LastModificationDate = this.LastModificationDate;
			_tmp.LastModifidationUserId = this.LastModifidationUserId;
			
			return _tmp;
		}
		#endregion 
		
		#region Data Properties

		#endregion Data Properties

	}//End struct


		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
	
	} // End Class
	
	#region AdvanceRequestComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class AdvanceRequestComparer : System.Collections.Generic.IComparer<AdvanceRequest>
	{
		AdvanceRequestColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:AdvanceRequestComparer"/> class.
        /// </summary>
		public AdvanceRequestComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public AdvanceRequestComparer(AdvanceRequestColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="AdvanceRequest"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="AdvanceRequest"/> to compare.</param>
        /// <param name="b">The second <c>AdvanceRequest</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(AdvanceRequest a, AdvanceRequest b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(AdvanceRequest entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(AdvanceRequest a, AdvanceRequest b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public AdvanceRequestColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region AdvanceRequestKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="AdvanceRequest"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class AdvanceRequestKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the AdvanceRequestKey class.
		/// </summary>
		public AdvanceRequestKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the AdvanceRequestKey class.
		/// </summary>
		public AdvanceRequestKey(AdvanceRequestBase entity)
		{
			Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.advanceRequestId = entity.AdvanceRequestId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the AdvanceRequestKey class.
		/// </summary>
		public AdvanceRequestKey(System.Int32 advanceRequestId)
		{
			#region Init Properties

			this.advanceRequestId = advanceRequestId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private AdvanceRequestBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public AdvanceRequestBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the AdvanceRequestId property
		private System.Int32 advanceRequestId;
		
		/// <summary>
		/// Gets or sets the AdvanceRequestId property.
		/// </summary>
		public System.Int32 AdvanceRequestId
		{
			get { return advanceRequestId; }
			set
			{
				if ( Entity != null )
				{
					Entity.AdvanceRequestId = value;
				}
				
				advanceRequestId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				AdvanceRequestId = ( values["AdvanceRequestId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["AdvanceRequestId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("AdvanceRequestId", AdvanceRequestId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("AdvanceRequestId: {0}{1}",
								AdvanceRequestId,
								Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region AdvanceRequestColumn Enum
	
	/// <summary>
	/// Enumerate the AdvanceRequest columns.
	/// </summary>
	[Serializable]
	public enum AdvanceRequestColumn : int
	{
		/// <summary>
		/// AdvanceRequestId : 
		/// </summary>
		[EnumTextValue("AdvanceRequestId")]
		[ColumnEnum("AdvanceRequestId", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		AdvanceRequestId = 1,
		/// <summary>
		/// ContractId : 
		/// </summary>
		[EnumTextValue("ContractId")]
		[ColumnEnum("ContractId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ContractId = 2,
		/// <summary>
		/// RequestContactorId : 
		/// </summary>
		[EnumTextValue("RequestContactorId")]
		[ColumnEnum("RequestContactorId", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		RequestContactorId = 3,
		/// <summary>
		/// ResponseContactorId : 
		/// </summary>
		[EnumTextValue("ResponseContactorId")]
		[ColumnEnum("ResponseContactorId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ResponseContactorId = 4,
		/// <summary>
		/// RequestDate : 
		/// </summary>
		[EnumTextValue("RequestDate")]
		[ColumnEnum("RequestDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		RequestDate = 5,
		/// <summary>
		/// ResponseDate : 
		/// </summary>
		[EnumTextValue("ResponseDate")]
		[ColumnEnum("ResponseDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ResponseDate = 6,
		/// <summary>
		/// RequestAmount : 
		/// </summary>
		[EnumTextValue("RequestAmount")]
		[ColumnEnum("RequestAmount", typeof(System.Decimal), System.Data.DbType.Currency, false, false, true)]
		RequestAmount = 7,
		/// <summary>
		/// ResponseAmount : 
		/// </summary>
		[EnumTextValue("ResponseAmount")]
		[ColumnEnum("ResponseAmount", typeof(System.Decimal), System.Data.DbType.Currency, false, false, true)]
		ResponseAmount = 8,
		/// <summary>
		/// CurrencyUnitId : 
		/// </summary>
		[EnumTextValue("CurrencyUnitId")]
		[ColumnEnum("CurrencyUnitId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CurrencyUnitId = 9,
		/// <summary>
		/// RequestComment : 
		/// </summary>
		[EnumTextValue("RequestComment")]
		[ColumnEnum("RequestComment", typeof(System.String), System.Data.DbType.String, false, false, true)]
		RequestComment = 10,
		/// <summary>
		/// ResponseComment : 
		/// </summary>
		[EnumTextValue("ResponseComment")]
		[ColumnEnum("ResponseComment", typeof(System.String), System.Data.DbType.String, false, false, true)]
		ResponseComment = 11,
		/// <summary>
		/// Status : 
		/// </summary>
		[EnumTextValue("Status")]
		[ColumnEnum("Status", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Status = 12,
		/// <summary>
		/// Type : 
		/// </summary>
		[EnumTextValue("Type")]
		[ColumnEnum("Type", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Type = 13,
		/// <summary>
		/// CreationDate : 
		/// </summary>
		[EnumTextValue("CreationDate")]
		[ColumnEnum("CreationDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CreationDate = 14,
		/// <summary>
		/// CreationUserId : 
		/// </summary>
		[EnumTextValue("CreationUserId")]
		[ColumnEnum("CreationUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CreationUserId = 15,
		/// <summary>
		/// LastModificationDate : 
		/// </summary>
		[EnumTextValue("LastModificationDate")]
		[ColumnEnum("LastModificationDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastModificationDate = 16,
		/// <summary>
		/// LastModifidationUserId : 
		/// </summary>
		[EnumTextValue("LastModifidationUserId")]
		[ColumnEnum("LastModifidationUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		LastModifidationUserId = 17
	}//End enum

	#endregion AdvanceRequestColumn Enum

} // end namespace
