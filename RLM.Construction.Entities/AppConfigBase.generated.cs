	
/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : Tuesday, April 05, 2011
	Important: Do not modify this file. Edit the file AppConfig.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace RLM.Construction.Entities
{
	#region AppConfigEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="AppConfig"/> object.
	/// </remarks>
	public class AppConfigEventArgs : System.EventArgs
	{
		private AppConfigColumn column;
		private object value;
		
		
		///<summary>
		/// Initalizes a new Instance of the AppConfigEventArgs class.
		///</summary>
		public AppConfigEventArgs(AppConfigColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the AppConfigEventArgs class.
		///</summary>
		public AppConfigEventArgs(AppConfigColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		
		///<summary>
		/// The AppConfigColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="AppConfigColumn" />
		public AppConfigColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	
	///<summary>
	/// Define a delegate for all AppConfig related events.
	///</summary>
	public delegate void AppConfigEventHandler(object sender, AppConfigEventArgs e);
	
	///<summary>
	/// An object representation of the 'AppConfig' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	//[ToolboxItem(typeof(AppConfig))]
	public abstract partial class AppConfigBase : EntityBase, IEntityId<AppConfigKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		/// 	Old the inner data of the entity.
		/// </summary>
		private AppConfigEntityData entityData;
		
		// <summary>
		// 	Old the original data of the entity.
		// </summary>
		//AppConfigEntityData originalData;
		
		/// <summary>
		/// 	Old a backup of the inner data of the entity.
		/// </summary>
		private AppConfigEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		[NonSerialized]
		private TList<AppConfig> parentCollection;
		private bool inTxn = false;

		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event AppConfigEventHandler ColumnChanging;
		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AppConfigEventHandler ColumnChanged;		
		#endregion "Variable Declarations"
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="AppConfigBase"/> instance.
		///</summary>
		public AppConfigBase()
		{
			this.entityData = new AppConfigEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="AppConfigBase"/> instance.
		///</summary>
		///<param name="appConfigApplicationId"></param>
		///<param name="appConfigAppConfigName"></param>
		///<param name="appConfigAppConfigValue"></param>
		///<param name="appConfigIsActive"></param>
		///<param name="appConfigIsDeletable"></param>
		///<param name="appConfigIsVisible"></param>
		///<param name="appConfigCreationDate"></param>
		///<param name="appConfigCreationUserId"></param>
		///<param name="appConfigLastModificationDate"></param>
		///<param name="appConfigLastModificationUserId"></param>
		public AppConfigBase(System.Int32? appConfigApplicationId, System.String appConfigAppConfigName, System.String appConfigAppConfigValue, 
			System.Boolean? appConfigIsActive, System.Boolean? appConfigIsDeletable, System.Boolean? appConfigIsVisible, System.DateTime? appConfigCreationDate, 
			System.Int32? appConfigCreationUserId, System.DateTime? appConfigLastModificationDate, System.Int32? appConfigLastModificationUserId)
		{
			this.entityData = new AppConfigEntityData();
			this.backupData = null;

			this.ApplicationId = appConfigApplicationId;
			this.AppConfigName = appConfigAppConfigName;
			this.AppConfigValue = appConfigAppConfigValue;
			this.IsActive = appConfigIsActive;
			this.IsDeletable = appConfigIsDeletable;
			this.IsVisible = appConfigIsVisible;
			this.CreationDate = appConfigCreationDate;
			this.CreationUserId = appConfigCreationUserId;
			this.LastModificationDate = appConfigLastModificationDate;
			this.LastModificationUserId = appConfigLastModificationUserId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="AppConfig"/> instance.
		///</summary>
		///<param name="appConfigApplicationId"></param>
		///<param name="appConfigAppConfigName"></param>
		///<param name="appConfigAppConfigValue"></param>
		///<param name="appConfigIsActive"></param>
		///<param name="appConfigIsDeletable"></param>
		///<param name="appConfigIsVisible"></param>
		///<param name="appConfigCreationDate"></param>
		///<param name="appConfigCreationUserId"></param>
		///<param name="appConfigLastModificationDate"></param>
		///<param name="appConfigLastModificationUserId"></param>
		public static AppConfig CreateAppConfig(System.Int32? appConfigApplicationId, System.String appConfigAppConfigName, System.String appConfigAppConfigValue, 
			System.Boolean? appConfigIsActive, System.Boolean? appConfigIsDeletable, System.Boolean? appConfigIsVisible, System.DateTime? appConfigCreationDate, 
			System.Int32? appConfigCreationUserId, System.DateTime? appConfigLastModificationDate, System.Int32? appConfigLastModificationUserId)
		{
			AppConfig newAppConfig = new AppConfig();
			newAppConfig.ApplicationId = appConfigApplicationId;
			newAppConfig.AppConfigName = appConfigAppConfigName;
			newAppConfig.AppConfigValue = appConfigAppConfigValue;
			newAppConfig.IsActive = appConfigIsActive;
			newAppConfig.IsDeletable = appConfigIsDeletable;
			newAppConfig.IsVisible = appConfigIsVisible;
			newAppConfig.CreationDate = appConfigCreationDate;
			newAppConfig.CreationUserId = appConfigCreationUserId;
			newAppConfig.LastModificationDate = appConfigLastModificationDate;
			newAppConfig.LastModificationUserId = appConfigLastModificationUserId;
			return newAppConfig;
		}
				
		#endregion Constructors
		
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AppConfigColumn"/> which has raised the event.</param>
		public void OnColumnChanging(AppConfigColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AppConfigColumn"/> which has raised the event.</param>
		public void OnColumnChanged(AppConfigColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AppConfigColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(AppConfigColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added)
				EntityManager.StopTracking(EntityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				AppConfigEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new AppConfigEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AppConfigColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(AppConfigColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				AppConfigEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new AppConfigEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
				
		#region Properties	
				
		/// <summary>
		/// 	Gets or sets the AppConfigId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 AppConfigId
		{
			get
			{
				return this.entityData.AppConfigId; 
			}
			
			set
			{
				if (this.entityData.AppConfigId == value)
					return;
					
					
				OnColumnChanging(AppConfigColumn.AppConfigId, this.entityData.AppConfigId);
				this.entityData.AppConfigId = value;
				this.EntityId.AppConfigId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AppConfigColumn.AppConfigId, this.entityData.AppConfigId);
				OnPropertyChanged("AppConfigId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ApplicationId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsApplicationIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ApplicationId
		{
			get
			{
				return this.entityData.ApplicationId; 
			}
			
			set
			{
				if (this.entityData.ApplicationId == value)
					return;
					
					
				OnColumnChanging(AppConfigColumn.ApplicationId, this.entityData.ApplicationId);
				this.entityData.ApplicationId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AppConfigColumn.ApplicationId, this.entityData.ApplicationId);
				OnPropertyChanged("ApplicationId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AppConfigName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String AppConfigName
		{
			get
			{
				return this.entityData.AppConfigName; 
			}
			
			set
			{
				if (this.entityData.AppConfigName == value)
					return;
					
					
				OnColumnChanging(AppConfigColumn.AppConfigName, this.entityData.AppConfigName);
				this.entityData.AppConfigName = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AppConfigColumn.AppConfigName, this.entityData.AppConfigName);
				OnPropertyChanged("AppConfigName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AppConfigValue property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 4000)]
		public virtual System.String AppConfigValue
		{
			get
			{
				return this.entityData.AppConfigValue; 
			}
			
			set
			{
				if (this.entityData.AppConfigValue == value)
					return;
					
					
				OnColumnChanging(AppConfigColumn.AppConfigValue, this.entityData.AppConfigValue);
				this.entityData.AppConfigValue = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AppConfigColumn.AppConfigValue, this.entityData.AppConfigValue);
				OnPropertyChanged("AppConfigValue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsActive property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsActiveNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsActive
		{
			get
			{
				return this.entityData.IsActive; 
			}
			
			set
			{
				if (this.entityData.IsActive == value)
					return;
					
					
				OnColumnChanging(AppConfigColumn.IsActive, this.entityData.IsActive);
				this.entityData.IsActive = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AppConfigColumn.IsActive, this.entityData.IsActive);
				OnPropertyChanged("IsActive");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsDeletable property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsDeletableNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsDeletable
		{
			get
			{
				return this.entityData.IsDeletable; 
			}
			
			set
			{
				if (this.entityData.IsDeletable == value)
					return;
					
					
				OnColumnChanging(AppConfigColumn.IsDeletable, this.entityData.IsDeletable);
				this.entityData.IsDeletable = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AppConfigColumn.IsDeletable, this.entityData.IsDeletable);
				OnPropertyChanged("IsDeletable");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsVisible property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsVisibleNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsVisible
		{
			get
			{
				return this.entityData.IsVisible; 
			}
			
			set
			{
				if (this.entityData.IsVisible == value)
					return;
					
					
				OnColumnChanging(AppConfigColumn.IsVisible, this.entityData.IsVisible);
				this.entityData.IsVisible = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AppConfigColumn.IsVisible, this.entityData.IsVisible);
				OnPropertyChanged("IsVisible");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreationDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsCreationDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CreationDate
		{
			get
			{
				return this.entityData.CreationDate; 
			}
			
			set
			{
				if (this.entityData.CreationDate == value)
					return;
					
					
				OnColumnChanging(AppConfigColumn.CreationDate, this.entityData.CreationDate);
				this.entityData.CreationDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AppConfigColumn.CreationDate, this.entityData.CreationDate);
				OnPropertyChanged("CreationDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreationUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCreationUserIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CreationUserId
		{
			get
			{
				return this.entityData.CreationUserId; 
			}
			
			set
			{
				if (this.entityData.CreationUserId == value)
					return;
					
					
				OnColumnChanging(AppConfigColumn.CreationUserId, this.entityData.CreationUserId);
				this.entityData.CreationUserId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AppConfigColumn.CreationUserId, this.entityData.CreationUserId);
				OnPropertyChanged("CreationUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModificationDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastModificationDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastModificationDate
		{
			get
			{
				return this.entityData.LastModificationDate; 
			}
			
			set
			{
				if (this.entityData.LastModificationDate == value)
					return;
					
					
				OnColumnChanging(AppConfigColumn.LastModificationDate, this.entityData.LastModificationDate);
				this.entityData.LastModificationDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AppConfigColumn.LastModificationDate, this.entityData.LastModificationDate);
				OnPropertyChanged("LastModificationDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModificationUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsLastModificationUserIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? LastModificationUserId
		{
			get
			{
				return this.entityData.LastModificationUserId; 
			}
			
			set
			{
				if (this.entityData.LastModificationUserId == value)
					return;
					
					
				OnColumnChanging(AppConfigColumn.LastModificationUserId, this.entityData.LastModificationUserId);
				this.entityData.LastModificationUserId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AppConfigColumn.LastModificationUserId, this.entityData.LastModificationUserId);
				OnPropertyChanged("LastModificationUserId");
			}
		}
		

		#region Source Foreign Key Property
				
		private Application _applicationIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Application"/>.
		/// </summary>
		/// <value>The source Application for ApplicationId.</value>
        [XmlIgnore()]
		[Browsable(false), BindableAttribute()]
		public virtual Application ApplicationIdSource
      	{
            get { return this._applicationIdSource; }
            set { this._applicationIdSource = value; }
      	}
		#endregion
			
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "AppConfig"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"AppConfigId", "ApplicationId", "AppConfigName", "AppConfigValue", "IsActive", "IsDeletable", "IsVisible", "CreationDate", "CreationUserId", "LastModificationDate", "LastModificationUserId"};
			}
		}
		#endregion 
		
		
		#endregion
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as AppConfigEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (AppConfig) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return (object)this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<AppConfig>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as AppConfig);
	        }
	    }


		#endregion
		
		#region Methods	
			
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();
		}	
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed AppConfig Entity 
		///</summary>
		public virtual AppConfig Copy()
		{
			//shallow copy entity
			AppConfig copy = new AppConfig();
			copy.AppConfigId = this.AppConfigId;
			copy.ApplicationId = this.ApplicationId;
			copy.AppConfigName = this.AppConfigName;
			copy.AppConfigValue = this.AppConfigValue;
			copy.IsActive = this.IsActive;
			copy.IsDeletable = this.IsDeletable;
			copy.IsVisible = this.IsVisible;
			copy.CreationDate = this.CreationDate;
			copy.CreationUserId = this.CreationUserId;
			copy.LastModificationDate = this.LastModificationDate;
			copy.LastModificationUserId = this.LastModificationUserId;
					
			copy.AcceptChanges();
			return (AppConfig)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed AppConfig Entity which is a deep copy of the current entity.
		///</summary>
		public virtual AppConfig DeepCopy()
		{
			return EntityHelper.Clone<AppConfig>(this as AppConfig);	
		}
		#endregion
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="AppConfigBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(AppConfigBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="AppConfigBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="AppConfigBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="AppConfigBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(AppConfigBase Object1, AppConfigBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.AppConfigId != Object2.AppConfigId)
				equal = false;
			if ( Object1.ApplicationId != null && Object2.ApplicationId != null )
			{
				if (Object1.ApplicationId != Object2.ApplicationId)
					equal = false;
			}
			else if (Object1.ApplicationId == null ^ Object2.ApplicationId == null )
			{
				equal = false;
			}
			if ( Object1.AppConfigName != null && Object2.AppConfigName != null )
			{
				if (Object1.AppConfigName != Object2.AppConfigName)
					equal = false;
			}
			else if (Object1.AppConfigName == null ^ Object2.AppConfigName == null )
			{
				equal = false;
			}
			if ( Object1.AppConfigValue != null && Object2.AppConfigValue != null )
			{
				if (Object1.AppConfigValue != Object2.AppConfigValue)
					equal = false;
			}
			else if (Object1.AppConfigValue == null ^ Object2.AppConfigValue == null )
			{
				equal = false;
			}
			if ( Object1.IsActive != null && Object2.IsActive != null )
			{
				if (Object1.IsActive != Object2.IsActive)
					equal = false;
			}
			else if (Object1.IsActive == null ^ Object2.IsActive == null )
			{
				equal = false;
			}
			if ( Object1.IsDeletable != null && Object2.IsDeletable != null )
			{
				if (Object1.IsDeletable != Object2.IsDeletable)
					equal = false;
			}
			else if (Object1.IsDeletable == null ^ Object2.IsDeletable == null )
			{
				equal = false;
			}
			if ( Object1.IsVisible != null && Object2.IsVisible != null )
			{
				if (Object1.IsVisible != Object2.IsVisible)
					equal = false;
			}
			else if (Object1.IsVisible == null ^ Object2.IsVisible == null )
			{
				equal = false;
			}
			if ( Object1.CreationDate != null && Object2.CreationDate != null )
			{
				if (Object1.CreationDate != Object2.CreationDate)
					equal = false;
			}
			else if (Object1.CreationDate == null ^ Object2.CreationDate == null )
			{
				equal = false;
			}
			if ( Object1.CreationUserId != null && Object2.CreationUserId != null )
			{
				if (Object1.CreationUserId != Object2.CreationUserId)
					equal = false;
			}
			else if (Object1.CreationUserId == null ^ Object2.CreationUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastModificationDate != null && Object2.LastModificationDate != null )
			{
				if (Object1.LastModificationDate != Object2.LastModificationDate)
					equal = false;
			}
			else if (Object1.LastModificationDate == null ^ Object2.LastModificationDate == null )
			{
				equal = false;
			}
			if ( Object1.LastModificationUserId != null && Object2.LastModificationUserId != null )
			{
				if (Object1.LastModificationUserId != Object2.LastModificationUserId)
					equal = false;
			}
			else if (Object1.LastModificationUserId == null ^ Object2.LastModificationUserId == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			// TODO -> generate a strongly typed IComparer in the concrete class
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name) .CompareTo(((AppConfigBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name));
		}
		
		/*
		// static method to get a Comparer object
        public static AppConfigComparer GetComparer()
        {
            return new AppConfigComparer();
        }
        */

        // Comparer delegates back to AppConfig
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(AppConfig rhs, AppConfigColumn which)
        {
            switch (which)
            {
            	
            	
            	case AppConfigColumn.AppConfigId:
            		return this.AppConfigId.CompareTo(rhs.AppConfigId);
            		
            		                 
            	
            	
            	case AppConfigColumn.ApplicationId:
            		return this.ApplicationId.Value.CompareTo(rhs.ApplicationId.Value);
            		
            		                 
            	
            	
            	case AppConfigColumn.AppConfigName:
            		return this.AppConfigName.CompareTo(rhs.AppConfigName);
            		
            		                 
            	
            	
            	case AppConfigColumn.AppConfigValue:
            		return this.AppConfigValue.CompareTo(rhs.AppConfigValue);
            		
            		                 
            	
            	
            	case AppConfigColumn.IsActive:
            		return this.IsActive.Value.CompareTo(rhs.IsActive.Value);
            		
            		                 
            	
            	
            	case AppConfigColumn.IsDeletable:
            		return this.IsDeletable.Value.CompareTo(rhs.IsDeletable.Value);
            		
            		                 
            	
            	
            	case AppConfigColumn.IsVisible:
            		return this.IsVisible.Value.CompareTo(rhs.IsVisible.Value);
            		
            		                 
            	
            	
            	case AppConfigColumn.CreationDate:
            		return this.CreationDate.Value.CompareTo(rhs.CreationDate.Value);
            		
            		                 
            	
            	
            	case AppConfigColumn.CreationUserId:
            		return this.CreationUserId.Value.CompareTo(rhs.CreationUserId.Value);
            		
            		                 
            	
            	
            	case AppConfigColumn.LastModificationDate:
            		return this.LastModificationDate.Value.CompareTo(rhs.LastModificationDate.Value);
            		
            		                 
            	
            	
            	case AppConfigColumn.LastModificationUserId:
            		return this.LastModificationUserId.Value.CompareTo(rhs.LastModificationUserId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<AppConfigKey> Members
		
		// member variable for the EntityId property
		private AppConfigKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public AppConfigKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new AppConfigKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = @"AppConfig" 
					+ this.AppConfigId.ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{12}{11}- AppConfigId: {0}{11}- ApplicationId: {1}{11}- AppConfigName: {2}{11}- AppConfigValue: {3}{11}- IsActive: {4}{11}- IsDeletable: {5}{11}- IsVisible: {6}{11}- CreationDate: {7}{11}- CreationUserId: {8}{11}- LastModificationDate: {9}{11}- LastModificationUserId: {10}{11}", 
				this.AppConfigId,
				(this.ApplicationId == null) ? string.Empty : this.ApplicationId.ToString(),
				(this.AppConfigName == null) ? string.Empty : this.AppConfigName.ToString(),
				(this.AppConfigValue == null) ? string.Empty : this.AppConfigValue.ToString(),
				(this.IsActive == null) ? string.Empty : this.IsActive.ToString(),
				(this.IsDeletable == null) ? string.Empty : this.IsDeletable.ToString(),
				(this.IsVisible == null) ? string.Empty : this.IsVisible.ToString(),
				(this.CreationDate == null) ? string.Empty : this.CreationDate.ToString(),
				(this.CreationUserId == null) ? string.Empty : this.CreationUserId.ToString(),
				(this.LastModificationDate == null) ? string.Empty : this.LastModificationDate.ToString(),
				(this.LastModificationUserId == null) ? string.Empty : this.LastModificationUserId.ToString(),
				Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'AppConfig' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal class AppConfigEntityData : ICloneable
	{
		#region Variable Declarations
		
		#region Primary key(s)
			/// <summary>			
			/// AppConfigId : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "AppConfig"</remarks>
			public System.Int32 AppConfigId;
				
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ApplicationId : 
		/// </summary>
		public System.Int32?		  ApplicationId = (int)0;
		
		/// <summary>
		/// AppConfigName : 
		/// </summary>
		public System.String		  AppConfigName = string.Empty;
		
		/// <summary>
		/// AppConfigValue : 
		/// </summary>
		public System.String		  AppConfigValue = string.Empty;
		
		/// <summary>
		/// IsActive : 
		/// </summary>
		public System.Boolean?		  IsActive = false;
		
		/// <summary>
		/// IsDeletable : 
		/// </summary>
		public System.Boolean?		  IsDeletable = false;
		
		/// <summary>
		/// IsVisible : 
		/// </summary>
		public System.Boolean?		  IsVisible = false;
		
		/// <summary>
		/// CreationDate : 
		/// </summary>
		public System.DateTime?		  CreationDate = DateTime.MinValue;
		
		/// <summary>
		/// CreationUserId : 
		/// </summary>
		public System.Int32?		  CreationUserId = (int)0;
		
		/// <summary>
		/// LastModificationDate : 
		/// </summary>
		public System.DateTime?		  LastModificationDate = DateTime.MinValue;
		
		/// <summary>
		/// LastModificationUserId : 
		/// </summary>
		public System.Int32?		  LastModificationUserId = (int)0;
		#endregion
			
		#endregion Variable Declarations
		
		#region Clone
		public Object Clone()
		{
			AppConfigEntityData _tmp = new AppConfigEntityData();
						
			_tmp.AppConfigId = this.AppConfigId;
			
			_tmp.ApplicationId = this.ApplicationId;
			_tmp.AppConfigName = this.AppConfigName;
			_tmp.AppConfigValue = this.AppConfigValue;
			_tmp.IsActive = this.IsActive;
			_tmp.IsDeletable = this.IsDeletable;
			_tmp.IsVisible = this.IsVisible;
			_tmp.CreationDate = this.CreationDate;
			_tmp.CreationUserId = this.CreationUserId;
			_tmp.LastModificationDate = this.LastModificationDate;
			_tmp.LastModificationUserId = this.LastModificationUserId;
			
			return _tmp;
		}
		#endregion 
		
		#region Data Properties

		#endregion Data Properties

	}//End struct


		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("AppConfigName",200));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("AppConfigValue",4000));
		}
   		#endregion
	
	} // End Class
	
	#region AppConfigComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class AppConfigComparer : System.Collections.Generic.IComparer<AppConfig>
	{
		AppConfigColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:AppConfigComparer"/> class.
        /// </summary>
		public AppConfigComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public AppConfigComparer(AppConfigColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="AppConfig"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="AppConfig"/> to compare.</param>
        /// <param name="b">The second <c>AppConfig</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(AppConfig a, AppConfig b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(AppConfig entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(AppConfig a, AppConfig b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public AppConfigColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region AppConfigKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="AppConfig"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class AppConfigKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the AppConfigKey class.
		/// </summary>
		public AppConfigKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the AppConfigKey class.
		/// </summary>
		public AppConfigKey(AppConfigBase entity)
		{
			Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.appConfigId = entity.AppConfigId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the AppConfigKey class.
		/// </summary>
		public AppConfigKey(System.Int32 appConfigId)
		{
			#region Init Properties

			this.appConfigId = appConfigId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private AppConfigBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public AppConfigBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the AppConfigId property
		private System.Int32 appConfigId;
		
		/// <summary>
		/// Gets or sets the AppConfigId property.
		/// </summary>
		public System.Int32 AppConfigId
		{
			get { return appConfigId; }
			set
			{
				if ( Entity != null )
				{
					Entity.AppConfigId = value;
				}
				
				appConfigId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				AppConfigId = ( values["AppConfigId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["AppConfigId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("AppConfigId", AppConfigId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("AppConfigId: {0}{1}",
								AppConfigId,
								Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region AppConfigColumn Enum
	
	/// <summary>
	/// Enumerate the AppConfig columns.
	/// </summary>
	[Serializable]
	public enum AppConfigColumn : int
	{
		/// <summary>
		/// AppConfigId : 
		/// </summary>
		[EnumTextValue("AppConfigId")]
		[ColumnEnum("AppConfigId", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		AppConfigId = 1,
		/// <summary>
		/// ApplicationId : 
		/// </summary>
		[EnumTextValue("ApplicationId")]
		[ColumnEnum("ApplicationId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ApplicationId = 2,
		/// <summary>
		/// AppConfigName : 
		/// </summary>
		[EnumTextValue("AppConfigName")]
		[ColumnEnum("AppConfigName", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		AppConfigName = 3,
		/// <summary>
		/// AppConfigValue : 
		/// </summary>
		[EnumTextValue("AppConfigValue")]
		[ColumnEnum("AppConfigValue", typeof(System.String), System.Data.DbType.String, false, false, true, 4000)]
		AppConfigValue = 4,
		/// <summary>
		/// IsActive : 
		/// </summary>
		[EnumTextValue("IsActive")]
		[ColumnEnum("IsActive", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsActive = 5,
		/// <summary>
		/// IsDeletable : 
		/// </summary>
		[EnumTextValue("IsDeletable")]
		[ColumnEnum("IsDeletable", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsDeletable = 6,
		/// <summary>
		/// IsVisible : 
		/// </summary>
		[EnumTextValue("IsVisible")]
		[ColumnEnum("IsVisible", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsVisible = 7,
		/// <summary>
		/// CreationDate : 
		/// </summary>
		[EnumTextValue("CreationDate")]
		[ColumnEnum("CreationDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CreationDate = 8,
		/// <summary>
		/// CreationUserId : 
		/// </summary>
		[EnumTextValue("CreationUserId")]
		[ColumnEnum("CreationUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CreationUserId = 9,
		/// <summary>
		/// LastModificationDate : 
		/// </summary>
		[EnumTextValue("LastModificationDate")]
		[ColumnEnum("LastModificationDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastModificationDate = 10,
		/// <summary>
		/// LastModificationUserId : 
		/// </summary>
		[EnumTextValue("LastModificationUserId")]
		[ColumnEnum("LastModificationUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		LastModificationUserId = 11
	}//End enum

	#endregion AppConfigColumn Enum

} // end namespace
