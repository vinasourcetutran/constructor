	
/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : Sunday, January 16, 2011
	Important: Do not modify this file. Edit the file Staff.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace RLM.Construction.Entities
{
	#region StaffEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Staff"/> object.
	/// </remarks>
	public class StaffEventArgs : System.EventArgs
	{
		private StaffColumn column;
		private object value;
		
		
		///<summary>
		/// Initalizes a new Instance of the StaffEventArgs class.
		///</summary>
		public StaffEventArgs(StaffColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the StaffEventArgs class.
		///</summary>
		public StaffEventArgs(StaffColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		
		///<summary>
		/// The StaffColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="StaffColumn" />
		public StaffColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	
	///<summary>
	/// Define a delegate for all Staff related events.
	///</summary>
	public delegate void StaffEventHandler(object sender, StaffEventArgs e);
	
	///<summary>
	/// An object representation of the 'Staff' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	//[ToolboxItem(typeof(Staff))]
	public abstract partial class StaffBase : EntityBase, IEntityId<StaffKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		/// 	Old the inner data of the entity.
		/// </summary>
		private StaffEntityData entityData;
		
		// <summary>
		// 	Old the original data of the entity.
		// </summary>
		//StaffEntityData originalData;
		
		/// <summary>
		/// 	Old a backup of the inner data of the entity.
		/// </summary>
		private StaffEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		[NonSerialized]
		private TList<Staff> parentCollection;
		private bool inTxn = false;

		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event StaffEventHandler ColumnChanging;
		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event StaffEventHandler ColumnChanged;		
		#endregion "Variable Declarations"
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="StaffBase"/> instance.
		///</summary>
		public StaffBase()
		{
			this.entityData = new StaffEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="StaffBase"/> instance.
		///</summary>
		///<param name="staffStaffCode"></param>
		///<param name="staffFirstName"></param>
		///<param name="staffLastName"></param>
		///<param name="staffMiddleName"></param>
		///<param name="staffSex"></param>
		///<param name="staffBirthDate"></param>
		///<param name="staffBirthPlaceId"></param>
		///<param name="staffBirthdayPlace"></param>
		///<param name="staffIsActive"></param>
		///<param name="staffMagneticCardId"></param>
		///<param name="staffReligiousId"></param>
		///<param name="staffProvinceId"></param>
		///<param name="staffPeopleId"></param>
		///<param name="staffStartWorkingDate">ngay bat dau lam o cty</param>
		///<param name="staffWorkingDate">ngay bat dau di lam</param>
		///<param name="staffDeptId"></param>
		///<param name="staffJobTitleId"></param>
		///<param name="staffPermanentAddress"></param>
		///<param name="staffPermanentProvinceId"></param>
		///<param name="staffCurrentAddress"></param>
		///<param name="staffCurrentProvinceId"></param>
		///<param name="staffCreationDate"></param>
		///<param name="staffCreationUserId"></param>
		///<param name="staffLastModificationDate"></param>
		///<param name="staffLastModificationUserId"></param>
		///<param name="staffPhoto"></param>
		public StaffBase(System.String staffStaffCode, System.String staffFirstName, System.String staffLastName, 
			System.String staffMiddleName, System.Int32? staffSex, System.DateTime? staffBirthDate, System.Int32? staffBirthPlaceId, 
			System.String staffBirthdayPlace, System.Boolean? staffIsActive, System.String staffMagneticCardId, System.Int32? staffReligiousId, 
			System.Int32? staffProvinceId, System.Int32? staffPeopleId, System.DateTime? staffStartWorkingDate, System.DateTime? staffWorkingDate, 
			System.Int32? staffDeptId, System.Int32? staffJobTitleId, System.String staffPermanentAddress, System.Int32? staffPermanentProvinceId, 
			System.String staffCurrentAddress, System.Int32? staffCurrentProvinceId, System.DateTime? staffCreationDate, System.Int32? staffCreationUserId, 
			System.DateTime? staffLastModificationDate, System.Int32? staffLastModificationUserId, System.String staffPhoto)
		{
			this.entityData = new StaffEntityData();
			this.backupData = null;

			this.StaffCode = staffStaffCode;
			this.FirstName = staffFirstName;
			this.LastName = staffLastName;
			this.MiddleName = staffMiddleName;
			this.Sex = staffSex;
			this.BirthDate = staffBirthDate;
			this.BirthPlaceId = staffBirthPlaceId;
			this.BirthdayPlace = staffBirthdayPlace;
			this.IsActive = staffIsActive;
			this.MagneticCardId = staffMagneticCardId;
			this.ReligiousId = staffReligiousId;
			this.ProvinceId = staffProvinceId;
			this.PeopleId = staffPeopleId;
			this.StartWorkingDate = staffStartWorkingDate;
			this.WorkingDate = staffWorkingDate;
			this.DeptId = staffDeptId;
			this.JobTitleId = staffJobTitleId;
			this.PermanentAddress = staffPermanentAddress;
			this.PermanentProvinceId = staffPermanentProvinceId;
			this.CurrentAddress = staffCurrentAddress;
			this.CurrentProvinceId = staffCurrentProvinceId;
			this.CreationDate = staffCreationDate;
			this.CreationUserId = staffCreationUserId;
			this.LastModificationDate = staffLastModificationDate;
			this.LastModificationUserId = staffLastModificationUserId;
			this.Photo = staffPhoto;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Staff"/> instance.
		///</summary>
		///<param name="staffStaffCode"></param>
		///<param name="staffFirstName"></param>
		///<param name="staffLastName"></param>
		///<param name="staffMiddleName"></param>
		///<param name="staffSex"></param>
		///<param name="staffBirthDate"></param>
		///<param name="staffBirthPlaceId"></param>
		///<param name="staffBirthdayPlace"></param>
		///<param name="staffIsActive"></param>
		///<param name="staffMagneticCardId"></param>
		///<param name="staffReligiousId"></param>
		///<param name="staffProvinceId"></param>
		///<param name="staffPeopleId"></param>
		///<param name="staffStartWorkingDate">ngay bat dau lam o cty</param>
		///<param name="staffWorkingDate">ngay bat dau di lam</param>
		///<param name="staffDeptId"></param>
		///<param name="staffJobTitleId"></param>
		///<param name="staffPermanentAddress"></param>
		///<param name="staffPermanentProvinceId"></param>
		///<param name="staffCurrentAddress"></param>
		///<param name="staffCurrentProvinceId"></param>
		///<param name="staffCreationDate"></param>
		///<param name="staffCreationUserId"></param>
		///<param name="staffLastModificationDate"></param>
		///<param name="staffLastModificationUserId"></param>
		///<param name="staffPhoto"></param>
		public static Staff CreateStaff(System.String staffStaffCode, System.String staffFirstName, System.String staffLastName, 
			System.String staffMiddleName, System.Int32? staffSex, System.DateTime? staffBirthDate, System.Int32? staffBirthPlaceId, 
			System.String staffBirthdayPlace, System.Boolean? staffIsActive, System.String staffMagneticCardId, System.Int32? staffReligiousId, 
			System.Int32? staffProvinceId, System.Int32? staffPeopleId, System.DateTime? staffStartWorkingDate, System.DateTime? staffWorkingDate, 
			System.Int32? staffDeptId, System.Int32? staffJobTitleId, System.String staffPermanentAddress, System.Int32? staffPermanentProvinceId, 
			System.String staffCurrentAddress, System.Int32? staffCurrentProvinceId, System.DateTime? staffCreationDate, System.Int32? staffCreationUserId, 
			System.DateTime? staffLastModificationDate, System.Int32? staffLastModificationUserId, System.String staffPhoto)
		{
			Staff newStaff = new Staff();
			newStaff.StaffCode = staffStaffCode;
			newStaff.FirstName = staffFirstName;
			newStaff.LastName = staffLastName;
			newStaff.MiddleName = staffMiddleName;
			newStaff.Sex = staffSex;
			newStaff.BirthDate = staffBirthDate;
			newStaff.BirthPlaceId = staffBirthPlaceId;
			newStaff.BirthdayPlace = staffBirthdayPlace;
			newStaff.IsActive = staffIsActive;
			newStaff.MagneticCardId = staffMagneticCardId;
			newStaff.ReligiousId = staffReligiousId;
			newStaff.ProvinceId = staffProvinceId;
			newStaff.PeopleId = staffPeopleId;
			newStaff.StartWorkingDate = staffStartWorkingDate;
			newStaff.WorkingDate = staffWorkingDate;
			newStaff.DeptId = staffDeptId;
			newStaff.JobTitleId = staffJobTitleId;
			newStaff.PermanentAddress = staffPermanentAddress;
			newStaff.PermanentProvinceId = staffPermanentProvinceId;
			newStaff.CurrentAddress = staffCurrentAddress;
			newStaff.CurrentProvinceId = staffCurrentProvinceId;
			newStaff.CreationDate = staffCreationDate;
			newStaff.CreationUserId = staffCreationUserId;
			newStaff.LastModificationDate = staffLastModificationDate;
			newStaff.LastModificationUserId = staffLastModificationUserId;
			newStaff.Photo = staffPhoto;
			return newStaff;
		}
				
		#endregion Constructors
		
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="StaffColumn"/> which has raised the event.</param>
		public void OnColumnChanging(StaffColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="StaffColumn"/> which has raised the event.</param>
		public void OnColumnChanged(StaffColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="StaffColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(StaffColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added)
				EntityManager.StopTracking(EntityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				StaffEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new StaffEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="StaffColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(StaffColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				StaffEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new StaffEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
				
		#region Properties	
				
		/// <summary>
		/// 	Gets or sets the StaffId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 StaffId
		{
			get
			{
				return this.entityData.StaffId; 
			}
			
			set
			{
				if (this.entityData.StaffId == value)
					return;
					
					
				OnColumnChanging(StaffColumn.StaffId, this.entityData.StaffId);
				this.entityData.StaffId = value;
				this.EntityId.StaffId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(StaffColumn.StaffId, this.entityData.StaffId);
				OnPropertyChanged("StaffId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StaffCode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String StaffCode
		{
			get
			{
				return this.entityData.StaffCode; 
			}
			
			set
			{
				if (this.entityData.StaffCode == value)
					return;
					
					
				OnColumnChanging(StaffColumn.StaffCode, this.entityData.StaffCode);
				this.entityData.StaffCode = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(StaffColumn.StaffCode, this.entityData.StaffCode);
				OnPropertyChanged("StaffCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FirstName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String FirstName
		{
			get
			{
				return this.entityData.FirstName; 
			}
			
			set
			{
				if (this.entityData.FirstName == value)
					return;
					
					
				OnColumnChanging(StaffColumn.FirstName, this.entityData.FirstName);
				this.entityData.FirstName = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(StaffColumn.FirstName, this.entityData.FirstName);
				OnPropertyChanged("FirstName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String LastName
		{
			get
			{
				return this.entityData.LastName; 
			}
			
			set
			{
				if (this.entityData.LastName == value)
					return;
					
					
				OnColumnChanging(StaffColumn.LastName, this.entityData.LastName);
				this.entityData.LastName = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(StaffColumn.LastName, this.entityData.LastName);
				OnPropertyChanged("LastName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MiddleName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String MiddleName
		{
			get
			{
				return this.entityData.MiddleName; 
			}
			
			set
			{
				if (this.entityData.MiddleName == value)
					return;
					
					
				OnColumnChanging(StaffColumn.MiddleName, this.entityData.MiddleName);
				this.entityData.MiddleName = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(StaffColumn.MiddleName, this.entityData.MiddleName);
				OnPropertyChanged("MiddleName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Sex property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsSexNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Sex
		{
			get
			{
				return this.entityData.Sex; 
			}
			
			set
			{
				if (this.entityData.Sex == value)
					return;
					
					
				OnColumnChanging(StaffColumn.Sex, this.entityData.Sex);
				this.entityData.Sex = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(StaffColumn.Sex, this.entityData.Sex);
				OnPropertyChanged("Sex");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BirthDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsBirthDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? BirthDate
		{
			get
			{
				return this.entityData.BirthDate; 
			}
			
			set
			{
				if (this.entityData.BirthDate == value)
					return;
					
					
				OnColumnChanging(StaffColumn.BirthDate, this.entityData.BirthDate);
				this.entityData.BirthDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(StaffColumn.BirthDate, this.entityData.BirthDate);
				OnPropertyChanged("BirthDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BirthPlaceId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsBirthPlaceIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? BirthPlaceId
		{
			get
			{
				return this.entityData.BirthPlaceId; 
			}
			
			set
			{
				if (this.entityData.BirthPlaceId == value)
					return;
					
					
				OnColumnChanging(StaffColumn.BirthPlaceId, this.entityData.BirthPlaceId);
				this.entityData.BirthPlaceId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(StaffColumn.BirthPlaceId, this.entityData.BirthPlaceId);
				OnPropertyChanged("BirthPlaceId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BirthdayPlace property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String BirthdayPlace
		{
			get
			{
				return this.entityData.BirthdayPlace; 
			}
			
			set
			{
				if (this.entityData.BirthdayPlace == value)
					return;
					
					
				OnColumnChanging(StaffColumn.BirthdayPlace, this.entityData.BirthdayPlace);
				this.entityData.BirthdayPlace = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(StaffColumn.BirthdayPlace, this.entityData.BirthdayPlace);
				OnPropertyChanged("BirthdayPlace");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsActive property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsActiveNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsActive
		{
			get
			{
				return this.entityData.IsActive; 
			}
			
			set
			{
				if (this.entityData.IsActive == value)
					return;
					
					
				OnColumnChanging(StaffColumn.IsActive, this.entityData.IsActive);
				this.entityData.IsActive = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(StaffColumn.IsActive, this.entityData.IsActive);
				OnPropertyChanged("IsActive");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MagneticCardId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String MagneticCardId
		{
			get
			{
				return this.entityData.MagneticCardId; 
			}
			
			set
			{
				if (this.entityData.MagneticCardId == value)
					return;
					
					
				OnColumnChanging(StaffColumn.MagneticCardId, this.entityData.MagneticCardId);
				this.entityData.MagneticCardId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(StaffColumn.MagneticCardId, this.entityData.MagneticCardId);
				OnPropertyChanged("MagneticCardId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReligiousId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsReligiousIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ReligiousId
		{
			get
			{
				return this.entityData.ReligiousId; 
			}
			
			set
			{
				if (this.entityData.ReligiousId == value)
					return;
					
					
				OnColumnChanging(StaffColumn.ReligiousId, this.entityData.ReligiousId);
				this.entityData.ReligiousId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(StaffColumn.ReligiousId, this.entityData.ReligiousId);
				OnPropertyChanged("ReligiousId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ProvinceId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsProvinceIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ProvinceId
		{
			get
			{
				return this.entityData.ProvinceId; 
			}
			
			set
			{
				if (this.entityData.ProvinceId == value)
					return;
					
					
				OnColumnChanging(StaffColumn.ProvinceId, this.entityData.ProvinceId);
				this.entityData.ProvinceId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(StaffColumn.ProvinceId, this.entityData.ProvinceId);
				OnPropertyChanged("ProvinceId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PeopleId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsPeopleIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? PeopleId
		{
			get
			{
				return this.entityData.PeopleId; 
			}
			
			set
			{
				if (this.entityData.PeopleId == value)
					return;
					
					
				OnColumnChanging(StaffColumn.PeopleId, this.entityData.PeopleId);
				this.entityData.PeopleId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(StaffColumn.PeopleId, this.entityData.PeopleId);
				OnPropertyChanged("PeopleId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StartWorkingDate property. 
		///		ngay bat dau lam o cty
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsStartWorkingDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("ngay bat dau lam o cty"), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? StartWorkingDate
		{
			get
			{
				return this.entityData.StartWorkingDate; 
			}
			
			set
			{
				if (this.entityData.StartWorkingDate == value)
					return;
					
					
				OnColumnChanging(StaffColumn.StartWorkingDate, this.entityData.StartWorkingDate);
				this.entityData.StartWorkingDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(StaffColumn.StartWorkingDate, this.entityData.StartWorkingDate);
				OnPropertyChanged("StartWorkingDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WorkingDate property. 
		///		ngay bat dau di lam
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsWorkingDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("ngay bat dau di lam"), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? WorkingDate
		{
			get
			{
				return this.entityData.WorkingDate; 
			}
			
			set
			{
				if (this.entityData.WorkingDate == value)
					return;
					
					
				OnColumnChanging(StaffColumn.WorkingDate, this.entityData.WorkingDate);
				this.entityData.WorkingDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(StaffColumn.WorkingDate, this.entityData.WorkingDate);
				OnPropertyChanged("WorkingDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DeptId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsDeptIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? DeptId
		{
			get
			{
				return this.entityData.DeptId; 
			}
			
			set
			{
				if (this.entityData.DeptId == value)
					return;
					
					
				OnColumnChanging(StaffColumn.DeptId, this.entityData.DeptId);
				this.entityData.DeptId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(StaffColumn.DeptId, this.entityData.DeptId);
				OnPropertyChanged("DeptId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the JobTitleId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsJobTitleIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? JobTitleId
		{
			get
			{
				return this.entityData.JobTitleId; 
			}
			
			set
			{
				if (this.entityData.JobTitleId == value)
					return;
					
					
				OnColumnChanging(StaffColumn.JobTitleId, this.entityData.JobTitleId);
				this.entityData.JobTitleId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(StaffColumn.JobTitleId, this.entityData.JobTitleId);
				OnPropertyChanged("JobTitleId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PermanentAddress property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String PermanentAddress
		{
			get
			{
				return this.entityData.PermanentAddress; 
			}
			
			set
			{
				if (this.entityData.PermanentAddress == value)
					return;
					
					
				OnColumnChanging(StaffColumn.PermanentAddress, this.entityData.PermanentAddress);
				this.entityData.PermanentAddress = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(StaffColumn.PermanentAddress, this.entityData.PermanentAddress);
				OnPropertyChanged("PermanentAddress");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PermanentProvinceId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsPermanentProvinceIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? PermanentProvinceId
		{
			get
			{
				return this.entityData.PermanentProvinceId; 
			}
			
			set
			{
				if (this.entityData.PermanentProvinceId == value)
					return;
					
					
				OnColumnChanging(StaffColumn.PermanentProvinceId, this.entityData.PermanentProvinceId);
				this.entityData.PermanentProvinceId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(StaffColumn.PermanentProvinceId, this.entityData.PermanentProvinceId);
				OnPropertyChanged("PermanentProvinceId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CurrentAddress property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String CurrentAddress
		{
			get
			{
				return this.entityData.CurrentAddress; 
			}
			
			set
			{
				if (this.entityData.CurrentAddress == value)
					return;
					
					
				OnColumnChanging(StaffColumn.CurrentAddress, this.entityData.CurrentAddress);
				this.entityData.CurrentAddress = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(StaffColumn.CurrentAddress, this.entityData.CurrentAddress);
				OnPropertyChanged("CurrentAddress");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CurrentProvinceId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCurrentProvinceIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CurrentProvinceId
		{
			get
			{
				return this.entityData.CurrentProvinceId; 
			}
			
			set
			{
				if (this.entityData.CurrentProvinceId == value)
					return;
					
					
				OnColumnChanging(StaffColumn.CurrentProvinceId, this.entityData.CurrentProvinceId);
				this.entityData.CurrentProvinceId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(StaffColumn.CurrentProvinceId, this.entityData.CurrentProvinceId);
				OnPropertyChanged("CurrentProvinceId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreationDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsCreationDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CreationDate
		{
			get
			{
				return this.entityData.CreationDate; 
			}
			
			set
			{
				if (this.entityData.CreationDate == value)
					return;
					
					
				OnColumnChanging(StaffColumn.CreationDate, this.entityData.CreationDate);
				this.entityData.CreationDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(StaffColumn.CreationDate, this.entityData.CreationDate);
				OnPropertyChanged("CreationDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreationUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCreationUserIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CreationUserId
		{
			get
			{
				return this.entityData.CreationUserId; 
			}
			
			set
			{
				if (this.entityData.CreationUserId == value)
					return;
					
					
				OnColumnChanging(StaffColumn.CreationUserId, this.entityData.CreationUserId);
				this.entityData.CreationUserId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(StaffColumn.CreationUserId, this.entityData.CreationUserId);
				OnPropertyChanged("CreationUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModificationDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastModificationDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastModificationDate
		{
			get
			{
				return this.entityData.LastModificationDate; 
			}
			
			set
			{
				if (this.entityData.LastModificationDate == value)
					return;
					
					
				OnColumnChanging(StaffColumn.LastModificationDate, this.entityData.LastModificationDate);
				this.entityData.LastModificationDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(StaffColumn.LastModificationDate, this.entityData.LastModificationDate);
				OnPropertyChanged("LastModificationDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModificationUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsLastModificationUserIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? LastModificationUserId
		{
			get
			{
				return this.entityData.LastModificationUserId; 
			}
			
			set
			{
				if (this.entityData.LastModificationUserId == value)
					return;
					
					
				OnColumnChanging(StaffColumn.LastModificationUserId, this.entityData.LastModificationUserId);
				this.entityData.LastModificationUserId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(StaffColumn.LastModificationUserId, this.entityData.LastModificationUserId);
				OnPropertyChanged("LastModificationUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Photo property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 300)]
		public virtual System.String Photo
		{
			get
			{
				return this.entityData.Photo; 
			}
			
			set
			{
				if (this.entityData.Photo == value)
					return;
					
					
				OnColumnChanging(StaffColumn.Photo, this.entityData.Photo);
				this.entityData.Photo = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(StaffColumn.Photo, this.entityData.Photo);
				OnPropertyChanged("Photo");
			}
		}
		

		#region Source Foreign Key Property
				
		#endregion
			
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Staff"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"StaffId", "StaffCode", "FirstName", "LastName", "MiddleName", "Sex", "BirthDate", "BirthPlaceId", "BirthdayPlace", "IsActive", "MagneticCardId", "ReligiousId", "ProvinceId", "PeopleId", "StartWorkingDate", "WorkingDate", "DeptId", "JobTitleId", "PermanentAddress", "PermanentProvinceId", "CurrentAddress", "CurrentProvinceId", "CreationDate", "CreationUserId", "LastModificationDate", "LastModificationUserId", "Photo"};
			}
		}
		#endregion 
		
	
		/// <summary>
		///	Holds a collection of RoleOfStaff objects
		///	which are related to this object through the relation FK_RoleOfStaffs_Staffs
		/// </summary>	
		[BindableAttribute()]
		public TList<RoleOfStaff> RoleOfStaffCollection
		{
			get { return entityData.RoleOfStaffCollection; }
			set { entityData.RoleOfStaffCollection = value; }	
		}
		
		#endregion
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as StaffEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Staff) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return (object)this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Staff>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Staff);
	        }
	    }


		#endregion
		
		#region Methods	
			
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();
		}	
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Staff Entity 
		///</summary>
		public virtual Staff Copy()
		{
			//shallow copy entity
			Staff copy = new Staff();
			copy.StaffId = this.StaffId;
			copy.StaffCode = this.StaffCode;
			copy.FirstName = this.FirstName;
			copy.LastName = this.LastName;
			copy.MiddleName = this.MiddleName;
			copy.Sex = this.Sex;
			copy.BirthDate = this.BirthDate;
			copy.BirthPlaceId = this.BirthPlaceId;
			copy.BirthdayPlace = this.BirthdayPlace;
			copy.IsActive = this.IsActive;
			copy.MagneticCardId = this.MagneticCardId;
			copy.ReligiousId = this.ReligiousId;
			copy.ProvinceId = this.ProvinceId;
			copy.PeopleId = this.PeopleId;
			copy.StartWorkingDate = this.StartWorkingDate;
			copy.WorkingDate = this.WorkingDate;
			copy.DeptId = this.DeptId;
			copy.JobTitleId = this.JobTitleId;
			copy.PermanentAddress = this.PermanentAddress;
			copy.PermanentProvinceId = this.PermanentProvinceId;
			copy.CurrentAddress = this.CurrentAddress;
			copy.CurrentProvinceId = this.CurrentProvinceId;
			copy.CreationDate = this.CreationDate;
			copy.CreationUserId = this.CreationUserId;
			copy.LastModificationDate = this.LastModificationDate;
			copy.LastModificationUserId = this.LastModificationUserId;
			copy.Photo = this.Photo;
					
			copy.AcceptChanges();
			return (Staff)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed Staff Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Staff DeepCopy()
		{
			return EntityHelper.Clone<Staff>(this as Staff);	
		}
		#endregion
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="StaffBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(StaffBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="StaffBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="StaffBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="StaffBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(StaffBase Object1, StaffBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.StaffId != Object2.StaffId)
				equal = false;
			if ( Object1.StaffCode != null && Object2.StaffCode != null )
			{
				if (Object1.StaffCode != Object2.StaffCode)
					equal = false;
			}
			else if (Object1.StaffCode == null ^ Object2.StaffCode == null )
			{
				equal = false;
			}
			if (Object1.FirstName != Object2.FirstName)
				equal = false;
			if (Object1.LastName != Object2.LastName)
				equal = false;
			if ( Object1.MiddleName != null && Object2.MiddleName != null )
			{
				if (Object1.MiddleName != Object2.MiddleName)
					equal = false;
			}
			else if (Object1.MiddleName == null ^ Object2.MiddleName == null )
			{
				equal = false;
			}
			if ( Object1.Sex != null && Object2.Sex != null )
			{
				if (Object1.Sex != Object2.Sex)
					equal = false;
			}
			else if (Object1.Sex == null ^ Object2.Sex == null )
			{
				equal = false;
			}
			if ( Object1.BirthDate != null && Object2.BirthDate != null )
			{
				if (Object1.BirthDate != Object2.BirthDate)
					equal = false;
			}
			else if (Object1.BirthDate == null ^ Object2.BirthDate == null )
			{
				equal = false;
			}
			if ( Object1.BirthPlaceId != null && Object2.BirthPlaceId != null )
			{
				if (Object1.BirthPlaceId != Object2.BirthPlaceId)
					equal = false;
			}
			else if (Object1.BirthPlaceId == null ^ Object2.BirthPlaceId == null )
			{
				equal = false;
			}
			if ( Object1.BirthdayPlace != null && Object2.BirthdayPlace != null )
			{
				if (Object1.BirthdayPlace != Object2.BirthdayPlace)
					equal = false;
			}
			else if (Object1.BirthdayPlace == null ^ Object2.BirthdayPlace == null )
			{
				equal = false;
			}
			if ( Object1.IsActive != null && Object2.IsActive != null )
			{
				if (Object1.IsActive != Object2.IsActive)
					equal = false;
			}
			else if (Object1.IsActive == null ^ Object2.IsActive == null )
			{
				equal = false;
			}
			if ( Object1.MagneticCardId != null && Object2.MagneticCardId != null )
			{
				if (Object1.MagneticCardId != Object2.MagneticCardId)
					equal = false;
			}
			else if (Object1.MagneticCardId == null ^ Object2.MagneticCardId == null )
			{
				equal = false;
			}
			if ( Object1.ReligiousId != null && Object2.ReligiousId != null )
			{
				if (Object1.ReligiousId != Object2.ReligiousId)
					equal = false;
			}
			else if (Object1.ReligiousId == null ^ Object2.ReligiousId == null )
			{
				equal = false;
			}
			if ( Object1.ProvinceId != null && Object2.ProvinceId != null )
			{
				if (Object1.ProvinceId != Object2.ProvinceId)
					equal = false;
			}
			else if (Object1.ProvinceId == null ^ Object2.ProvinceId == null )
			{
				equal = false;
			}
			if ( Object1.PeopleId != null && Object2.PeopleId != null )
			{
				if (Object1.PeopleId != Object2.PeopleId)
					equal = false;
			}
			else if (Object1.PeopleId == null ^ Object2.PeopleId == null )
			{
				equal = false;
			}
			if ( Object1.StartWorkingDate != null && Object2.StartWorkingDate != null )
			{
				if (Object1.StartWorkingDate != Object2.StartWorkingDate)
					equal = false;
			}
			else if (Object1.StartWorkingDate == null ^ Object2.StartWorkingDate == null )
			{
				equal = false;
			}
			if ( Object1.WorkingDate != null && Object2.WorkingDate != null )
			{
				if (Object1.WorkingDate != Object2.WorkingDate)
					equal = false;
			}
			else if (Object1.WorkingDate == null ^ Object2.WorkingDate == null )
			{
				equal = false;
			}
			if ( Object1.DeptId != null && Object2.DeptId != null )
			{
				if (Object1.DeptId != Object2.DeptId)
					equal = false;
			}
			else if (Object1.DeptId == null ^ Object2.DeptId == null )
			{
				equal = false;
			}
			if ( Object1.JobTitleId != null && Object2.JobTitleId != null )
			{
				if (Object1.JobTitleId != Object2.JobTitleId)
					equal = false;
			}
			else if (Object1.JobTitleId == null ^ Object2.JobTitleId == null )
			{
				equal = false;
			}
			if ( Object1.PermanentAddress != null && Object2.PermanentAddress != null )
			{
				if (Object1.PermanentAddress != Object2.PermanentAddress)
					equal = false;
			}
			else if (Object1.PermanentAddress == null ^ Object2.PermanentAddress == null )
			{
				equal = false;
			}
			if ( Object1.PermanentProvinceId != null && Object2.PermanentProvinceId != null )
			{
				if (Object1.PermanentProvinceId != Object2.PermanentProvinceId)
					equal = false;
			}
			else if (Object1.PermanentProvinceId == null ^ Object2.PermanentProvinceId == null )
			{
				equal = false;
			}
			if ( Object1.CurrentAddress != null && Object2.CurrentAddress != null )
			{
				if (Object1.CurrentAddress != Object2.CurrentAddress)
					equal = false;
			}
			else if (Object1.CurrentAddress == null ^ Object2.CurrentAddress == null )
			{
				equal = false;
			}
			if ( Object1.CurrentProvinceId != null && Object2.CurrentProvinceId != null )
			{
				if (Object1.CurrentProvinceId != Object2.CurrentProvinceId)
					equal = false;
			}
			else if (Object1.CurrentProvinceId == null ^ Object2.CurrentProvinceId == null )
			{
				equal = false;
			}
			if ( Object1.CreationDate != null && Object2.CreationDate != null )
			{
				if (Object1.CreationDate != Object2.CreationDate)
					equal = false;
			}
			else if (Object1.CreationDate == null ^ Object2.CreationDate == null )
			{
				equal = false;
			}
			if ( Object1.CreationUserId != null && Object2.CreationUserId != null )
			{
				if (Object1.CreationUserId != Object2.CreationUserId)
					equal = false;
			}
			else if (Object1.CreationUserId == null ^ Object2.CreationUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastModificationDate != null && Object2.LastModificationDate != null )
			{
				if (Object1.LastModificationDate != Object2.LastModificationDate)
					equal = false;
			}
			else if (Object1.LastModificationDate == null ^ Object2.LastModificationDate == null )
			{
				equal = false;
			}
			if ( Object1.LastModificationUserId != null && Object2.LastModificationUserId != null )
			{
				if (Object1.LastModificationUserId != Object2.LastModificationUserId)
					equal = false;
			}
			else if (Object1.LastModificationUserId == null ^ Object2.LastModificationUserId == null )
			{
				equal = false;
			}
			if ( Object1.Photo != null && Object2.Photo != null )
			{
				if (Object1.Photo != Object2.Photo)
					equal = false;
			}
			else if (Object1.Photo == null ^ Object2.Photo == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			// TODO -> generate a strongly typed IComparer in the concrete class
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name) .CompareTo(((StaffBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name));
		}
		
		/*
		// static method to get a Comparer object
        public static StaffComparer GetComparer()
        {
            return new StaffComparer();
        }
        */

        // Comparer delegates back to Staff
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Staff rhs, StaffColumn which)
        {
            switch (which)
            {
            	
            	
            	case StaffColumn.StaffId:
            		return this.StaffId.CompareTo(rhs.StaffId);
            		
            		                 
            	
            	
            	case StaffColumn.StaffCode:
            		return this.StaffCode.CompareTo(rhs.StaffCode);
            		
            		                 
            	
            	
            	case StaffColumn.FirstName:
            		return this.FirstName.CompareTo(rhs.FirstName);
            		
            		                 
            	
            	
            	case StaffColumn.LastName:
            		return this.LastName.CompareTo(rhs.LastName);
            		
            		                 
            	
            	
            	case StaffColumn.MiddleName:
            		return this.MiddleName.CompareTo(rhs.MiddleName);
            		
            		                 
            	
            	
            	case StaffColumn.Sex:
            		return this.Sex.Value.CompareTo(rhs.Sex.Value);
            		
            		                 
            	
            	
            	case StaffColumn.BirthDate:
            		return this.BirthDate.Value.CompareTo(rhs.BirthDate.Value);
            		
            		                 
            	
            	
            	case StaffColumn.BirthPlaceId:
            		return this.BirthPlaceId.Value.CompareTo(rhs.BirthPlaceId.Value);
            		
            		                 
            	
            	
            	case StaffColumn.BirthdayPlace:
            		return this.BirthdayPlace.CompareTo(rhs.BirthdayPlace);
            		
            		                 
            	
            	
            	case StaffColumn.IsActive:
            		return this.IsActive.Value.CompareTo(rhs.IsActive.Value);
            		
            		                 
            	
            	
            	case StaffColumn.MagneticCardId:
            		return this.MagneticCardId.CompareTo(rhs.MagneticCardId);
            		
            		                 
            	
            	
            	case StaffColumn.ReligiousId:
            		return this.ReligiousId.Value.CompareTo(rhs.ReligiousId.Value);
            		
            		                 
            	
            	
            	case StaffColumn.ProvinceId:
            		return this.ProvinceId.Value.CompareTo(rhs.ProvinceId.Value);
            		
            		                 
            	
            	
            	case StaffColumn.PeopleId:
            		return this.PeopleId.Value.CompareTo(rhs.PeopleId.Value);
            		
            		                 
            	
            	
            	case StaffColumn.StartWorkingDate:
            		return this.StartWorkingDate.Value.CompareTo(rhs.StartWorkingDate.Value);
            		
            		                 
            	
            	
            	case StaffColumn.WorkingDate:
            		return this.WorkingDate.Value.CompareTo(rhs.WorkingDate.Value);
            		
            		                 
            	
            	
            	case StaffColumn.DeptId:
            		return this.DeptId.Value.CompareTo(rhs.DeptId.Value);
            		
            		                 
            	
            	
            	case StaffColumn.JobTitleId:
            		return this.JobTitleId.Value.CompareTo(rhs.JobTitleId.Value);
            		
            		                 
            	
            	
            	case StaffColumn.PermanentAddress:
            		return this.PermanentAddress.CompareTo(rhs.PermanentAddress);
            		
            		                 
            	
            	
            	case StaffColumn.PermanentProvinceId:
            		return this.PermanentProvinceId.Value.CompareTo(rhs.PermanentProvinceId.Value);
            		
            		                 
            	
            	
            	case StaffColumn.CurrentAddress:
            		return this.CurrentAddress.CompareTo(rhs.CurrentAddress);
            		
            		                 
            	
            	
            	case StaffColumn.CurrentProvinceId:
            		return this.CurrentProvinceId.Value.CompareTo(rhs.CurrentProvinceId.Value);
            		
            		                 
            	
            	
            	case StaffColumn.CreationDate:
            		return this.CreationDate.Value.CompareTo(rhs.CreationDate.Value);
            		
            		                 
            	
            	
            	case StaffColumn.CreationUserId:
            		return this.CreationUserId.Value.CompareTo(rhs.CreationUserId.Value);
            		
            		                 
            	
            	
            	case StaffColumn.LastModificationDate:
            		return this.LastModificationDate.Value.CompareTo(rhs.LastModificationDate.Value);
            		
            		                 
            	
            	
            	case StaffColumn.LastModificationUserId:
            		return this.LastModificationUserId.Value.CompareTo(rhs.LastModificationUserId.Value);
            		
            		                 
            	
            	
            	case StaffColumn.Photo:
            		return this.Photo.CompareTo(rhs.Photo);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<StaffKey> Members
		
		// member variable for the EntityId property
		private StaffKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public StaffKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new StaffKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = @"Staff" 
					+ this.StaffId.ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{28}{27}- StaffId: {0}{27}- StaffCode: {1}{27}- FirstName: {2}{27}- LastName: {3}{27}- MiddleName: {4}{27}- Sex: {5}{27}- BirthDate: {6}{27}- BirthPlaceId: {7}{27}- BirthdayPlace: {8}{27}- IsActive: {9}{27}- MagneticCardId: {10}{27}- ReligiousId: {11}{27}- ProvinceId: {12}{27}- PeopleId: {13}{27}- StartWorkingDate: {14}{27}- WorkingDate: {15}{27}- DeptId: {16}{27}- JobTitleId: {17}{27}- PermanentAddress: {18}{27}- PermanentProvinceId: {19}{27}- CurrentAddress: {20}{27}- CurrentProvinceId: {21}{27}- CreationDate: {22}{27}- CreationUserId: {23}{27}- LastModificationDate: {24}{27}- LastModificationUserId: {25}{27}- Photo: {26}{27}", 
				this.StaffId,
				(this.StaffCode == null) ? string.Empty : this.StaffCode.ToString(),
				this.FirstName,
				this.LastName,
				(this.MiddleName == null) ? string.Empty : this.MiddleName.ToString(),
				(this.Sex == null) ? string.Empty : this.Sex.ToString(),
				(this.BirthDate == null) ? string.Empty : this.BirthDate.ToString(),
				(this.BirthPlaceId == null) ? string.Empty : this.BirthPlaceId.ToString(),
				(this.BirthdayPlace == null) ? string.Empty : this.BirthdayPlace.ToString(),
				(this.IsActive == null) ? string.Empty : this.IsActive.ToString(),
				(this.MagneticCardId == null) ? string.Empty : this.MagneticCardId.ToString(),
				(this.ReligiousId == null) ? string.Empty : this.ReligiousId.ToString(),
				(this.ProvinceId == null) ? string.Empty : this.ProvinceId.ToString(),
				(this.PeopleId == null) ? string.Empty : this.PeopleId.ToString(),
				(this.StartWorkingDate == null) ? string.Empty : this.StartWorkingDate.ToString(),
				(this.WorkingDate == null) ? string.Empty : this.WorkingDate.ToString(),
				(this.DeptId == null) ? string.Empty : this.DeptId.ToString(),
				(this.JobTitleId == null) ? string.Empty : this.JobTitleId.ToString(),
				(this.PermanentAddress == null) ? string.Empty : this.PermanentAddress.ToString(),
				(this.PermanentProvinceId == null) ? string.Empty : this.PermanentProvinceId.ToString(),
				(this.CurrentAddress == null) ? string.Empty : this.CurrentAddress.ToString(),
				(this.CurrentProvinceId == null) ? string.Empty : this.CurrentProvinceId.ToString(),
				(this.CreationDate == null) ? string.Empty : this.CreationDate.ToString(),
				(this.CreationUserId == null) ? string.Empty : this.CreationUserId.ToString(),
				(this.LastModificationDate == null) ? string.Empty : this.LastModificationDate.ToString(),
				(this.LastModificationUserId == null) ? string.Empty : this.LastModificationUserId.ToString(),
				(this.Photo == null) ? string.Empty : this.Photo.ToString(),
				Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Staff' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal class StaffEntityData : ICloneable
	{
		#region Variable Declarations
		
		#region Primary key(s)
			/// <summary>			
			/// StaffId : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "Staff"</remarks>
			public System.Int32 StaffId;
				
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// StaffCode : 
		/// </summary>
		public System.String		  StaffCode = string.Empty;
		
		/// <summary>
		/// FirstName : 
		/// </summary>
		public System.String		  FirstName = string.Empty;
		
		/// <summary>
		/// LastName : 
		/// </summary>
		public System.String		  LastName = string.Empty;
		
		/// <summary>
		/// MiddleName : 
		/// </summary>
		public System.String		  MiddleName = string.Empty;
		
		/// <summary>
		/// Sex : 
		/// </summary>
		public System.Int32?		  Sex = (int)0;
		
		/// <summary>
		/// BirthDate : 
		/// </summary>
		public System.DateTime?		  BirthDate = DateTime.MinValue;
		
		/// <summary>
		/// BirthPlaceId : 
		/// </summary>
		public System.Int32?		  BirthPlaceId = (int)0;
		
		/// <summary>
		/// BirthdayPlace : 
		/// </summary>
		public System.String		  BirthdayPlace = string.Empty;
		
		/// <summary>
		/// IsActive : 
		/// </summary>
		public System.Boolean?		  IsActive = false;
		
		/// <summary>
		/// MagneticCardId : 
		/// </summary>
		public System.String		  MagneticCardId = string.Empty;
		
		/// <summary>
		/// ReligiousId : 
		/// </summary>
		public System.Int32?		  ReligiousId = (int)0;
		
		/// <summary>
		/// ProvinceId : 
		/// </summary>
		public System.Int32?		  ProvinceId = (int)0;
		
		/// <summary>
		/// PeopleId : 
		/// </summary>
		public System.Int32?		  PeopleId = (int)0;
		
		/// <summary>
		/// StartWorkingDate : ngay bat dau lam o cty
		/// </summary>
		public System.DateTime?		  StartWorkingDate = DateTime.MinValue;
		
		/// <summary>
		/// WorkingDate : ngay bat dau di lam
		/// </summary>
		public System.DateTime?		  WorkingDate = DateTime.MinValue;
		
		/// <summary>
		/// DeptId : 
		/// </summary>
		public System.Int32?		  DeptId = (int)0;
		
		/// <summary>
		/// JobTitleId : 
		/// </summary>
		public System.Int32?		  JobTitleId = (int)0;
		
		/// <summary>
		/// PermanentAddress : 
		/// </summary>
		public System.String		  PermanentAddress = string.Empty;
		
		/// <summary>
		/// PermanentProvinceId : 
		/// </summary>
		public System.Int32?		  PermanentProvinceId = (int)0;
		
		/// <summary>
		/// CurrentAddress : 
		/// </summary>
		public System.String		  CurrentAddress = string.Empty;
		
		/// <summary>
		/// CurrentProvinceId : 
		/// </summary>
		public System.Int32?		  CurrentProvinceId = (int)0;
		
		/// <summary>
		/// CreationDate : 
		/// </summary>
		public System.DateTime?		  CreationDate = DateTime.MinValue;
		
		/// <summary>
		/// CreationUserId : 
		/// </summary>
		public System.Int32?		  CreationUserId = (int)0;
		
		/// <summary>
		/// LastModificationDate : 
		/// </summary>
		public System.DateTime?		  LastModificationDate = DateTime.MinValue;
		
		/// <summary>
		/// LastModificationUserId : 
		/// </summary>
		public System.Int32?		  LastModificationUserId = (int)0;
		
		/// <summary>
		/// Photo : 
		/// </summary>
		public System.String		  Photo = string.Empty;
		#endregion
			
		#endregion Variable Declarations
		
		#region Clone
		public Object Clone()
		{
			StaffEntityData _tmp = new StaffEntityData();
						
			_tmp.StaffId = this.StaffId;
			
			_tmp.StaffCode = this.StaffCode;
			_tmp.FirstName = this.FirstName;
			_tmp.LastName = this.LastName;
			_tmp.MiddleName = this.MiddleName;
			_tmp.Sex = this.Sex;
			_tmp.BirthDate = this.BirthDate;
			_tmp.BirthPlaceId = this.BirthPlaceId;
			_tmp.BirthdayPlace = this.BirthdayPlace;
			_tmp.IsActive = this.IsActive;
			_tmp.MagneticCardId = this.MagneticCardId;
			_tmp.ReligiousId = this.ReligiousId;
			_tmp.ProvinceId = this.ProvinceId;
			_tmp.PeopleId = this.PeopleId;
			_tmp.StartWorkingDate = this.StartWorkingDate;
			_tmp.WorkingDate = this.WorkingDate;
			_tmp.DeptId = this.DeptId;
			_tmp.JobTitleId = this.JobTitleId;
			_tmp.PermanentAddress = this.PermanentAddress;
			_tmp.PermanentProvinceId = this.PermanentProvinceId;
			_tmp.CurrentAddress = this.CurrentAddress;
			_tmp.CurrentProvinceId = this.CurrentProvinceId;
			_tmp.CreationDate = this.CreationDate;
			_tmp.CreationUserId = this.CreationUserId;
			_tmp.LastModificationDate = this.LastModificationDate;
			_tmp.LastModificationUserId = this.LastModificationUserId;
			_tmp.Photo = this.Photo;
			
			return _tmp;
		}
		#endregion 
		
		#region Data Properties

		#region RoleOfStaffCollection
		
		private TList<RoleOfStaff> roleOfStaffStaffId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation roleOfStaffStaffId
		/// </summary>	
		public TList<RoleOfStaff> RoleOfStaffCollection
		{
			get
			{
				if (roleOfStaffStaffId == null)
				{
				roleOfStaffStaffId = new TList<RoleOfStaff>();
				}
	
				return roleOfStaffStaffId;
			}
			set { roleOfStaffStaffId = value; }
		}
		
		#endregion

		#endregion Data Properties

	}//End struct


		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("StaffCode",200));
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"FirstName");
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("FirstName",50));
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"LastName");
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("LastName",50));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("MiddleName",50));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("BirthdayPlace",500));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("MagneticCardId",50));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("PermanentAddress",500));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("CurrentAddress",500));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Photo",300));
		}
   		#endregion
	
	} // End Class
	
	#region StaffComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class StaffComparer : System.Collections.Generic.IComparer<Staff>
	{
		StaffColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:StaffComparer"/> class.
        /// </summary>
		public StaffComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public StaffComparer(StaffColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="Staff"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="Staff"/> to compare.</param>
        /// <param name="b">The second <c>Staff</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Staff a, Staff b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Staff entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Staff a, Staff b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public StaffColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region StaffKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Staff"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class StaffKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the StaffKey class.
		/// </summary>
		public StaffKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the StaffKey class.
		/// </summary>
		public StaffKey(StaffBase entity)
		{
			Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.staffId = entity.StaffId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the StaffKey class.
		/// </summary>
		public StaffKey(System.Int32 staffId)
		{
			#region Init Properties

			this.staffId = staffId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private StaffBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public StaffBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the StaffId property
		private System.Int32 staffId;
		
		/// <summary>
		/// Gets or sets the StaffId property.
		/// </summary>
		public System.Int32 StaffId
		{
			get { return staffId; }
			set
			{
				if ( Entity != null )
				{
					Entity.StaffId = value;
				}
				
				staffId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				StaffId = ( values["StaffId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["StaffId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("StaffId", StaffId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("StaffId: {0}{1}",
								StaffId,
								Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region StaffColumn Enum
	
	/// <summary>
	/// Enumerate the Staff columns.
	/// </summary>
	[Serializable]
	public enum StaffColumn : int
	{
		/// <summary>
		/// StaffId : 
		/// </summary>
		[EnumTextValue("StaffId")]
		[ColumnEnum("StaffId", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		StaffId = 1,
		/// <summary>
		/// StaffCode : 
		/// </summary>
		[EnumTextValue("StaffCode")]
		[ColumnEnum("StaffCode", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		StaffCode = 2,
		/// <summary>
		/// FirstName : 
		/// </summary>
		[EnumTextValue("FirstName")]
		[ColumnEnum("FirstName", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		FirstName = 3,
		/// <summary>
		/// LastName : 
		/// </summary>
		[EnumTextValue("LastName")]
		[ColumnEnum("LastName", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		LastName = 4,
		/// <summary>
		/// MiddleName : 
		/// </summary>
		[EnumTextValue("MiddleName")]
		[ColumnEnum("MiddleName", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		MiddleName = 5,
		/// <summary>
		/// Sex : 
		/// </summary>
		[EnumTextValue("Sex")]
		[ColumnEnum("Sex", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Sex = 6,
		/// <summary>
		/// BirthDate : 
		/// </summary>
		[EnumTextValue("BirthDate")]
		[ColumnEnum("BirthDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		BirthDate = 7,
		/// <summary>
		/// BirthPlaceId : 
		/// </summary>
		[EnumTextValue("BirthPlaceId")]
		[ColumnEnum("BirthPlaceId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		BirthPlaceId = 8,
		/// <summary>
		/// BirthdayPlace : 
		/// </summary>
		[EnumTextValue("BirthdayPlace")]
		[ColumnEnum("BirthdayPlace", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		BirthdayPlace = 9,
		/// <summary>
		/// IsActive : 
		/// </summary>
		[EnumTextValue("IsActive")]
		[ColumnEnum("IsActive", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsActive = 10,
		/// <summary>
		/// MagneticCardId : 
		/// </summary>
		[EnumTextValue("MagneticCardId")]
		[ColumnEnum("MagneticCardId", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		MagneticCardId = 11,
		/// <summary>
		/// ReligiousId : 
		/// </summary>
		[EnumTextValue("ReligiousId")]
		[ColumnEnum("ReligiousId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ReligiousId = 12,
		/// <summary>
		/// ProvinceId : 
		/// </summary>
		[EnumTextValue("ProvinceId")]
		[ColumnEnum("ProvinceId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ProvinceId = 13,
		/// <summary>
		/// PeopleId : 
		/// </summary>
		[EnumTextValue("PeopleId")]
		[ColumnEnum("PeopleId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		PeopleId = 14,
		/// <summary>
		/// StartWorkingDate : ngay bat dau lam o cty
		/// </summary>
		[EnumTextValue("StartWorkingDate")]
		[ColumnEnum("StartWorkingDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		StartWorkingDate = 15,
		/// <summary>
		/// WorkingDate : ngay bat dau di lam
		/// </summary>
		[EnumTextValue("WorkingDate")]
		[ColumnEnum("WorkingDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		WorkingDate = 16,
		/// <summary>
		/// DeptId : 
		/// </summary>
		[EnumTextValue("DeptId")]
		[ColumnEnum("DeptId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		DeptId = 17,
		/// <summary>
		/// JobTitleId : 
		/// </summary>
		[EnumTextValue("JobTitleId")]
		[ColumnEnum("JobTitleId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		JobTitleId = 18,
		/// <summary>
		/// PermanentAddress : 
		/// </summary>
		[EnumTextValue("PermanentAddress")]
		[ColumnEnum("PermanentAddress", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		PermanentAddress = 19,
		/// <summary>
		/// PermanentProvinceId : 
		/// </summary>
		[EnumTextValue("PermanentProvinceId")]
		[ColumnEnum("PermanentProvinceId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		PermanentProvinceId = 20,
		/// <summary>
		/// CurrentAddress : 
		/// </summary>
		[EnumTextValue("CurrentAddress")]
		[ColumnEnum("CurrentAddress", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		CurrentAddress = 21,
		/// <summary>
		/// CurrentProvinceId : 
		/// </summary>
		[EnumTextValue("CurrentProvinceId")]
		[ColumnEnum("CurrentProvinceId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CurrentProvinceId = 22,
		/// <summary>
		/// CreationDate : 
		/// </summary>
		[EnumTextValue("CreationDate")]
		[ColumnEnum("CreationDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CreationDate = 23,
		/// <summary>
		/// CreationUserId : 
		/// </summary>
		[EnumTextValue("CreationUserId")]
		[ColumnEnum("CreationUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CreationUserId = 24,
		/// <summary>
		/// LastModificationDate : 
		/// </summary>
		[EnumTextValue("LastModificationDate")]
		[ColumnEnum("LastModificationDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastModificationDate = 25,
		/// <summary>
		/// LastModificationUserId : 
		/// </summary>
		[EnumTextValue("LastModificationUserId")]
		[ColumnEnum("LastModificationUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		LastModificationUserId = 26,
		/// <summary>
		/// Photo : 
		/// </summary>
		[EnumTextValue("Photo")]
		[ColumnEnum("Photo", typeof(System.String), System.Data.DbType.String, false, false, true, 300)]
		Photo = 27
	}//End enum

	#endregion StaffColumn Enum

} // end namespace
