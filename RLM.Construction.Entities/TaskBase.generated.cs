	
/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : Thursday, December 23, 2010
	Important: Do not modify this file. Edit the file Task.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace RLM.Construction.Entities
{
	#region TaskEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Task"/> object.
	/// </remarks>
	public class TaskEventArgs : System.EventArgs
	{
		private TaskColumn column;
		private object value;
		
		
		///<summary>
		/// Initalizes a new Instance of the TaskEventArgs class.
		///</summary>
		public TaskEventArgs(TaskColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the TaskEventArgs class.
		///</summary>
		public TaskEventArgs(TaskColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		
		///<summary>
		/// The TaskColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="TaskColumn" />
		public TaskColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	
	///<summary>
	/// Define a delegate for all Task related events.
	///</summary>
	public delegate void TaskEventHandler(object sender, TaskEventArgs e);
	
	///<summary>
	/// An object representation of the 'Task' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	//[ToolboxItem(typeof(Task))]
	public abstract partial class TaskBase : EntityBase, IEntityId<TaskKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		/// 	Old the inner data of the entity.
		/// </summary>
		private TaskEntityData entityData;
		
		// <summary>
		// 	Old the original data of the entity.
		// </summary>
		//TaskEntityData originalData;
		
		/// <summary>
		/// 	Old a backup of the inner data of the entity.
		/// </summary>
		private TaskEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		[NonSerialized]
		private TList<Task> parentCollection;
		private bool inTxn = false;

		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event TaskEventHandler ColumnChanging;
		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event TaskEventHandler ColumnChanged;		
		#endregion "Variable Declarations"
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="TaskBase"/> instance.
		///</summary>
		public TaskBase()
		{
			this.entityData = new TaskEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="TaskBase"/> instance.
		///</summary>
		///<param name="taskProjectId"></param>
		///<param name="taskContractId"></param>
		///<param name="taskProjectPhaseId"></param>
		///<param name="taskResourceId"></param>
		///<param name="taskResourceType"></param>
		///<param name="taskApprovalUserId"></param>
		///<param name="taskName"></param>
		///<param name="taskDescription"></param>
		///<param name="taskOperatorUserId"></param>
		///<param name="taskIsApproved"></param>
		///<param name="taskIsCanComment"></param>
		///<param name="taskType">Type of task: Project, Contract, ProjectPhase, Traning...</param>
		///<param name="taskStatus">Status of current task: Planing, Deploying, ....Finished</param>
		///<param name="taskIsActive"></param>
		///<param name="taskUseAsProjectTask"></param>
		///<param name="taskPercentComplete"></param>
		///<param name="taskRealFromDate"></param>
		///<param name="taskRealToDate"></param>
		///<param name="taskEstimationFromDate"></param>
		///<param name="taskEstimationToDate"></param>
		///<param name="taskCreationDate"></param>
		///<param name="taskCreationUserId"></param>
		///<param name="taskLastModificationDate"></param>
		///<param name="taskLastModificationUserId"></param>
		public TaskBase(System.Int32? taskProjectId, System.Int32? taskContractId, System.Int32? taskProjectPhaseId, 
			System.Int32? taskResourceId, System.Int32? taskResourceType, System.Int32? taskApprovalUserId, System.String taskName, 
			System.String taskDescription, System.Int32? taskOperatorUserId, System.Boolean? taskIsApproved, System.Boolean? taskIsCanComment, 
			System.Int32? taskType, System.Int32? taskStatus, System.Boolean? taskIsActive, System.Boolean? taskUseAsProjectTask, 
			System.Double? taskPercentComplete, System.DateTime? taskRealFromDate, System.DateTime? taskRealToDate, System.DateTime? taskEstimationFromDate, 
			System.DateTime? taskEstimationToDate, System.DateTime? taskCreationDate, System.Int32? taskCreationUserId, System.DateTime? taskLastModificationDate, 
			System.Int32? taskLastModificationUserId)
		{
			this.entityData = new TaskEntityData();
			this.backupData = null;

			this.ProjectId = taskProjectId;
			this.ContractId = taskContractId;
			this.ProjectPhaseId = taskProjectPhaseId;
			this.ResourceId = taskResourceId;
			this.ResourceType = taskResourceType;
			this.ApprovalUserId = taskApprovalUserId;
			this.Name = taskName;
			this.Description = taskDescription;
			this.OperatorUserId = taskOperatorUserId;
			this.IsApproved = taskIsApproved;
			this.IsCanComment = taskIsCanComment;
			this.Type = taskType;
			this.Status = taskStatus;
			this.IsActive = taskIsActive;
			this.UseAsProjectTask = taskUseAsProjectTask;
			this.PercentComplete = taskPercentComplete;
			this.RealFromDate = taskRealFromDate;
			this.RealToDate = taskRealToDate;
			this.EstimationFromDate = taskEstimationFromDate;
			this.EstimationToDate = taskEstimationToDate;
			this.CreationDate = taskCreationDate;
			this.CreationUserId = taskCreationUserId;
			this.LastModificationDate = taskLastModificationDate;
			this.LastModificationUserId = taskLastModificationUserId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Task"/> instance.
		///</summary>
		///<param name="taskProjectId"></param>
		///<param name="taskContractId"></param>
		///<param name="taskProjectPhaseId"></param>
		///<param name="taskResourceId"></param>
		///<param name="taskResourceType"></param>
		///<param name="taskApprovalUserId"></param>
		///<param name="taskName"></param>
		///<param name="taskDescription"></param>
		///<param name="taskOperatorUserId"></param>
		///<param name="taskIsApproved"></param>
		///<param name="taskIsCanComment"></param>
		///<param name="taskType">Type of task: Project, Contract, ProjectPhase, Traning...</param>
		///<param name="taskStatus">Status of current task: Planing, Deploying, ....Finished</param>
		///<param name="taskIsActive"></param>
		///<param name="taskUseAsProjectTask"></param>
		///<param name="taskPercentComplete"></param>
		///<param name="taskRealFromDate"></param>
		///<param name="taskRealToDate"></param>
		///<param name="taskEstimationFromDate"></param>
		///<param name="taskEstimationToDate"></param>
		///<param name="taskCreationDate"></param>
		///<param name="taskCreationUserId"></param>
		///<param name="taskLastModificationDate"></param>
		///<param name="taskLastModificationUserId"></param>
		public static Task CreateTask(System.Int32? taskProjectId, System.Int32? taskContractId, System.Int32? taskProjectPhaseId, 
			System.Int32? taskResourceId, System.Int32? taskResourceType, System.Int32? taskApprovalUserId, System.String taskName, 
			System.String taskDescription, System.Int32? taskOperatorUserId, System.Boolean? taskIsApproved, System.Boolean? taskIsCanComment, 
			System.Int32? taskType, System.Int32? taskStatus, System.Boolean? taskIsActive, System.Boolean? taskUseAsProjectTask, 
			System.Double? taskPercentComplete, System.DateTime? taskRealFromDate, System.DateTime? taskRealToDate, System.DateTime? taskEstimationFromDate, 
			System.DateTime? taskEstimationToDate, System.DateTime? taskCreationDate, System.Int32? taskCreationUserId, System.DateTime? taskLastModificationDate, 
			System.Int32? taskLastModificationUserId)
		{
			Task newTask = new Task();
			newTask.ProjectId = taskProjectId;
			newTask.ContractId = taskContractId;
			newTask.ProjectPhaseId = taskProjectPhaseId;
			newTask.ResourceId = taskResourceId;
			newTask.ResourceType = taskResourceType;
			newTask.ApprovalUserId = taskApprovalUserId;
			newTask.Name = taskName;
			newTask.Description = taskDescription;
			newTask.OperatorUserId = taskOperatorUserId;
			newTask.IsApproved = taskIsApproved;
			newTask.IsCanComment = taskIsCanComment;
			newTask.Type = taskType;
			newTask.Status = taskStatus;
			newTask.IsActive = taskIsActive;
			newTask.UseAsProjectTask = taskUseAsProjectTask;
			newTask.PercentComplete = taskPercentComplete;
			newTask.RealFromDate = taskRealFromDate;
			newTask.RealToDate = taskRealToDate;
			newTask.EstimationFromDate = taskEstimationFromDate;
			newTask.EstimationToDate = taskEstimationToDate;
			newTask.CreationDate = taskCreationDate;
			newTask.CreationUserId = taskCreationUserId;
			newTask.LastModificationDate = taskLastModificationDate;
			newTask.LastModificationUserId = taskLastModificationUserId;
			return newTask;
		}
				
		#endregion Constructors
		
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TaskColumn"/> which has raised the event.</param>
		public void OnColumnChanging(TaskColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TaskColumn"/> which has raised the event.</param>
		public void OnColumnChanged(TaskColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TaskColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(TaskColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added)
				EntityManager.StopTracking(EntityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				TaskEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new TaskEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TaskColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(TaskColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				TaskEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new TaskEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
				
		#region Properties	
				
		/// <summary>
		/// 	Gets or sets the TaskId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 TaskId
		{
			get
			{
				return this.entityData.TaskId; 
			}
			
			set
			{
				if (this.entityData.TaskId == value)
					return;
					
					
				OnColumnChanging(TaskColumn.TaskId, this.entityData.TaskId);
				this.entityData.TaskId = value;
				this.EntityId.TaskId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(TaskColumn.TaskId, this.entityData.TaskId);
				OnPropertyChanged("TaskId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ProjectId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsProjectIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ProjectId
		{
			get
			{
				return this.entityData.ProjectId; 
			}
			
			set
			{
				if (this.entityData.ProjectId == value)
					return;
					
					
				OnColumnChanging(TaskColumn.ProjectId, this.entityData.ProjectId);
				this.entityData.ProjectId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(TaskColumn.ProjectId, this.entityData.ProjectId);
				OnPropertyChanged("ProjectId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ContractId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsContractIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ContractId
		{
			get
			{
				return this.entityData.ContractId; 
			}
			
			set
			{
				if (this.entityData.ContractId == value)
					return;
					
					
				OnColumnChanging(TaskColumn.ContractId, this.entityData.ContractId);
				this.entityData.ContractId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(TaskColumn.ContractId, this.entityData.ContractId);
				OnPropertyChanged("ContractId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ProjectPhaseId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsProjectPhaseIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ProjectPhaseId
		{
			get
			{
				return this.entityData.ProjectPhaseId; 
			}
			
			set
			{
				if (this.entityData.ProjectPhaseId == value)
					return;
					
					
				OnColumnChanging(TaskColumn.ProjectPhaseId, this.entityData.ProjectPhaseId);
				this.entityData.ProjectPhaseId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(TaskColumn.ProjectPhaseId, this.entityData.ProjectPhaseId);
				OnPropertyChanged("ProjectPhaseId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ResourceId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsResourceIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ResourceId
		{
			get
			{
				return this.entityData.ResourceId; 
			}
			
			set
			{
				if (this.entityData.ResourceId == value)
					return;
					
					
				OnColumnChanging(TaskColumn.ResourceId, this.entityData.ResourceId);
				this.entityData.ResourceId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(TaskColumn.ResourceId, this.entityData.ResourceId);
				OnPropertyChanged("ResourceId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ResourceType property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsResourceTypeNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ResourceType
		{
			get
			{
				return this.entityData.ResourceType; 
			}
			
			set
			{
				if (this.entityData.ResourceType == value)
					return;
					
					
				OnColumnChanging(TaskColumn.ResourceType, this.entityData.ResourceType);
				this.entityData.ResourceType = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(TaskColumn.ResourceType, this.entityData.ResourceType);
				OnPropertyChanged("ResourceType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ApprovalUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsApprovalUserIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ApprovalUserId
		{
			get
			{
				return this.entityData.ApprovalUserId; 
			}
			
			set
			{
				if (this.entityData.ApprovalUserId == value)
					return;
					
					
				OnColumnChanging(TaskColumn.ApprovalUserId, this.entityData.ApprovalUserId);
				this.entityData.ApprovalUserId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(TaskColumn.ApprovalUserId, this.entityData.ApprovalUserId);
				OnPropertyChanged("ApprovalUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Name property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String Name
		{
			get
			{
				return this.entityData.Name; 
			}
			
			set
			{
				if (this.entityData.Name == value)
					return;
					
					
				OnColumnChanging(TaskColumn.Name, this.entityData.Name);
				this.entityData.Name = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(TaskColumn.Name, this.entityData.Name);
				OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Description property. 
		///		
		/// </summary>
		/// <value>This type is ntext.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String Description
		{
			get
			{
				return this.entityData.Description; 
			}
			
			set
			{
				if (this.entityData.Description == value)
					return;
					
					
				OnColumnChanging(TaskColumn.Description, this.entityData.Description);
				this.entityData.Description = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(TaskColumn.Description, this.entityData.Description);
				OnPropertyChanged("Description");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OperatorUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsOperatorUserIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? OperatorUserId
		{
			get
			{
				return this.entityData.OperatorUserId; 
			}
			
			set
			{
				if (this.entityData.OperatorUserId == value)
					return;
					
					
				OnColumnChanging(TaskColumn.OperatorUserId, this.entityData.OperatorUserId);
				this.entityData.OperatorUserId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(TaskColumn.OperatorUserId, this.entityData.OperatorUserId);
				OnPropertyChanged("OperatorUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsApproved property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsApprovedNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsApproved
		{
			get
			{
				return this.entityData.IsApproved; 
			}
			
			set
			{
				if (this.entityData.IsApproved == value)
					return;
					
					
				OnColumnChanging(TaskColumn.IsApproved, this.entityData.IsApproved);
				this.entityData.IsApproved = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(TaskColumn.IsApproved, this.entityData.IsApproved);
				OnPropertyChanged("IsApproved");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsCanComment property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsCanCommentNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsCanComment
		{
			get
			{
				return this.entityData.IsCanComment; 
			}
			
			set
			{
				if (this.entityData.IsCanComment == value)
					return;
					
					
				OnColumnChanging(TaskColumn.IsCanComment, this.entityData.IsCanComment);
				this.entityData.IsCanComment = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(TaskColumn.IsCanComment, this.entityData.IsCanComment);
				OnPropertyChanged("IsCanComment");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Type property. 
		///		Type of task: Project, Contract, ProjectPhase, Traning...
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsTypeNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("Type of task: Project, Contract, ProjectPhase, Traning..."), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Type
		{
			get
			{
				return this.entityData.Type; 
			}
			
			set
			{
				if (this.entityData.Type == value)
					return;
					
					
				OnColumnChanging(TaskColumn.Type, this.entityData.Type);
				this.entityData.Type = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(TaskColumn.Type, this.entityData.Type);
				OnPropertyChanged("Type");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Status property. 
		///		Status of current task: Planing, Deploying, ....Finished
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsStatusNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("Status of current task: Planing, Deploying, ....Finished"), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Status
		{
			get
			{
				return this.entityData.Status; 
			}
			
			set
			{
				if (this.entityData.Status == value)
					return;
					
					
				OnColumnChanging(TaskColumn.Status, this.entityData.Status);
				this.entityData.Status = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(TaskColumn.Status, this.entityData.Status);
				OnPropertyChanged("Status");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsActive property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsActiveNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsActive
		{
			get
			{
				return this.entityData.IsActive; 
			}
			
			set
			{
				if (this.entityData.IsActive == value)
					return;
					
					
				OnColumnChanging(TaskColumn.IsActive, this.entityData.IsActive);
				this.entityData.IsActive = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(TaskColumn.IsActive, this.entityData.IsActive);
				OnPropertyChanged("IsActive");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UseAsProjectTask property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsUseAsProjectTaskNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? UseAsProjectTask
		{
			get
			{
				return this.entityData.UseAsProjectTask; 
			}
			
			set
			{
				if (this.entityData.UseAsProjectTask == value)
					return;
					
					
				OnColumnChanging(TaskColumn.UseAsProjectTask, this.entityData.UseAsProjectTask);
				this.entityData.UseAsProjectTask = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(TaskColumn.UseAsProjectTask, this.entityData.UseAsProjectTask);
				OnPropertyChanged("UseAsProjectTask");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PercentComplete property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsPercentCompleteNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Double? PercentComplete
		{
			get
			{
				return this.entityData.PercentComplete; 
			}
			
			set
			{
				if (this.entityData.PercentComplete == value)
					return;
					
					
				OnColumnChanging(TaskColumn.PercentComplete, this.entityData.PercentComplete);
				this.entityData.PercentComplete = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(TaskColumn.PercentComplete, this.entityData.PercentComplete);
				OnPropertyChanged("PercentComplete");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RealFromDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsRealFromDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? RealFromDate
		{
			get
			{
				return this.entityData.RealFromDate; 
			}
			
			set
			{
				if (this.entityData.RealFromDate == value)
					return;
					
					
				OnColumnChanging(TaskColumn.RealFromDate, this.entityData.RealFromDate);
				this.entityData.RealFromDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(TaskColumn.RealFromDate, this.entityData.RealFromDate);
				OnPropertyChanged("RealFromDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RealToDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsRealToDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? RealToDate
		{
			get
			{
				return this.entityData.RealToDate; 
			}
			
			set
			{
				if (this.entityData.RealToDate == value)
					return;
					
					
				OnColumnChanging(TaskColumn.RealToDate, this.entityData.RealToDate);
				this.entityData.RealToDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(TaskColumn.RealToDate, this.entityData.RealToDate);
				OnPropertyChanged("RealToDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EstimationFromDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsEstimationFromDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? EstimationFromDate
		{
			get
			{
				return this.entityData.EstimationFromDate; 
			}
			
			set
			{
				if (this.entityData.EstimationFromDate == value)
					return;
					
					
				OnColumnChanging(TaskColumn.EstimationFromDate, this.entityData.EstimationFromDate);
				this.entityData.EstimationFromDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(TaskColumn.EstimationFromDate, this.entityData.EstimationFromDate);
				OnPropertyChanged("EstimationFromDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EstimationToDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsEstimationToDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? EstimationToDate
		{
			get
			{
				return this.entityData.EstimationToDate; 
			}
			
			set
			{
				if (this.entityData.EstimationToDate == value)
					return;
					
					
				OnColumnChanging(TaskColumn.EstimationToDate, this.entityData.EstimationToDate);
				this.entityData.EstimationToDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(TaskColumn.EstimationToDate, this.entityData.EstimationToDate);
				OnPropertyChanged("EstimationToDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreationDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsCreationDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CreationDate
		{
			get
			{
				return this.entityData.CreationDate; 
			}
			
			set
			{
				if (this.entityData.CreationDate == value)
					return;
					
					
				OnColumnChanging(TaskColumn.CreationDate, this.entityData.CreationDate);
				this.entityData.CreationDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(TaskColumn.CreationDate, this.entityData.CreationDate);
				OnPropertyChanged("CreationDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreationUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCreationUserIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CreationUserId
		{
			get
			{
				return this.entityData.CreationUserId; 
			}
			
			set
			{
				if (this.entityData.CreationUserId == value)
					return;
					
					
				OnColumnChanging(TaskColumn.CreationUserId, this.entityData.CreationUserId);
				this.entityData.CreationUserId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(TaskColumn.CreationUserId, this.entityData.CreationUserId);
				OnPropertyChanged("CreationUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModificationDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastModificationDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastModificationDate
		{
			get
			{
				return this.entityData.LastModificationDate; 
			}
			
			set
			{
				if (this.entityData.LastModificationDate == value)
					return;
					
					
				OnColumnChanging(TaskColumn.LastModificationDate, this.entityData.LastModificationDate);
				this.entityData.LastModificationDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(TaskColumn.LastModificationDate, this.entityData.LastModificationDate);
				OnPropertyChanged("LastModificationDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModificationUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsLastModificationUserIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? LastModificationUserId
		{
			get
			{
				return this.entityData.LastModificationUserId; 
			}
			
			set
			{
				if (this.entityData.LastModificationUserId == value)
					return;
					
					
				OnColumnChanging(TaskColumn.LastModificationUserId, this.entityData.LastModificationUserId);
				this.entityData.LastModificationUserId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(TaskColumn.LastModificationUserId, this.entityData.LastModificationUserId);
				OnPropertyChanged("LastModificationUserId");
			}
		}
		

		#region Source Foreign Key Property
				
		#endregion
			
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Task"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"TaskId", "ProjectId", "ContractId", "ProjectPhaseId", "ResourceId", "ResourceType", "ApprovalUserId", "Name", "Description", "OperatorUserId", "IsApproved", "IsCanComment", "Type", "Status", "IsActive", "UseAsProjectTask", "PercentComplete", "RealFromDate", "RealToDate", "EstimationFromDate", "EstimationToDate", "CreationDate", "CreationUserId", "LastModificationDate", "LastModificationUserId"};
			}
		}
		#endregion 
		
		
		#endregion
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as TaskEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Task) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return (object)this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Task>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Task);
	        }
	    }


		#endregion
		
		#region Methods	
			
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();
		}	
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Task Entity 
		///</summary>
		public virtual Task Copy()
		{
			//shallow copy entity
			Task copy = new Task();
			copy.TaskId = this.TaskId;
			copy.ProjectId = this.ProjectId;
			copy.ContractId = this.ContractId;
			copy.ProjectPhaseId = this.ProjectPhaseId;
			copy.ResourceId = this.ResourceId;
			copy.ResourceType = this.ResourceType;
			copy.ApprovalUserId = this.ApprovalUserId;
			copy.Name = this.Name;
			copy.Description = this.Description;
			copy.OperatorUserId = this.OperatorUserId;
			copy.IsApproved = this.IsApproved;
			copy.IsCanComment = this.IsCanComment;
			copy.Type = this.Type;
			copy.Status = this.Status;
			copy.IsActive = this.IsActive;
			copy.UseAsProjectTask = this.UseAsProjectTask;
			copy.PercentComplete = this.PercentComplete;
			copy.RealFromDate = this.RealFromDate;
			copy.RealToDate = this.RealToDate;
			copy.EstimationFromDate = this.EstimationFromDate;
			copy.EstimationToDate = this.EstimationToDate;
			copy.CreationDate = this.CreationDate;
			copy.CreationUserId = this.CreationUserId;
			copy.LastModificationDate = this.LastModificationDate;
			copy.LastModificationUserId = this.LastModificationUserId;
					
			copy.AcceptChanges();
			return (Task)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed Task Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Task DeepCopy()
		{
			return EntityHelper.Clone<Task>(this as Task);	
		}
		#endregion
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="TaskBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(TaskBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="TaskBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="TaskBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="TaskBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(TaskBase Object1, TaskBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.TaskId != Object2.TaskId)
				equal = false;
			if ( Object1.ProjectId != null && Object2.ProjectId != null )
			{
				if (Object1.ProjectId != Object2.ProjectId)
					equal = false;
			}
			else if (Object1.ProjectId == null ^ Object2.ProjectId == null )
			{
				equal = false;
			}
			if ( Object1.ContractId != null && Object2.ContractId != null )
			{
				if (Object1.ContractId != Object2.ContractId)
					equal = false;
			}
			else if (Object1.ContractId == null ^ Object2.ContractId == null )
			{
				equal = false;
			}
			if ( Object1.ProjectPhaseId != null && Object2.ProjectPhaseId != null )
			{
				if (Object1.ProjectPhaseId != Object2.ProjectPhaseId)
					equal = false;
			}
			else if (Object1.ProjectPhaseId == null ^ Object2.ProjectPhaseId == null )
			{
				equal = false;
			}
			if ( Object1.ResourceId != null && Object2.ResourceId != null )
			{
				if (Object1.ResourceId != Object2.ResourceId)
					equal = false;
			}
			else if (Object1.ResourceId == null ^ Object2.ResourceId == null )
			{
				equal = false;
			}
			if ( Object1.ResourceType != null && Object2.ResourceType != null )
			{
				if (Object1.ResourceType != Object2.ResourceType)
					equal = false;
			}
			else if (Object1.ResourceType == null ^ Object2.ResourceType == null )
			{
				equal = false;
			}
			if ( Object1.ApprovalUserId != null && Object2.ApprovalUserId != null )
			{
				if (Object1.ApprovalUserId != Object2.ApprovalUserId)
					equal = false;
			}
			else if (Object1.ApprovalUserId == null ^ Object2.ApprovalUserId == null )
			{
				equal = false;
			}
			if ( Object1.Name != null && Object2.Name != null )
			{
				if (Object1.Name != Object2.Name)
					equal = false;
			}
			else if (Object1.Name == null ^ Object2.Name == null )
			{
				equal = false;
			}
			if ( Object1.Description != null && Object2.Description != null )
			{
				if (Object1.Description != Object2.Description)
					equal = false;
			}
			else if (Object1.Description == null ^ Object2.Description == null )
			{
				equal = false;
			}
			if ( Object1.OperatorUserId != null && Object2.OperatorUserId != null )
			{
				if (Object1.OperatorUserId != Object2.OperatorUserId)
					equal = false;
			}
			else if (Object1.OperatorUserId == null ^ Object2.OperatorUserId == null )
			{
				equal = false;
			}
			if ( Object1.IsApproved != null && Object2.IsApproved != null )
			{
				if (Object1.IsApproved != Object2.IsApproved)
					equal = false;
			}
			else if (Object1.IsApproved == null ^ Object2.IsApproved == null )
			{
				equal = false;
			}
			if ( Object1.IsCanComment != null && Object2.IsCanComment != null )
			{
				if (Object1.IsCanComment != Object2.IsCanComment)
					equal = false;
			}
			else if (Object1.IsCanComment == null ^ Object2.IsCanComment == null )
			{
				equal = false;
			}
			if ( Object1.Type != null && Object2.Type != null )
			{
				if (Object1.Type != Object2.Type)
					equal = false;
			}
			else if (Object1.Type == null ^ Object2.Type == null )
			{
				equal = false;
			}
			if ( Object1.Status != null && Object2.Status != null )
			{
				if (Object1.Status != Object2.Status)
					equal = false;
			}
			else if (Object1.Status == null ^ Object2.Status == null )
			{
				equal = false;
			}
			if ( Object1.IsActive != null && Object2.IsActive != null )
			{
				if (Object1.IsActive != Object2.IsActive)
					equal = false;
			}
			else if (Object1.IsActive == null ^ Object2.IsActive == null )
			{
				equal = false;
			}
			if ( Object1.UseAsProjectTask != null && Object2.UseAsProjectTask != null )
			{
				if (Object1.UseAsProjectTask != Object2.UseAsProjectTask)
					equal = false;
			}
			else if (Object1.UseAsProjectTask == null ^ Object2.UseAsProjectTask == null )
			{
				equal = false;
			}
			if ( Object1.PercentComplete != null && Object2.PercentComplete != null )
			{
				if (Object1.PercentComplete != Object2.PercentComplete)
					equal = false;
			}
			else if (Object1.PercentComplete == null ^ Object2.PercentComplete == null )
			{
				equal = false;
			}
			if ( Object1.RealFromDate != null && Object2.RealFromDate != null )
			{
				if (Object1.RealFromDate != Object2.RealFromDate)
					equal = false;
			}
			else if (Object1.RealFromDate == null ^ Object2.RealFromDate == null )
			{
				equal = false;
			}
			if ( Object1.RealToDate != null && Object2.RealToDate != null )
			{
				if (Object1.RealToDate != Object2.RealToDate)
					equal = false;
			}
			else if (Object1.RealToDate == null ^ Object2.RealToDate == null )
			{
				equal = false;
			}
			if ( Object1.EstimationFromDate != null && Object2.EstimationFromDate != null )
			{
				if (Object1.EstimationFromDate != Object2.EstimationFromDate)
					equal = false;
			}
			else if (Object1.EstimationFromDate == null ^ Object2.EstimationFromDate == null )
			{
				equal = false;
			}
			if ( Object1.EstimationToDate != null && Object2.EstimationToDate != null )
			{
				if (Object1.EstimationToDate != Object2.EstimationToDate)
					equal = false;
			}
			else if (Object1.EstimationToDate == null ^ Object2.EstimationToDate == null )
			{
				equal = false;
			}
			if ( Object1.CreationDate != null && Object2.CreationDate != null )
			{
				if (Object1.CreationDate != Object2.CreationDate)
					equal = false;
			}
			else if (Object1.CreationDate == null ^ Object2.CreationDate == null )
			{
				equal = false;
			}
			if ( Object1.CreationUserId != null && Object2.CreationUserId != null )
			{
				if (Object1.CreationUserId != Object2.CreationUserId)
					equal = false;
			}
			else if (Object1.CreationUserId == null ^ Object2.CreationUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastModificationDate != null && Object2.LastModificationDate != null )
			{
				if (Object1.LastModificationDate != Object2.LastModificationDate)
					equal = false;
			}
			else if (Object1.LastModificationDate == null ^ Object2.LastModificationDate == null )
			{
				equal = false;
			}
			if ( Object1.LastModificationUserId != null && Object2.LastModificationUserId != null )
			{
				if (Object1.LastModificationUserId != Object2.LastModificationUserId)
					equal = false;
			}
			else if (Object1.LastModificationUserId == null ^ Object2.LastModificationUserId == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			// TODO -> generate a strongly typed IComparer in the concrete class
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name) .CompareTo(((TaskBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name));
		}
		
		/*
		// static method to get a Comparer object
        public static TaskComparer GetComparer()
        {
            return new TaskComparer();
        }
        */

        // Comparer delegates back to Task
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Task rhs, TaskColumn which)
        {
            switch (which)
            {
            	
            	
            	case TaskColumn.TaskId:
            		return this.TaskId.CompareTo(rhs.TaskId);
            		
            		                 
            	
            	
            	case TaskColumn.ProjectId:
            		return this.ProjectId.Value.CompareTo(rhs.ProjectId.Value);
            		
            		                 
            	
            	
            	case TaskColumn.ContractId:
            		return this.ContractId.Value.CompareTo(rhs.ContractId.Value);
            		
            		                 
            	
            	
            	case TaskColumn.ProjectPhaseId:
            		return this.ProjectPhaseId.Value.CompareTo(rhs.ProjectPhaseId.Value);
            		
            		                 
            	
            	
            	case TaskColumn.ResourceId:
            		return this.ResourceId.Value.CompareTo(rhs.ResourceId.Value);
            		
            		                 
            	
            	
            	case TaskColumn.ResourceType:
            		return this.ResourceType.Value.CompareTo(rhs.ResourceType.Value);
            		
            		                 
            	
            	
            	case TaskColumn.ApprovalUserId:
            		return this.ApprovalUserId.Value.CompareTo(rhs.ApprovalUserId.Value);
            		
            		                 
            	
            	
            	case TaskColumn.Name:
            		return this.Name.CompareTo(rhs.Name);
            		
            		                 
            	
            	
            	case TaskColumn.Description:
            		return this.Description.CompareTo(rhs.Description);
            		
            		                 
            	
            	
            	case TaskColumn.OperatorUserId:
            		return this.OperatorUserId.Value.CompareTo(rhs.OperatorUserId.Value);
            		
            		                 
            	
            	
            	case TaskColumn.IsApproved:
            		return this.IsApproved.Value.CompareTo(rhs.IsApproved.Value);
            		
            		                 
            	
            	
            	case TaskColumn.IsCanComment:
            		return this.IsCanComment.Value.CompareTo(rhs.IsCanComment.Value);
            		
            		                 
            	
            	
            	case TaskColumn.Type:
            		return this.Type.Value.CompareTo(rhs.Type.Value);
            		
            		                 
            	
            	
            	case TaskColumn.Status:
            		return this.Status.Value.CompareTo(rhs.Status.Value);
            		
            		                 
            	
            	
            	case TaskColumn.IsActive:
            		return this.IsActive.Value.CompareTo(rhs.IsActive.Value);
            		
            		                 
            	
            	
            	case TaskColumn.UseAsProjectTask:
            		return this.UseAsProjectTask.Value.CompareTo(rhs.UseAsProjectTask.Value);
            		
            		                 
            	
            	
            	case TaskColumn.PercentComplete:
            		return this.PercentComplete.Value.CompareTo(rhs.PercentComplete.Value);
            		
            		                 
            	
            	
            	case TaskColumn.RealFromDate:
            		return this.RealFromDate.Value.CompareTo(rhs.RealFromDate.Value);
            		
            		                 
            	
            	
            	case TaskColumn.RealToDate:
            		return this.RealToDate.Value.CompareTo(rhs.RealToDate.Value);
            		
            		                 
            	
            	
            	case TaskColumn.EstimationFromDate:
            		return this.EstimationFromDate.Value.CompareTo(rhs.EstimationFromDate.Value);
            		
            		                 
            	
            	
            	case TaskColumn.EstimationToDate:
            		return this.EstimationToDate.Value.CompareTo(rhs.EstimationToDate.Value);
            		
            		                 
            	
            	
            	case TaskColumn.CreationDate:
            		return this.CreationDate.Value.CompareTo(rhs.CreationDate.Value);
            		
            		                 
            	
            	
            	case TaskColumn.CreationUserId:
            		return this.CreationUserId.Value.CompareTo(rhs.CreationUserId.Value);
            		
            		                 
            	
            	
            	case TaskColumn.LastModificationDate:
            		return this.LastModificationDate.Value.CompareTo(rhs.LastModificationDate.Value);
            		
            		                 
            	
            	
            	case TaskColumn.LastModificationUserId:
            		return this.LastModificationUserId.Value.CompareTo(rhs.LastModificationUserId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<TaskKey> Members
		
		// member variable for the EntityId property
		private TaskKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public TaskKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new TaskKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = @"Task" 
					+ this.TaskId.ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{26}{25}- TaskId: {0}{25}- ProjectId: {1}{25}- ContractId: {2}{25}- ProjectPhaseId: {3}{25}- ResourceId: {4}{25}- ResourceType: {5}{25}- ApprovalUserId: {6}{25}- Name: {7}{25}- Description: {8}{25}- OperatorUserId: {9}{25}- IsApproved: {10}{25}- IsCanComment: {11}{25}- Type: {12}{25}- Status: {13}{25}- IsActive: {14}{25}- UseAsProjectTask: {15}{25}- PercentComplete: {16}{25}- RealFromDate: {17}{25}- RealToDate: {18}{25}- EstimationFromDate: {19}{25}- EstimationToDate: {20}{25}- CreationDate: {21}{25}- CreationUserId: {22}{25}- LastModificationDate: {23}{25}- LastModificationUserId: {24}{25}", 
				this.TaskId,
				(this.ProjectId == null) ? string.Empty : this.ProjectId.ToString(),
				(this.ContractId == null) ? string.Empty : this.ContractId.ToString(),
				(this.ProjectPhaseId == null) ? string.Empty : this.ProjectPhaseId.ToString(),
				(this.ResourceId == null) ? string.Empty : this.ResourceId.ToString(),
				(this.ResourceType == null) ? string.Empty : this.ResourceType.ToString(),
				(this.ApprovalUserId == null) ? string.Empty : this.ApprovalUserId.ToString(),
				(this.Name == null) ? string.Empty : this.Name.ToString(),
				(this.Description == null) ? string.Empty : this.Description.ToString(),
				(this.OperatorUserId == null) ? string.Empty : this.OperatorUserId.ToString(),
				(this.IsApproved == null) ? string.Empty : this.IsApproved.ToString(),
				(this.IsCanComment == null) ? string.Empty : this.IsCanComment.ToString(),
				(this.Type == null) ? string.Empty : this.Type.ToString(),
				(this.Status == null) ? string.Empty : this.Status.ToString(),
				(this.IsActive == null) ? string.Empty : this.IsActive.ToString(),
				(this.UseAsProjectTask == null) ? string.Empty : this.UseAsProjectTask.ToString(),
				(this.PercentComplete == null) ? string.Empty : this.PercentComplete.ToString(),
				(this.RealFromDate == null) ? string.Empty : this.RealFromDate.ToString(),
				(this.RealToDate == null) ? string.Empty : this.RealToDate.ToString(),
				(this.EstimationFromDate == null) ? string.Empty : this.EstimationFromDate.ToString(),
				(this.EstimationToDate == null) ? string.Empty : this.EstimationToDate.ToString(),
				(this.CreationDate == null) ? string.Empty : this.CreationDate.ToString(),
				(this.CreationUserId == null) ? string.Empty : this.CreationUserId.ToString(),
				(this.LastModificationDate == null) ? string.Empty : this.LastModificationDate.ToString(),
				(this.LastModificationUserId == null) ? string.Empty : this.LastModificationUserId.ToString(),
				Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Task' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal class TaskEntityData : ICloneable
	{
		#region Variable Declarations
		
		#region Primary key(s)
			/// <summary>			
			/// TaskId : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "Task"</remarks>
			public System.Int32 TaskId;
				
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ProjectId : 
		/// </summary>
		public System.Int32?		  ProjectId = (int)0;
		
		/// <summary>
		/// ContractId : 
		/// </summary>
		public System.Int32?		  ContractId = (int)0;
		
		/// <summary>
		/// ProjectPhaseId : 
		/// </summary>
		public System.Int32?		  ProjectPhaseId = (int)0;
		
		/// <summary>
		/// ResourceId : 
		/// </summary>
		public System.Int32?		  ResourceId = (int)0;
		
		/// <summary>
		/// ResourceType : 
		/// </summary>
		public System.Int32?		  ResourceType = (int)0;
		
		/// <summary>
		/// ApprovalUserId : 
		/// </summary>
		public System.Int32?		  ApprovalUserId = (int)0;
		
		/// <summary>
		/// Name : 
		/// </summary>
		public System.String		  Name = string.Empty;
		
		/// <summary>
		/// Description : 
		/// </summary>
		public System.String		  Description = string.Empty;
		
		/// <summary>
		/// OperatorUserId : 
		/// </summary>
		public System.Int32?		  OperatorUserId = (int)0;
		
		/// <summary>
		/// IsApproved : 
		/// </summary>
		public System.Boolean?		  IsApproved = false;
		
		/// <summary>
		/// IsCanComment : 
		/// </summary>
		public System.Boolean?		  IsCanComment = false;
		
		/// <summary>
		/// Type : Type of task: Project, Contract, ProjectPhase, Traning...
		/// </summary>
		public System.Int32?		  Type = (int)0;
		
		/// <summary>
		/// Status : Status of current task: Planing, Deploying, ....Finished
		/// </summary>
		public System.Int32?		  Status = (int)0;
		
		/// <summary>
		/// IsActive : 
		/// </summary>
		public System.Boolean?		  IsActive = false;
		
		/// <summary>
		/// UseAsProjectTask : 
		/// </summary>
		public System.Boolean?		  UseAsProjectTask = false;
		
		/// <summary>
		/// PercentComplete : 
		/// </summary>
		public System.Double?		  PercentComplete = 0.0f;
		
		/// <summary>
		/// RealFromDate : 
		/// </summary>
		public System.DateTime?		  RealFromDate = DateTime.MinValue;
		
		/// <summary>
		/// RealToDate : 
		/// </summary>
		public System.DateTime?		  RealToDate = DateTime.MinValue;
		
		/// <summary>
		/// EstimationFromDate : 
		/// </summary>
		public System.DateTime?		  EstimationFromDate = DateTime.MinValue;
		
		/// <summary>
		/// EstimationToDate : 
		/// </summary>
		public System.DateTime?		  EstimationToDate = DateTime.MinValue;
		
		/// <summary>
		/// CreationDate : 
		/// </summary>
		public System.DateTime?		  CreationDate = DateTime.MinValue;
		
		/// <summary>
		/// CreationUserId : 
		/// </summary>
		public System.Int32?		  CreationUserId = (int)0;
		
		/// <summary>
		/// LastModificationDate : 
		/// </summary>
		public System.DateTime?		  LastModificationDate = DateTime.MinValue;
		
		/// <summary>
		/// LastModificationUserId : 
		/// </summary>
		public System.Int32?		  LastModificationUserId = (int)0;
		#endregion
			
		#endregion Variable Declarations
		
		#region Clone
		public Object Clone()
		{
			TaskEntityData _tmp = new TaskEntityData();
						
			_tmp.TaskId = this.TaskId;
			
			_tmp.ProjectId = this.ProjectId;
			_tmp.ContractId = this.ContractId;
			_tmp.ProjectPhaseId = this.ProjectPhaseId;
			_tmp.ResourceId = this.ResourceId;
			_tmp.ResourceType = this.ResourceType;
			_tmp.ApprovalUserId = this.ApprovalUserId;
			_tmp.Name = this.Name;
			_tmp.Description = this.Description;
			_tmp.OperatorUserId = this.OperatorUserId;
			_tmp.IsApproved = this.IsApproved;
			_tmp.IsCanComment = this.IsCanComment;
			_tmp.Type = this.Type;
			_tmp.Status = this.Status;
			_tmp.IsActive = this.IsActive;
			_tmp.UseAsProjectTask = this.UseAsProjectTask;
			_tmp.PercentComplete = this.PercentComplete;
			_tmp.RealFromDate = this.RealFromDate;
			_tmp.RealToDate = this.RealToDate;
			_tmp.EstimationFromDate = this.EstimationFromDate;
			_tmp.EstimationToDate = this.EstimationToDate;
			_tmp.CreationDate = this.CreationDate;
			_tmp.CreationUserId = this.CreationUserId;
			_tmp.LastModificationDate = this.LastModificationDate;
			_tmp.LastModificationUserId = this.LastModificationUserId;
			
			return _tmp;
		}
		#endregion 
		
		#region Data Properties

		#endregion Data Properties

	}//End struct


		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Name",500));
		}
   		#endregion
	
	} // End Class
	
	#region TaskComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class TaskComparer : System.Collections.Generic.IComparer<Task>
	{
		TaskColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:TaskComparer"/> class.
        /// </summary>
		public TaskComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public TaskComparer(TaskColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="Task"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="Task"/> to compare.</param>
        /// <param name="b">The second <c>Task</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Task a, Task b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Task entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Task a, Task b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public TaskColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region TaskKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Task"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class TaskKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the TaskKey class.
		/// </summary>
		public TaskKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the TaskKey class.
		/// </summary>
		public TaskKey(TaskBase entity)
		{
			Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.taskId = entity.TaskId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the TaskKey class.
		/// </summary>
		public TaskKey(System.Int32 taskId)
		{
			#region Init Properties

			this.taskId = taskId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private TaskBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public TaskBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the TaskId property
		private System.Int32 taskId;
		
		/// <summary>
		/// Gets or sets the TaskId property.
		/// </summary>
		public System.Int32 TaskId
		{
			get { return taskId; }
			set
			{
				if ( Entity != null )
				{
					Entity.TaskId = value;
				}
				
				taskId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				TaskId = ( values["TaskId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["TaskId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("TaskId", TaskId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("TaskId: {0}{1}",
								TaskId,
								Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region TaskColumn Enum
	
	/// <summary>
	/// Enumerate the Task columns.
	/// </summary>
	[Serializable]
	public enum TaskColumn : int
	{
		/// <summary>
		/// TaskId : 
		/// </summary>
		[EnumTextValue("TaskId")]
		[ColumnEnum("TaskId", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		TaskId = 1,
		/// <summary>
		/// ProjectId : 
		/// </summary>
		[EnumTextValue("ProjectId")]
		[ColumnEnum("ProjectId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ProjectId = 2,
		/// <summary>
		/// ContractId : 
		/// </summary>
		[EnumTextValue("ContractId")]
		[ColumnEnum("ContractId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ContractId = 3,
		/// <summary>
		/// ProjectPhaseId : 
		/// </summary>
		[EnumTextValue("ProjectPhaseId")]
		[ColumnEnum("ProjectPhaseId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ProjectPhaseId = 4,
		/// <summary>
		/// ResourceId : 
		/// </summary>
		[EnumTextValue("ResourceId")]
		[ColumnEnum("ResourceId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ResourceId = 5,
		/// <summary>
		/// ResourceType : 
		/// </summary>
		[EnumTextValue("ResourceType")]
		[ColumnEnum("ResourceType", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ResourceType = 6,
		/// <summary>
		/// ApprovalUserId : 
		/// </summary>
		[EnumTextValue("ApprovalUserId")]
		[ColumnEnum("ApprovalUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ApprovalUserId = 7,
		/// <summary>
		/// Name : 
		/// </summary>
		[EnumTextValue("Name")]
		[ColumnEnum("Name", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		Name = 8,
		/// <summary>
		/// Description : 
		/// </summary>
		[EnumTextValue("Description")]
		[ColumnEnum("Description", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Description = 9,
		/// <summary>
		/// OperatorUserId : 
		/// </summary>
		[EnumTextValue("OperatorUserId")]
		[ColumnEnum("OperatorUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		OperatorUserId = 10,
		/// <summary>
		/// IsApproved : 
		/// </summary>
		[EnumTextValue("IsApproved")]
		[ColumnEnum("IsApproved", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsApproved = 11,
		/// <summary>
		/// IsCanComment : 
		/// </summary>
		[EnumTextValue("IsCanComment")]
		[ColumnEnum("IsCanComment", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsCanComment = 12,
		/// <summary>
		/// Type : Type of task: Project, Contract, ProjectPhase, Traning...
		/// </summary>
		[EnumTextValue("Type")]
		[ColumnEnum("Type", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Type = 13,
		/// <summary>
		/// Status : Status of current task: Planing, Deploying, ....Finished
		/// </summary>
		[EnumTextValue("Status")]
		[ColumnEnum("Status", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Status = 14,
		/// <summary>
		/// IsActive : 
		/// </summary>
		[EnumTextValue("IsActive")]
		[ColumnEnum("IsActive", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsActive = 15,
		/// <summary>
		/// UseAsProjectTask : 
		/// </summary>
		[EnumTextValue("UseAsProjectTask")]
		[ColumnEnum("UseAsProjectTask", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		UseAsProjectTask = 16,
		/// <summary>
		/// PercentComplete : 
		/// </summary>
		[EnumTextValue("PercentComplete")]
		[ColumnEnum("PercentComplete", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		PercentComplete = 17,
		/// <summary>
		/// RealFromDate : 
		/// </summary>
		[EnumTextValue("RealFromDate")]
		[ColumnEnum("RealFromDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		RealFromDate = 18,
		/// <summary>
		/// RealToDate : 
		/// </summary>
		[EnumTextValue("RealToDate")]
		[ColumnEnum("RealToDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		RealToDate = 19,
		/// <summary>
		/// EstimationFromDate : 
		/// </summary>
		[EnumTextValue("EstimationFromDate")]
		[ColumnEnum("EstimationFromDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		EstimationFromDate = 20,
		/// <summary>
		/// EstimationToDate : 
		/// </summary>
		[EnumTextValue("EstimationToDate")]
		[ColumnEnum("EstimationToDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		EstimationToDate = 21,
		/// <summary>
		/// CreationDate : 
		/// </summary>
		[EnumTextValue("CreationDate")]
		[ColumnEnum("CreationDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CreationDate = 22,
		/// <summary>
		/// CreationUserId : 
		/// </summary>
		[EnumTextValue("CreationUserId")]
		[ColumnEnum("CreationUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CreationUserId = 23,
		/// <summary>
		/// LastModificationDate : 
		/// </summary>
		[EnumTextValue("LastModificationDate")]
		[ColumnEnum("LastModificationDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastModificationDate = 24,
		/// <summary>
		/// LastModificationUserId : 
		/// </summary>
		[EnumTextValue("LastModificationUserId")]
		[ColumnEnum("LastModificationUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		LastModificationUserId = 25
	}//End enum

	#endregion TaskColumn Enum

} // end namespace
