	
/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : Saturday, December 11, 2010
	Important: Do not modify this file. Edit the file Repository.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace RLM.Construction.Entities
{
	#region RepositoryEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Repository"/> object.
	/// </remarks>
	public class RepositoryEventArgs : System.EventArgs
	{
		private RepositoryColumn column;
		private object value;
		
		
		///<summary>
		/// Initalizes a new Instance of the RepositoryEventArgs class.
		///</summary>
		public RepositoryEventArgs(RepositoryColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the RepositoryEventArgs class.
		///</summary>
		public RepositoryEventArgs(RepositoryColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		
		///<summary>
		/// The RepositoryColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="RepositoryColumn" />
		public RepositoryColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	
	///<summary>
	/// Define a delegate for all Repository related events.
	///</summary>
	public delegate void RepositoryEventHandler(object sender, RepositoryEventArgs e);
	
	///<summary>
	/// An object representation of the 'Repository' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	//[ToolboxItem(typeof(Repository))]
	public abstract partial class RepositoryBase : EntityBase, IEntityId<RepositoryKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		/// 	Old the inner data of the entity.
		/// </summary>
		private RepositoryEntityData entityData;
		
		// <summary>
		// 	Old the original data of the entity.
		// </summary>
		//RepositoryEntityData originalData;
		
		/// <summary>
		/// 	Old a backup of the inner data of the entity.
		/// </summary>
		private RepositoryEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		[NonSerialized]
		private TList<Repository> parentCollection;
		private bool inTxn = false;

		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event RepositoryEventHandler ColumnChanging;
		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event RepositoryEventHandler ColumnChanged;		
		#endregion "Variable Declarations"
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="RepositoryBase"/> instance.
		///</summary>
		public RepositoryBase()
		{
			this.entityData = new RepositoryEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="RepositoryBase"/> instance.
		///</summary>
		///<param name="repositoryRepositoryManagerStaffId">Id of staff who manage this store</param>
		///<param name="repositoryCode"></param>
		///<param name="repositoryName"></param>
		///<param name="repositoryAddress">Address of store</param>
		///<param name="repositoryProvinceId">Province of store</param>
		///<param name="repositoryIsActive"></param>
		///<param name="repositoryPriority"></param>
		///<param name="repositoryCreationDate"></param>
		///<param name="repositoryCreationUserId"></param>
		///<param name="repositoryLastModificationDate"></param>
		///<param name="repositoryLastModificationUserId"></param>
		public RepositoryBase(System.Int32? repositoryRepositoryManagerStaffId, System.String repositoryCode, 
			System.String repositoryName, System.String repositoryAddress, System.Int32? repositoryProvinceId, System.Boolean? repositoryIsActive, 
			System.Int32? repositoryPriority, System.DateTime? repositoryCreationDate, System.Int32? repositoryCreationUserId, System.DateTime? repositoryLastModificationDate, 
			System.Int32? repositoryLastModificationUserId)
		{
			this.entityData = new RepositoryEntityData();
			this.backupData = null;

			this.RepositoryManagerStaffId = repositoryRepositoryManagerStaffId;
			this.Code = repositoryCode;
			this.Name = repositoryName;
			this.Address = repositoryAddress;
			this.ProvinceId = repositoryProvinceId;
			this.IsActive = repositoryIsActive;
			this.Priority = repositoryPriority;
			this.CreationDate = repositoryCreationDate;
			this.CreationUserId = repositoryCreationUserId;
			this.LastModificationDate = repositoryLastModificationDate;
			this.LastModificationUserId = repositoryLastModificationUserId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Repository"/> instance.
		///</summary>
		///<param name="repositoryRepositoryManagerStaffId">Id of staff who manage this store</param>
		///<param name="repositoryCode"></param>
		///<param name="repositoryName"></param>
		///<param name="repositoryAddress">Address of store</param>
		///<param name="repositoryProvinceId">Province of store</param>
		///<param name="repositoryIsActive"></param>
		///<param name="repositoryPriority"></param>
		///<param name="repositoryCreationDate"></param>
		///<param name="repositoryCreationUserId"></param>
		///<param name="repositoryLastModificationDate"></param>
		///<param name="repositoryLastModificationUserId"></param>
		public static Repository CreateRepository(System.Int32? repositoryRepositoryManagerStaffId, System.String repositoryCode, 
			System.String repositoryName, System.String repositoryAddress, System.Int32? repositoryProvinceId, System.Boolean? repositoryIsActive, 
			System.Int32? repositoryPriority, System.DateTime? repositoryCreationDate, System.Int32? repositoryCreationUserId, System.DateTime? repositoryLastModificationDate, 
			System.Int32? repositoryLastModificationUserId)
		{
			Repository newRepository = new Repository();
			newRepository.RepositoryManagerStaffId = repositoryRepositoryManagerStaffId;
			newRepository.Code = repositoryCode;
			newRepository.Name = repositoryName;
			newRepository.Address = repositoryAddress;
			newRepository.ProvinceId = repositoryProvinceId;
			newRepository.IsActive = repositoryIsActive;
			newRepository.Priority = repositoryPriority;
			newRepository.CreationDate = repositoryCreationDate;
			newRepository.CreationUserId = repositoryCreationUserId;
			newRepository.LastModificationDate = repositoryLastModificationDate;
			newRepository.LastModificationUserId = repositoryLastModificationUserId;
			return newRepository;
		}
				
		#endregion Constructors
		
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="RepositoryColumn"/> which has raised the event.</param>
		public void OnColumnChanging(RepositoryColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="RepositoryColumn"/> which has raised the event.</param>
		public void OnColumnChanged(RepositoryColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="RepositoryColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(RepositoryColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added)
				EntityManager.StopTracking(EntityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				RepositoryEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new RepositoryEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="RepositoryColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(RepositoryColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				RepositoryEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new RepositoryEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
				
		#region Properties	
				
		/// <summary>
		/// 	Gets or sets the RepositoryId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 RepositoryId
		{
			get
			{
				return this.entityData.RepositoryId; 
			}
			
			set
			{
				if (this.entityData.RepositoryId == value)
					return;
					
					
				OnColumnChanging(RepositoryColumn.RepositoryId, this.entityData.RepositoryId);
				this.entityData.RepositoryId = value;
				this.EntityId.RepositoryId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(RepositoryColumn.RepositoryId, this.entityData.RepositoryId);
				OnPropertyChanged("RepositoryId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RepositoryManagerStaffId property. 
		///		Id of staff who manage this store
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsRepositoryManagerStaffIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("Id of staff who manage this store"), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? RepositoryManagerStaffId
		{
			get
			{
				return this.entityData.RepositoryManagerStaffId; 
			}
			
			set
			{
				if (this.entityData.RepositoryManagerStaffId == value)
					return;
					
					
				OnColumnChanging(RepositoryColumn.RepositoryManagerStaffId, this.entityData.RepositoryManagerStaffId);
				this.entityData.RepositoryManagerStaffId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(RepositoryColumn.RepositoryManagerStaffId, this.entityData.RepositoryManagerStaffId);
				OnPropertyChanged("RepositoryManagerStaffId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Code property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Code
		{
			get
			{
				return this.entityData.Code; 
			}
			
			set
			{
				if (this.entityData.Code == value)
					return;
					
					
				OnColumnChanging(RepositoryColumn.Code, this.entityData.Code);
				this.entityData.Code = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(RepositoryColumn.Code, this.entityData.Code);
				OnPropertyChanged("Code");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Name property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 300)]
		public virtual System.String Name
		{
			get
			{
				return this.entityData.Name; 
			}
			
			set
			{
				if (this.entityData.Name == value)
					return;
					
					
				OnColumnChanging(RepositoryColumn.Name, this.entityData.Name);
				this.entityData.Name = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(RepositoryColumn.Name, this.entityData.Name);
				OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Address property. 
		///		Address of store
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute("Address of store"), BindableAttribute()]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String Address
		{
			get
			{
				return this.entityData.Address; 
			}
			
			set
			{
				if (this.entityData.Address == value)
					return;
					
					
				OnColumnChanging(RepositoryColumn.Address, this.entityData.Address);
				this.entityData.Address = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(RepositoryColumn.Address, this.entityData.Address);
				OnPropertyChanged("Address");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ProvinceId property. 
		///		Province of store
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsProvinceIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("Province of store"), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ProvinceId
		{
			get
			{
				return this.entityData.ProvinceId; 
			}
			
			set
			{
				if (this.entityData.ProvinceId == value)
					return;
					
					
				OnColumnChanging(RepositoryColumn.ProvinceId, this.entityData.ProvinceId);
				this.entityData.ProvinceId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(RepositoryColumn.ProvinceId, this.entityData.ProvinceId);
				OnPropertyChanged("ProvinceId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsActive property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsActiveNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsActive
		{
			get
			{
				return this.entityData.IsActive; 
			}
			
			set
			{
				if (this.entityData.IsActive == value)
					return;
					
					
				OnColumnChanging(RepositoryColumn.IsActive, this.entityData.IsActive);
				this.entityData.IsActive = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(RepositoryColumn.IsActive, this.entityData.IsActive);
				OnPropertyChanged("IsActive");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Priority property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsPriorityNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Priority
		{
			get
			{
				return this.entityData.Priority; 
			}
			
			set
			{
				if (this.entityData.Priority == value)
					return;
					
					
				OnColumnChanging(RepositoryColumn.Priority, this.entityData.Priority);
				this.entityData.Priority = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(RepositoryColumn.Priority, this.entityData.Priority);
				OnPropertyChanged("Priority");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreationDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsCreationDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CreationDate
		{
			get
			{
				return this.entityData.CreationDate; 
			}
			
			set
			{
				if (this.entityData.CreationDate == value)
					return;
					
					
				OnColumnChanging(RepositoryColumn.CreationDate, this.entityData.CreationDate);
				this.entityData.CreationDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(RepositoryColumn.CreationDate, this.entityData.CreationDate);
				OnPropertyChanged("CreationDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreationUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCreationUserIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CreationUserId
		{
			get
			{
				return this.entityData.CreationUserId; 
			}
			
			set
			{
				if (this.entityData.CreationUserId == value)
					return;
					
					
				OnColumnChanging(RepositoryColumn.CreationUserId, this.entityData.CreationUserId);
				this.entityData.CreationUserId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(RepositoryColumn.CreationUserId, this.entityData.CreationUserId);
				OnPropertyChanged("CreationUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModificationDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastModificationDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastModificationDate
		{
			get
			{
				return this.entityData.LastModificationDate; 
			}
			
			set
			{
				if (this.entityData.LastModificationDate == value)
					return;
					
					
				OnColumnChanging(RepositoryColumn.LastModificationDate, this.entityData.LastModificationDate);
				this.entityData.LastModificationDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(RepositoryColumn.LastModificationDate, this.entityData.LastModificationDate);
				OnPropertyChanged("LastModificationDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModificationUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsLastModificationUserIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? LastModificationUserId
		{
			get
			{
				return this.entityData.LastModificationUserId; 
			}
			
			set
			{
				if (this.entityData.LastModificationUserId == value)
					return;
					
					
				OnColumnChanging(RepositoryColumn.LastModificationUserId, this.entityData.LastModificationUserId);
				this.entityData.LastModificationUserId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(RepositoryColumn.LastModificationUserId, this.entityData.LastModificationUserId);
				OnPropertyChanged("LastModificationUserId");
			}
		}
		

		#region Source Foreign Key Property
				
		#endregion
			
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Repository"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"RepositoryId", "RepositoryManagerStaffId", "Code", "Name", "Address", "ProvinceId", "IsActive", "Priority", "CreationDate", "CreationUserId", "LastModificationDate", "LastModificationUserId"};
			}
		}
		#endregion 
		
	
		/// <summary>
		///	Holds a collection of ItemMovement objects
		///	which are related to this object through the relation FK_ItemMovements_Repositories
		/// </summary>	
		[BindableAttribute()]
		public TList<ItemMovement> ItemMovementCollectionByFromRepositoryId
		{
			get { return entityData.ItemMovementCollectionByFromRepositoryId; }
			set { entityData.ItemMovementCollectionByFromRepositoryId = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ItemMovement objects
		///	which are related to this object through the relation FK_ItemMovements_Repositories1
		/// </summary>	
		[BindableAttribute()]
		public TList<ItemMovement> ItemMovementCollectionByToRepositoryId
		{
			get { return entityData.ItemMovementCollectionByToRepositoryId; }
			set { entityData.ItemMovementCollectionByToRepositoryId = value; }	
		}

		/// <summary>
		///	Holds a collection of ItemFromItemInRepository objects
		///	which are related to this object through the junction table ItemInRepository
		/// </summary>	
		[BindableAttribute()]
		public TList<Item> ItemCollection_From_ItemInRepository
		{
			get { return entityData.ItemCollection_From_ItemInRepository; }
			set { entityData.ItemCollection_From_ItemInRepository = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ItemInRepository objects
		///	which are related to this object through the relation FK_ItemInRepositories_Repositories
		/// </summary>	
		[BindableAttribute()]
		public TList<ItemInRepository> ItemInRepositoryCollection
		{
			get { return entityData.ItemInRepositoryCollection; }
			set { entityData.ItemInRepositoryCollection = value; }	
		}
		
		#endregion
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as RepositoryEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Repository) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return (object)this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Repository>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Repository);
	        }
	    }


		#endregion
		
		#region Methods	
			
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();
		}	
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Repository Entity 
		///</summary>
		public virtual Repository Copy()
		{
			//shallow copy entity
			Repository copy = new Repository();
			copy.RepositoryId = this.RepositoryId;
			copy.RepositoryManagerStaffId = this.RepositoryManagerStaffId;
			copy.Code = this.Code;
			copy.Name = this.Name;
			copy.Address = this.Address;
			copy.ProvinceId = this.ProvinceId;
			copy.IsActive = this.IsActive;
			copy.Priority = this.Priority;
			copy.CreationDate = this.CreationDate;
			copy.CreationUserId = this.CreationUserId;
			copy.LastModificationDate = this.LastModificationDate;
			copy.LastModificationUserId = this.LastModificationUserId;
					
			copy.AcceptChanges();
			return (Repository)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed Repository Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Repository DeepCopy()
		{
			return EntityHelper.Clone<Repository>(this as Repository);	
		}
		#endregion
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="RepositoryBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(RepositoryBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="RepositoryBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="RepositoryBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="RepositoryBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(RepositoryBase Object1, RepositoryBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.RepositoryId != Object2.RepositoryId)
				equal = false;
			if ( Object1.RepositoryManagerStaffId != null && Object2.RepositoryManagerStaffId != null )
			{
				if (Object1.RepositoryManagerStaffId != Object2.RepositoryManagerStaffId)
					equal = false;
			}
			else if (Object1.RepositoryManagerStaffId == null ^ Object2.RepositoryManagerStaffId == null )
			{
				equal = false;
			}
			if ( Object1.Code != null && Object2.Code != null )
			{
				if (Object1.Code != Object2.Code)
					equal = false;
			}
			else if (Object1.Code == null ^ Object2.Code == null )
			{
				equal = false;
			}
			if ( Object1.Name != null && Object2.Name != null )
			{
				if (Object1.Name != Object2.Name)
					equal = false;
			}
			else if (Object1.Name == null ^ Object2.Name == null )
			{
				equal = false;
			}
			if ( Object1.Address != null && Object2.Address != null )
			{
				if (Object1.Address != Object2.Address)
					equal = false;
			}
			else if (Object1.Address == null ^ Object2.Address == null )
			{
				equal = false;
			}
			if ( Object1.ProvinceId != null && Object2.ProvinceId != null )
			{
				if (Object1.ProvinceId != Object2.ProvinceId)
					equal = false;
			}
			else if (Object1.ProvinceId == null ^ Object2.ProvinceId == null )
			{
				equal = false;
			}
			if ( Object1.IsActive != null && Object2.IsActive != null )
			{
				if (Object1.IsActive != Object2.IsActive)
					equal = false;
			}
			else if (Object1.IsActive == null ^ Object2.IsActive == null )
			{
				equal = false;
			}
			if ( Object1.Priority != null && Object2.Priority != null )
			{
				if (Object1.Priority != Object2.Priority)
					equal = false;
			}
			else if (Object1.Priority == null ^ Object2.Priority == null )
			{
				equal = false;
			}
			if ( Object1.CreationDate != null && Object2.CreationDate != null )
			{
				if (Object1.CreationDate != Object2.CreationDate)
					equal = false;
			}
			else if (Object1.CreationDate == null ^ Object2.CreationDate == null )
			{
				equal = false;
			}
			if ( Object1.CreationUserId != null && Object2.CreationUserId != null )
			{
				if (Object1.CreationUserId != Object2.CreationUserId)
					equal = false;
			}
			else if (Object1.CreationUserId == null ^ Object2.CreationUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastModificationDate != null && Object2.LastModificationDate != null )
			{
				if (Object1.LastModificationDate != Object2.LastModificationDate)
					equal = false;
			}
			else if (Object1.LastModificationDate == null ^ Object2.LastModificationDate == null )
			{
				equal = false;
			}
			if ( Object1.LastModificationUserId != null && Object2.LastModificationUserId != null )
			{
				if (Object1.LastModificationUserId != Object2.LastModificationUserId)
					equal = false;
			}
			else if (Object1.LastModificationUserId == null ^ Object2.LastModificationUserId == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			// TODO -> generate a strongly typed IComparer in the concrete class
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name) .CompareTo(((RepositoryBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name));
		}
		
		/*
		// static method to get a Comparer object
        public static RepositoryComparer GetComparer()
        {
            return new RepositoryComparer();
        }
        */

        // Comparer delegates back to Repository
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Repository rhs, RepositoryColumn which)
        {
            switch (which)
            {
            	
            	
            	case RepositoryColumn.RepositoryId:
            		return this.RepositoryId.CompareTo(rhs.RepositoryId);
            		
            		                 
            	
            	
            	case RepositoryColumn.RepositoryManagerStaffId:
            		return this.RepositoryManagerStaffId.Value.CompareTo(rhs.RepositoryManagerStaffId.Value);
            		
            		                 
            	
            	
            	case RepositoryColumn.Code:
            		return this.Code.CompareTo(rhs.Code);
            		
            		                 
            	
            	
            	case RepositoryColumn.Name:
            		return this.Name.CompareTo(rhs.Name);
            		
            		                 
            	
            	
            	case RepositoryColumn.Address:
            		return this.Address.CompareTo(rhs.Address);
            		
            		                 
            	
            	
            	case RepositoryColumn.ProvinceId:
            		return this.ProvinceId.Value.CompareTo(rhs.ProvinceId.Value);
            		
            		                 
            	
            	
            	case RepositoryColumn.IsActive:
            		return this.IsActive.Value.CompareTo(rhs.IsActive.Value);
            		
            		                 
            	
            	
            	case RepositoryColumn.Priority:
            		return this.Priority.Value.CompareTo(rhs.Priority.Value);
            		
            		                 
            	
            	
            	case RepositoryColumn.CreationDate:
            		return this.CreationDate.Value.CompareTo(rhs.CreationDate.Value);
            		
            		                 
            	
            	
            	case RepositoryColumn.CreationUserId:
            		return this.CreationUserId.Value.CompareTo(rhs.CreationUserId.Value);
            		
            		                 
            	
            	
            	case RepositoryColumn.LastModificationDate:
            		return this.LastModificationDate.Value.CompareTo(rhs.LastModificationDate.Value);
            		
            		                 
            	
            	
            	case RepositoryColumn.LastModificationUserId:
            		return this.LastModificationUserId.Value.CompareTo(rhs.LastModificationUserId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<RepositoryKey> Members
		
		// member variable for the EntityId property
		private RepositoryKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public RepositoryKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new RepositoryKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = @"Repository" 
					+ this.RepositoryId.ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{13}{12}- RepositoryId: {0}{12}- RepositoryManagerStaffId: {1}{12}- Code: {2}{12}- Name: {3}{12}- Address: {4}{12}- ProvinceId: {5}{12}- IsActive: {6}{12}- Priority: {7}{12}- CreationDate: {8}{12}- CreationUserId: {9}{12}- LastModificationDate: {10}{12}- LastModificationUserId: {11}{12}", 
				this.RepositoryId,
				(this.RepositoryManagerStaffId == null) ? string.Empty : this.RepositoryManagerStaffId.ToString(),
				(this.Code == null) ? string.Empty : this.Code.ToString(),
				(this.Name == null) ? string.Empty : this.Name.ToString(),
				(this.Address == null) ? string.Empty : this.Address.ToString(),
				(this.ProvinceId == null) ? string.Empty : this.ProvinceId.ToString(),
				(this.IsActive == null) ? string.Empty : this.IsActive.ToString(),
				(this.Priority == null) ? string.Empty : this.Priority.ToString(),
				(this.CreationDate == null) ? string.Empty : this.CreationDate.ToString(),
				(this.CreationUserId == null) ? string.Empty : this.CreationUserId.ToString(),
				(this.LastModificationDate == null) ? string.Empty : this.LastModificationDate.ToString(),
				(this.LastModificationUserId == null) ? string.Empty : this.LastModificationUserId.ToString(),
				Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Repository' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal class RepositoryEntityData : ICloneable
	{
		#region Variable Declarations
		
		#region Primary key(s)
			/// <summary>			
			/// RepositoryId : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "Repository"</remarks>
			public System.Int32 RepositoryId;
				
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// RepositoryManagerStaffId : Id of staff who manage this store
		/// </summary>
		public System.Int32?		  RepositoryManagerStaffId = (int)0;
		
		/// <summary>
		/// Code : 
		/// </summary>
		public System.String		  Code = string.Empty;
		
		/// <summary>
		/// Name : 
		/// </summary>
		public System.String		  Name = string.Empty;
		
		/// <summary>
		/// Address : Address of store
		/// </summary>
		public System.String		  Address = string.Empty;
		
		/// <summary>
		/// ProvinceId : Province of store
		/// </summary>
		public System.Int32?		  ProvinceId = (int)0;
		
		/// <summary>
		/// IsActive : 
		/// </summary>
		public System.Boolean?		  IsActive = false;
		
		/// <summary>
		/// Priority : 
		/// </summary>
		public System.Int32?		  Priority = (int)0;
		
		/// <summary>
		/// CreationDate : 
		/// </summary>
		public System.DateTime?		  CreationDate = DateTime.MinValue;
		
		/// <summary>
		/// CreationUserId : 
		/// </summary>
		public System.Int32?		  CreationUserId = (int)0;
		
		/// <summary>
		/// LastModificationDate : 
		/// </summary>
		public System.DateTime?		  LastModificationDate = DateTime.MinValue;
		
		/// <summary>
		/// LastModificationUserId : 
		/// </summary>
		public System.Int32?		  LastModificationUserId = (int)0;
		#endregion
			
		#endregion Variable Declarations
		
		#region Clone
		public Object Clone()
		{
			RepositoryEntityData _tmp = new RepositoryEntityData();
						
			_tmp.RepositoryId = this.RepositoryId;
			
			_tmp.RepositoryManagerStaffId = this.RepositoryManagerStaffId;
			_tmp.Code = this.Code;
			_tmp.Name = this.Name;
			_tmp.Address = this.Address;
			_tmp.ProvinceId = this.ProvinceId;
			_tmp.IsActive = this.IsActive;
			_tmp.Priority = this.Priority;
			_tmp.CreationDate = this.CreationDate;
			_tmp.CreationUserId = this.CreationUserId;
			_tmp.LastModificationDate = this.LastModificationDate;
			_tmp.LastModificationUserId = this.LastModificationUserId;
			
			return _tmp;
		}
		#endregion 
		
		#region Data Properties

		#region ItemMovementCollectionByFromRepositoryId
		
		private TList<ItemMovement> itemMovementFromRepositoryId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation itemMovementFromRepositoryId
		/// </summary>	
		public TList<ItemMovement> ItemMovementCollectionByFromRepositoryId
		{
			get
			{
				if (itemMovementFromRepositoryId == null)
				{
				itemMovementFromRepositoryId = new TList<ItemMovement>();
				}
	
				return itemMovementFromRepositoryId;
			}
			set { itemMovementFromRepositoryId = value; }
		}
		
		#endregion

		#region ItemMovementCollectionByToRepositoryId
		
		private TList<ItemMovement> itemMovementToRepositoryId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation itemMovementToRepositoryId
		/// </summary>	
		public TList<ItemMovement> ItemMovementCollectionByToRepositoryId
		{
			get
			{
				if (itemMovementToRepositoryId == null)
				{
				itemMovementToRepositoryId = new TList<ItemMovement>();
				}
	
				return itemMovementToRepositoryId;
			}
			set { itemMovementToRepositoryId = value; }
		}
		
		#endregion

		#region ItemCollection_From_ItemInRepository
		
		private TList<Item> itoryIdFromItemInRepository;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the junction table itoryIdFromItemInRepository
		/// </summary>	
		public TList<Item> ItemCollection_From_ItemInRepository
		{
			get
			{
				if (itoryIdFromItemInRepository == null)
				{
				itoryIdFromItemInRepository = new TList<Item>();
				}
	
				return itoryIdFromItemInRepository;
			}
			set { itoryIdFromItemInRepository = value; }
		}
		
		#endregion 

		#region ItemInRepositoryCollection
		
		private TList<ItemInRepository> itemInRepositoryRepositoryId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation itemInRepositoryRepositoryId
		/// </summary>	
		public TList<ItemInRepository> ItemInRepositoryCollection
		{
			get
			{
				if (itemInRepositoryRepositoryId == null)
				{
				itemInRepositoryRepositoryId = new TList<ItemInRepository>();
				}
	
				return itemInRepositoryRepositoryId;
			}
			set { itemInRepositoryRepositoryId = value; }
		}
		
		#endregion

		#endregion Data Properties

	}//End struct


		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Code",50));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Name",300));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Address",500));
		}
   		#endregion
	
	} // End Class
	
	#region RepositoryComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class RepositoryComparer : System.Collections.Generic.IComparer<Repository>
	{
		RepositoryColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:RepositoryComparer"/> class.
        /// </summary>
		public RepositoryComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public RepositoryComparer(RepositoryColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="Repository"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="Repository"/> to compare.</param>
        /// <param name="b">The second <c>Repository</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Repository a, Repository b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Repository entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Repository a, Repository b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public RepositoryColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region RepositoryKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Repository"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class RepositoryKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the RepositoryKey class.
		/// </summary>
		public RepositoryKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the RepositoryKey class.
		/// </summary>
		public RepositoryKey(RepositoryBase entity)
		{
			Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.repositoryId = entity.RepositoryId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the RepositoryKey class.
		/// </summary>
		public RepositoryKey(System.Int32 repositoryId)
		{
			#region Init Properties

			this.repositoryId = repositoryId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private RepositoryBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public RepositoryBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the RepositoryId property
		private System.Int32 repositoryId;
		
		/// <summary>
		/// Gets or sets the RepositoryId property.
		/// </summary>
		public System.Int32 RepositoryId
		{
			get { return repositoryId; }
			set
			{
				if ( Entity != null )
				{
					Entity.RepositoryId = value;
				}
				
				repositoryId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				RepositoryId = ( values["RepositoryId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["RepositoryId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("RepositoryId", RepositoryId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("RepositoryId: {0}{1}",
								RepositoryId,
								Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region RepositoryColumn Enum
	
	/// <summary>
	/// Enumerate the Repository columns.
	/// </summary>
	[Serializable]
	public enum RepositoryColumn : int
	{
		/// <summary>
		/// RepositoryId : 
		/// </summary>
		[EnumTextValue("RepositoryId")]
		[ColumnEnum("RepositoryId", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		RepositoryId = 1,
		/// <summary>
		/// RepositoryManagerStaffId : Id of staff who manage this store
		/// </summary>
		[EnumTextValue("RepositoryManagerStaffId")]
		[ColumnEnum("RepositoryManagerStaffId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		RepositoryManagerStaffId = 2,
		/// <summary>
		/// Code : 
		/// </summary>
		[EnumTextValue("Code")]
		[ColumnEnum("Code", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Code = 3,
		/// <summary>
		/// Name : 
		/// </summary>
		[EnumTextValue("Name")]
		[ColumnEnum("Name", typeof(System.String), System.Data.DbType.String, false, false, true, 300)]
		Name = 4,
		/// <summary>
		/// Address : Address of store
		/// </summary>
		[EnumTextValue("Address")]
		[ColumnEnum("Address", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		Address = 5,
		/// <summary>
		/// ProvinceId : Province of store
		/// </summary>
		[EnumTextValue("ProvinceId")]
		[ColumnEnum("ProvinceId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ProvinceId = 6,
		/// <summary>
		/// IsActive : 
		/// </summary>
		[EnumTextValue("IsActive")]
		[ColumnEnum("IsActive", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsActive = 7,
		/// <summary>
		/// Priority : 
		/// </summary>
		[EnumTextValue("Priority")]
		[ColumnEnum("Priority", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Priority = 8,
		/// <summary>
		/// CreationDate : 
		/// </summary>
		[EnumTextValue("CreationDate")]
		[ColumnEnum("CreationDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CreationDate = 9,
		/// <summary>
		/// CreationUserId : 
		/// </summary>
		[EnumTextValue("CreationUserId")]
		[ColumnEnum("CreationUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CreationUserId = 10,
		/// <summary>
		/// LastModificationDate : 
		/// </summary>
		[EnumTextValue("LastModificationDate")]
		[ColumnEnum("LastModificationDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastModificationDate = 11,
		/// <summary>
		/// LastModificationUserId : 
		/// </summary>
		[EnumTextValue("LastModificationUserId")]
		[ColumnEnum("LastModificationUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		LastModificationUserId = 12
	}//End enum

	#endregion RepositoryColumn Enum

} // end namespace
