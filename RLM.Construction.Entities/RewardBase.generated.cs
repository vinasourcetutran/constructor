	
/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : Tuesday, May 03, 2011
	Important: Do not modify this file. Edit the file Reward.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace RLM.Construction.Entities
{
	#region RewardEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Reward"/> object.
	/// </remarks>
	public class RewardEventArgs : System.EventArgs
	{
		private RewardColumn column;
		private object value;
		
		
		///<summary>
		/// Initalizes a new Instance of the RewardEventArgs class.
		///</summary>
		public RewardEventArgs(RewardColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the RewardEventArgs class.
		///</summary>
		public RewardEventArgs(RewardColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		
		///<summary>
		/// The RewardColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="RewardColumn" />
		public RewardColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	
	///<summary>
	/// Define a delegate for all Reward related events.
	///</summary>
	public delegate void RewardEventHandler(object sender, RewardEventArgs e);
	
	///<summary>
	/// An object representation of the 'Reward' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	//[ToolboxItem(typeof(Reward))]
	public abstract partial class RewardBase : EntityBase, IEntityId<RewardKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		/// 	Old the inner data of the entity.
		/// </summary>
		private RewardEntityData entityData;
		
		// <summary>
		// 	Old the original data of the entity.
		// </summary>
		//RewardEntityData originalData;
		
		/// <summary>
		/// 	Old a backup of the inner data of the entity.
		/// </summary>
		private RewardEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		[NonSerialized]
		private TList<Reward> parentCollection;
		private bool inTxn = false;

		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event RewardEventHandler ColumnChanging;
		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event RewardEventHandler ColumnChanged;		
		#endregion "Variable Declarations"
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="RewardBase"/> instance.
		///</summary>
		public RewardBase()
		{
			this.entityData = new RewardEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="RewardBase"/> instance.
		///</summary>
		///<param name="rewardStaffId"></param>
		///<param name="rewardRewardTypeId"></param>
		///<param name="rewardRewardDate"></param>
		///<param name="rewardEffectFrom"></param>
		///<param name="rewardRewardCode">so quyet dinh</param>
		///<param name="rewardRewardForm">hinh thuc: 1, thang chuc, 2: tien mat ....</param>
		///<param name="rewardReason"></param>
		///<param name="rewardComment"></param>
		///<param name="rewardIssueLevel">Cap quyet dinh</param>
		///<param name="rewardFromLevelId"></param>
		///<param name="rewardToLevelId"></param>
		///<param name="rewardMoneyAmount"></param>
		///<param name="rewardMoneyUnitId"></param>
		///<param name="rewardExchangeRate"></param>
		///<param name="rewardCreationDate"></param>
		///<param name="rewardCreationUserId"></param>
		///<param name="rewardLastModificationDate"></param>
		///<param name="rewardLastModificationUserId"></param>
		public RewardBase(System.Int32 rewardStaffId, System.Int32? rewardRewardTypeId, System.DateTime? rewardRewardDate, 
			System.DateTime? rewardEffectFrom, System.String rewardRewardCode, System.Int32? rewardRewardForm, System.String rewardReason, 
			System.String rewardComment, System.Int32? rewardIssueLevel, System.Int32? rewardFromLevelId, System.Int32? rewardToLevelId, 
			System.Decimal? rewardMoneyAmount, System.Int32? rewardMoneyUnitId, System.Int32? rewardExchangeRate, System.DateTime? rewardCreationDate, 
			System.Int32? rewardCreationUserId, System.DateTime? rewardLastModificationDate, System.Int32? rewardLastModificationUserId)
		{
			this.entityData = new RewardEntityData();
			this.backupData = null;

			this.StaffId = rewardStaffId;
			this.RewardTypeId = rewardRewardTypeId;
			this.RewardDate = rewardRewardDate;
			this.EffectFrom = rewardEffectFrom;
			this.RewardCode = rewardRewardCode;
			this.RewardForm = rewardRewardForm;
			this.Reason = rewardReason;
			this.Comment = rewardComment;
			this.IssueLevel = rewardIssueLevel;
			this.FromLevelId = rewardFromLevelId;
			this.ToLevelId = rewardToLevelId;
			this.MoneyAmount = rewardMoneyAmount;
			this.MoneyUnitId = rewardMoneyUnitId;
			this.ExchangeRate = rewardExchangeRate;
			this.CreationDate = rewardCreationDate;
			this.CreationUserId = rewardCreationUserId;
			this.LastModificationDate = rewardLastModificationDate;
			this.LastModificationUserId = rewardLastModificationUserId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Reward"/> instance.
		///</summary>
		///<param name="rewardStaffId"></param>
		///<param name="rewardRewardTypeId"></param>
		///<param name="rewardRewardDate"></param>
		///<param name="rewardEffectFrom"></param>
		///<param name="rewardRewardCode">so quyet dinh</param>
		///<param name="rewardRewardForm">hinh thuc: 1, thang chuc, 2: tien mat ....</param>
		///<param name="rewardReason"></param>
		///<param name="rewardComment"></param>
		///<param name="rewardIssueLevel">Cap quyet dinh</param>
		///<param name="rewardFromLevelId"></param>
		///<param name="rewardToLevelId"></param>
		///<param name="rewardMoneyAmount"></param>
		///<param name="rewardMoneyUnitId"></param>
		///<param name="rewardExchangeRate"></param>
		///<param name="rewardCreationDate"></param>
		///<param name="rewardCreationUserId"></param>
		///<param name="rewardLastModificationDate"></param>
		///<param name="rewardLastModificationUserId"></param>
		public static Reward CreateReward(System.Int32 rewardStaffId, System.Int32? rewardRewardTypeId, System.DateTime? rewardRewardDate, 
			System.DateTime? rewardEffectFrom, System.String rewardRewardCode, System.Int32? rewardRewardForm, System.String rewardReason, 
			System.String rewardComment, System.Int32? rewardIssueLevel, System.Int32? rewardFromLevelId, System.Int32? rewardToLevelId, 
			System.Decimal? rewardMoneyAmount, System.Int32? rewardMoneyUnitId, System.Int32? rewardExchangeRate, System.DateTime? rewardCreationDate, 
			System.Int32? rewardCreationUserId, System.DateTime? rewardLastModificationDate, System.Int32? rewardLastModificationUserId)
		{
			Reward newReward = new Reward();
			newReward.StaffId = rewardStaffId;
			newReward.RewardTypeId = rewardRewardTypeId;
			newReward.RewardDate = rewardRewardDate;
			newReward.EffectFrom = rewardEffectFrom;
			newReward.RewardCode = rewardRewardCode;
			newReward.RewardForm = rewardRewardForm;
			newReward.Reason = rewardReason;
			newReward.Comment = rewardComment;
			newReward.IssueLevel = rewardIssueLevel;
			newReward.FromLevelId = rewardFromLevelId;
			newReward.ToLevelId = rewardToLevelId;
			newReward.MoneyAmount = rewardMoneyAmount;
			newReward.MoneyUnitId = rewardMoneyUnitId;
			newReward.ExchangeRate = rewardExchangeRate;
			newReward.CreationDate = rewardCreationDate;
			newReward.CreationUserId = rewardCreationUserId;
			newReward.LastModificationDate = rewardLastModificationDate;
			newReward.LastModificationUserId = rewardLastModificationUserId;
			return newReward;
		}
				
		#endregion Constructors
		
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="RewardColumn"/> which has raised the event.</param>
		public void OnColumnChanging(RewardColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="RewardColumn"/> which has raised the event.</param>
		public void OnColumnChanged(RewardColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="RewardColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(RewardColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added)
				EntityManager.StopTracking(EntityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				RewardEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new RewardEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="RewardColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(RewardColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				RewardEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new RewardEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
				
		#region Properties	
				
		/// <summary>
		/// 	Gets or sets the RewardId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 RewardId
		{
			get
			{
				return this.entityData.RewardId; 
			}
			
			set
			{
				if (this.entityData.RewardId == value)
					return;
					
					
				OnColumnChanging(RewardColumn.RewardId, this.entityData.RewardId);
				this.entityData.RewardId = value;
				this.EntityId.RewardId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(RewardColumn.RewardId, this.entityData.RewardId);
				OnPropertyChanged("RewardId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StaffId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 StaffId
		{
			get
			{
				return this.entityData.StaffId; 
			}
			
			set
			{
				if (this.entityData.StaffId == value)
					return;
					
					
				OnColumnChanging(RewardColumn.StaffId, this.entityData.StaffId);
				this.entityData.StaffId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(RewardColumn.StaffId, this.entityData.StaffId);
				OnPropertyChanged("StaffId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RewardTypeId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsRewardTypeIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? RewardTypeId
		{
			get
			{
				return this.entityData.RewardTypeId; 
			}
			
			set
			{
				if (this.entityData.RewardTypeId == value)
					return;
					
					
				OnColumnChanging(RewardColumn.RewardTypeId, this.entityData.RewardTypeId);
				this.entityData.RewardTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(RewardColumn.RewardTypeId, this.entityData.RewardTypeId);
				OnPropertyChanged("RewardTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RewardDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsRewardDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? RewardDate
		{
			get
			{
				return this.entityData.RewardDate; 
			}
			
			set
			{
				if (this.entityData.RewardDate == value)
					return;
					
					
				OnColumnChanging(RewardColumn.RewardDate, this.entityData.RewardDate);
				this.entityData.RewardDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(RewardColumn.RewardDate, this.entityData.RewardDate);
				OnPropertyChanged("RewardDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EffectFrom property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsEffectFromNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? EffectFrom
		{
			get
			{
				return this.entityData.EffectFrom; 
			}
			
			set
			{
				if (this.entityData.EffectFrom == value)
					return;
					
					
				OnColumnChanging(RewardColumn.EffectFrom, this.entityData.EffectFrom);
				this.entityData.EffectFrom = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(RewardColumn.EffectFrom, this.entityData.EffectFrom);
				OnPropertyChanged("EffectFrom");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RewardCode property. 
		///		so quyet dinh
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute("so quyet dinh"), BindableAttribute()]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String RewardCode
		{
			get
			{
				return this.entityData.RewardCode; 
			}
			
			set
			{
				if (this.entityData.RewardCode == value)
					return;
					
					
				OnColumnChanging(RewardColumn.RewardCode, this.entityData.RewardCode);
				this.entityData.RewardCode = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(RewardColumn.RewardCode, this.entityData.RewardCode);
				OnPropertyChanged("RewardCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RewardForm property. 
		///		hinh thuc: 1, thang chuc, 2: tien mat ....
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsRewardFormNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("hinh thuc: 1, thang chuc, 2: tien mat ...."), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? RewardForm
		{
			get
			{
				return this.entityData.RewardForm; 
			}
			
			set
			{
				if (this.entityData.RewardForm == value)
					return;
					
					
				OnColumnChanging(RewardColumn.RewardForm, this.entityData.RewardForm);
				this.entityData.RewardForm = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(RewardColumn.RewardForm, this.entityData.RewardForm);
				OnPropertyChanged("RewardForm");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Reason property. 
		///		
		/// </summary>
		/// <value>This type is ntext.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String Reason
		{
			get
			{
				return this.entityData.Reason; 
			}
			
			set
			{
				if (this.entityData.Reason == value)
					return;
					
					
				OnColumnChanging(RewardColumn.Reason, this.entityData.Reason);
				this.entityData.Reason = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(RewardColumn.Reason, this.entityData.Reason);
				OnPropertyChanged("Reason");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Comment property. 
		///		
		/// </summary>
		/// <value>This type is ntext.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String Comment
		{
			get
			{
				return this.entityData.Comment; 
			}
			
			set
			{
				if (this.entityData.Comment == value)
					return;
					
					
				OnColumnChanging(RewardColumn.Comment, this.entityData.Comment);
				this.entityData.Comment = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(RewardColumn.Comment, this.entityData.Comment);
				OnPropertyChanged("Comment");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IssueLevel property. 
		///		Cap quyet dinh
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsIssueLevelNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("Cap quyet dinh"), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? IssueLevel
		{
			get
			{
				return this.entityData.IssueLevel; 
			}
			
			set
			{
				if (this.entityData.IssueLevel == value)
					return;
					
					
				OnColumnChanging(RewardColumn.IssueLevel, this.entityData.IssueLevel);
				this.entityData.IssueLevel = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(RewardColumn.IssueLevel, this.entityData.IssueLevel);
				OnPropertyChanged("IssueLevel");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FromLevelId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsFromLevelIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? FromLevelId
		{
			get
			{
				return this.entityData.FromLevelId; 
			}
			
			set
			{
				if (this.entityData.FromLevelId == value)
					return;
					
					
				OnColumnChanging(RewardColumn.FromLevelId, this.entityData.FromLevelId);
				this.entityData.FromLevelId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(RewardColumn.FromLevelId, this.entityData.FromLevelId);
				OnPropertyChanged("FromLevelId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ToLevelId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsToLevelIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ToLevelId
		{
			get
			{
				return this.entityData.ToLevelId; 
			}
			
			set
			{
				if (this.entityData.ToLevelId == value)
					return;
					
					
				OnColumnChanging(RewardColumn.ToLevelId, this.entityData.ToLevelId);
				this.entityData.ToLevelId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(RewardColumn.ToLevelId, this.entityData.ToLevelId);
				OnPropertyChanged("ToLevelId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MoneyAmount property. 
		///		
		/// </summary>
		/// <value>This type is money.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0. It is up to the developer
		/// to check the value of IsMoneyAmountNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? MoneyAmount
		{
			get
			{
				return this.entityData.MoneyAmount; 
			}
			
			set
			{
				if (this.entityData.MoneyAmount == value)
					return;
					
					
				OnColumnChanging(RewardColumn.MoneyAmount, this.entityData.MoneyAmount);
				this.entityData.MoneyAmount = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(RewardColumn.MoneyAmount, this.entityData.MoneyAmount);
				OnPropertyChanged("MoneyAmount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MoneyUnitId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsMoneyUnitIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MoneyUnitId
		{
			get
			{
				return this.entityData.MoneyUnitId; 
			}
			
			set
			{
				if (this.entityData.MoneyUnitId == value)
					return;
					
					
				OnColumnChanging(RewardColumn.MoneyUnitId, this.entityData.MoneyUnitId);
				this.entityData.MoneyUnitId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(RewardColumn.MoneyUnitId, this.entityData.MoneyUnitId);
				OnPropertyChanged("MoneyUnitId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExchangeRate property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsExchangeRateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ExchangeRate
		{
			get
			{
				return this.entityData.ExchangeRate; 
			}
			
			set
			{
				if (this.entityData.ExchangeRate == value)
					return;
					
					
				OnColumnChanging(RewardColumn.ExchangeRate, this.entityData.ExchangeRate);
				this.entityData.ExchangeRate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(RewardColumn.ExchangeRate, this.entityData.ExchangeRate);
				OnPropertyChanged("ExchangeRate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreationDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsCreationDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CreationDate
		{
			get
			{
				return this.entityData.CreationDate; 
			}
			
			set
			{
				if (this.entityData.CreationDate == value)
					return;
					
					
				OnColumnChanging(RewardColumn.CreationDate, this.entityData.CreationDate);
				this.entityData.CreationDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(RewardColumn.CreationDate, this.entityData.CreationDate);
				OnPropertyChanged("CreationDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreationUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCreationUserIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CreationUserId
		{
			get
			{
				return this.entityData.CreationUserId; 
			}
			
			set
			{
				if (this.entityData.CreationUserId == value)
					return;
					
					
				OnColumnChanging(RewardColumn.CreationUserId, this.entityData.CreationUserId);
				this.entityData.CreationUserId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(RewardColumn.CreationUserId, this.entityData.CreationUserId);
				OnPropertyChanged("CreationUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModificationDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastModificationDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastModificationDate
		{
			get
			{
				return this.entityData.LastModificationDate; 
			}
			
			set
			{
				if (this.entityData.LastModificationDate == value)
					return;
					
					
				OnColumnChanging(RewardColumn.LastModificationDate, this.entityData.LastModificationDate);
				this.entityData.LastModificationDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(RewardColumn.LastModificationDate, this.entityData.LastModificationDate);
				OnPropertyChanged("LastModificationDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModificationUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsLastModificationUserIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? LastModificationUserId
		{
			get
			{
				return this.entityData.LastModificationUserId; 
			}
			
			set
			{
				if (this.entityData.LastModificationUserId == value)
					return;
					
					
				OnColumnChanging(RewardColumn.LastModificationUserId, this.entityData.LastModificationUserId);
				this.entityData.LastModificationUserId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(RewardColumn.LastModificationUserId, this.entityData.LastModificationUserId);
				OnPropertyChanged("LastModificationUserId");
			}
		}
		

		#region Source Foreign Key Property
				
		#endregion
			
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Reward"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"RewardId", "StaffId", "RewardTypeId", "RewardDate", "EffectFrom", "RewardCode", "RewardForm", "Reason", "Comment", "IssueLevel", "FromLevelId", "ToLevelId", "MoneyAmount", "MoneyUnitId", "ExchangeRate", "CreationDate", "CreationUserId", "LastModificationDate", "LastModificationUserId"};
			}
		}
		#endregion 
		
		
		#endregion
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as RewardEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Reward) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return (object)this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Reward>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Reward);
	        }
	    }


		#endregion
		
		#region Methods	
			
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();
		}	
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Reward Entity 
		///</summary>
		public virtual Reward Copy()
		{
			//shallow copy entity
			Reward copy = new Reward();
			copy.RewardId = this.RewardId;
			copy.StaffId = this.StaffId;
			copy.RewardTypeId = this.RewardTypeId;
			copy.RewardDate = this.RewardDate;
			copy.EffectFrom = this.EffectFrom;
			copy.RewardCode = this.RewardCode;
			copy.RewardForm = this.RewardForm;
			copy.Reason = this.Reason;
			copy.Comment = this.Comment;
			copy.IssueLevel = this.IssueLevel;
			copy.FromLevelId = this.FromLevelId;
			copy.ToLevelId = this.ToLevelId;
			copy.MoneyAmount = this.MoneyAmount;
			copy.MoneyUnitId = this.MoneyUnitId;
			copy.ExchangeRate = this.ExchangeRate;
			copy.CreationDate = this.CreationDate;
			copy.CreationUserId = this.CreationUserId;
			copy.LastModificationDate = this.LastModificationDate;
			copy.LastModificationUserId = this.LastModificationUserId;
					
			copy.AcceptChanges();
			return (Reward)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed Reward Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Reward DeepCopy()
		{
			return EntityHelper.Clone<Reward>(this as Reward);	
		}
		#endregion
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="RewardBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(RewardBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="RewardBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="RewardBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="RewardBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(RewardBase Object1, RewardBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.RewardId != Object2.RewardId)
				equal = false;
			if (Object1.StaffId != Object2.StaffId)
				equal = false;
			if ( Object1.RewardTypeId != null && Object2.RewardTypeId != null )
			{
				if (Object1.RewardTypeId != Object2.RewardTypeId)
					equal = false;
			}
			else if (Object1.RewardTypeId == null ^ Object2.RewardTypeId == null )
			{
				equal = false;
			}
			if ( Object1.RewardDate != null && Object2.RewardDate != null )
			{
				if (Object1.RewardDate != Object2.RewardDate)
					equal = false;
			}
			else if (Object1.RewardDate == null ^ Object2.RewardDate == null )
			{
				equal = false;
			}
			if ( Object1.EffectFrom != null && Object2.EffectFrom != null )
			{
				if (Object1.EffectFrom != Object2.EffectFrom)
					equal = false;
			}
			else if (Object1.EffectFrom == null ^ Object2.EffectFrom == null )
			{
				equal = false;
			}
			if ( Object1.RewardCode != null && Object2.RewardCode != null )
			{
				if (Object1.RewardCode != Object2.RewardCode)
					equal = false;
			}
			else if (Object1.RewardCode == null ^ Object2.RewardCode == null )
			{
				equal = false;
			}
			if ( Object1.RewardForm != null && Object2.RewardForm != null )
			{
				if (Object1.RewardForm != Object2.RewardForm)
					equal = false;
			}
			else if (Object1.RewardForm == null ^ Object2.RewardForm == null )
			{
				equal = false;
			}
			if ( Object1.Reason != null && Object2.Reason != null )
			{
				if (Object1.Reason != Object2.Reason)
					equal = false;
			}
			else if (Object1.Reason == null ^ Object2.Reason == null )
			{
				equal = false;
			}
			if ( Object1.Comment != null && Object2.Comment != null )
			{
				if (Object1.Comment != Object2.Comment)
					equal = false;
			}
			else if (Object1.Comment == null ^ Object2.Comment == null )
			{
				equal = false;
			}
			if ( Object1.IssueLevel != null && Object2.IssueLevel != null )
			{
				if (Object1.IssueLevel != Object2.IssueLevel)
					equal = false;
			}
			else if (Object1.IssueLevel == null ^ Object2.IssueLevel == null )
			{
				equal = false;
			}
			if ( Object1.FromLevelId != null && Object2.FromLevelId != null )
			{
				if (Object1.FromLevelId != Object2.FromLevelId)
					equal = false;
			}
			else if (Object1.FromLevelId == null ^ Object2.FromLevelId == null )
			{
				equal = false;
			}
			if ( Object1.ToLevelId != null && Object2.ToLevelId != null )
			{
				if (Object1.ToLevelId != Object2.ToLevelId)
					equal = false;
			}
			else if (Object1.ToLevelId == null ^ Object2.ToLevelId == null )
			{
				equal = false;
			}
			if ( Object1.MoneyAmount != null && Object2.MoneyAmount != null )
			{
				if (Object1.MoneyAmount != Object2.MoneyAmount)
					equal = false;
			}
			else if (Object1.MoneyAmount == null ^ Object2.MoneyAmount == null )
			{
				equal = false;
			}
			if ( Object1.MoneyUnitId != null && Object2.MoneyUnitId != null )
			{
				if (Object1.MoneyUnitId != Object2.MoneyUnitId)
					equal = false;
			}
			else if (Object1.MoneyUnitId == null ^ Object2.MoneyUnitId == null )
			{
				equal = false;
			}
			if ( Object1.ExchangeRate != null && Object2.ExchangeRate != null )
			{
				if (Object1.ExchangeRate != Object2.ExchangeRate)
					equal = false;
			}
			else if (Object1.ExchangeRate == null ^ Object2.ExchangeRate == null )
			{
				equal = false;
			}
			if ( Object1.CreationDate != null && Object2.CreationDate != null )
			{
				if (Object1.CreationDate != Object2.CreationDate)
					equal = false;
			}
			else if (Object1.CreationDate == null ^ Object2.CreationDate == null )
			{
				equal = false;
			}
			if ( Object1.CreationUserId != null && Object2.CreationUserId != null )
			{
				if (Object1.CreationUserId != Object2.CreationUserId)
					equal = false;
			}
			else if (Object1.CreationUserId == null ^ Object2.CreationUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastModificationDate != null && Object2.LastModificationDate != null )
			{
				if (Object1.LastModificationDate != Object2.LastModificationDate)
					equal = false;
			}
			else if (Object1.LastModificationDate == null ^ Object2.LastModificationDate == null )
			{
				equal = false;
			}
			if ( Object1.LastModificationUserId != null && Object2.LastModificationUserId != null )
			{
				if (Object1.LastModificationUserId != Object2.LastModificationUserId)
					equal = false;
			}
			else if (Object1.LastModificationUserId == null ^ Object2.LastModificationUserId == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			// TODO -> generate a strongly typed IComparer in the concrete class
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name) .CompareTo(((RewardBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name));
		}
		
		/*
		// static method to get a Comparer object
        public static RewardComparer GetComparer()
        {
            return new RewardComparer();
        }
        */

        // Comparer delegates back to Reward
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Reward rhs, RewardColumn which)
        {
            switch (which)
            {
            	
            	
            	case RewardColumn.RewardId:
            		return this.RewardId.CompareTo(rhs.RewardId);
            		
            		                 
            	
            	
            	case RewardColumn.StaffId:
            		return this.StaffId.CompareTo(rhs.StaffId);
            		
            		                 
            	
            	
            	case RewardColumn.RewardTypeId:
            		return this.RewardTypeId.Value.CompareTo(rhs.RewardTypeId.Value);
            		
            		                 
            	
            	
            	case RewardColumn.RewardDate:
            		return this.RewardDate.Value.CompareTo(rhs.RewardDate.Value);
            		
            		                 
            	
            	
            	case RewardColumn.EffectFrom:
            		return this.EffectFrom.Value.CompareTo(rhs.EffectFrom.Value);
            		
            		                 
            	
            	
            	case RewardColumn.RewardCode:
            		return this.RewardCode.CompareTo(rhs.RewardCode);
            		
            		                 
            	
            	
            	case RewardColumn.RewardForm:
            		return this.RewardForm.Value.CompareTo(rhs.RewardForm.Value);
            		
            		                 
            	
            	
            	case RewardColumn.Reason:
            		return this.Reason.CompareTo(rhs.Reason);
            		
            		                 
            	
            	
            	case RewardColumn.Comment:
            		return this.Comment.CompareTo(rhs.Comment);
            		
            		                 
            	
            	
            	case RewardColumn.IssueLevel:
            		return this.IssueLevel.Value.CompareTo(rhs.IssueLevel.Value);
            		
            		                 
            	
            	
            	case RewardColumn.FromLevelId:
            		return this.FromLevelId.Value.CompareTo(rhs.FromLevelId.Value);
            		
            		                 
            	
            	
            	case RewardColumn.ToLevelId:
            		return this.ToLevelId.Value.CompareTo(rhs.ToLevelId.Value);
            		
            		                 
            	
            	
            	case RewardColumn.MoneyAmount:
            		return this.MoneyAmount.Value.CompareTo(rhs.MoneyAmount.Value);
            		
            		                 
            	
            	
            	case RewardColumn.MoneyUnitId:
            		return this.MoneyUnitId.Value.CompareTo(rhs.MoneyUnitId.Value);
            		
            		                 
            	
            	
            	case RewardColumn.ExchangeRate:
            		return this.ExchangeRate.Value.CompareTo(rhs.ExchangeRate.Value);
            		
            		                 
            	
            	
            	case RewardColumn.CreationDate:
            		return this.CreationDate.Value.CompareTo(rhs.CreationDate.Value);
            		
            		                 
            	
            	
            	case RewardColumn.CreationUserId:
            		return this.CreationUserId.Value.CompareTo(rhs.CreationUserId.Value);
            		
            		                 
            	
            	
            	case RewardColumn.LastModificationDate:
            		return this.LastModificationDate.Value.CompareTo(rhs.LastModificationDate.Value);
            		
            		                 
            	
            	
            	case RewardColumn.LastModificationUserId:
            		return this.LastModificationUserId.Value.CompareTo(rhs.LastModificationUserId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<RewardKey> Members
		
		// member variable for the EntityId property
		private RewardKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public RewardKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new RewardKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = @"Reward" 
					+ this.RewardId.ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{20}{19}- RewardId: {0}{19}- StaffId: {1}{19}- RewardTypeId: {2}{19}- RewardDate: {3}{19}- EffectFrom: {4}{19}- RewardCode: {5}{19}- RewardForm: {6}{19}- Reason: {7}{19}- Comment: {8}{19}- IssueLevel: {9}{19}- FromLevelId: {10}{19}- ToLevelId: {11}{19}- MoneyAmount: {12}{19}- MoneyUnitId: {13}{19}- ExchangeRate: {14}{19}- CreationDate: {15}{19}- CreationUserId: {16}{19}- LastModificationDate: {17}{19}- LastModificationUserId: {18}{19}", 
				this.RewardId,
				this.StaffId,
				(this.RewardTypeId == null) ? string.Empty : this.RewardTypeId.ToString(),
				(this.RewardDate == null) ? string.Empty : this.RewardDate.ToString(),
				(this.EffectFrom == null) ? string.Empty : this.EffectFrom.ToString(),
				(this.RewardCode == null) ? string.Empty : this.RewardCode.ToString(),
				(this.RewardForm == null) ? string.Empty : this.RewardForm.ToString(),
				(this.Reason == null) ? string.Empty : this.Reason.ToString(),
				(this.Comment == null) ? string.Empty : this.Comment.ToString(),
				(this.IssueLevel == null) ? string.Empty : this.IssueLevel.ToString(),
				(this.FromLevelId == null) ? string.Empty : this.FromLevelId.ToString(),
				(this.ToLevelId == null) ? string.Empty : this.ToLevelId.ToString(),
				(this.MoneyAmount == null) ? string.Empty : this.MoneyAmount.ToString(),
				(this.MoneyUnitId == null) ? string.Empty : this.MoneyUnitId.ToString(),
				(this.ExchangeRate == null) ? string.Empty : this.ExchangeRate.ToString(),
				(this.CreationDate == null) ? string.Empty : this.CreationDate.ToString(),
				(this.CreationUserId == null) ? string.Empty : this.CreationUserId.ToString(),
				(this.LastModificationDate == null) ? string.Empty : this.LastModificationDate.ToString(),
				(this.LastModificationUserId == null) ? string.Empty : this.LastModificationUserId.ToString(),
				Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Reward' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal class RewardEntityData : ICloneable
	{
		#region Variable Declarations
		
		#region Primary key(s)
			/// <summary>			
			/// RewardId : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "Reward"</remarks>
			public System.Int32 RewardId;
				
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// StaffId : 
		/// </summary>
		public System.Int32		  StaffId = (int)0;
		
		/// <summary>
		/// RewardTypeId : 
		/// </summary>
		public System.Int32?		  RewardTypeId = (int)0;
		
		/// <summary>
		/// RewardDate : 
		/// </summary>
		public System.DateTime?		  RewardDate = DateTime.MinValue;
		
		/// <summary>
		/// EffectFrom : 
		/// </summary>
		public System.DateTime?		  EffectFrom = DateTime.MinValue;
		
		/// <summary>
		/// RewardCode : so quyet dinh
		/// </summary>
		public System.String		  RewardCode = string.Empty;
		
		/// <summary>
		/// RewardForm : hinh thuc: 1, thang chuc, 2: tien mat ....
		/// </summary>
		public System.Int32?		  RewardForm = (int)0;
		
		/// <summary>
		/// Reason : 
		/// </summary>
		public System.String		  Reason = string.Empty;
		
		/// <summary>
		/// Comment : 
		/// </summary>
		public System.String		  Comment = string.Empty;
		
		/// <summary>
		/// IssueLevel : Cap quyet dinh
		/// </summary>
		public System.Int32?		  IssueLevel = (int)0;
		
		/// <summary>
		/// FromLevelId : 
		/// </summary>
		public System.Int32?		  FromLevelId = (int)0;
		
		/// <summary>
		/// ToLevelId : 
		/// </summary>
		public System.Int32?		  ToLevelId = (int)0;
		
		/// <summary>
		/// MoneyAmount : 
		/// </summary>
		public System.Decimal?		  MoneyAmount = 0;
		
		/// <summary>
		/// MoneyUnitId : 
		/// </summary>
		public System.Int32?		  MoneyUnitId = (int)0;
		
		/// <summary>
		/// ExchangeRate : 
		/// </summary>
		public System.Int32?		  ExchangeRate = (int)0;
		
		/// <summary>
		/// CreationDate : 
		/// </summary>
		public System.DateTime?		  CreationDate = DateTime.MinValue;
		
		/// <summary>
		/// CreationUserId : 
		/// </summary>
		public System.Int32?		  CreationUserId = (int)0;
		
		/// <summary>
		/// LastModificationDate : 
		/// </summary>
		public System.DateTime?		  LastModificationDate = DateTime.MinValue;
		
		/// <summary>
		/// LastModificationUserId : 
		/// </summary>
		public System.Int32?		  LastModificationUserId = (int)0;
		#endregion
			
		#endregion Variable Declarations
		
		#region Clone
		public Object Clone()
		{
			RewardEntityData _tmp = new RewardEntityData();
						
			_tmp.RewardId = this.RewardId;
			
			_tmp.StaffId = this.StaffId;
			_tmp.RewardTypeId = this.RewardTypeId;
			_tmp.RewardDate = this.RewardDate;
			_tmp.EffectFrom = this.EffectFrom;
			_tmp.RewardCode = this.RewardCode;
			_tmp.RewardForm = this.RewardForm;
			_tmp.Reason = this.Reason;
			_tmp.Comment = this.Comment;
			_tmp.IssueLevel = this.IssueLevel;
			_tmp.FromLevelId = this.FromLevelId;
			_tmp.ToLevelId = this.ToLevelId;
			_tmp.MoneyAmount = this.MoneyAmount;
			_tmp.MoneyUnitId = this.MoneyUnitId;
			_tmp.ExchangeRate = this.ExchangeRate;
			_tmp.CreationDate = this.CreationDate;
			_tmp.CreationUserId = this.CreationUserId;
			_tmp.LastModificationDate = this.LastModificationDate;
			_tmp.LastModificationUserId = this.LastModificationUserId;
			
			return _tmp;
		}
		#endregion 
		
		#region Data Properties

		#endregion Data Properties

	}//End struct


		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("RewardCode",100));
		}
   		#endregion
	
	} // End Class
	
	#region RewardComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class RewardComparer : System.Collections.Generic.IComparer<Reward>
	{
		RewardColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:RewardComparer"/> class.
        /// </summary>
		public RewardComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public RewardComparer(RewardColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="Reward"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="Reward"/> to compare.</param>
        /// <param name="b">The second <c>Reward</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Reward a, Reward b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Reward entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Reward a, Reward b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public RewardColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region RewardKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Reward"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class RewardKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the RewardKey class.
		/// </summary>
		public RewardKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the RewardKey class.
		/// </summary>
		public RewardKey(RewardBase entity)
		{
			Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.rewardId = entity.RewardId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the RewardKey class.
		/// </summary>
		public RewardKey(System.Int32 rewardId)
		{
			#region Init Properties

			this.rewardId = rewardId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private RewardBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public RewardBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the RewardId property
		private System.Int32 rewardId;
		
		/// <summary>
		/// Gets or sets the RewardId property.
		/// </summary>
		public System.Int32 RewardId
		{
			get { return rewardId; }
			set
			{
				if ( Entity != null )
				{
					Entity.RewardId = value;
				}
				
				rewardId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				RewardId = ( values["RewardId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["RewardId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("RewardId", RewardId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("RewardId: {0}{1}",
								RewardId,
								Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region RewardColumn Enum
	
	/// <summary>
	/// Enumerate the Reward columns.
	/// </summary>
	[Serializable]
	public enum RewardColumn : int
	{
		/// <summary>
		/// RewardId : 
		/// </summary>
		[EnumTextValue("RewardId")]
		[ColumnEnum("RewardId", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		RewardId = 1,
		/// <summary>
		/// StaffId : 
		/// </summary>
		[EnumTextValue("StaffId")]
		[ColumnEnum("StaffId", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		StaffId = 2,
		/// <summary>
		/// RewardTypeId : 
		/// </summary>
		[EnumTextValue("RewardTypeId")]
		[ColumnEnum("RewardTypeId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		RewardTypeId = 3,
		/// <summary>
		/// RewardDate : 
		/// </summary>
		[EnumTextValue("RewardDate")]
		[ColumnEnum("RewardDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		RewardDate = 4,
		/// <summary>
		/// EffectFrom : 
		/// </summary>
		[EnumTextValue("EffectFrom")]
		[ColumnEnum("EffectFrom", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		EffectFrom = 5,
		/// <summary>
		/// RewardCode : so quyet dinh
		/// </summary>
		[EnumTextValue("RewardCode")]
		[ColumnEnum("RewardCode", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		RewardCode = 6,
		/// <summary>
		/// RewardForm : hinh thuc: 1, thang chuc, 2: tien mat ....
		/// </summary>
		[EnumTextValue("RewardForm")]
		[ColumnEnum("RewardForm", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		RewardForm = 7,
		/// <summary>
		/// Reason : 
		/// </summary>
		[EnumTextValue("Reason")]
		[ColumnEnum("Reason", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Reason = 8,
		/// <summary>
		/// Comment : 
		/// </summary>
		[EnumTextValue("Comment")]
		[ColumnEnum("Comment", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Comment = 9,
		/// <summary>
		/// IssueLevel : Cap quyet dinh
		/// </summary>
		[EnumTextValue("IssueLevel")]
		[ColumnEnum("IssueLevel", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		IssueLevel = 10,
		/// <summary>
		/// FromLevelId : 
		/// </summary>
		[EnumTextValue("FromLevelId")]
		[ColumnEnum("FromLevelId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		FromLevelId = 11,
		/// <summary>
		/// ToLevelId : 
		/// </summary>
		[EnumTextValue("ToLevelId")]
		[ColumnEnum("ToLevelId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ToLevelId = 12,
		/// <summary>
		/// MoneyAmount : 
		/// </summary>
		[EnumTextValue("MoneyAmount")]
		[ColumnEnum("MoneyAmount", typeof(System.Decimal), System.Data.DbType.Currency, false, false, true)]
		MoneyAmount = 13,
		/// <summary>
		/// MoneyUnitId : 
		/// </summary>
		[EnumTextValue("MoneyUnitId")]
		[ColumnEnum("MoneyUnitId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MoneyUnitId = 14,
		/// <summary>
		/// ExchangeRate : 
		/// </summary>
		[EnumTextValue("ExchangeRate")]
		[ColumnEnum("ExchangeRate", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ExchangeRate = 15,
		/// <summary>
		/// CreationDate : 
		/// </summary>
		[EnumTextValue("CreationDate")]
		[ColumnEnum("CreationDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CreationDate = 16,
		/// <summary>
		/// CreationUserId : 
		/// </summary>
		[EnumTextValue("CreationUserId")]
		[ColumnEnum("CreationUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CreationUserId = 17,
		/// <summary>
		/// LastModificationDate : 
		/// </summary>
		[EnumTextValue("LastModificationDate")]
		[ColumnEnum("LastModificationDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastModificationDate = 18,
		/// <summary>
		/// LastModificationUserId : 
		/// </summary>
		[EnumTextValue("LastModificationUserId")]
		[ColumnEnum("LastModificationUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		LastModificationUserId = 19
	}//End enum

	#endregion RewardColumn Enum

} // end namespace
