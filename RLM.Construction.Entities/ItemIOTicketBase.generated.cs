	
/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : Tuesday, May 03, 2011
	Important: Do not modify this file. Edit the file ItemIOTicket.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace RLM.Construction.Entities
{
	#region ItemIOTicketEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="ItemIOTicket"/> object.
	/// </remarks>
	public class ItemIOTicketEventArgs : System.EventArgs
	{
		private ItemIOTicketColumn column;
		private object value;
		
		
		///<summary>
		/// Initalizes a new Instance of the ItemIOTicketEventArgs class.
		///</summary>
		public ItemIOTicketEventArgs(ItemIOTicketColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ItemIOTicketEventArgs class.
		///</summary>
		public ItemIOTicketEventArgs(ItemIOTicketColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		
		///<summary>
		/// The ItemIOTicketColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ItemIOTicketColumn" />
		public ItemIOTicketColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	
	///<summary>
	/// Define a delegate for all ItemIOTicket related events.
	///</summary>
	public delegate void ItemIOTicketEventHandler(object sender, ItemIOTicketEventArgs e);
	
	///<summary>
	/// An object representation of the 'ItemIOTicket' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	//[ToolboxItem(typeof(ItemIOTicket))]
	public abstract partial class ItemIOTicketBase : EntityBase, IEntityId<ItemIOTicketKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		/// 	Old the inner data of the entity.
		/// </summary>
		private ItemIOTicketEntityData entityData;
		
		// <summary>
		// 	Old the original data of the entity.
		// </summary>
		//ItemIOTicketEntityData originalData;
		
		/// <summary>
		/// 	Old a backup of the inner data of the entity.
		/// </summary>
		private ItemIOTicketEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		[NonSerialized]
		private TList<ItemIOTicket> parentCollection;
		private bool inTxn = false;

		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event ItemIOTicketEventHandler ColumnChanging;
		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ItemIOTicketEventHandler ColumnChanged;		
		#endregion "Variable Declarations"
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ItemIOTicketBase"/> instance.
		///</summary>
		public ItemIOTicketBase()
		{
			this.entityData = new ItemIOTicketEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ItemIOTicketBase"/> instance.
		///</summary>
		///<param name="itemIOTicketTicketId"></param>
		///<param name="itemIOTicketRelatedTicketId"></param>
		///<param name="itemIOTicketStaffId"></param>
		///<param name="itemIOTicketName"></param>
		///<param name="itemIOTicketReceiver">Is the person who receive or transfer item</param>
		///<param name="itemIOTicketSender"></param>
		///<param name="itemIOTicketProjectId"></param>
		///<param name="itemIOTicketProjectPhaseId"></param>
		///<param name="itemIOTicketIODate"></param>
		///<param name="itemIOTicketTaxPercent"></param>
		///<param name="itemIOTicketTotalAmount"></param>
		///<param name="itemIOTicketUnitId"></param>
		///<param name="itemIOTicketComment"></param>
		///<param name="itemIOTicketStatus"></param>
		///<param name="itemIOTicketIOType"></param>
		///<param name="itemIOTicketFromRepositoryId"></param>
		///<param name="itemIOTicketToRepositoryId"></param>
		///<param name="itemIOTicketFromStaffId"></param>
		///<param name="itemIOTicketToStaffId"></param>
		///<param name="itemIOTicketIsActive"></param>
		///<param name="itemIOTicketIsNeedApproved"></param>
		///<param name="itemIOTicketIsApproved"></param>
		///<param name="itemIOTicketApproverUserId"></param>
		///<param name="itemIOTicketApproverStaffId"></param>
		///<param name="itemIOTicketApprovedDate"></param>
		///<param name="itemIOTicketCreationDate"></param>
		///<param name="itemIOTicketCreationUserId"></param>
		///<param name="itemIOTicketLastModificationDate"></param>
		///<param name="itemIOTicketLastModificationUserId"></param>
		public ItemIOTicketBase(System.String itemIOTicketTicketId, System.Int32? itemIOTicketRelatedTicketId, System.Int32 itemIOTicketStaffId, 
			System.String itemIOTicketName, System.String itemIOTicketReceiver, System.String itemIOTicketSender, System.Int32? itemIOTicketProjectId, 
			System.Int32? itemIOTicketProjectPhaseId, System.DateTime? itemIOTicketIODate, System.Double? itemIOTicketTaxPercent, 
			System.Decimal? itemIOTicketTotalAmount, System.Int32? itemIOTicketUnitId, System.String itemIOTicketComment, System.Int32? itemIOTicketStatus, 
			System.Int32? itemIOTicketIOType, System.Int32? itemIOTicketFromRepositoryId, System.Int32? itemIOTicketToRepositoryId, 
			System.Int32? itemIOTicketFromStaffId, System.Int32? itemIOTicketToStaffId, System.Boolean? itemIOTicketIsActive, System.Boolean? itemIOTicketIsNeedApproved, 
			System.Boolean? itemIOTicketIsApproved, System.Int32? itemIOTicketApproverUserId, System.Int32? itemIOTicketApproverStaffId, 
			System.DateTime? itemIOTicketApprovedDate, System.DateTime? itemIOTicketCreationDate, System.Int32? itemIOTicketCreationUserId, 
			System.DateTime? itemIOTicketLastModificationDate, System.Int32? itemIOTicketLastModificationUserId)
		{
			this.entityData = new ItemIOTicketEntityData();
			this.backupData = null;

			this.TicketId = itemIOTicketTicketId;
			this.RelatedTicketId = itemIOTicketRelatedTicketId;
			this.StaffId = itemIOTicketStaffId;
			this.Name = itemIOTicketName;
			this.Receiver = itemIOTicketReceiver;
			this.Sender = itemIOTicketSender;
			this.ProjectId = itemIOTicketProjectId;
			this.ProjectPhaseId = itemIOTicketProjectPhaseId;
			this.IODate = itemIOTicketIODate;
			this.TaxPercent = itemIOTicketTaxPercent;
			this.TotalAmount = itemIOTicketTotalAmount;
			this.UnitId = itemIOTicketUnitId;
			this.Comment = itemIOTicketComment;
			this.Status = itemIOTicketStatus;
			this.IOType = itemIOTicketIOType;
			this.FromRepositoryId = itemIOTicketFromRepositoryId;
			this.ToRepositoryId = itemIOTicketToRepositoryId;
			this.FromStaffId = itemIOTicketFromStaffId;
			this.ToStaffId = itemIOTicketToStaffId;
			this.IsActive = itemIOTicketIsActive;
			this.IsNeedApproved = itemIOTicketIsNeedApproved;
			this.IsApproved = itemIOTicketIsApproved;
			this.ApproverUserId = itemIOTicketApproverUserId;
			this.ApproverStaffId = itemIOTicketApproverStaffId;
			this.ApprovedDate = itemIOTicketApprovedDate;
			this.CreationDate = itemIOTicketCreationDate;
			this.CreationUserId = itemIOTicketCreationUserId;
			this.LastModificationDate = itemIOTicketLastModificationDate;
			this.LastModificationUserId = itemIOTicketLastModificationUserId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ItemIOTicket"/> instance.
		///</summary>
		///<param name="itemIOTicketTicketId"></param>
		///<param name="itemIOTicketRelatedTicketId"></param>
		///<param name="itemIOTicketStaffId"></param>
		///<param name="itemIOTicketName"></param>
		///<param name="itemIOTicketReceiver">Is the person who receive or transfer item</param>
		///<param name="itemIOTicketSender"></param>
		///<param name="itemIOTicketProjectId"></param>
		///<param name="itemIOTicketProjectPhaseId"></param>
		///<param name="itemIOTicketIODate"></param>
		///<param name="itemIOTicketTaxPercent"></param>
		///<param name="itemIOTicketTotalAmount"></param>
		///<param name="itemIOTicketUnitId"></param>
		///<param name="itemIOTicketComment"></param>
		///<param name="itemIOTicketStatus"></param>
		///<param name="itemIOTicketIOType"></param>
		///<param name="itemIOTicketFromRepositoryId"></param>
		///<param name="itemIOTicketToRepositoryId"></param>
		///<param name="itemIOTicketFromStaffId"></param>
		///<param name="itemIOTicketToStaffId"></param>
		///<param name="itemIOTicketIsActive"></param>
		///<param name="itemIOTicketIsNeedApproved"></param>
		///<param name="itemIOTicketIsApproved"></param>
		///<param name="itemIOTicketApproverUserId"></param>
		///<param name="itemIOTicketApproverStaffId"></param>
		///<param name="itemIOTicketApprovedDate"></param>
		///<param name="itemIOTicketCreationDate"></param>
		///<param name="itemIOTicketCreationUserId"></param>
		///<param name="itemIOTicketLastModificationDate"></param>
		///<param name="itemIOTicketLastModificationUserId"></param>
		public static ItemIOTicket CreateItemIOTicket(System.String itemIOTicketTicketId, System.Int32? itemIOTicketRelatedTicketId, System.Int32 itemIOTicketStaffId, 
			System.String itemIOTicketName, System.String itemIOTicketReceiver, System.String itemIOTicketSender, System.Int32? itemIOTicketProjectId, 
			System.Int32? itemIOTicketProjectPhaseId, System.DateTime? itemIOTicketIODate, System.Double? itemIOTicketTaxPercent, 
			System.Decimal? itemIOTicketTotalAmount, System.Int32? itemIOTicketUnitId, System.String itemIOTicketComment, System.Int32? itemIOTicketStatus, 
			System.Int32? itemIOTicketIOType, System.Int32? itemIOTicketFromRepositoryId, System.Int32? itemIOTicketToRepositoryId, 
			System.Int32? itemIOTicketFromStaffId, System.Int32? itemIOTicketToStaffId, System.Boolean? itemIOTicketIsActive, System.Boolean? itemIOTicketIsNeedApproved, 
			System.Boolean? itemIOTicketIsApproved, System.Int32? itemIOTicketApproverUserId, System.Int32? itemIOTicketApproverStaffId, 
			System.DateTime? itemIOTicketApprovedDate, System.DateTime? itemIOTicketCreationDate, System.Int32? itemIOTicketCreationUserId, 
			System.DateTime? itemIOTicketLastModificationDate, System.Int32? itemIOTicketLastModificationUserId)
		{
			ItemIOTicket newItemIOTicket = new ItemIOTicket();
			newItemIOTicket.TicketId = itemIOTicketTicketId;
			newItemIOTicket.RelatedTicketId = itemIOTicketRelatedTicketId;
			newItemIOTicket.StaffId = itemIOTicketStaffId;
			newItemIOTicket.Name = itemIOTicketName;
			newItemIOTicket.Receiver = itemIOTicketReceiver;
			newItemIOTicket.Sender = itemIOTicketSender;
			newItemIOTicket.ProjectId = itemIOTicketProjectId;
			newItemIOTicket.ProjectPhaseId = itemIOTicketProjectPhaseId;
			newItemIOTicket.IODate = itemIOTicketIODate;
			newItemIOTicket.TaxPercent = itemIOTicketTaxPercent;
			newItemIOTicket.TotalAmount = itemIOTicketTotalAmount;
			newItemIOTicket.UnitId = itemIOTicketUnitId;
			newItemIOTicket.Comment = itemIOTicketComment;
			newItemIOTicket.Status = itemIOTicketStatus;
			newItemIOTicket.IOType = itemIOTicketIOType;
			newItemIOTicket.FromRepositoryId = itemIOTicketFromRepositoryId;
			newItemIOTicket.ToRepositoryId = itemIOTicketToRepositoryId;
			newItemIOTicket.FromStaffId = itemIOTicketFromStaffId;
			newItemIOTicket.ToStaffId = itemIOTicketToStaffId;
			newItemIOTicket.IsActive = itemIOTicketIsActive;
			newItemIOTicket.IsNeedApproved = itemIOTicketIsNeedApproved;
			newItemIOTicket.IsApproved = itemIOTicketIsApproved;
			newItemIOTicket.ApproverUserId = itemIOTicketApproverUserId;
			newItemIOTicket.ApproverStaffId = itemIOTicketApproverStaffId;
			newItemIOTicket.ApprovedDate = itemIOTicketApprovedDate;
			newItemIOTicket.CreationDate = itemIOTicketCreationDate;
			newItemIOTicket.CreationUserId = itemIOTicketCreationUserId;
			newItemIOTicket.LastModificationDate = itemIOTicketLastModificationDate;
			newItemIOTicket.LastModificationUserId = itemIOTicketLastModificationUserId;
			return newItemIOTicket;
		}
				
		#endregion Constructors
		
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ItemIOTicketColumn"/> which has raised the event.</param>
		public void OnColumnChanging(ItemIOTicketColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ItemIOTicketColumn"/> which has raised the event.</param>
		public void OnColumnChanged(ItemIOTicketColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ItemIOTicketColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(ItemIOTicketColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added)
				EntityManager.StopTracking(EntityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				ItemIOTicketEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ItemIOTicketEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ItemIOTicketColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(ItemIOTicketColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ItemIOTicketEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ItemIOTicketEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
				
		#region Properties	
				
		/// <summary>
		/// 	Gets or sets the IOTicketId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 IOTicketId
		{
			get
			{
				return this.entityData.IOTicketId; 
			}
			
			set
			{
				if (this.entityData.IOTicketId == value)
					return;
					
					
				OnColumnChanging(ItemIOTicketColumn.IOTicketId, this.entityData.IOTicketId);
				this.entityData.IOTicketId = value;
				this.EntityId.IOTicketId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemIOTicketColumn.IOTicketId, this.entityData.IOTicketId);
				OnPropertyChanged("IOTicketId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TicketId property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false, 100)]
		public virtual System.String TicketId
		{
			get
			{
				return this.entityData.TicketId; 
			}
			
			set
			{
				if (this.entityData.TicketId == value)
					return;
					
					
				OnColumnChanging(ItemIOTicketColumn.TicketId, this.entityData.TicketId);
				this.entityData.TicketId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemIOTicketColumn.TicketId, this.entityData.TicketId);
				OnPropertyChanged("TicketId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RelatedTicketId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsRelatedTicketIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? RelatedTicketId
		{
			get
			{
				return this.entityData.RelatedTicketId; 
			}
			
			set
			{
				if (this.entityData.RelatedTicketId == value)
					return;
					
					
				OnColumnChanging(ItemIOTicketColumn.RelatedTicketId, this.entityData.RelatedTicketId);
				this.entityData.RelatedTicketId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemIOTicketColumn.RelatedTicketId, this.entityData.RelatedTicketId);
				OnPropertyChanged("RelatedTicketId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StaffId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 StaffId
		{
			get
			{
				return this.entityData.StaffId; 
			}
			
			set
			{
				if (this.entityData.StaffId == value)
					return;
					
					
				OnColumnChanging(ItemIOTicketColumn.StaffId, this.entityData.StaffId);
				this.entityData.StaffId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemIOTicketColumn.StaffId, this.entityData.StaffId);
				OnPropertyChanged("StaffId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Name property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 4000)]
		public virtual System.String Name
		{
			get
			{
				return this.entityData.Name; 
			}
			
			set
			{
				if (this.entityData.Name == value)
					return;
					
					
				OnColumnChanging(ItemIOTicketColumn.Name, this.entityData.Name);
				this.entityData.Name = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemIOTicketColumn.Name, this.entityData.Name);
				OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Receiver property. 
		///		Is the person who receive or transfer item
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute("Is the person who receive or transfer item"), BindableAttribute()]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String Receiver
		{
			get
			{
				return this.entityData.Receiver; 
			}
			
			set
			{
				if (this.entityData.Receiver == value)
					return;
					
					
				OnColumnChanging(ItemIOTicketColumn.Receiver, this.entityData.Receiver);
				this.entityData.Receiver = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemIOTicketColumn.Receiver, this.entityData.Receiver);
				OnPropertyChanged("Receiver");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Sender property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 300)]
		public virtual System.String Sender
		{
			get
			{
				return this.entityData.Sender; 
			}
			
			set
			{
				if (this.entityData.Sender == value)
					return;
					
					
				OnColumnChanging(ItemIOTicketColumn.Sender, this.entityData.Sender);
				this.entityData.Sender = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemIOTicketColumn.Sender, this.entityData.Sender);
				OnPropertyChanged("Sender");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ProjectId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsProjectIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ProjectId
		{
			get
			{
				return this.entityData.ProjectId; 
			}
			
			set
			{
				if (this.entityData.ProjectId == value)
					return;
					
					
				OnColumnChanging(ItemIOTicketColumn.ProjectId, this.entityData.ProjectId);
				this.entityData.ProjectId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemIOTicketColumn.ProjectId, this.entityData.ProjectId);
				OnPropertyChanged("ProjectId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ProjectPhaseId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsProjectPhaseIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ProjectPhaseId
		{
			get
			{
				return this.entityData.ProjectPhaseId; 
			}
			
			set
			{
				if (this.entityData.ProjectPhaseId == value)
					return;
					
					
				OnColumnChanging(ItemIOTicketColumn.ProjectPhaseId, this.entityData.ProjectPhaseId);
				this.entityData.ProjectPhaseId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemIOTicketColumn.ProjectPhaseId, this.entityData.ProjectPhaseId);
				OnPropertyChanged("ProjectPhaseId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IODate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsIODateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? IODate
		{
			get
			{
				return this.entityData.IODate; 
			}
			
			set
			{
				if (this.entityData.IODate == value)
					return;
					
					
				OnColumnChanging(ItemIOTicketColumn.IODate, this.entityData.IODate);
				this.entityData.IODate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemIOTicketColumn.IODate, this.entityData.IODate);
				OnPropertyChanged("IODate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TaxPercent property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsTaxPercentNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Double? TaxPercent
		{
			get
			{
				return this.entityData.TaxPercent; 
			}
			
			set
			{
				if (this.entityData.TaxPercent == value)
					return;
					
					
				OnColumnChanging(ItemIOTicketColumn.TaxPercent, this.entityData.TaxPercent);
				this.entityData.TaxPercent = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemIOTicketColumn.TaxPercent, this.entityData.TaxPercent);
				OnPropertyChanged("TaxPercent");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalAmount property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTotalAmountNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TotalAmount
		{
			get
			{
				return this.entityData.TotalAmount; 
			}
			
			set
			{
				if (this.entityData.TotalAmount == value)
					return;
					
					
				OnColumnChanging(ItemIOTicketColumn.TotalAmount, this.entityData.TotalAmount);
				this.entityData.TotalAmount = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemIOTicketColumn.TotalAmount, this.entityData.TotalAmount);
				OnPropertyChanged("TotalAmount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UnitId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsUnitIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? UnitId
		{
			get
			{
				return this.entityData.UnitId; 
			}
			
			set
			{
				if (this.entityData.UnitId == value)
					return;
					
					
				OnColumnChanging(ItemIOTicketColumn.UnitId, this.entityData.UnitId);
				this.entityData.UnitId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemIOTicketColumn.UnitId, this.entityData.UnitId);
				OnPropertyChanged("UnitId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Comment property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 4000)]
		public virtual System.String Comment
		{
			get
			{
				return this.entityData.Comment; 
			}
			
			set
			{
				if (this.entityData.Comment == value)
					return;
					
					
				OnColumnChanging(ItemIOTicketColumn.Comment, this.entityData.Comment);
				this.entityData.Comment = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemIOTicketColumn.Comment, this.entityData.Comment);
				OnPropertyChanged("Comment");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Status property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsStatusNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Status
		{
			get
			{
				return this.entityData.Status; 
			}
			
			set
			{
				if (this.entityData.Status == value)
					return;
					
					
				OnColumnChanging(ItemIOTicketColumn.Status, this.entityData.Status);
				this.entityData.Status = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemIOTicketColumn.Status, this.entityData.Status);
				OnPropertyChanged("Status");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IOType property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsIOTypeNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? IOType
		{
			get
			{
				return this.entityData.IOType; 
			}
			
			set
			{
				if (this.entityData.IOType == value)
					return;
					
					
				OnColumnChanging(ItemIOTicketColumn.IOType, this.entityData.IOType);
				this.entityData.IOType = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemIOTicketColumn.IOType, this.entityData.IOType);
				OnPropertyChanged("IOType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FromRepositoryId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsFromRepositoryIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? FromRepositoryId
		{
			get
			{
				return this.entityData.FromRepositoryId; 
			}
			
			set
			{
				if (this.entityData.FromRepositoryId == value)
					return;
					
					
				OnColumnChanging(ItemIOTicketColumn.FromRepositoryId, this.entityData.FromRepositoryId);
				this.entityData.FromRepositoryId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemIOTicketColumn.FromRepositoryId, this.entityData.FromRepositoryId);
				OnPropertyChanged("FromRepositoryId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ToRepositoryId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsToRepositoryIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ToRepositoryId
		{
			get
			{
				return this.entityData.ToRepositoryId; 
			}
			
			set
			{
				if (this.entityData.ToRepositoryId == value)
					return;
					
					
				OnColumnChanging(ItemIOTicketColumn.ToRepositoryId, this.entityData.ToRepositoryId);
				this.entityData.ToRepositoryId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemIOTicketColumn.ToRepositoryId, this.entityData.ToRepositoryId);
				OnPropertyChanged("ToRepositoryId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FromStaffId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsFromStaffIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? FromStaffId
		{
			get
			{
				return this.entityData.FromStaffId; 
			}
			
			set
			{
				if (this.entityData.FromStaffId == value)
					return;
					
					
				OnColumnChanging(ItemIOTicketColumn.FromStaffId, this.entityData.FromStaffId);
				this.entityData.FromStaffId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemIOTicketColumn.FromStaffId, this.entityData.FromStaffId);
				OnPropertyChanged("FromStaffId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ToStaffId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsToStaffIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ToStaffId
		{
			get
			{
				return this.entityData.ToStaffId; 
			}
			
			set
			{
				if (this.entityData.ToStaffId == value)
					return;
					
					
				OnColumnChanging(ItemIOTicketColumn.ToStaffId, this.entityData.ToStaffId);
				this.entityData.ToStaffId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemIOTicketColumn.ToStaffId, this.entityData.ToStaffId);
				OnPropertyChanged("ToStaffId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsActive property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsActiveNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsActive
		{
			get
			{
				return this.entityData.IsActive; 
			}
			
			set
			{
				if (this.entityData.IsActive == value)
					return;
					
					
				OnColumnChanging(ItemIOTicketColumn.IsActive, this.entityData.IsActive);
				this.entityData.IsActive = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemIOTicketColumn.IsActive, this.entityData.IsActive);
				OnPropertyChanged("IsActive");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsNeedApproved property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsNeedApprovedNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsNeedApproved
		{
			get
			{
				return this.entityData.IsNeedApproved; 
			}
			
			set
			{
				if (this.entityData.IsNeedApproved == value)
					return;
					
					
				OnColumnChanging(ItemIOTicketColumn.IsNeedApproved, this.entityData.IsNeedApproved);
				this.entityData.IsNeedApproved = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemIOTicketColumn.IsNeedApproved, this.entityData.IsNeedApproved);
				OnPropertyChanged("IsNeedApproved");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsApproved property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsApprovedNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsApproved
		{
			get
			{
				return this.entityData.IsApproved; 
			}
			
			set
			{
				if (this.entityData.IsApproved == value)
					return;
					
					
				OnColumnChanging(ItemIOTicketColumn.IsApproved, this.entityData.IsApproved);
				this.entityData.IsApproved = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemIOTicketColumn.IsApproved, this.entityData.IsApproved);
				OnPropertyChanged("IsApproved");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ApproverUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsApproverUserIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ApproverUserId
		{
			get
			{
				return this.entityData.ApproverUserId; 
			}
			
			set
			{
				if (this.entityData.ApproverUserId == value)
					return;
					
					
				OnColumnChanging(ItemIOTicketColumn.ApproverUserId, this.entityData.ApproverUserId);
				this.entityData.ApproverUserId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemIOTicketColumn.ApproverUserId, this.entityData.ApproverUserId);
				OnPropertyChanged("ApproverUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ApproverStaffId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsApproverStaffIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ApproverStaffId
		{
			get
			{
				return this.entityData.ApproverStaffId; 
			}
			
			set
			{
				if (this.entityData.ApproverStaffId == value)
					return;
					
					
				OnColumnChanging(ItemIOTicketColumn.ApproverStaffId, this.entityData.ApproverStaffId);
				this.entityData.ApproverStaffId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemIOTicketColumn.ApproverStaffId, this.entityData.ApproverStaffId);
				OnPropertyChanged("ApproverStaffId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ApprovedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsApprovedDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ApprovedDate
		{
			get
			{
				return this.entityData.ApprovedDate; 
			}
			
			set
			{
				if (this.entityData.ApprovedDate == value)
					return;
					
					
				OnColumnChanging(ItemIOTicketColumn.ApprovedDate, this.entityData.ApprovedDate);
				this.entityData.ApprovedDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemIOTicketColumn.ApprovedDate, this.entityData.ApprovedDate);
				OnPropertyChanged("ApprovedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreationDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsCreationDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CreationDate
		{
			get
			{
				return this.entityData.CreationDate; 
			}
			
			set
			{
				if (this.entityData.CreationDate == value)
					return;
					
					
				OnColumnChanging(ItemIOTicketColumn.CreationDate, this.entityData.CreationDate);
				this.entityData.CreationDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemIOTicketColumn.CreationDate, this.entityData.CreationDate);
				OnPropertyChanged("CreationDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreationUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCreationUserIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CreationUserId
		{
			get
			{
				return this.entityData.CreationUserId; 
			}
			
			set
			{
				if (this.entityData.CreationUserId == value)
					return;
					
					
				OnColumnChanging(ItemIOTicketColumn.CreationUserId, this.entityData.CreationUserId);
				this.entityData.CreationUserId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemIOTicketColumn.CreationUserId, this.entityData.CreationUserId);
				OnPropertyChanged("CreationUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModificationDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastModificationDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastModificationDate
		{
			get
			{
				return this.entityData.LastModificationDate; 
			}
			
			set
			{
				if (this.entityData.LastModificationDate == value)
					return;
					
					
				OnColumnChanging(ItemIOTicketColumn.LastModificationDate, this.entityData.LastModificationDate);
				this.entityData.LastModificationDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemIOTicketColumn.LastModificationDate, this.entityData.LastModificationDate);
				OnPropertyChanged("LastModificationDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModificationUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsLastModificationUserIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? LastModificationUserId
		{
			get
			{
				return this.entityData.LastModificationUserId; 
			}
			
			set
			{
				if (this.entityData.LastModificationUserId == value)
					return;
					
					
				OnColumnChanging(ItemIOTicketColumn.LastModificationUserId, this.entityData.LastModificationUserId);
				this.entityData.LastModificationUserId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ItemIOTicketColumn.LastModificationUserId, this.entityData.LastModificationUserId);
				OnPropertyChanged("LastModificationUserId");
			}
		}
		

		#region Source Foreign Key Property
				
		#endregion
			
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ItemIOTicket"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"IOTicketId", "TicketId", "RelatedTicketId", "StaffId", "Name", "Receiver", "Sender", "ProjectId", "ProjectPhaseId", "IODate", "TaxPercent", "TotalAmount", "UnitId", "Comment", "Status", "IOType", "FromRepositoryId", "ToRepositoryId", "FromStaffId", "ToStaffId", "IsActive", "IsNeedApproved", "IsApproved", "ApproverUserId", "ApproverStaffId", "ApprovedDate", "CreationDate", "CreationUserId", "LastModificationDate", "LastModificationUserId"};
			}
		}
		#endregion 
		
		
		#endregion
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ItemIOTicketEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (ItemIOTicket) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return (object)this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<ItemIOTicket>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as ItemIOTicket);
	        }
	    }


		#endregion
		
		#region Methods	
			
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();
		}	
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ItemIOTicket Entity 
		///</summary>
		public virtual ItemIOTicket Copy()
		{
			//shallow copy entity
			ItemIOTicket copy = new ItemIOTicket();
			copy.IOTicketId = this.IOTicketId;
			copy.TicketId = this.TicketId;
			copy.RelatedTicketId = this.RelatedTicketId;
			copy.StaffId = this.StaffId;
			copy.Name = this.Name;
			copy.Receiver = this.Receiver;
			copy.Sender = this.Sender;
			copy.ProjectId = this.ProjectId;
			copy.ProjectPhaseId = this.ProjectPhaseId;
			copy.IODate = this.IODate;
			copy.TaxPercent = this.TaxPercent;
			copy.TotalAmount = this.TotalAmount;
			copy.UnitId = this.UnitId;
			copy.Comment = this.Comment;
			copy.Status = this.Status;
			copy.IOType = this.IOType;
			copy.FromRepositoryId = this.FromRepositoryId;
			copy.ToRepositoryId = this.ToRepositoryId;
			copy.FromStaffId = this.FromStaffId;
			copy.ToStaffId = this.ToStaffId;
			copy.IsActive = this.IsActive;
			copy.IsNeedApproved = this.IsNeedApproved;
			copy.IsApproved = this.IsApproved;
			copy.ApproverUserId = this.ApproverUserId;
			copy.ApproverStaffId = this.ApproverStaffId;
			copy.ApprovedDate = this.ApprovedDate;
			copy.CreationDate = this.CreationDate;
			copy.CreationUserId = this.CreationUserId;
			copy.LastModificationDate = this.LastModificationDate;
			copy.LastModificationUserId = this.LastModificationUserId;
					
			copy.AcceptChanges();
			return (ItemIOTicket)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed ItemIOTicket Entity which is a deep copy of the current entity.
		///</summary>
		public virtual ItemIOTicket DeepCopy()
		{
			return EntityHelper.Clone<ItemIOTicket>(this as ItemIOTicket);	
		}
		#endregion
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ItemIOTicketBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ItemIOTicketBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="ItemIOTicketBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="ItemIOTicketBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ItemIOTicketBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(ItemIOTicketBase Object1, ItemIOTicketBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.IOTicketId != Object2.IOTicketId)
				equal = false;
			if (Object1.TicketId != Object2.TicketId)
				equal = false;
			if ( Object1.RelatedTicketId != null && Object2.RelatedTicketId != null )
			{
				if (Object1.RelatedTicketId != Object2.RelatedTicketId)
					equal = false;
			}
			else if (Object1.RelatedTicketId == null ^ Object2.RelatedTicketId == null )
			{
				equal = false;
			}
			if (Object1.StaffId != Object2.StaffId)
				equal = false;
			if ( Object1.Name != null && Object2.Name != null )
			{
				if (Object1.Name != Object2.Name)
					equal = false;
			}
			else if (Object1.Name == null ^ Object2.Name == null )
			{
				equal = false;
			}
			if ( Object1.Receiver != null && Object2.Receiver != null )
			{
				if (Object1.Receiver != Object2.Receiver)
					equal = false;
			}
			else if (Object1.Receiver == null ^ Object2.Receiver == null )
			{
				equal = false;
			}
			if ( Object1.Sender != null && Object2.Sender != null )
			{
				if (Object1.Sender != Object2.Sender)
					equal = false;
			}
			else if (Object1.Sender == null ^ Object2.Sender == null )
			{
				equal = false;
			}
			if ( Object1.ProjectId != null && Object2.ProjectId != null )
			{
				if (Object1.ProjectId != Object2.ProjectId)
					equal = false;
			}
			else if (Object1.ProjectId == null ^ Object2.ProjectId == null )
			{
				equal = false;
			}
			if ( Object1.ProjectPhaseId != null && Object2.ProjectPhaseId != null )
			{
				if (Object1.ProjectPhaseId != Object2.ProjectPhaseId)
					equal = false;
			}
			else if (Object1.ProjectPhaseId == null ^ Object2.ProjectPhaseId == null )
			{
				equal = false;
			}
			if ( Object1.IODate != null && Object2.IODate != null )
			{
				if (Object1.IODate != Object2.IODate)
					equal = false;
			}
			else if (Object1.IODate == null ^ Object2.IODate == null )
			{
				equal = false;
			}
			if ( Object1.TaxPercent != null && Object2.TaxPercent != null )
			{
				if (Object1.TaxPercent != Object2.TaxPercent)
					equal = false;
			}
			else if (Object1.TaxPercent == null ^ Object2.TaxPercent == null )
			{
				equal = false;
			}
			if ( Object1.TotalAmount != null && Object2.TotalAmount != null )
			{
				if (Object1.TotalAmount != Object2.TotalAmount)
					equal = false;
			}
			else if (Object1.TotalAmount == null ^ Object2.TotalAmount == null )
			{
				equal = false;
			}
			if ( Object1.UnitId != null && Object2.UnitId != null )
			{
				if (Object1.UnitId != Object2.UnitId)
					equal = false;
			}
			else if (Object1.UnitId == null ^ Object2.UnitId == null )
			{
				equal = false;
			}
			if ( Object1.Comment != null && Object2.Comment != null )
			{
				if (Object1.Comment != Object2.Comment)
					equal = false;
			}
			else if (Object1.Comment == null ^ Object2.Comment == null )
			{
				equal = false;
			}
			if ( Object1.Status != null && Object2.Status != null )
			{
				if (Object1.Status != Object2.Status)
					equal = false;
			}
			else if (Object1.Status == null ^ Object2.Status == null )
			{
				equal = false;
			}
			if ( Object1.IOType != null && Object2.IOType != null )
			{
				if (Object1.IOType != Object2.IOType)
					equal = false;
			}
			else if (Object1.IOType == null ^ Object2.IOType == null )
			{
				equal = false;
			}
			if ( Object1.FromRepositoryId != null && Object2.FromRepositoryId != null )
			{
				if (Object1.FromRepositoryId != Object2.FromRepositoryId)
					equal = false;
			}
			else if (Object1.FromRepositoryId == null ^ Object2.FromRepositoryId == null )
			{
				equal = false;
			}
			if ( Object1.ToRepositoryId != null && Object2.ToRepositoryId != null )
			{
				if (Object1.ToRepositoryId != Object2.ToRepositoryId)
					equal = false;
			}
			else if (Object1.ToRepositoryId == null ^ Object2.ToRepositoryId == null )
			{
				equal = false;
			}
			if ( Object1.FromStaffId != null && Object2.FromStaffId != null )
			{
				if (Object1.FromStaffId != Object2.FromStaffId)
					equal = false;
			}
			else if (Object1.FromStaffId == null ^ Object2.FromStaffId == null )
			{
				equal = false;
			}
			if ( Object1.ToStaffId != null && Object2.ToStaffId != null )
			{
				if (Object1.ToStaffId != Object2.ToStaffId)
					equal = false;
			}
			else if (Object1.ToStaffId == null ^ Object2.ToStaffId == null )
			{
				equal = false;
			}
			if ( Object1.IsActive != null && Object2.IsActive != null )
			{
				if (Object1.IsActive != Object2.IsActive)
					equal = false;
			}
			else if (Object1.IsActive == null ^ Object2.IsActive == null )
			{
				equal = false;
			}
			if ( Object1.IsNeedApproved != null && Object2.IsNeedApproved != null )
			{
				if (Object1.IsNeedApproved != Object2.IsNeedApproved)
					equal = false;
			}
			else if (Object1.IsNeedApproved == null ^ Object2.IsNeedApproved == null )
			{
				equal = false;
			}
			if ( Object1.IsApproved != null && Object2.IsApproved != null )
			{
				if (Object1.IsApproved != Object2.IsApproved)
					equal = false;
			}
			else if (Object1.IsApproved == null ^ Object2.IsApproved == null )
			{
				equal = false;
			}
			if ( Object1.ApproverUserId != null && Object2.ApproverUserId != null )
			{
				if (Object1.ApproverUserId != Object2.ApproverUserId)
					equal = false;
			}
			else if (Object1.ApproverUserId == null ^ Object2.ApproverUserId == null )
			{
				equal = false;
			}
			if ( Object1.ApproverStaffId != null && Object2.ApproverStaffId != null )
			{
				if (Object1.ApproverStaffId != Object2.ApproverStaffId)
					equal = false;
			}
			else if (Object1.ApproverStaffId == null ^ Object2.ApproverStaffId == null )
			{
				equal = false;
			}
			if ( Object1.ApprovedDate != null && Object2.ApprovedDate != null )
			{
				if (Object1.ApprovedDate != Object2.ApprovedDate)
					equal = false;
			}
			else if (Object1.ApprovedDate == null ^ Object2.ApprovedDate == null )
			{
				equal = false;
			}
			if ( Object1.CreationDate != null && Object2.CreationDate != null )
			{
				if (Object1.CreationDate != Object2.CreationDate)
					equal = false;
			}
			else if (Object1.CreationDate == null ^ Object2.CreationDate == null )
			{
				equal = false;
			}
			if ( Object1.CreationUserId != null && Object2.CreationUserId != null )
			{
				if (Object1.CreationUserId != Object2.CreationUserId)
					equal = false;
			}
			else if (Object1.CreationUserId == null ^ Object2.CreationUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastModificationDate != null && Object2.LastModificationDate != null )
			{
				if (Object1.LastModificationDate != Object2.LastModificationDate)
					equal = false;
			}
			else if (Object1.LastModificationDate == null ^ Object2.LastModificationDate == null )
			{
				equal = false;
			}
			if ( Object1.LastModificationUserId != null && Object2.LastModificationUserId != null )
			{
				if (Object1.LastModificationUserId != Object2.LastModificationUserId)
					equal = false;
			}
			else if (Object1.LastModificationUserId == null ^ Object2.LastModificationUserId == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			// TODO -> generate a strongly typed IComparer in the concrete class
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name) .CompareTo(((ItemIOTicketBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name));
		}
		
		/*
		// static method to get a Comparer object
        public static ItemIOTicketComparer GetComparer()
        {
            return new ItemIOTicketComparer();
        }
        */

        // Comparer delegates back to ItemIOTicket
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(ItemIOTicket rhs, ItemIOTicketColumn which)
        {
            switch (which)
            {
            	
            	
            	case ItemIOTicketColumn.IOTicketId:
            		return this.IOTicketId.CompareTo(rhs.IOTicketId);
            		
            		                 
            	
            	
            	case ItemIOTicketColumn.TicketId:
            		return this.TicketId.CompareTo(rhs.TicketId);
            		
            		                 
            	
            	
            	case ItemIOTicketColumn.RelatedTicketId:
            		return this.RelatedTicketId.Value.CompareTo(rhs.RelatedTicketId.Value);
            		
            		                 
            	
            	
            	case ItemIOTicketColumn.StaffId:
            		return this.StaffId.CompareTo(rhs.StaffId);
            		
            		                 
            	
            	
            	case ItemIOTicketColumn.Name:
            		return this.Name.CompareTo(rhs.Name);
            		
            		                 
            	
            	
            	case ItemIOTicketColumn.Receiver:
            		return this.Receiver.CompareTo(rhs.Receiver);
            		
            		                 
            	
            	
            	case ItemIOTicketColumn.Sender:
            		return this.Sender.CompareTo(rhs.Sender);
            		
            		                 
            	
            	
            	case ItemIOTicketColumn.ProjectId:
            		return this.ProjectId.Value.CompareTo(rhs.ProjectId.Value);
            		
            		                 
            	
            	
            	case ItemIOTicketColumn.ProjectPhaseId:
            		return this.ProjectPhaseId.Value.CompareTo(rhs.ProjectPhaseId.Value);
            		
            		                 
            	
            	
            	case ItemIOTicketColumn.IODate:
            		return this.IODate.Value.CompareTo(rhs.IODate.Value);
            		
            		                 
            	
            	
            	case ItemIOTicketColumn.TaxPercent:
            		return this.TaxPercent.Value.CompareTo(rhs.TaxPercent.Value);
            		
            		                 
            	
            	
            	case ItemIOTicketColumn.TotalAmount:
            		return this.TotalAmount.Value.CompareTo(rhs.TotalAmount.Value);
            		
            		                 
            	
            	
            	case ItemIOTicketColumn.UnitId:
            		return this.UnitId.Value.CompareTo(rhs.UnitId.Value);
            		
            		                 
            	
            	
            	case ItemIOTicketColumn.Comment:
            		return this.Comment.CompareTo(rhs.Comment);
            		
            		                 
            	
            	
            	case ItemIOTicketColumn.Status:
            		return this.Status.Value.CompareTo(rhs.Status.Value);
            		
            		                 
            	
            	
            	case ItemIOTicketColumn.IOType:
            		return this.IOType.Value.CompareTo(rhs.IOType.Value);
            		
            		                 
            	
            	
            	case ItemIOTicketColumn.FromRepositoryId:
            		return this.FromRepositoryId.Value.CompareTo(rhs.FromRepositoryId.Value);
            		
            		                 
            	
            	
            	case ItemIOTicketColumn.ToRepositoryId:
            		return this.ToRepositoryId.Value.CompareTo(rhs.ToRepositoryId.Value);
            		
            		                 
            	
            	
            	case ItemIOTicketColumn.FromStaffId:
            		return this.FromStaffId.Value.CompareTo(rhs.FromStaffId.Value);
            		
            		                 
            	
            	
            	case ItemIOTicketColumn.ToStaffId:
            		return this.ToStaffId.Value.CompareTo(rhs.ToStaffId.Value);
            		
            		                 
            	
            	
            	case ItemIOTicketColumn.IsActive:
            		return this.IsActive.Value.CompareTo(rhs.IsActive.Value);
            		
            		                 
            	
            	
            	case ItemIOTicketColumn.IsNeedApproved:
            		return this.IsNeedApproved.Value.CompareTo(rhs.IsNeedApproved.Value);
            		
            		                 
            	
            	
            	case ItemIOTicketColumn.IsApproved:
            		return this.IsApproved.Value.CompareTo(rhs.IsApproved.Value);
            		
            		                 
            	
            	
            	case ItemIOTicketColumn.ApproverUserId:
            		return this.ApproverUserId.Value.CompareTo(rhs.ApproverUserId.Value);
            		
            		                 
            	
            	
            	case ItemIOTicketColumn.ApproverStaffId:
            		return this.ApproverStaffId.Value.CompareTo(rhs.ApproverStaffId.Value);
            		
            		                 
            	
            	
            	case ItemIOTicketColumn.ApprovedDate:
            		return this.ApprovedDate.Value.CompareTo(rhs.ApprovedDate.Value);
            		
            		                 
            	
            	
            	case ItemIOTicketColumn.CreationDate:
            		return this.CreationDate.Value.CompareTo(rhs.CreationDate.Value);
            		
            		                 
            	
            	
            	case ItemIOTicketColumn.CreationUserId:
            		return this.CreationUserId.Value.CompareTo(rhs.CreationUserId.Value);
            		
            		                 
            	
            	
            	case ItemIOTicketColumn.LastModificationDate:
            		return this.LastModificationDate.Value.CompareTo(rhs.LastModificationDate.Value);
            		
            		                 
            	
            	
            	case ItemIOTicketColumn.LastModificationUserId:
            		return this.LastModificationUserId.Value.CompareTo(rhs.LastModificationUserId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ItemIOTicketKey> Members
		
		// member variable for the EntityId property
		private ItemIOTicketKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public ItemIOTicketKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ItemIOTicketKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = @"ItemIOTicket" 
					+ this.IOTicketId.ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{31}{30}- IOTicketId: {0}{30}- TicketId: {1}{30}- RelatedTicketId: {2}{30}- StaffId: {3}{30}- Name: {4}{30}- Receiver: {5}{30}- Sender: {6}{30}- ProjectId: {7}{30}- ProjectPhaseId: {8}{30}- IODate: {9}{30}- TaxPercent: {10}{30}- TotalAmount: {11}{30}- UnitId: {12}{30}- Comment: {13}{30}- Status: {14}{30}- IOType: {15}{30}- FromRepositoryId: {16}{30}- ToRepositoryId: {17}{30}- FromStaffId: {18}{30}- ToStaffId: {19}{30}- IsActive: {20}{30}- IsNeedApproved: {21}{30}- IsApproved: {22}{30}- ApproverUserId: {23}{30}- ApproverStaffId: {24}{30}- ApprovedDate: {25}{30}- CreationDate: {26}{30}- CreationUserId: {27}{30}- LastModificationDate: {28}{30}- LastModificationUserId: {29}{30}", 
				this.IOTicketId,
				this.TicketId,
				(this.RelatedTicketId == null) ? string.Empty : this.RelatedTicketId.ToString(),
				this.StaffId,
				(this.Name == null) ? string.Empty : this.Name.ToString(),
				(this.Receiver == null) ? string.Empty : this.Receiver.ToString(),
				(this.Sender == null) ? string.Empty : this.Sender.ToString(),
				(this.ProjectId == null) ? string.Empty : this.ProjectId.ToString(),
				(this.ProjectPhaseId == null) ? string.Empty : this.ProjectPhaseId.ToString(),
				(this.IODate == null) ? string.Empty : this.IODate.ToString(),
				(this.TaxPercent == null) ? string.Empty : this.TaxPercent.ToString(),
				(this.TotalAmount == null) ? string.Empty : this.TotalAmount.ToString(),
				(this.UnitId == null) ? string.Empty : this.UnitId.ToString(),
				(this.Comment == null) ? string.Empty : this.Comment.ToString(),
				(this.Status == null) ? string.Empty : this.Status.ToString(),
				(this.IOType == null) ? string.Empty : this.IOType.ToString(),
				(this.FromRepositoryId == null) ? string.Empty : this.FromRepositoryId.ToString(),
				(this.ToRepositoryId == null) ? string.Empty : this.ToRepositoryId.ToString(),
				(this.FromStaffId == null) ? string.Empty : this.FromStaffId.ToString(),
				(this.ToStaffId == null) ? string.Empty : this.ToStaffId.ToString(),
				(this.IsActive == null) ? string.Empty : this.IsActive.ToString(),
				(this.IsNeedApproved == null) ? string.Empty : this.IsNeedApproved.ToString(),
				(this.IsApproved == null) ? string.Empty : this.IsApproved.ToString(),
				(this.ApproverUserId == null) ? string.Empty : this.ApproverUserId.ToString(),
				(this.ApproverStaffId == null) ? string.Empty : this.ApproverStaffId.ToString(),
				(this.ApprovedDate == null) ? string.Empty : this.ApprovedDate.ToString(),
				(this.CreationDate == null) ? string.Empty : this.CreationDate.ToString(),
				(this.CreationUserId == null) ? string.Empty : this.CreationUserId.ToString(),
				(this.LastModificationDate == null) ? string.Empty : this.LastModificationDate.ToString(),
				(this.LastModificationUserId == null) ? string.Empty : this.LastModificationUserId.ToString(),
				Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ItemIOTicket' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal class ItemIOTicketEntityData : ICloneable
	{
		#region Variable Declarations
		
		#region Primary key(s)
			/// <summary>			
			/// IOTicketId : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "ItemIOTicket"</remarks>
			public System.Int32 IOTicketId;
				
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// TicketId : 
		/// </summary>
		public System.String		  TicketId = string.Empty;
		
		/// <summary>
		/// RelatedTicketId : 
		/// </summary>
		public System.Int32?		  RelatedTicketId = (int)0;
		
		/// <summary>
		/// StaffId : 
		/// </summary>
		public System.Int32		  StaffId = (int)0;
		
		/// <summary>
		/// Name : 
		/// </summary>
		public System.String		  Name = string.Empty;
		
		/// <summary>
		/// Receiver : Is the person who receive or transfer item
		/// </summary>
		public System.String		  Receiver = string.Empty;
		
		/// <summary>
		/// Sender : 
		/// </summary>
		public System.String		  Sender = string.Empty;
		
		/// <summary>
		/// ProjectId : 
		/// </summary>
		public System.Int32?		  ProjectId = (int)0;
		
		/// <summary>
		/// ProjectPhaseId : 
		/// </summary>
		public System.Int32?		  ProjectPhaseId = (int)0;
		
		/// <summary>
		/// IODate : 
		/// </summary>
		public System.DateTime?		  IODate = DateTime.MinValue;
		
		/// <summary>
		/// TaxPercent : 
		/// </summary>
		public System.Double?		  TaxPercent = 0.0f;
		
		/// <summary>
		/// TotalAmount : 
		/// </summary>
		public System.Decimal?		  TotalAmount = 0.0m;
		
		/// <summary>
		/// UnitId : 
		/// </summary>
		public System.Int32?		  UnitId = (int)0;
		
		/// <summary>
		/// Comment : 
		/// </summary>
		public System.String		  Comment = string.Empty;
		
		/// <summary>
		/// Status : 
		/// </summary>
		public System.Int32?		  Status = (int)0;
		
		/// <summary>
		/// IOType : 
		/// </summary>
		public System.Int32?		  IOType = (int)0;
		
		/// <summary>
		/// FromRepositoryId : 
		/// </summary>
		public System.Int32?		  FromRepositoryId = (int)0;
		
		/// <summary>
		/// ToRepositoryId : 
		/// </summary>
		public System.Int32?		  ToRepositoryId = (int)0;
		
		/// <summary>
		/// FromStaffId : 
		/// </summary>
		public System.Int32?		  FromStaffId = (int)0;
		
		/// <summary>
		/// ToStaffId : 
		/// </summary>
		public System.Int32?		  ToStaffId = (int)0;
		
		/// <summary>
		/// IsActive : 
		/// </summary>
		public System.Boolean?		  IsActive = false;
		
		/// <summary>
		/// IsNeedApproved : 
		/// </summary>
		public System.Boolean?		  IsNeedApproved = false;
		
		/// <summary>
		/// IsApproved : 
		/// </summary>
		public System.Boolean?		  IsApproved = false;
		
		/// <summary>
		/// ApproverUserId : 
		/// </summary>
		public System.Int32?		  ApproverUserId = (int)0;
		
		/// <summary>
		/// ApproverStaffId : 
		/// </summary>
		public System.Int32?		  ApproverStaffId = (int)0;
		
		/// <summary>
		/// ApprovedDate : 
		/// </summary>
		public System.DateTime?		  ApprovedDate = DateTime.MinValue;
		
		/// <summary>
		/// CreationDate : 
		/// </summary>
		public System.DateTime?		  CreationDate = DateTime.MinValue;
		
		/// <summary>
		/// CreationUserId : 
		/// </summary>
		public System.Int32?		  CreationUserId = (int)0;
		
		/// <summary>
		/// LastModificationDate : 
		/// </summary>
		public System.DateTime?		  LastModificationDate = DateTime.MinValue;
		
		/// <summary>
		/// LastModificationUserId : 
		/// </summary>
		public System.Int32?		  LastModificationUserId = (int)0;
		#endregion
			
		#endregion Variable Declarations
		
		#region Clone
		public Object Clone()
		{
			ItemIOTicketEntityData _tmp = new ItemIOTicketEntityData();
						
			_tmp.IOTicketId = this.IOTicketId;
			
			_tmp.TicketId = this.TicketId;
			_tmp.RelatedTicketId = this.RelatedTicketId;
			_tmp.StaffId = this.StaffId;
			_tmp.Name = this.Name;
			_tmp.Receiver = this.Receiver;
			_tmp.Sender = this.Sender;
			_tmp.ProjectId = this.ProjectId;
			_tmp.ProjectPhaseId = this.ProjectPhaseId;
			_tmp.IODate = this.IODate;
			_tmp.TaxPercent = this.TaxPercent;
			_tmp.TotalAmount = this.TotalAmount;
			_tmp.UnitId = this.UnitId;
			_tmp.Comment = this.Comment;
			_tmp.Status = this.Status;
			_tmp.IOType = this.IOType;
			_tmp.FromRepositoryId = this.FromRepositoryId;
			_tmp.ToRepositoryId = this.ToRepositoryId;
			_tmp.FromStaffId = this.FromStaffId;
			_tmp.ToStaffId = this.ToStaffId;
			_tmp.IsActive = this.IsActive;
			_tmp.IsNeedApproved = this.IsNeedApproved;
			_tmp.IsApproved = this.IsApproved;
			_tmp.ApproverUserId = this.ApproverUserId;
			_tmp.ApproverStaffId = this.ApproverStaffId;
			_tmp.ApprovedDate = this.ApprovedDate;
			_tmp.CreationDate = this.CreationDate;
			_tmp.CreationUserId = this.CreationUserId;
			_tmp.LastModificationDate = this.LastModificationDate;
			_tmp.LastModificationUserId = this.LastModificationUserId;
			
			return _tmp;
		}
		#endregion 
		
		#region Data Properties

		#endregion Data Properties

	}//End struct


		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"TicketId");
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("TicketId",100));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Name",4000));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Receiver",200));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Sender",300));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Comment",4000));
		}
   		#endregion
	
	} // End Class
	
	#region ItemIOTicketComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ItemIOTicketComparer : System.Collections.Generic.IComparer<ItemIOTicket>
	{
		ItemIOTicketColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ItemIOTicketComparer"/> class.
        /// </summary>
		public ItemIOTicketComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ItemIOTicketComparer(ItemIOTicketColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="ItemIOTicket"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="ItemIOTicket"/> to compare.</param>
        /// <param name="b">The second <c>ItemIOTicket</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(ItemIOTicket a, ItemIOTicket b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(ItemIOTicket entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(ItemIOTicket a, ItemIOTicket b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ItemIOTicketColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ItemIOTicketKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="ItemIOTicket"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ItemIOTicketKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ItemIOTicketKey class.
		/// </summary>
		public ItemIOTicketKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ItemIOTicketKey class.
		/// </summary>
		public ItemIOTicketKey(ItemIOTicketBase entity)
		{
			Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.iOTicketId = entity.IOTicketId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ItemIOTicketKey class.
		/// </summary>
		public ItemIOTicketKey(System.Int32 iOTicketId)
		{
			#region Init Properties

			this.iOTicketId = iOTicketId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ItemIOTicketBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ItemIOTicketBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the IOTicketId property
		private System.Int32 iOTicketId;
		
		/// <summary>
		/// Gets or sets the IOTicketId property.
		/// </summary>
		public System.Int32 IOTicketId
		{
			get { return iOTicketId; }
			set
			{
				if ( Entity != null )
				{
					Entity.IOTicketId = value;
				}
				
				iOTicketId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				IOTicketId = ( values["IOTicketId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["IOTicketId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("IOTicketId", IOTicketId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("IOTicketId: {0}{1}",
								IOTicketId,
								Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ItemIOTicketColumn Enum
	
	/// <summary>
	/// Enumerate the ItemIOTicket columns.
	/// </summary>
	[Serializable]
	public enum ItemIOTicketColumn : int
	{
		/// <summary>
		/// IOTicketId : 
		/// </summary>
		[EnumTextValue("IOTicketId")]
		[ColumnEnum("IOTicketId", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		IOTicketId = 1,
		/// <summary>
		/// TicketId : 
		/// </summary>
		[EnumTextValue("TicketId")]
		[ColumnEnum("TicketId", typeof(System.String), System.Data.DbType.String, false, false, false, 100)]
		TicketId = 2,
		/// <summary>
		/// RelatedTicketId : 
		/// </summary>
		[EnumTextValue("RelatedTicketId")]
		[ColumnEnum("RelatedTicketId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		RelatedTicketId = 3,
		/// <summary>
		/// StaffId : 
		/// </summary>
		[EnumTextValue("StaffId")]
		[ColumnEnum("StaffId", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		StaffId = 4,
		/// <summary>
		/// Name : 
		/// </summary>
		[EnumTextValue("Name")]
		[ColumnEnum("Name", typeof(System.String), System.Data.DbType.String, false, false, true, 4000)]
		Name = 5,
		/// <summary>
		/// Receiver : Is the person who receive or transfer item
		/// </summary>
		[EnumTextValue("Receiver")]
		[ColumnEnum("Receiver", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		Receiver = 6,
		/// <summary>
		/// Sender : 
		/// </summary>
		[EnumTextValue("Sender")]
		[ColumnEnum("Sender", typeof(System.String), System.Data.DbType.String, false, false, true, 300)]
		Sender = 7,
		/// <summary>
		/// ProjectId : 
		/// </summary>
		[EnumTextValue("ProjectId")]
		[ColumnEnum("ProjectId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ProjectId = 8,
		/// <summary>
		/// ProjectPhaseId : 
		/// </summary>
		[EnumTextValue("ProjectPhaseId")]
		[ColumnEnum("ProjectPhaseId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ProjectPhaseId = 9,
		/// <summary>
		/// IODate : 
		/// </summary>
		[EnumTextValue("IODate")]
		[ColumnEnum("IODate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		IODate = 10,
		/// <summary>
		/// TaxPercent : 
		/// </summary>
		[EnumTextValue("TaxPercent")]
		[ColumnEnum("TaxPercent", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		TaxPercent = 11,
		/// <summary>
		/// TotalAmount : 
		/// </summary>
		[EnumTextValue("TotalAmount")]
		[ColumnEnum("TotalAmount", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TotalAmount = 12,
		/// <summary>
		/// UnitId : 
		/// </summary>
		[EnumTextValue("UnitId")]
		[ColumnEnum("UnitId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		UnitId = 13,
		/// <summary>
		/// Comment : 
		/// </summary>
		[EnumTextValue("Comment")]
		[ColumnEnum("Comment", typeof(System.String), System.Data.DbType.String, false, false, true, 4000)]
		Comment = 14,
		/// <summary>
		/// Status : 
		/// </summary>
		[EnumTextValue("Status")]
		[ColumnEnum("Status", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Status = 15,
		/// <summary>
		/// IOType : 
		/// </summary>
		[EnumTextValue("IOType")]
		[ColumnEnum("IOType", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		IOType = 16,
		/// <summary>
		/// FromRepositoryId : 
		/// </summary>
		[EnumTextValue("FromRepositoryId")]
		[ColumnEnum("FromRepositoryId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		FromRepositoryId = 17,
		/// <summary>
		/// ToRepositoryId : 
		/// </summary>
		[EnumTextValue("ToRepositoryId")]
		[ColumnEnum("ToRepositoryId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ToRepositoryId = 18,
		/// <summary>
		/// FromStaffId : 
		/// </summary>
		[EnumTextValue("FromStaffId")]
		[ColumnEnum("FromStaffId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		FromStaffId = 19,
		/// <summary>
		/// ToStaffId : 
		/// </summary>
		[EnumTextValue("ToStaffId")]
		[ColumnEnum("ToStaffId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ToStaffId = 20,
		/// <summary>
		/// IsActive : 
		/// </summary>
		[EnumTextValue("IsActive")]
		[ColumnEnum("IsActive", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsActive = 21,
		/// <summary>
		/// IsNeedApproved : 
		/// </summary>
		[EnumTextValue("IsNeedApproved")]
		[ColumnEnum("IsNeedApproved", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsNeedApproved = 22,
		/// <summary>
		/// IsApproved : 
		/// </summary>
		[EnumTextValue("IsApproved")]
		[ColumnEnum("IsApproved", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsApproved = 23,
		/// <summary>
		/// ApproverUserId : 
		/// </summary>
		[EnumTextValue("ApproverUserId")]
		[ColumnEnum("ApproverUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ApproverUserId = 24,
		/// <summary>
		/// ApproverStaffId : 
		/// </summary>
		[EnumTextValue("ApproverStaffId")]
		[ColumnEnum("ApproverStaffId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ApproverStaffId = 25,
		/// <summary>
		/// ApprovedDate : 
		/// </summary>
		[EnumTextValue("ApprovedDate")]
		[ColumnEnum("ApprovedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ApprovedDate = 26,
		/// <summary>
		/// CreationDate : 
		/// </summary>
		[EnumTextValue("CreationDate")]
		[ColumnEnum("CreationDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CreationDate = 27,
		/// <summary>
		/// CreationUserId : 
		/// </summary>
		[EnumTextValue("CreationUserId")]
		[ColumnEnum("CreationUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CreationUserId = 28,
		/// <summary>
		/// LastModificationDate : 
		/// </summary>
		[EnumTextValue("LastModificationDate")]
		[ColumnEnum("LastModificationDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastModificationDate = 29,
		/// <summary>
		/// LastModificationUserId : 
		/// </summary>
		[EnumTextValue("LastModificationUserId")]
		[ColumnEnum("LastModificationUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		LastModificationUserId = 30
	}//End enum

	#endregion ItemIOTicketColumn Enum

} // end namespace
