<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RLM.Contruction.Data.SqlClient</name>
    </assembly>
    <members>
        <member name="T:RLM.Contruction.Data.SqlClient.SqlItemInRepositoryProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RLM.Contruction.Entities.ItemInRepository"/> entity.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.SqlClient.SqlItemInRepositoryProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RLM.Contruction.Entities.ItemInRepository"/> entity.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemInRepositoryProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlItemInRepositoryProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemInRepositoryProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlItemInRepositoryProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemInRepositoryProviderBase.Delete(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="repositoryId">. Primary Key.</param>	
            <param name="itemId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemInRepositoryProviderBase.Find(RLM.Contruction.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemInRepository objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemInRepositoryProviderBase.Find(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemInRepository objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemInRepositoryProviderBase.GetAll(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemInRepository objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemInRepositoryProviderBase.GetPaged(RLM.Contruction.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemInRepository objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemInRepositoryProviderBase.GetByItemId(RLM.Contruction.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ItemInRepositories_Items key.
            	FK_ItemInRepositories_Items Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="itemId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemInRepository objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemInRepositoryProviderBase.GetByRepositoryId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ItemInRepositories_Repositories key.
            	FK_ItemInRepositories_Repositories Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="repositoryId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemInRepository objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemInRepositoryProviderBase.GetByRepositoryIdItemId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ItemInRepositories index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="repositoryId"></param>
            <param name="itemId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.ItemInRepository"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemInRepositoryProviderBase.BulkInsert(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.TList{RLM.Contruction.Entities.ItemInRepository})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the RLM.Contruction.Entities.ItemInRepository object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemInRepositoryProviderBase.Insert(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.ItemInRepository)">
            <summary>
            	Inserts a RLM.Contruction.Entities.ItemInRepository object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">RLM.Contruction.Entities.ItemInRepository object to insert.</param>
            <remarks>
            	After inserting into the datasource, the RLM.Contruction.Entities.ItemInRepository object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemInRepositoryProviderBase.Update(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.ItemInRepository)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">RLM.Contruction.Entities.ItemInRepository object to update.</param>
            <remarks>
            	After updating the datasource, the RLM.Contruction.Entities.ItemInRepository object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlItemInRepositoryProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlItemInRepositoryProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlItemInRepositoryProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemInRepositoryProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlItemInRepositoryProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:RLM.Contruction.Data.SqlClient.SqlItemProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RLM.Contruction.Entities.Item"/> entity.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlItemProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlItemProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemProviderBase.GetByRepositoryIdFromItemInRepository(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Item objects from the datasource by RepositoryId in the
            	ItemInRepository table. Table Item is related to table Repository
            	through the (M:N) relationship defined in the ItemInRepository table.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="repositoryId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns a <c>TList</c> of Item objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemProviderBase.Delete(RLM.Contruction.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="itemId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemProviderBase.Find(RLM.Contruction.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Item objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemProviderBase.Find(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Item objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemProviderBase.GetAll(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Item objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemProviderBase.GetPaged(RLM.Contruction.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Item objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemProviderBase.GetByBaseUnitId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Items_Units key.
            	FK_Items_Units Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="baseUnitId">Base unit of product, It can not be change base in any time</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Item objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemProviderBase.GetByUsedUnitId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Items_Units1 key.
            	FK_Items_Units1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="usedUnitId">Current unit id, It can be change base on repository</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Item objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemProviderBase.GetByGroupId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Items_Groups key.
            	FK_Items_Groups Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="groupId">Item group</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Item objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemProviderBase.GetByItemId(RLM.Contruction.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Items index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="itemId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Item"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemProviderBase.BulkInsert(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Item})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the RLM.Contruction.Entities.Item object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemProviderBase.Insert(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.Item)">
            <summary>
            	Inserts a RLM.Contruction.Entities.Item object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">RLM.Contruction.Entities.Item object to insert.</param>
            <remarks>
            	After inserting into the datasource, the RLM.Contruction.Entities.Item object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemProviderBase.Update(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.Item)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">RLM.Contruction.Entities.Item object to update.</param>
            <remarks>
            	After updating the datasource, the RLM.Contruction.Entities.Item object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlItemProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlItemProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlItemProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:RLM.Contruction.Data.SqlClient.SqlPartnerProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RLM.Contruction.Entities.Partner"/> entity.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlPartnerProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlPartnerProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlPartnerProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlPartnerProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlPartnerProviderBase.Delete(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="partnerId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlPartnerProviderBase.Find(RLM.Contruction.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Partner objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlPartnerProviderBase.Find(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Partner objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlPartnerProviderBase.GetAll(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Partner objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlPartnerProviderBase.GetPaged(RLM.Contruction.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Partner objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlPartnerProviderBase.GetByPartnerId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Departments index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="partnerId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Partner"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlPartnerProviderBase.BulkInsert(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Partner})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the RLM.Contruction.Entities.Partner object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlPartnerProviderBase.Insert(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.Partner)">
            <summary>
            	Inserts a RLM.Contruction.Entities.Partner object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">RLM.Contruction.Entities.Partner object to insert.</param>
            <remarks>
            	After inserting into the datasource, the RLM.Contruction.Entities.Partner object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlPartnerProviderBase.Update(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.Partner)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">RLM.Contruction.Entities.Partner object to update.</param>
            <remarks>
            	After updating the datasource, the RLM.Contruction.Entities.Partner object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlPartnerProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlPartnerProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlPartnerProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:RLM.Contruction.Data.SqlClient.SqlUnitProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RLM.Contruction.Entities.Unit"/> entity.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUnitProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlUnitProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUnitProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlUnitProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUnitProviderBase.GetByToUnitIdFromUnitConvertor(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Unit objects from the datasource by ToUnitId in the
            	UnitConvertor table. Table Unit is related to table Unit
            	through the (M:N) relationship defined in the UnitConvertor table.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="toUnitId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns a <c>TList</c> of Unit objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUnitProviderBase.GetByFromUnitIdFromUnitConvertor(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Unit objects from the datasource by FromUnitId in the
            	UnitConvertor table. Table Unit is related to table Unit
            	through the (M:N) relationship defined in the UnitConvertor table.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="fromUnitId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns a <c>TList</c> of Unit objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUnitProviderBase.Delete(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="unitId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUnitProviderBase.Find(RLM.Contruction.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Unit objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUnitProviderBase.Find(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Unit objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUnitProviderBase.GetAll(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Unit objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUnitProviderBase.GetPaged(RLM.Contruction.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Unit objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUnitProviderBase.GetByUnitId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Units index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="unitId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Unit"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUnitProviderBase.BulkInsert(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Unit})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the RLM.Contruction.Entities.Unit object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUnitProviderBase.Insert(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.Unit)">
            <summary>
            	Inserts a RLM.Contruction.Entities.Unit object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">RLM.Contruction.Entities.Unit object to insert.</param>
            <remarks>
            	After inserting into the datasource, the RLM.Contruction.Entities.Unit object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUnitProviderBase.Update(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.Unit)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">RLM.Contruction.Entities.Unit object to update.</param>
            <remarks>
            	After updating the datasource, the RLM.Contruction.Entities.Unit object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlUnitProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlUnitProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlUnitProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:RLM.Contruction.Data.SqlClient.SqlProjectProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RLM.Contruction.Entities.Project"/> entity.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.SqlClient.SqlProjectProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RLM.Contruction.Entities.Project"/> entity.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlProjectProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlProjectProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlProjectProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlProjectProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlProjectProviderBase.Delete(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="projectId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlProjectProviderBase.Find(RLM.Contruction.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Project objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlProjectProviderBase.Find(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Project objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlProjectProviderBase.GetAll(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Project objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlProjectProviderBase.GetPaged(RLM.Contruction.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Project objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlProjectProviderBase.GetByContractId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Projects_Contracts key.
            	FK_Projects_Contracts Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="contractId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Project objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlProjectProviderBase.GetByGroupId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Projects_Groups1 key.
            	FK_Projects_Groups1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="groupId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Project objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlProjectProviderBase.GetByProjectId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Projects index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="projectId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Project"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlProjectProviderBase.BulkInsert(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Project})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the RLM.Contruction.Entities.Project object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlProjectProviderBase.Insert(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.Project)">
            <summary>
            	Inserts a RLM.Contruction.Entities.Project object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">RLM.Contruction.Entities.Project object to insert.</param>
            <remarks>
            	After inserting into the datasource, the RLM.Contruction.Entities.Project object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlProjectProviderBase.Update(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.Project)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">RLM.Contruction.Entities.Project object to update.</param>
            <remarks>
            	After updating the datasource, the RLM.Contruction.Entities.Project object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlProjectProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlProjectProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlProjectProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlProjectProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlProjectProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:RLM.Contruction.Data.SqlClient.SqlStaffProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RLM.Contruction.Entities.Staff"/> entity.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.SqlClient.SqlStaffProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RLM.Contruction.Entities.Staff"/> entity.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlStaffProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlStaffProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlStaffProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlStaffProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlStaffProviderBase.Delete(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="staffId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlStaffProviderBase.Find(RLM.Contruction.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Staff objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlStaffProviderBase.Find(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Staff objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlStaffProviderBase.GetAll(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Staff objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlStaffProviderBase.GetPaged(RLM.Contruction.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Staff objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlStaffProviderBase.GetByUserId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Staffs_Users key.
            	FK_Staffs_Users Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="userId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Staff objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlStaffProviderBase.GetByStaffId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Staffs index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="staffId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Staff"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlStaffProviderBase.BulkInsert(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Staff})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the RLM.Contruction.Entities.Staff object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlStaffProviderBase.Insert(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.Staff)">
            <summary>
            	Inserts a RLM.Contruction.Entities.Staff object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">RLM.Contruction.Entities.Staff object to insert.</param>
            <remarks>
            	After inserting into the datasource, the RLM.Contruction.Entities.Staff object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlStaffProviderBase.Update(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.Staff)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">RLM.Contruction.Entities.Staff object to update.</param>
            <remarks>
            	After updating the datasource, the RLM.Contruction.Entities.Staff object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlStaffProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlStaffProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlStaffProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlStaffProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlStaffProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:RLM.Contruction.Data.SqlClient.SqlAttachFileProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RLM.Contruction.Entities.AttachFile"/> entity.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlAttachFileProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlAttachFileProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlAttachFileProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlAttachFileProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlAttachFileProviderBase.Delete(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="attachFileId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlAttachFileProviderBase.Find(RLM.Contruction.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.AttachFile objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlAttachFileProviderBase.Find(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.AttachFile objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlAttachFileProviderBase.GetAll(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.AttachFile objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlAttachFileProviderBase.GetPaged(RLM.Contruction.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.AttachFile objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlAttachFileProviderBase.GetByAttachFileId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_AttachFiles index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="attachFileId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.AttachFile"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlAttachFileProviderBase.BulkInsert(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.TList{RLM.Contruction.Entities.AttachFile})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the RLM.Contruction.Entities.AttachFile object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlAttachFileProviderBase.Insert(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.AttachFile)">
            <summary>
            	Inserts a RLM.Contruction.Entities.AttachFile object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">RLM.Contruction.Entities.AttachFile object to insert.</param>
            <remarks>
            	After inserting into the datasource, the RLM.Contruction.Entities.AttachFile object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlAttachFileProviderBase.Update(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.AttachFile)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">RLM.Contruction.Entities.AttachFile object to update.</param>
            <remarks>
            	After updating the datasource, the RLM.Contruction.Entities.AttachFile object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlAttachFileProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlAttachFileProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlAttachFileProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:RLM.Contruction.Data.SqlClient.SqlItemInProjectProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RLM.Contruction.Entities.ItemInProject"/> entity.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.SqlClient.SqlItemInProjectProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RLM.Contruction.Entities.ItemInProject"/> entity.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemInProjectProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlItemInProjectProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemInProjectProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlItemInProjectProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemInProjectProviderBase.Delete(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="itemInProjectId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemInProjectProviderBase.Find(RLM.Contruction.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemInProject objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemInProjectProviderBase.Find(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemInProject objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemInProjectProviderBase.GetAll(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemInProject objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemInProjectProviderBase.GetPaged(RLM.Contruction.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemInProject objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemInProjectProviderBase.GetByContractId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ItemInProjects_Contracts key.
            	FK_ItemInProjects_Contracts Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="contractId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemInProject objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemInProjectProviderBase.GetByProjectId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ItemInProjects_Projects key.
            	FK_ItemInProjects_Projects Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="projectId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemInProject objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemInProjectProviderBase.GetByItemId(RLM.Contruction.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ItemInProjects_Items key.
            	FK_ItemInProjects_Items Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="itemId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemInProject objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemInProjectProviderBase.GetByItemInProjectId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ItemInProjects index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="itemInProjectId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.ItemInProject"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemInProjectProviderBase.BulkInsert(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.TList{RLM.Contruction.Entities.ItemInProject})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the RLM.Contruction.Entities.ItemInProject object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemInProjectProviderBase.Insert(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.ItemInProject)">
            <summary>
            	Inserts a RLM.Contruction.Entities.ItemInProject object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">RLM.Contruction.Entities.ItemInProject object to insert.</param>
            <remarks>
            	After inserting into the datasource, the RLM.Contruction.Entities.ItemInProject object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemInProjectProviderBase.Update(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.ItemInProject)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">RLM.Contruction.Entities.ItemInProject object to update.</param>
            <remarks>
            	After updating the datasource, the RLM.Contruction.Entities.ItemInProject object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlItemInProjectProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlItemInProjectProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlItemInProjectProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemInProjectProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlItemInProjectProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:RLM.Contruction.Data.SqlClient.SqlUserProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RLM.Contruction.Entities.User"/> entity.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUserProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlUserProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUserProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlUserProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUserProviderBase.Delete(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="userId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUserProviderBase.Find(RLM.Contruction.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.User objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUserProviderBase.Find(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.User objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUserProviderBase.GetAll(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.User objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUserProviderBase.GetPaged(RLM.Contruction.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.User objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUserProviderBase.GetByUserGroupId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Users_UserGroups key.
            	FK_Users_UserGroups Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="userGroupId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.User objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUserProviderBase.GetByUserId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Users index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="userId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.User"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUserProviderBase.BulkInsert(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.TList{RLM.Contruction.Entities.User})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the RLM.Contruction.Entities.User object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUserProviderBase.Insert(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.User)">
            <summary>
            	Inserts a RLM.Contruction.Entities.User object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">RLM.Contruction.Entities.User object to insert.</param>
            <remarks>
            	After inserting into the datasource, the RLM.Contruction.Entities.User object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUserProviderBase.Update(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.User)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">RLM.Contruction.Entities.User object to update.</param>
            <remarks>
            	After updating the datasource, the RLM.Contruction.Entities.User object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlUserProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlUserProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlUserProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:RLM.Contruction.Data.SqlClient.SqlContractProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RLM.Contruction.Entities.Contract"/> entity.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.SqlClient.SqlContractProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RLM.Contruction.Entities.Contract"/> entity.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlContractProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlContractProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlContractProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlContractProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlContractProviderBase.Delete(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="contractId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlContractProviderBase.Find(RLM.Contruction.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Contract objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlContractProviderBase.Find(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Contract objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlContractProviderBase.GetAll(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Contract objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlContractProviderBase.GetPaged(RLM.Contruction.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Contract objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlContractProviderBase.GetByConstructDeptId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Contracts_Departments key.
            	FK_Contracts_Departments Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="constructDeptId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Contract objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlContractProviderBase.GetByDesignDeptId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Contracts_Departments1 key.
            	FK_Contracts_Departments1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="designDeptId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Contract objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlContractProviderBase.GetByGroupId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Contracts_Groups key.
            	FK_Contracts_Groups Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="groupId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Contract objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlContractProviderBase.GetByCreationUserId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Contracts_Users key.
            	FK_Contracts_Users Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="creationUserId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Contract objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlContractProviderBase.GetByLastModificationUserId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Contracts_Users1 key.
            	FK_Contracts_Users1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="lastModificationUserId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Contract objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlContractProviderBase.GetByContractId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Contracts index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="contractId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Contract"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlContractProviderBase.BulkInsert(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Contract})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the RLM.Contruction.Entities.Contract object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlContractProviderBase.Insert(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.Contract)">
            <summary>
            	Inserts a RLM.Contruction.Entities.Contract object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">RLM.Contruction.Entities.Contract object to insert.</param>
            <remarks>
            	After inserting into the datasource, the RLM.Contruction.Entities.Contract object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlContractProviderBase.Update(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.Contract)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">RLM.Contruction.Entities.Contract object to update.</param>
            <remarks>
            	After updating the datasource, the RLM.Contruction.Entities.Contract object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlContractProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlContractProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlContractProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlContractProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlContractProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:RLM.Contruction.Data.SqlClient.SqlRoleProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RLM.Contruction.Entities.Role"/> entity.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.SqlClient.SqlRoleProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RLM.Contruction.Entities.Role"/> entity.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlRoleProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlRoleProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlRoleProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlRoleProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlRoleProviderBase.Delete(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="roleId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlRoleProviderBase.Find(RLM.Contruction.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Role objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlRoleProviderBase.Find(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Role objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlRoleProviderBase.GetAll(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Role objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlRoleProviderBase.GetPaged(RLM.Contruction.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Role objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlRoleProviderBase.GetByRoleId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Roles index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="roleId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Role"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlRoleProviderBase.BulkInsert(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Role})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the RLM.Contruction.Entities.Role object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlRoleProviderBase.Insert(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.Role)">
            <summary>
            	Inserts a RLM.Contruction.Entities.Role object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">RLM.Contruction.Entities.Role object to insert.</param>
            <remarks>
            	After inserting into the datasource, the RLM.Contruction.Entities.Role object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlRoleProviderBase.Update(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.Role)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">RLM.Contruction.Entities.Role object to update.</param>
            <remarks>
            	After updating the datasource, the RLM.Contruction.Entities.Role object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlRoleProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlRoleProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlRoleProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlRoleProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlRoleProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:RLM.Contruction.Data.SqlClient.SqlDepartmentProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RLM.Contruction.Entities.Department"/> entity.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.SqlClient.SqlDepartmentProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RLM.Contruction.Entities.Department"/> entity.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlDepartmentProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlDepartmentProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlDepartmentProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlDepartmentProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlDepartmentProviderBase.Delete(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="deptId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlDepartmentProviderBase.Find(RLM.Contruction.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Department objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlDepartmentProviderBase.Find(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Department objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlDepartmentProviderBase.GetAll(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Department objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlDepartmentProviderBase.GetPaged(RLM.Contruction.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Department objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlDepartmentProviderBase.GetByDeptId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Departments_1 index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="deptId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Department"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlDepartmentProviderBase.BulkInsert(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Department})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the RLM.Contruction.Entities.Department object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlDepartmentProviderBase.Insert(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.Department)">
            <summary>
            	Inserts a RLM.Contruction.Entities.Department object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">RLM.Contruction.Entities.Department object to insert.</param>
            <remarks>
            	After inserting into the datasource, the RLM.Contruction.Entities.Department object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlDepartmentProviderBase.Update(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.Department)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">RLM.Contruction.Entities.Department object to update.</param>
            <remarks>
            	After updating the datasource, the RLM.Contruction.Entities.Department object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlDepartmentProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlDepartmentProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlDepartmentProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlDepartmentProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlDepartmentProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:RLM.Contruction.Data.SqlClient.SqlUserProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RLM.Contruction.Entities.User"/> entity.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUserProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlUserProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:RLM.Contruction.Data.SqlClient.StoredProcedureProvider">
            <summary>
            Summary description for Procedures.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.StoredProcedureProvider.#ctor">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.StoredProcedureProvider"/> instance.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.StoredProcedureProvider.Serialize(System.String)">
            <summary>
            Serializes the specified filename.
            </summary>
            <param name="filename">Filename.</param>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.StoredProcedureProvider.Deserialize">
            <summary>
            Deserializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.StoredProcedureProvider.GetProcedureBodyFromEmbeddedResource(System.String)">
            <summary>
            Get the query text from the embedded xml file.
            </summary>
            <param name="name">The name of the query.</param>
            <returns>the text of the query</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Boolean)">
            <summary>
            Get the command wrapper, either from the stored procedures or from the embedded queries.
            </summary>
            <param name="database">The database instance.</param>
            <param name="commandName">the name of the sp.</param>
            <param name="useStoredProcedure">Indicates if we want stored procedure.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Type,RLM.Contruction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the command wrapper for a dynamically generated query and
            optionally includes server-side paging.
            </summary>
            <param name="database"></param>
            <param name="commandName"></param>
            <param name="columnEnum"></param>
            <param name="parameters"></param>
            <param name="orderBy"></param>
            <param name="start"></param>
            <param name="pageLength"></param>
            <returns></returns>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.StoredProcedureProvider.Current">
            <summary>
            Gets the current <see cref="T:RLM.Contruction.Data.SqlClient.StoredProcedureProvider"/> singleton instance.
            </summary>
            <value><see cref="T:RLM.Contruction.Data.SqlClient.StoredProcedureProvider"/></value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.StoredProcedureProvider.Procedures">
            <summary>
            Gets or sets the procedures.
            </summary>
            <value>An <see cref="T:System.Collections.ArrayList"/> of <see cref="T:RLM.Contruction.Data.SqlClient.Procedure"/> objects.</value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.StoredProcedureProvider.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:RLM.Contruction.Data.SqlClient.Procedure"/> instance with the specified name.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.StoredProcedureProvider.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:RLM.Contruction.Data.SqlClient.Procedure"/> instance at the specified index.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.SqlClient.Procedure">
            <summary>
            Represents a sql query.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.Procedure.#ctor">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.Procedure"/> instance.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.Procedure.Parameter(System.String)">
            <summary>
            Get the parameter from the specified name of the param.
            </summary>
            <param name="paramName">Name of the param.</param>
            <returns></returns>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.Procedure.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value></value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.Procedure.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value></value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.Procedure.Owner">
            <summary>
            Gets or sets the owner.
            </summary>
            <value></value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.Procedure.Comment">
            <summary>
            Gets or sets the comment.
            </summary>
            <value></value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.Procedure.Body">
            <summary>
            Gets or sets the body.
            </summary>
            <value></value>
        </member>
        <member name="T:RLM.Contruction.Data.SqlClient.Parameter">
            <summary>
            Respresents a query parameter.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.Parameter.#ctor">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.Parameter"/> instance.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.Parameter.Name">
            <summary>
            Gets or sets the Name.
            </summary>
            <value></value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.Parameter.SqlType">
            <summary>
            Gets or sets the SqlType.
            </summary>
            <value></value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.Parameter.Direction">
            <summary>
            Gets or sets the Direction.
            </summary>
            <value></value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.Parameter.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value></value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.Parameter.Precision">
            <summary>
            Gets or sets the precision.
            </summary>
            <value></value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.Parameter.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value></value>
        </member>
        <member name="T:RLM.Contruction.Data.SqlClient.SqlContactorProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RLM.Contruction.Entities.Contactor"/> entity.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlContactorProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlContactorProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlContactorProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlContactorProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlContactorProviderBase.Delete(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="contractId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlContactorProviderBase.Find(RLM.Contruction.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Contactor objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlContactorProviderBase.Find(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Contactor objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlContactorProviderBase.GetAll(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Contactor objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlContactorProviderBase.GetPaged(RLM.Contruction.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Contactor objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlContactorProviderBase.GetByContractId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Contactors index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="contractId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Contactor"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlContactorProviderBase.BulkInsert(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Contactor})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the RLM.Contruction.Entities.Contactor object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlContactorProviderBase.Insert(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.Contactor)">
            <summary>
            	Inserts a RLM.Contruction.Entities.Contactor object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">RLM.Contruction.Entities.Contactor object to insert.</param>
            <remarks>
            	After inserting into the datasource, the RLM.Contruction.Entities.Contactor object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlContactorProviderBase.Update(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.Contactor)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">RLM.Contruction.Entities.Contactor object to update.</param>
            <remarks>
            	After updating the datasource, the RLM.Contruction.Entities.Contactor object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlContactorProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlContactorProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlContactorProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:RLM.Contruction.Data.SqlClient.SqlGroupProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RLM.Contruction.Entities.Group"/> entity.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlGroupProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlGroupProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlGroupProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlGroupProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlGroupProviderBase.Delete(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="groupId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlGroupProviderBase.Find(RLM.Contruction.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Group objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlGroupProviderBase.Find(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Group objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlGroupProviderBase.GetAll(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Group objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlGroupProviderBase.GetPaged(RLM.Contruction.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Group objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlGroupProviderBase.GetByGroupId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Groups index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="groupId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Group"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlGroupProviderBase.BulkInsert(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Group})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the RLM.Contruction.Entities.Group object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlGroupProviderBase.Insert(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.Group)">
            <summary>
            	Inserts a RLM.Contruction.Entities.Group object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">RLM.Contruction.Entities.Group object to insert.</param>
            <remarks>
            	After inserting into the datasource, the RLM.Contruction.Entities.Group object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlGroupProviderBase.Update(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.Group)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">RLM.Contruction.Entities.Group object to update.</param>
            <remarks>
            	After updating the datasource, the RLM.Contruction.Entities.Group object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlGroupProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlGroupProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlGroupProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:RLM.Contruction.Data.SqlClient.SqlUnitConvertorProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RLM.Contruction.Entities.UnitConvertor"/> entity.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUnitConvertorProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlUnitConvertorProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUnitConvertorProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlUnitConvertorProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUnitConvertorProviderBase.Delete(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="fromUnitId">. Primary Key.</param>	
            <param name="toUnitId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUnitConvertorProviderBase.Find(RLM.Contruction.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.UnitConvertor objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUnitConvertorProviderBase.Find(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.UnitConvertor objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUnitConvertorProviderBase.GetAll(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.UnitConvertor objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUnitConvertorProviderBase.GetPaged(RLM.Contruction.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.UnitConvertor objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUnitConvertorProviderBase.GetByFromUnitId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_UnitConvertors_Units key.
            	FK_UnitConvertors_Units Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="fromUnitId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.UnitConvertor objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUnitConvertorProviderBase.GetByToUnitId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_UnitConvertors_Units1 key.
            	FK_UnitConvertors_Units1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="toUnitId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.UnitConvertor objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUnitConvertorProviderBase.GetByFromUnitIdToUnitId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_UnitConvertors index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="fromUnitId"></param>
            <param name="toUnitId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.UnitConvertor"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUnitConvertorProviderBase.BulkInsert(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.TList{RLM.Contruction.Entities.UnitConvertor})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the RLM.Contruction.Entities.UnitConvertor object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUnitConvertorProviderBase.Insert(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.UnitConvertor)">
            <summary>
            	Inserts a RLM.Contruction.Entities.UnitConvertor object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">RLM.Contruction.Entities.UnitConvertor object to insert.</param>
            <remarks>
            	After inserting into the datasource, the RLM.Contruction.Entities.UnitConvertor object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUnitConvertorProviderBase.Update(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.UnitConvertor)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">RLM.Contruction.Entities.UnitConvertor object to update.</param>
            <remarks>
            	After updating the datasource, the RLM.Contruction.Entities.UnitConvertor object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlUnitConvertorProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlUnitConvertorProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlUnitConvertorProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:RLM.Contruction.Data.SqlClient.SqlItemMovementProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RLM.Contruction.Entities.ItemMovement"/> entity.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.SqlClient.SqlItemMovementProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RLM.Contruction.Entities.ItemMovement"/> entity.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemMovementProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlItemMovementProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemMovementProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlItemMovementProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemMovementProviderBase.Delete(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="repositoryMovementId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemMovementProviderBase.Find(RLM.Contruction.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemMovement objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemMovementProviderBase.Find(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemMovement objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemMovementProviderBase.GetAll(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemMovement objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemMovementProviderBase.GetPaged(RLM.Contruction.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemMovement objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemMovementProviderBase.GetByItemId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int64},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ItemMovements_Items key.
            	FK_ItemMovements_Items Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="itemId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemMovement objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemMovementProviderBase.GetByFromRepositoryId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ItemMovements_Repositories key.
            	FK_ItemMovements_Repositories Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="fromRepositoryId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemMovement objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemMovementProviderBase.GetByToRepositoryId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ItemMovements_Repositories1 key.
            	FK_ItemMovements_Repositories1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="toRepositoryId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemMovement objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemMovementProviderBase.GetByRepositoryMovementId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ItemMovements index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="repositoryMovementId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.ItemMovement"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemMovementProviderBase.BulkInsert(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.TList{RLM.Contruction.Entities.ItemMovement})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the RLM.Contruction.Entities.ItemMovement object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemMovementProviderBase.Insert(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.ItemMovement)">
            <summary>
            	Inserts a RLM.Contruction.Entities.ItemMovement object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">RLM.Contruction.Entities.ItemMovement object to insert.</param>
            <remarks>
            	After inserting into the datasource, the RLM.Contruction.Entities.ItemMovement object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemMovementProviderBase.Update(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.ItemMovement)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">RLM.Contruction.Entities.ItemMovement object to update.</param>
            <remarks>
            	After updating the datasource, the RLM.Contruction.Entities.ItemMovement object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlItemMovementProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlItemMovementProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlItemMovementProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemMovementProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlItemMovementProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:RLM.Contruction.Data.SqlClient.SqlRepositoryProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RLM.Contruction.Entities.Repository"/> entity.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlRepositoryProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlRepositoryProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlRepositoryProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlRepositoryProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlRepositoryProviderBase.GetByItemIdFromItemInRepository(RLM.Contruction.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Repository objects from the datasource by ItemId in the
            	ItemInRepository table. Table Repository is related to table Item
            	through the (M:N) relationship defined in the ItemInRepository table.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="itemId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns a <c>TList</c> of Repository objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlRepositoryProviderBase.Delete(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="repositoryId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlRepositoryProviderBase.Find(RLM.Contruction.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Repository objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlRepositoryProviderBase.Find(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Repository objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlRepositoryProviderBase.GetAll(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Repository objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlRepositoryProviderBase.GetPaged(RLM.Contruction.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Repository objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlRepositoryProviderBase.GetByRepositoryId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_RepositoryGroups index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="repositoryId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Repository"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlRepositoryProviderBase.BulkInsert(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Repository})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the RLM.Contruction.Entities.Repository object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlRepositoryProviderBase.Insert(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.Repository)">
            <summary>
            	Inserts a RLM.Contruction.Entities.Repository object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">RLM.Contruction.Entities.Repository object to insert.</param>
            <remarks>
            	After inserting into the datasource, the RLM.Contruction.Entities.Repository object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlRepositoryProviderBase.Update(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.Repository)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">RLM.Contruction.Entities.Repository object to update.</param>
            <remarks>
            	After updating the datasource, the RLM.Contruction.Entities.Repository object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlRepositoryProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlRepositoryProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlRepositoryProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider">
            <summary>
            This class is the Sql implementation of the NetTiersProvider.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider"/> class.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></see> on a provider after the provider has already been initialized.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.CreateTransaction">
            <summary>
            Creates a new <c cref="T:RLM.Contruction.Data.TransactionManager"/> instance from the current datasource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(RLM.Contruction.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(RLM.Contruction.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(RLM.Contruction.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(RLM.Contruction.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(RLM.Contruction.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(RLM.Contruction.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(RLM.Contruction.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(RLM.Contruction.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(RLM.Contruction.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(RLM.Contruction.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(RLM.Contruction.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(RLM.Contruction.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.UseStoredProcedure">
            <summary>
            Gets a value indicating whether to use stored procedure or not.
            </summary>
            <value>
            	<c>true</c> if this repository use stored procedures; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.IsTransactionSupported">
            <summary>
             Indicates if the current <c cref="T:RLM.Contruction.Data.Bases.NetTiersProvider"/> implementation supports Transacton.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.UserProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:RLM.Contruction.Entities.User"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.SqlUserProvider">
            <summary>
            Gets the current <c cref="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.SqlUserProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.DepartmentProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:RLM.Contruction.Entities.Department"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.SqlDepartmentProvider">
            <summary>
            Gets the current <c cref="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.SqlDepartmentProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.AttachFileProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:RLM.Contruction.Entities.AttachFile"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.SqlAttachFileProvider">
            <summary>
            Gets the current <c cref="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.SqlAttachFileProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.UnitConvertorProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:RLM.Contruction.Entities.UnitConvertor"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.SqlUnitConvertorProvider">
            <summary>
            Gets the current <c cref="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.SqlUnitConvertorProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.StaffProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:RLM.Contruction.Entities.Staff"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.SqlStaffProvider">
            <summary>
            Gets the current <c cref="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.SqlStaffProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.ProjectProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:RLM.Contruction.Entities.Project"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.SqlProjectProvider">
            <summary>
            Gets the current <c cref="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.SqlProjectProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.RoleOfStaffProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:RLM.Contruction.Entities.RoleOfStaff"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.SqlRoleOfStaffProvider">
            <summary>
            Gets the current <c cref="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.SqlRoleOfStaffProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.RoleProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:RLM.Contruction.Entities.Role"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.SqlRoleProvider">
            <summary>
            Gets the current <c cref="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.SqlRoleProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.UnitProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:RLM.Contruction.Entities.Unit"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.SqlUnitProvider">
            <summary>
            Gets the current <c cref="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.SqlUnitProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.PartnerProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:RLM.Contruction.Entities.Partner"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.SqlPartnerProvider">
            <summary>
            Gets the current <c cref="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.SqlPartnerProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.GroupProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:RLM.Contruction.Entities.Group"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.SqlGroupProvider">
            <summary>
            Gets the current <c cref="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.SqlGroupProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.ItemProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:RLM.Contruction.Entities.Item"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.SqlItemProvider">
            <summary>
            Gets the current <c cref="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.SqlItemProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.UserGroupProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:RLM.Contruction.Entities.UserGroup"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.SqlUserGroupProvider">
            <summary>
            Gets the current <c cref="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.SqlUserGroupProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.RepositoryProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:RLM.Contruction.Entities.Repository"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.SqlRepositoryProvider">
            <summary>
            Gets the current <c cref="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.SqlRepositoryProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.ItemMovementProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:RLM.Contruction.Entities.ItemMovement"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.SqlItemMovementProvider">
            <summary>
            Gets the current <c cref="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.SqlItemMovementProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.ContactorProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:RLM.Contruction.Entities.Contactor"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.SqlContactorProvider">
            <summary>
            Gets the current <c cref="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.SqlContactorProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.ItemInRepositoryProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:RLM.Contruction.Entities.ItemInRepository"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.SqlItemInRepositoryProvider">
            <summary>
            Gets the current <c cref="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.SqlItemInRepositoryProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.ContractProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:RLM.Contruction.Entities.Contract"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.SqlContractProvider">
            <summary>
            Gets the current <c cref="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.SqlContractProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.ItemInProjectProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:RLM.Contruction.Entities.ItemInProject"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.SqlItemInProjectProvider">
            <summary>
            Gets the current <c cref="P:RLM.Contruction.Data.SqlClient.SqlNetTiersProvider.SqlItemInProjectProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="T:RLM.Contruction.Data.SqlClient.SqlUnitConvertorProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RLM.Contruction.Entities.UnitConvertor"/> entity.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUnitConvertorProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlUnitConvertorProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:RLM.Contruction.Data.SqlClient.SqlUserGroupProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RLM.Contruction.Entities.UserGroup"/> entity.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUserGroupProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlUserGroupProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUserGroupProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlUserGroupProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUserGroupProviderBase.Delete(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="userGroupId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUserGroupProviderBase.Find(RLM.Contruction.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.UserGroup objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUserGroupProviderBase.Find(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.UserGroup objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUserGroupProviderBase.GetAll(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.UserGroup objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUserGroupProviderBase.GetPaged(RLM.Contruction.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.UserGroup objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUserGroupProviderBase.GetByUserGroupId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_UserGroups index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="userGroupId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.UserGroup"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUserGroupProviderBase.BulkInsert(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.TList{RLM.Contruction.Entities.UserGroup})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the RLM.Contruction.Entities.UserGroup object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUserGroupProviderBase.Insert(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.UserGroup)">
            <summary>
            	Inserts a RLM.Contruction.Entities.UserGroup object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">RLM.Contruction.Entities.UserGroup object to insert.</param>
            <remarks>
            	After inserting into the datasource, the RLM.Contruction.Entities.UserGroup object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUserGroupProviderBase.Update(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.UserGroup)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">RLM.Contruction.Entities.UserGroup object to update.</param>
            <remarks>
            	After updating the datasource, the RLM.Contruction.Entities.UserGroup object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlUserGroupProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlUserGroupProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlUserGroupProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:RLM.Contruction.Data.SqlClient.SqlUserGroupProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RLM.Contruction.Entities.UserGroup"/> entity.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUserGroupProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlUserGroupProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:RLM.Contruction.Data.SqlClient.SqlRoleOfStaffProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RLM.Contruction.Entities.RoleOfStaff"/> entity.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.SqlClient.SqlRoleOfStaffProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RLM.Contruction.Entities.RoleOfStaff"/> entity.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlRoleOfStaffProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlRoleOfStaffProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlRoleOfStaffProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlRoleOfStaffProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlRoleOfStaffProviderBase.Delete(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="roleOfStaffId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlRoleOfStaffProviderBase.Find(RLM.Contruction.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.RoleOfStaff objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlRoleOfStaffProviderBase.Find(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.RoleOfStaff objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlRoleOfStaffProviderBase.GetAll(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.RoleOfStaff objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlRoleOfStaffProviderBase.GetPaged(RLM.Contruction.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.RoleOfStaff objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlRoleOfStaffProviderBase.GetByRoleId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_RoleOfStaffs_Roles key.
            	FK_RoleOfStaffs_Roles Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="roleId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.RoleOfStaff objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlRoleOfStaffProviderBase.GetByStaffId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_RoleOfStaffs_Staffs key.
            	FK_RoleOfStaffs_Staffs Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="staffId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.RoleOfStaff objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlRoleOfStaffProviderBase.GetByRoleOfStaffId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_RoleOfStaffs index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="roleOfStaffId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.RoleOfStaff"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlRoleOfStaffProviderBase.BulkInsert(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.TList{RLM.Contruction.Entities.RoleOfStaff})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the RLM.Contruction.Entities.RoleOfStaff object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlRoleOfStaffProviderBase.Insert(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.RoleOfStaff)">
            <summary>
            	Inserts a RLM.Contruction.Entities.RoleOfStaff object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">RLM.Contruction.Entities.RoleOfStaff object to insert.</param>
            <remarks>
            	After inserting into the datasource, the RLM.Contruction.Entities.RoleOfStaff object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlRoleOfStaffProviderBase.Update(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.RoleOfStaff)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">RLM.Contruction.Entities.RoleOfStaff object to update.</param>
            <remarks>
            	After updating the datasource, the RLM.Contruction.Entities.RoleOfStaff object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlRoleOfStaffProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlRoleOfStaffProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RLM.Contruction.Data.SqlClient.SqlRoleOfStaffProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlRoleOfStaffProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlRoleOfStaffProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:RLM.Contruction.Data.SqlClient.SqlAttachFileProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RLM.Contruction.Entities.AttachFile"/> entity.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlAttachFileProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlAttachFileProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:RLM.Contruction.Data.SqlClient.SqlGroupProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RLM.Contruction.Entities.Group"/> entity.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlGroupProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlGroupProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:RLM.Contruction.Data.SqlClient.SqlPartnerProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RLM.Contruction.Entities.Partner"/> entity.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlPartnerProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlPartnerProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:RLM.Contruction.Data.SqlClient.SqlContactorProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RLM.Contruction.Entities.Contactor"/> entity.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlContactorProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlContactorProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:RLM.Contruction.Data.SqlClient.SqlUnitProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RLM.Contruction.Entities.Unit"/> entity.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlUnitProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlUnitProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:RLM.Contruction.Data.SqlClient.SqlRepositoryProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RLM.Contruction.Entities.Repository"/> entity.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlRepositoryProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlRepositoryProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:RLM.Contruction.Data.SqlClient.SqlItemProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RLM.Contruction.Entities.Item"/> entity.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlClient.SqlItemProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RLM.Contruction.Data.SqlClient.SqlItemProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
    </members>
</doc>
