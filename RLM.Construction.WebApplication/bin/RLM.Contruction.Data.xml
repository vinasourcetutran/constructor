<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RLM.Contruction.Data</name>
    </assembly>
    <members>
        <member name="T:RLM.Contruction.Data.Bases.ContractProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:RLM.Contruction.Data.Bases.ContractProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.EntityProviderBase`2">
            <summary>
            Serves as the base class for objects that provide data access functionality.
            Provides a default implementation of the IEntityProvider&lt;Entity, EntityKey&gt; interface.
            </summary>
            <typeparam name="Entity">The class of the business object being accessed.</typeparam>
            <typeparam name="EntityKey">The class of the EntityId
            property of the specified business object class.</typeparam>
            <remarks>
            This file is generated once and will never be overwritten.
            </remarks>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2">
            <summary>
            Serves as the base class for objects that provide data access functionality.
            Provides a default implementation of the IEntityProvider&lt;Entity, EntityKey&gt; interface.
            </summary>
            <typeparam name="Entity">The class of the business object being accessed.</typeparam>
            <typeparam name="EntityKey">The class of the EntityId
            property of the specified business object class.</typeparam>
        </member>
        <member name="T:RLM.Contruction.Data.IEntityProvider`2">
            <summary>
            Defines the common data access methods that can be used by the
            ProviderDataSource control to interact with the underlying data store.
            </summary>
            <typeparam name="Entity">The class of the business object being accessed.</typeparam>
            <typeparam name="EntityKey">The class of the EntityId
            property of the specified business object class.</typeparam>
        </member>
        <member name="M:RLM.Contruction.Data.IEntityProvider`2.Get(`1)">
            <summary>
            Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.IEntityProvider`2.GetAll">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.IEntityProvider`2.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.IEntityProvider`2.Insert(`0)">
            <summary>
            Inserts a row into the DataSource.
            </summary>
            <param name="entity">The Entity object to insert.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.IEntityProvider`2.Update(`0)">
            <summary>
            Updates an existing row in the DataSource.
            </summary>
            <param name="entity">The Entity object to update.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.IEntityProvider`2.Delete(`0)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="entity">The Entity object to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.Get(`1)">
            <summary>
            Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.Get(RLM.Contruction.Data.TransactionManager,`1)">
            <summary>
            Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="mgr">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.Get(`1,System.Int32,System.Int32)">
            <summary>
            Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.Get(RLM.Contruction.Data.TransactionManager,`1,System.Int32,System.Int32)">
            <summary>
            Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="mgr">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.GetAll">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.GetAll(RLM.Contruction.Data.TransactionManager)">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.GetAll(System.Int32,System.Int32)">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.GetAll(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.GetAll(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.GetPaged(System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.GetPaged(RLM.Contruction.Data.TransactionManager,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.GetPaged(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.GetPaged(RLM.Contruction.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.GetTotalItems(RLM.Contruction.Data.TransactionManager,System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            </summary>
            <param name="mgr">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.Find(System.String)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.Find(RLM.Contruction.Data.TransactionManager,System.String)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.Find(System.String,System.Int32,System.Int32)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.Find(RLM.Contruction.Data.TransactionManager,System.String,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.Find(RLM.Contruction.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.Find(RLM.Contruction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.Find(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.Find(RLM.Contruction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.Find(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.Find(RLM.Contruction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.Find(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.Insert(`0)">
            <summary>
            Inserts a row into the DataSource.
            </summary>
            <param name="entity">The Entity object to insert.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.Insert(RLM.Contruction.Data.TransactionManager,`0)">
            <summary>
            Inserts a row into the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to insert.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.Insert(RLM.Contruction.Entities.TList{`0})">
            <summary>
            Inserts rows into the DataSource.
            </summary>
            <param name="entities">TList of Entity objects to insert.</param>
            <returns>Returns the number of rows successfully inserted.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.Insert(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.TList{`0})">
            <summary>
            Inserts rows into the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to insert.</param>
            <returns>Returns the number of rows successfully inserted.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.BulkInsert(RLM.Contruction.Entities.TList{`0})">
            <summary>
            Efficiently inserts multiple rows into the DataSource.
            </summary>
            <param name="entities">TList of Entity objects to insert.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.BulkInsert(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.TList{`0})">
            <summary>
            Efficiently inserts multiple rows into the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to insert.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.Update(`0)">
            <summary>
            Updates an existing row in the DataSource.
            </summary>
            <param name="entity">The Entity object to update.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.Update(RLM.Contruction.Data.TransactionManager,`0)">
            <summary>
            Updates an existing row in the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to update.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.Update(RLM.Contruction.Entities.TList{`0})">
            <summary>
            Updates existing rows in the DataSource.
            </summary>
            <param name="entities">TList of Entity objects to update.</param>
            <returns>Returns the number of rows successfully updated.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.Update(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.TList{`0})">
            <summary>
            Updates existing rows in the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to update.</param>
            <returns>Returns the number of rows successfully updated.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.Save(`0)">
            <summary>
            Saves row changes in the DataSource (insert, update ,delete).
            </summary>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.Save(RLM.Contruction.Data.TransactionManager,`0)">
            <summary>
            Saves row changes in the DataSource (insert, update ,delete).
            </summary>
            <param name="mgr">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.Save(RLM.Contruction.Entities.TList{`0})">
            <summary>
            Saves row changes in the DataSource (insert, update ,delete).
            </summary>
            <param name="entities">TList of Entity objects to save.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.Save(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.TList{`0})">
            <summary>
            Saves row changes in the DataSource (insert, update ,delete).
            </summary>
            <param name="mgr">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to save.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.Delete(`0)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="entity">The Entity object to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.Delete(RLM.Contruction.Data.TransactionManager,`0)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.Delete(`1)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.Delete(RLM.Contruction.Data.TransactionManager,`1)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.Delete(RLM.Contruction.Entities.TList{`0})">
            <summary>
            Deletes rows from the DataSource.
            </summary>
            <param name="entities">TList of Entity objects to delete.</param>
            <returns>Returns the number of rows successfully deleted.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.Delete(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.TList{`0})">
            <summary>
            Deletes rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to delete.</param>
            <returns>Returns the number of rows successfully deleted.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.DeepLoad(`0)">
            <summary>
            Deep Load the Entity object with all of the child property collections only 1 level deep.
            </summary>
            <param name="entity">The Entity object to load.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.DeepLoad(RLM.Contruction.Data.TransactionManager,`0)">
            <summary>
            Deep Load the Entity object with all of the child property collections only 1 level deep.
            </summary>
            <param name="mgr">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to load.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.DeepLoad(`0,System.Boolean)">
            <summary>
            Deep Load the Entity object with all of the child property collections N levels deep.
            </summary>
            <param name="entity">The Entity object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.DeepLoad(RLM.Contruction.Data.TransactionManager,`0,System.Boolean)">
            <summary>
            Deep Load the Entity object with all of the child property collections N levels deep.
            </summary>
            <param name="mgr">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.DeepLoad(`0,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Load the entire Entity object with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entity">The Entity object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.DeepLoad(RLM.Contruction.Data.TransactionManager,`0,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Load the entire Entity object with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="mgr">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.DeepLoad(RLM.Contruction.Data.TransactionManager,`0,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[],RLM.Contruction.Data.Bases.ChildEntityTypesList)">
            <summary>
            Deep Load the entire Entity object with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            This method should be implemented by sub-classes to provide specific deep load functionality.
            </remarks>
            <param name="mgr">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
            <param name="innerList">A collection of child types for easy access.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.DeepLoad(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.TList{`0},System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[],RLM.Contruction.Data.Bases.ChildEntityTypesList)">
            <summary>
            Deep Load the entire Entity object with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            This method should be implemented by sub-classes to provide specific deep load functionality.
            </remarks>
            <param name="mgr">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="entities">The Entity List object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
            <param name="innerList">A collection of child types for easy access.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.DeepLoad(RLM.Contruction.Entities.TList{`0})">
            <summary>
            Deep Load the Entity objects with all of the child property collections only 1 level deep.
            </summary>
            <param name="entities">TList of Entity objects to load.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.DeepLoad(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.TList{`0})">
            <summary>
            Deep Load the Entity objects with all of the child property collections only 1 level deep.
            </summary>
            <param name="mgr">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to load.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.DeepLoad(RLM.Contruction.Entities.TList{`0},System.Boolean)">
            <summary>
            Deep Load the Entity objects with all of the child property collections N levels deep.
            </summary>
            <param name="entities">TList of Entity objects to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.DeepLoad(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.TList{`0},System.Boolean)">
            <summary>
            Deep Load the Entity objects with all of the child property collections N levels deep.
            </summary>
            <param name="mgr">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.DeepLoad(RLM.Contruction.Entities.TList{`0},System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Load the Entity objects with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entities">TList of Entity objects to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.DeepLoad(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.TList{`0},System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Load the Entity objects with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="mgr">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.DeepSave(`0)">
            <summary>
            Deep Save the Entity object with all of the child property collections only 1 level deep.
            </summary>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.DeepSave(RLM.Contruction.Data.TransactionManager,`0)">
            <summary>
            Deep Save the Entity object with all of the child property collections only 1 level deep.
            </summary>
            <param name="mgr">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.DeepSave(`0,RLM.Contruction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.DeepSave(RLM.Contruction.Data.TransactionManager,`0,RLM.Contruction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="mgr">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.DeepSave(RLM.Contruction.Data.TransactionManager,`0,RLM.Contruction.Data.DeepSaveType,System.Type[],RLM.Contruction.Data.Bases.ChildEntityTypesList)">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <remarks>
            This method should be implemented by sub-classes to provide specific deep save functionality.
            </remarks>
            <param name="mgr">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
            <param name="innerList">A <c>ChildEntityTypesList</c> of child types for easy access.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.DeepSave(RLM.Contruction.Entities.TList{`0})">
            <summary>
            Deep Save the Entity objects with all of the child property collections only 1 level deep.
            </summary>
            <param name="entities">TList of Entity objects to save.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.DeepSave(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.TList{`0})">
            <summary>
            Deep Save the Entity objects with all of the child property collections only 1 level deep.
            </summary>
            <param name="mgr">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to save.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.DeepSave(RLM.Contruction.Entities.TList{`0},RLM.Contruction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the Entity objects with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="entities">TList of Entity objects to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.DeepSave(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.TList{`0},RLM.Contruction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the Entity objects with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="mgr">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.DeepSave(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.TList{`0},RLM.Contruction.Data.DeepSaveType,System.Type[],RLM.Contruction.Data.Bases.ChildEntityTypesList)">
            <summary>
            Deep Save the Entity objects with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="mgr">The transaction manager.</param>
            <param name="entities">TList of Entity objects to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.CanDeepLoad(RLM.Contruction.Entities.IEntity,System.String,System.String,RLM.Contruction.Data.DeepLoadType,RLM.Contruction.Data.Bases.ChildEntityTypesList)">
            <summary>
             Enforces the rules set in order to load this property for a given type.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.CanDeepSave(RLM.Contruction.Entities.IEntity,System.String,System.String,RLM.Contruction.Data.DeepSaveType,RLM.Contruction.Data.Bases.ChildEntityTypesList)">
            <summary>
             Enforces the rules set in order to save this property for a given type.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.DeepSession.Add(System.Object)">
            <summary>
            Adds the specified obj.
            </summary>
            <param name="obj">The obj.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.DeepSession.HasRun(System.Object)">
            <summary>
            Determines whether the specified obj has run.
            </summary>
            <param name="obj">The obj.</param>
            <returns>
            	<c>true</c> if the specified obj has run; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:RLM.Contruction.Data.Bases.EntityProviderBaseCore`2.DeepSession.InnerList">
            <summary>
            Gets the inner list.
            </summary>
            <value>The inner list.</value>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContractProviderBaseCore.Delete(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.ContractKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContractProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="contractId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContractProviderBaseCore.Delete(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="contractId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContractProviderBaseCore.GetByConstructDeptId(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_Contracts_Departments key.
            	FK_Contracts_Departments Description: 
            </summary>
            <param name="constructDeptId"></param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Contract objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContractProviderBaseCore.GetByConstructDeptId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_Contracts_Departments key.
            	FK_Contracts_Departments Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="constructDeptId"></param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Contract objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContractProviderBaseCore.GetByConstructDeptId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Contracts_Departments key.
            	FK_Contracts_Departments Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="constructDeptId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Contract objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContractProviderBaseCore.GetByConstructDeptId(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Contracts_Departments key.
            	fKContractsDepartments Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="constructDeptId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Contract objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContractProviderBaseCore.GetByConstructDeptId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Contracts_Departments key.
            	fKContractsDepartments Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="constructDeptId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Contract objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContractProviderBaseCore.GetByConstructDeptId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Contracts_Departments key.
            	FK_Contracts_Departments Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="constructDeptId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Contract objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContractProviderBaseCore.GetByDesignDeptId(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_Contracts_Departments1 key.
            	FK_Contracts_Departments1 Description: 
            </summary>
            <param name="designDeptId"></param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Contract objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContractProviderBaseCore.GetByDesignDeptId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_Contracts_Departments1 key.
            	FK_Contracts_Departments1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="designDeptId"></param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Contract objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContractProviderBaseCore.GetByDesignDeptId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Contracts_Departments1 key.
            	FK_Contracts_Departments1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="designDeptId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Contract objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContractProviderBaseCore.GetByDesignDeptId(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Contracts_Departments1 key.
            	fKContractsDepartments1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="designDeptId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Contract objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContractProviderBaseCore.GetByDesignDeptId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Contracts_Departments1 key.
            	fKContractsDepartments1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="designDeptId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Contract objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContractProviderBaseCore.GetByDesignDeptId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Contracts_Departments1 key.
            	FK_Contracts_Departments1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="designDeptId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Contract objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContractProviderBaseCore.GetByGroupId(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_Contracts_Groups key.
            	FK_Contracts_Groups Description: 
            </summary>
            <param name="groupId"></param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Contract objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContractProviderBaseCore.GetByGroupId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_Contracts_Groups key.
            	FK_Contracts_Groups Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="groupId"></param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Contract objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContractProviderBaseCore.GetByGroupId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Contracts_Groups key.
            	FK_Contracts_Groups Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="groupId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Contract objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContractProviderBaseCore.GetByGroupId(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Contracts_Groups key.
            	fKContractsGroups Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="groupId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Contract objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContractProviderBaseCore.GetByGroupId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Contracts_Groups key.
            	fKContractsGroups Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="groupId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Contract objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContractProviderBaseCore.GetByGroupId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Contracts_Groups key.
            	FK_Contracts_Groups Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="groupId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Contract objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContractProviderBaseCore.GetByCreationUserId(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_Contracts_Users key.
            	FK_Contracts_Users Description: 
            </summary>
            <param name="creationUserId"></param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Contract objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContractProviderBaseCore.GetByCreationUserId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_Contracts_Users key.
            	FK_Contracts_Users Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="creationUserId"></param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Contract objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContractProviderBaseCore.GetByCreationUserId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Contracts_Users key.
            	FK_Contracts_Users Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="creationUserId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Contract objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContractProviderBaseCore.GetByCreationUserId(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Contracts_Users key.
            	fKContractsUsers Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="creationUserId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Contract objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContractProviderBaseCore.GetByCreationUserId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Contracts_Users key.
            	fKContractsUsers Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="creationUserId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Contract objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContractProviderBaseCore.GetByCreationUserId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Contracts_Users key.
            	FK_Contracts_Users Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="creationUserId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Contract objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContractProviderBaseCore.GetByLastModificationUserId(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_Contracts_Users1 key.
            	FK_Contracts_Users1 Description: 
            </summary>
            <param name="lastModificationUserId"></param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Contract objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContractProviderBaseCore.GetByLastModificationUserId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_Contracts_Users1 key.
            	FK_Contracts_Users1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="lastModificationUserId"></param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Contract objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContractProviderBaseCore.GetByLastModificationUserId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Contracts_Users1 key.
            	FK_Contracts_Users1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="lastModificationUserId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Contract objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContractProviderBaseCore.GetByLastModificationUserId(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Contracts_Users1 key.
            	fKContractsUsers1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="lastModificationUserId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Contract objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContractProviderBaseCore.GetByLastModificationUserId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Contracts_Users1 key.
            	fKContractsUsers1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="lastModificationUserId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Contract objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContractProviderBaseCore.GetByLastModificationUserId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Contracts_Users1 key.
            	FK_Contracts_Users1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="lastModificationUserId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Contract objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContractProviderBaseCore.Get(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.ContractKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContractProviderBaseCore.GetByContractId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_Contracts index.
            </summary>
            <param name="contractId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Contract"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContractProviderBaseCore.GetByContractId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Contracts index.
            </summary>
            <param name="contractId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Contract"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContractProviderBaseCore.GetByContractId(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Contracts index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="contractId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Contract"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContractProviderBaseCore.GetByContractId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Contracts index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="contractId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Contract"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContractProviderBaseCore.GetByContractId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Contracts index.
            </summary>
            <param name="contractId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Contract"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContractProviderBaseCore.GetByContractId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Contracts index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="contractId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Contract"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContractProviderBaseCore.Fill(System.Data.IDataReader,RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Contract},System.Int32,System.Int32)">
            <summary>
            Fill a RLM.Contruction.Entities.TList&lt;Contract&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:RLM.Contruction.Entities.TList`1"/></returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContractProviderBaseCore.RefreshEntity(System.Data.IDataReader,RLM.Contruction.Entities.Contract)">
            <summary>
            Refreshes the <see cref="T:RLM.Contruction.Entities.Contract"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.Contract"/> object to refresh.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContractProviderBaseCore.RefreshEntity(System.Data.DataSet,RLM.Contruction.Entities.Contract)">
            <summary>
            Refreshes the <see cref="T:RLM.Contruction.Entities.Contract"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.Contract"/> object.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContractProviderBaseCore.DeepLoad(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.Contract,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[],RLM.Contruction.Data.Bases.ChildEntityTypesList)">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.Contract"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">RLM.Contruction.Entities.Contract Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContractProviderBaseCore.DeepSave(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.Contract,RLM.Contruction.Data.DeepSaveType,System.Type[],RLM.Contruction.Data.Bases.ChildEntityTypesList)">
            <summary>
            Deep Save the entire object graph of the RLM.Contruction.Entities.Contract object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">RLM.Contruction.Entities.Contract instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">RLM.Contruction.Entities.Contract Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.ContractChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>RLM.Contruction.Entities.Contract</c>
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.Bases.ContractChildEntityTypes.Department">
            <summary>
             Composite Property for <c>Department</c> at ConstructDeptIdSource
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.Bases.ContractChildEntityTypes.Group">
            <summary>
             Composite Property for <c>Group</c> at GroupIdSource
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.Bases.ContractChildEntityTypes.User">
            <summary>
             Composite Property for <c>User</c> at CreationUserIdSource
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.Bases.ContractChildEntityTypes.ItemInProjectCollection">
            <summary>
             Collection of <c>Contract</c> as OneToMany for ItemInProjectCollection
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.Bases.ContractChildEntityTypes.ProjectCollection">
            <summary>
             Collection of <c>Contract</c> as OneToMany for ProjectCollection
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.ContractFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:RLM.Contruction.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:RLM.Contruction.Entities.Contract"/> object.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.SqlFilterBuilder`1">
            <summary>
            Allows for building SQL filter expressions using strongly-typed
            column enumeration values.
            </summary>
            <typeparam name="EntityColumn">An enumeration of entity column names.</typeparam>
        </member>
        <member name="T:RLM.Contruction.Data.SqlStringBuilder">
            <summary>
            Represents a SQL filter expression.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlStringBuilder.#ctor">
            <summary>
            Initializes a new instance of the SqlStringBuilder class.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlStringBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SqlStringBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:RLM.Contruction.Data.SqlStringBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SqlStringBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:RLM.Contruction.Data.SqlStringBuilder.Append(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="searchText"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlStringBuilder.Append(System.String,System.String,System.Boolean)">
            <summary>
            Appends the specified column and search text to the current filter.
            </summary>
            <param name="column"></param>
            <param name="searchText"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlStringBuilder.Append(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Appends the specified column and search text to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="searchText"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlStringBuilder.AppendEquals(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlStringBuilder.AppendEquals(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlStringBuilder.AppendNotEquals(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            as a NOT EQUALS expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlStringBuilder.AppendNotEquals(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter
            as a NOT EQUALS expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlStringBuilder.AppendIn(System.String,System.String)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlStringBuilder.AppendIn(System.String,System.String,System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlStringBuilder.AppendIn(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlStringBuilder.AppendIn(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlStringBuilder.AppendNotIn(System.String,System.String)">
            <summary>
            Appends the specified column and list of values to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlStringBuilder.AppendNotIn(System.String,System.String,System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlStringBuilder.AppendNotIn(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and list of values to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlStringBuilder.AppendNotIn(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlStringBuilder.AppendInQuery(System.String,System.String)">
            <summary>
            Appends the specified sub-query to the current filter.
            </summary>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlStringBuilder.AppendInQuery(System.String,System.String,System.String)">
            <summary>
            Appends the specified sub-query to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlStringBuilder.AppendNotInQuery(System.String,System.String)">
            <summary>
            Appends the specified sub-query to the current filter
            as a NOT IN expression.
            </summary>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlStringBuilder.AppendNotInQuery(System.String,System.String,System.String)">
            <summary>
            Appends the specified sub-query to the current filter
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlStringBuilder.AppendRange(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value range to the current filter.
            </summary>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlStringBuilder.AppendRange(System.String,System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value range to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlStringBuilder.AppendIsNull(System.String)">
            <summary>
            Appends an IS NULL expression to the current filter.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlStringBuilder.AppendIsNull(System.String,System.String)">
            <summary>
            Appends an IS NULL expression to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlStringBuilder.AppendIsNotNull(System.String)">
            <summary>
            Appends an IS NOT NULL expression to the current filter.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlStringBuilder.AppendIsNotNull(System.String,System.String)">
            <summary>
            Appends an IS NOT NULL expression to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlStringBuilder.AppendGreaterThan(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlStringBuilder.AppendGreaterThan(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlStringBuilder.AppendGreaterThanOrEqual(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlStringBuilder.AppendGreaterThanOrEqual(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlStringBuilder.AppendLessThan(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlStringBuilder.AppendLessThan(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlStringBuilder.AppendLessThanOrEqual(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlStringBuilder.AppendLessThanOrEqual(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlStringBuilder.AppendInternal(System.String,System.String,System.String,System.String)">
            <summary>
            Appends the SQL expression to the internal <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="junction">The junction.</param>
            <param name="column">The column.</param>
            <param name="compare">The compare.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:RLM.Contruction.Data.SqlStringBuilder.AppendInternal(System.String,System.String)">
            <summary>
            Appends the SQL expression to the internal <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="junction">The junction.</param>
            <param name="query">The query.</param>
        </member>
        <member name="M:RLM.Contruction.Data.SqlStringBuilder.Clear">
            <summary>
            Clears the internal string buffer.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlStringBuilder.ToString">
            <summary>
            Converts the value of this instance to a System.String.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlStringBuilder.ToString(System.String)">
            <summary>
            Converts the value of this instance to a System.String and
            prepends the specified junction if the expression is not empty.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlStringBuilder.Parse(System.String,System.String,System.Boolean)">
            <summary>
            Parses the specified searchText to create a SQL filter expression.
            </summary>
            <param name="column"></param>
            <param name="searchText"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlStringBuilder.GetInQueryValues(System.String,System.Boolean)">
            <summary>
            Gets an encoded list of values for use with an IN clause.
            </summary>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="F:RLM.Contruction.Data.SqlStringBuilder.junction">
            <summary>
            The Junction member variable.
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.SqlStringBuilder.ignoreCase">
            <summary>
            The IgnoreCase member variable.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.SqlStringBuilder.Junction">
            <summary>
            Gets or sets the Junction property.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.SqlStringBuilder.IgnoreCase">
            <summary>
            Gets or sets the IgnoreCase property.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlFilterBuilder`1.#ctor">
            <summary>
            Initializes a new instance of the SqlFilterBuilder class.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlFilterBuilder`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SqlFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:RLM.Contruction.Data.SqlFilterBuilder`1.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SqlFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:RLM.Contruction.Data.SqlFilterBuilder`1.Append(`0,System.String)">
            <summary>
            Appends the specified column and search text to the current filter.
            </summary>
            <param name="column"></param>
            <param name="searchText"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlFilterBuilder`1.Append(`0,System.String,System.Boolean)">
            <summary>
            Appends the specified column and search text to the current filter.
            </summary>
            <param name="column"></param>
            <param name="searchText"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlFilterBuilder`1.Append(System.String,`0,System.String,System.Boolean)">
            <summary>
            Appends the specified column and search text to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="searchText"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlFilterBuilder`1.AppendEquals(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlFilterBuilder`1.AppendEquals(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlFilterBuilder`1.AppendNotEquals(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter
            as a NOT EQUALS expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlFilterBuilder`1.AppendNotEquals(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            as a NOT EQUALS expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlFilterBuilder`1.AppendIn(`0,System.String)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlFilterBuilder`1.AppendIn(`0,System.String,System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlFilterBuilder`1.AppendIn(System.String,`0,System.String)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlFilterBuilder`1.AppendIn(System.String,`0,System.String,System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlFilterBuilder`1.AppendNotIn(`0,System.String)">
            <summary>
            Appends the specified column and list of values to the current filter
            as a NOT IN expression.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlFilterBuilder`1.AppendNotIn(`0,System.String,System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlFilterBuilder`1.AppendNotIn(System.String,`0,System.String)">
            <summary>
            Appends the specified column and list of values to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlFilterBuilder`1.AppendNotIn(System.String,`0,System.String,System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlFilterBuilder`1.AppendInQuery(`0,System.String)">
            <summary>
            Appends the specified sub-query to the current filter.
            </summary>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlFilterBuilder`1.AppendInQuery(System.String,`0,System.String)">
            <summary>
            Appends the specified sub-query to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlFilterBuilder`1.AppendNotInQuery(`0,System.String)">
            <summary>
            Appends the specified sub-query to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlFilterBuilder`1.AppendNotInQuery(System.String,`0,System.String)">
            <summary>
            Appends the specified sub-query to the current filter
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlFilterBuilder`1.AppendIsNull(`0)">
            <summary>
            Appends an IS NULL expression to the current filter.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlFilterBuilder`1.AppendIsNull(System.String,`0)">
            <summary>
            Appends an IS NULL expression to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlFilterBuilder`1.AppendIsNotNull(`0)">
            <summary>
            Appends an IS NOT NULL expression to the current filter.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlFilterBuilder`1.AppendIsNotNull(System.String,`0)">
            <summary>
            Appends an IS NOT NULL expression to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlFilterBuilder`1.AppendRange(`0,System.String,System.String)">
            <summary>
            Appends the specified column and value range to the current filter.
            </summary>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlFilterBuilder`1.AppendRange(System.String,`0,System.String,System.String)">
            <summary>
            Appends the specified column and value range to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlFilterBuilder`1.AppendGreaterThan(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlFilterBuilder`1.AppendGreaterThan(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlFilterBuilder`1.AppendGreaterThanOrEqual(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlFilterBuilder`1.AppendGreaterThanOrEqual(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlFilterBuilder`1.AppendLessThan(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlFilterBuilder`1.AppendLessThan(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlFilterBuilder`1.AppendLessThanOrEqual(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlFilterBuilder`1.AppendLessThanOrEqual(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlFilterBuilder`1.GetColumnName(`0)">
            <summary>
            Gets the column name from the specified column enumeration value.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContractFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ContractFilterBuilder class.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContractFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ContractFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContractFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ContractFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.ContractParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:RLM.Contruction.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:RLM.Contruction.Entities.Contract"/> object.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.ParameterizedSqlFilterBuilder`1">
            <summary>
            Allows for building parameterized SQL filter expressions using strongly-typed
            column enumeration values.
            </summary>
            <typeparam name="EntityColumn">An enumeration of entity column names.</typeparam>
        </member>
        <member name="M:RLM.Contruction.Data.ParameterizedSqlFilterBuilder`1.#ctor">
            <summary>
            Initializes a new instance of the ParameterizedSqlFilterBuilder&lt;EntityColumn&gt; class.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.ParameterizedSqlFilterBuilder`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ParameterizedSqlFilterBuilder&lt;EntityColumn&gt; class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:RLM.Contruction.Data.ParameterizedSqlFilterBuilder`1.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ParameterizedSqlFilterBuilder&lt;EntityColumn&gt; class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:RLM.Contruction.Data.ParameterizedSqlFilterBuilder`1.Append(System.String,`0,System.String,System.Boolean)">
            <summary>
            Appends the specified column and search text to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="searchText"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.ParameterizedSqlFilterBuilder`1.AppendEquals(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.ParameterizedSqlFilterBuilder`1.AppendEquals(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.ParameterizedSqlFilterBuilder`1.AppendNotEquals(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            as a NOT EQUALS expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.ParameterizedSqlFilterBuilder`1.AppendNotEquals(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter
            as a NOT EQUALS expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.ParameterizedSqlFilterBuilder`1.AppendIn(System.String,`0,System.String,System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.ParameterizedSqlFilterBuilder`1.AppendIn(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.ParameterizedSqlFilterBuilder`1.AppendNotIn(System.String,`0,System.String,System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.ParameterizedSqlFilterBuilder`1.AppendNotIn(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.ParameterizedSqlFilterBuilder`1.AppendInQuery(System.String,`0,System.String)">
            <summary>
            Appends the specified sub-query to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.ParameterizedSqlFilterBuilder`1.AppendNotInQuery(System.String,`0,System.String)">
            <summary>
            Appends the specified sub-query to the current filter
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.ParameterizedSqlFilterBuilder`1.AppendRange(System.String,`0,System.String,System.String)">
            <summary>
            Appends the specified column and value range to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.ParameterizedSqlFilterBuilder`1.AppendRange(System.String,System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value range to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.ParameterizedSqlFilterBuilder`1.AppendGreaterThan(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.ParameterizedSqlFilterBuilder`1.AppendGreaterThan(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.ParameterizedSqlFilterBuilder`1.AppendGreaterThanOrEqual(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.ParameterizedSqlFilterBuilder`1.AppendGreaterThanOrEqual(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.ParameterizedSqlFilterBuilder`1.AppendLessThan(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.ParameterizedSqlFilterBuilder`1.AppendLessThan(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.ParameterizedSqlFilterBuilder`1.AppendLessThanOrEqual(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.ParameterizedSqlFilterBuilder`1.AppendLessThanOrEqual(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.ParameterizedSqlFilterBuilder`1.Parse(System.String,System.String,System.Boolean)">
            <summary>
            Parses the specified searchText to create a SQL filter expression.
            </summary>
            <param name="column"></param>
            <param name="searchText"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.ParameterizedSqlFilterBuilder`1.GetInQueryValues(System.String,System.Boolean)">
            <summary>
            Gets an encoded list of values for use with an IN clause.
            </summary>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.ParameterizedSqlFilterBuilder`1.GetParameters">
            <summary>
            Gets the current collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects and
            also sets the collection's FilterExpression property.
            </summary>
            <returns></returns>
        </member>
        <member name="F:RLM.Contruction.Data.ParameterizedSqlFilterBuilder`1.parameters">
            <summary>
            The Parameters member variable.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.ParameterizedSqlFilterBuilder`1.Parameters">
            <summary>
            Gets or sets the Parameters property.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContractParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ContractParameterBuilder class.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContractParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ContractParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContractParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ContractParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.ContractProviderBase">
            <summary>
             This class is the base class for any <see cref="T:RLM.Contruction.Data.Bases.ContractProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.DataRepository">
            <summary>
            This class represents the Data source repository and gives access to all the underlying providers.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.DataRepository.LoadProvider(RLM.Contruction.Data.Bases.NetTiersProvider)">
            <summary>
            Enables the DataRepository to programatically create and 
            pass in a <c>NetTiersProvider</c> during runtime.
            </summary>
            <param name="provider">An instatiated NetTiersProvider.</param>
        </member>
        <member name="M:RLM.Contruction.Data.DataRepository.LoadProvider(RLM.Contruction.Data.Bases.NetTiersProvider,System.Boolean)">
            <summary>
            Enables the DataRepository to programatically create and 
            pass in a <c>NetTiersProvider</c> during runtime.
            </summary>
            <param name="provider">An instatiated NetTiersProvider.</param>
            <param name="setAsDefault">ability to set any valid provider as the default provider for the DataRepository.</param>
        </member>
        <member name="M:RLM.Contruction.Data.DataRepository.LoadProviders">
            <summary>
             Configuration based provider loading, will load the providers on first call.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.DataRepository.CreateTransaction">
            <summary>
            Creates a new <c cref="T:RLM.Contruction.Data.TransactionManager"/> instance from the current datasource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.DataRepository.AddConnection(System.String,System.String)">
            <summary>
            Adds the specified connection string to the map of connection strings.
            </summary>
            <param name="connectionStringName">The connection string name.</param>
            <param name="connectionString">The provider specific connection information.</param>
        </member>
        <member name="P:RLM.Contruction.Data.DataRepository.Provider">
            <summary>
            Gets the provider.
            </summary>
            <value>The provider.</value>
        </member>
        <member name="P:RLM.Contruction.Data.DataRepository.Providers">
            <summary>
            Gets the provider collection.
            </summary>
            <value>The providers.</value>
        </member>
        <member name="P:RLM.Contruction.Data.DataRepository.NetTiersSection">
            <summary>
            Gets a reference to the configured NetTiersServiceSection object.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.DataRepository.Configuration">
            <summary>
            Gets a reference to the application configuration object.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.DataRepository.ConnectionStrings">
            <summary>
            Gets a reference to the ConnectionStringSettings collection.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.DataRepository.Connections">
            <summary>
            Gets the dictionary of connection providers.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.DataRepository.UserProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:RLM.Contruction.Entities.User"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.DataRepository.DepartmentProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:RLM.Contruction.Entities.Department"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.DataRepository.AttachFileProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:RLM.Contruction.Entities.AttachFile"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.DataRepository.UnitConvertorProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:RLM.Contruction.Entities.UnitConvertor"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.DataRepository.StaffProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:RLM.Contruction.Entities.Staff"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.DataRepository.ProjectProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:RLM.Contruction.Entities.Project"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.DataRepository.RoleOfStaffProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:RLM.Contruction.Entities.RoleOfStaff"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.DataRepository.RoleProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:RLM.Contruction.Entities.Role"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.DataRepository.UnitProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:RLM.Contruction.Entities.Unit"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.DataRepository.PartnerProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:RLM.Contruction.Entities.Partner"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.DataRepository.GroupProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:RLM.Contruction.Entities.Group"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.DataRepository.ItemProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:RLM.Contruction.Entities.Item"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.DataRepository.UserGroupProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:RLM.Contruction.Entities.UserGroup"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.DataRepository.RepositoryProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:RLM.Contruction.Entities.Repository"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.DataRepository.ItemMovementProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:RLM.Contruction.Entities.ItemMovement"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.DataRepository.ContactorProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:RLM.Contruction.Entities.Contactor"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.DataRepository.ItemInRepositoryProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:RLM.Contruction.Entities.ItemInRepository"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.DataRepository.ContractProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:RLM.Contruction.Entities.Contract"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.DataRepository.ItemInProjectProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:RLM.Contruction.Entities.ItemInProject"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.DataRepository.ConnectionProvider">
            <summary>
            Provides ability to switch connection string at runtime.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.DataRepository.ConnectionProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ConnectionProvider class.
            </summary>
            <param name="connectionStringName">The connection string name.</param>
        </member>
        <member name="M:RLM.Contruction.Data.DataRepository.ConnectionProvider.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ConnectionProvider class.
            </summary>
            <param name="connectionStringName">The connection string name.</param>
            <param name="connectionString">The provider specific connection information.</param>
        </member>
        <member name="M:RLM.Contruction.Data.DataRepository.ConnectionProvider.LoadProviders">
            <summary>
            Instantiates the configured providers based on the supplied connection string.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.DataRepository.ConnectionProvider.Provider">
            <summary>
            Gets the provider.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.DataRepository.ConnectionProvider.Providers">
            <summary>
            Gets the provider collection.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.ItemInProjectProviderBase">
            <summary>
             This class is the base class for any <see cref="T:RLM.Contruction.Data.Bases.ItemInProjectProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.ItemInProjectProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:RLM.Contruction.Data.Bases.ItemInProjectProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInProjectProviderBaseCore.Delete(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.ItemInProjectKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInProjectProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="itemInProjectId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInProjectProviderBaseCore.Delete(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="itemInProjectId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInProjectProviderBaseCore.GetByContractId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ItemInProjects_Contracts key.
            	FK_ItemInProjects_Contracts Description: 
            </summary>
            <param name="contractId"></param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemInProject objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInProjectProviderBaseCore.GetByContractId(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ItemInProjects_Contracts key.
            	FK_ItemInProjects_Contracts Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="contractId"></param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemInProject objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInProjectProviderBaseCore.GetByContractId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ItemInProjects_Contracts key.
            	FK_ItemInProjects_Contracts Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="contractId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemInProject objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInProjectProviderBaseCore.GetByContractId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ItemInProjects_Contracts key.
            	fKItemInProjectsContracts Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="contractId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemInProject objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInProjectProviderBaseCore.GetByContractId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ItemInProjects_Contracts key.
            	fKItemInProjectsContracts Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="contractId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemInProject objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInProjectProviderBaseCore.GetByContractId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ItemInProjects_Contracts key.
            	FK_ItemInProjects_Contracts Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="contractId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemInProject objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInProjectProviderBaseCore.GetByProjectId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ItemInProjects_Projects key.
            	FK_ItemInProjects_Projects Description: 
            </summary>
            <param name="projectId"></param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemInProject objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInProjectProviderBaseCore.GetByProjectId(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ItemInProjects_Projects key.
            	FK_ItemInProjects_Projects Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="projectId"></param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemInProject objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInProjectProviderBaseCore.GetByProjectId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ItemInProjects_Projects key.
            	FK_ItemInProjects_Projects Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="projectId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemInProject objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInProjectProviderBaseCore.GetByProjectId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ItemInProjects_Projects key.
            	fKItemInProjectsProjects Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="projectId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemInProject objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInProjectProviderBaseCore.GetByProjectId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ItemInProjects_Projects key.
            	fKItemInProjectsProjects Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="projectId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemInProject objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInProjectProviderBaseCore.GetByProjectId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ItemInProjects_Projects key.
            	FK_ItemInProjects_Projects Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="projectId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemInProject objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInProjectProviderBaseCore.GetByItemId(System.Int64)">
            <summary>
            	Gets rows from the datasource based on the FK_ItemInProjects_Items key.
            	FK_ItemInProjects_Items Description: 
            </summary>
            <param name="itemId"></param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemInProject objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInProjectProviderBaseCore.GetByItemId(RLM.Contruction.Data.TransactionManager,System.Int64)">
            <summary>
            	Gets rows from the datasource based on the FK_ItemInProjects_Items key.
            	FK_ItemInProjects_Items Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="itemId"></param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemInProject objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInProjectProviderBaseCore.GetByItemId(RLM.Contruction.Data.TransactionManager,System.Int64,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ItemInProjects_Items key.
            	FK_ItemInProjects_Items Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="itemId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemInProject objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInProjectProviderBaseCore.GetByItemId(System.Int64,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ItemInProjects_Items key.
            	fKItemInProjectsItems Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="itemId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemInProject objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInProjectProviderBaseCore.GetByItemId(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ItemInProjects_Items key.
            	fKItemInProjectsItems Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="itemId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemInProject objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInProjectProviderBaseCore.GetByItemId(RLM.Contruction.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ItemInProjects_Items key.
            	FK_ItemInProjects_Items Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="itemId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemInProject objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInProjectProviderBaseCore.Get(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.ItemInProjectKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInProjectProviderBaseCore.GetByItemInProjectId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_ItemInProjects index.
            </summary>
            <param name="itemInProjectId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.ItemInProject"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInProjectProviderBaseCore.GetByItemInProjectId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ItemInProjects index.
            </summary>
            <param name="itemInProjectId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.ItemInProject"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInProjectProviderBaseCore.GetByItemInProjectId(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ItemInProjects index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="itemInProjectId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.ItemInProject"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInProjectProviderBaseCore.GetByItemInProjectId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ItemInProjects index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="itemInProjectId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.ItemInProject"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInProjectProviderBaseCore.GetByItemInProjectId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ItemInProjects index.
            </summary>
            <param name="itemInProjectId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.ItemInProject"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInProjectProviderBaseCore.GetByItemInProjectId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ItemInProjects index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="itemInProjectId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.ItemInProject"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInProjectProviderBaseCore.Fill(System.Data.IDataReader,RLM.Contruction.Entities.TList{RLM.Contruction.Entities.ItemInProject},System.Int32,System.Int32)">
            <summary>
            Fill a RLM.Contruction.Entities.TList&lt;ItemInProject&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:RLM.Contruction.Entities.TList`1"/></returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInProjectProviderBaseCore.RefreshEntity(System.Data.IDataReader,RLM.Contruction.Entities.ItemInProject)">
            <summary>
            Refreshes the <see cref="T:RLM.Contruction.Entities.ItemInProject"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.ItemInProject"/> object to refresh.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInProjectProviderBaseCore.RefreshEntity(System.Data.DataSet,RLM.Contruction.Entities.ItemInProject)">
            <summary>
            Refreshes the <see cref="T:RLM.Contruction.Entities.ItemInProject"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.ItemInProject"/> object.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInProjectProviderBaseCore.DeepLoad(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.ItemInProject,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[],RLM.Contruction.Data.Bases.ChildEntityTypesList)">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.ItemInProject"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">RLM.Contruction.Entities.ItemInProject Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInProjectProviderBaseCore.DeepSave(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.ItemInProject,RLM.Contruction.Data.DeepSaveType,System.Type[],RLM.Contruction.Data.Bases.ChildEntityTypesList)">
            <summary>
            Deep Save the entire object graph of the RLM.Contruction.Entities.ItemInProject object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">RLM.Contruction.Entities.ItemInProject instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">RLM.Contruction.Entities.ItemInProject Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.GroupProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:RLM.Contruction.Data.Bases.GroupProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.GroupProviderBaseCore.Delete(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.GroupKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.GroupProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="groupId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.GroupProviderBaseCore.Delete(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="groupId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.GroupProviderBaseCore.Get(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.GroupKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.GroupProviderBaseCore.GetByGroupId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_Groups index.
            </summary>
            <param name="groupId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Group"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.GroupProviderBaseCore.GetByGroupId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Groups index.
            </summary>
            <param name="groupId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Group"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.GroupProviderBaseCore.GetByGroupId(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Groups index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="groupId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Group"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.GroupProviderBaseCore.GetByGroupId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Groups index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="groupId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Group"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.GroupProviderBaseCore.GetByGroupId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Groups index.
            </summary>
            <param name="groupId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Group"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.GroupProviderBaseCore.GetByGroupId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Groups index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="groupId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Group"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.GroupProviderBaseCore.Fill(System.Data.IDataReader,RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Group},System.Int32,System.Int32)">
            <summary>
            Fill a RLM.Contruction.Entities.TList&lt;Group&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:RLM.Contruction.Entities.TList`1"/></returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.GroupProviderBaseCore.RefreshEntity(System.Data.IDataReader,RLM.Contruction.Entities.Group)">
            <summary>
            Refreshes the <see cref="T:RLM.Contruction.Entities.Group"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.Group"/> object to refresh.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.GroupProviderBaseCore.RefreshEntity(System.Data.DataSet,RLM.Contruction.Entities.Group)">
            <summary>
            Refreshes the <see cref="T:RLM.Contruction.Entities.Group"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.Group"/> object.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.GroupProviderBaseCore.DeepLoad(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.Group,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[],RLM.Contruction.Data.Bases.ChildEntityTypesList)">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.Group"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">RLM.Contruction.Entities.Group Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.GroupProviderBaseCore.DeepSave(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.Group,RLM.Contruction.Data.DeepSaveType,System.Type[],RLM.Contruction.Data.Bases.ChildEntityTypesList)">
            <summary>
            Deep Save the entire object graph of the RLM.Contruction.Entities.Group object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">RLM.Contruction.Entities.Group instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">RLM.Contruction.Entities.Group Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.GroupChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>RLM.Contruction.Entities.Group</c>
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.Bases.GroupChildEntityTypes.ContractCollection">
            <summary>
             Collection of <c>Group</c> as OneToMany for ContractCollection
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.Bases.GroupChildEntityTypes.ItemCollection">
            <summary>
             Collection of <c>Group</c> as OneToMany for ItemCollection
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.Bases.GroupChildEntityTypes.ProjectCollection">
            <summary>
             Collection of <c>Group</c> as OneToMany for ProjectCollection
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.GroupFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:RLM.Contruction.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:RLM.Contruction.Entities.Group"/> object.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.GroupFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the GroupFilterBuilder class.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.GroupFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the GroupFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.GroupFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the GroupFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.GroupParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:RLM.Contruction.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:RLM.Contruction.Entities.Group"/> object.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.GroupParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the GroupParameterBuilder class.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.GroupParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the GroupParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.GroupParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the GroupParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.DepartmentProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:RLM.Contruction.Data.Bases.DepartmentProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.DepartmentProviderBaseCore.Delete(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.DepartmentKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.DepartmentProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="deptId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.DepartmentProviderBaseCore.Delete(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="deptId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.DepartmentProviderBaseCore.Get(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.DepartmentKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.DepartmentProviderBaseCore.GetByDeptId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_Departments_1 index.
            </summary>
            <param name="deptId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Department"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.DepartmentProviderBaseCore.GetByDeptId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Departments_1 index.
            </summary>
            <param name="deptId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Department"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.DepartmentProviderBaseCore.GetByDeptId(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Departments_1 index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="deptId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Department"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.DepartmentProviderBaseCore.GetByDeptId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Departments_1 index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="deptId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Department"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.DepartmentProviderBaseCore.GetByDeptId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Departments_1 index.
            </summary>
            <param name="deptId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Department"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.DepartmentProviderBaseCore.GetByDeptId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Departments_1 index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="deptId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Department"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.DepartmentProviderBaseCore.Fill(System.Data.IDataReader,RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Department},System.Int32,System.Int32)">
            <summary>
            Fill a RLM.Contruction.Entities.TList&lt;Department&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:RLM.Contruction.Entities.TList`1"/></returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.DepartmentProviderBaseCore.RefreshEntity(System.Data.IDataReader,RLM.Contruction.Entities.Department)">
            <summary>
            Refreshes the <see cref="T:RLM.Contruction.Entities.Department"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.Department"/> object to refresh.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.DepartmentProviderBaseCore.RefreshEntity(System.Data.DataSet,RLM.Contruction.Entities.Department)">
            <summary>
            Refreshes the <see cref="T:RLM.Contruction.Entities.Department"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.Department"/> object.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.DepartmentProviderBaseCore.DeepLoad(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.Department,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[],RLM.Contruction.Data.Bases.ChildEntityTypesList)">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.Department"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">RLM.Contruction.Entities.Department Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.DepartmentProviderBaseCore.DeepSave(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.Department,RLM.Contruction.Data.DeepSaveType,System.Type[],RLM.Contruction.Data.Bases.ChildEntityTypesList)">
            <summary>
            Deep Save the entire object graph of the RLM.Contruction.Entities.Department object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">RLM.Contruction.Entities.Department instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">RLM.Contruction.Entities.Department Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.DepartmentChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>RLM.Contruction.Entities.Department</c>
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.Bases.DepartmentChildEntityTypes.ContractCollectionByConstructDeptId">
            <summary>
             Collection of <c>Department</c> as OneToMany for ContractCollection
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.Bases.DepartmentChildEntityTypes.ContractCollectionByDesignDeptId">
            <summary>
             Collection of <c>Department</c> as OneToMany for ContractCollection
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.DepartmentFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:RLM.Contruction.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:RLM.Contruction.Entities.Department"/> object.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.DepartmentFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DepartmentFilterBuilder class.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.DepartmentFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DepartmentFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.DepartmentFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DepartmentFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.DepartmentParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:RLM.Contruction.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:RLM.Contruction.Entities.Department"/> object.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.DepartmentParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DepartmentParameterBuilder class.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.DepartmentParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DepartmentParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.DepartmentParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DepartmentParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.StaffProviderBase">
            <summary>
             This class is the base class for any <see cref="T:RLM.Contruction.Data.Bases.StaffProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.StaffProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:RLM.Contruction.Data.Bases.StaffProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.StaffProviderBaseCore.Delete(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.StaffKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.StaffProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="staffId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.StaffProviderBaseCore.Delete(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="staffId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.StaffProviderBaseCore.GetByUserId(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_Staffs_Users key.
            	FK_Staffs_Users Description: 
            </summary>
            <param name="userId"></param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Staff objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.StaffProviderBaseCore.GetByUserId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_Staffs_Users key.
            	FK_Staffs_Users Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="userId"></param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Staff objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.StaffProviderBaseCore.GetByUserId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Staffs_Users key.
            	FK_Staffs_Users Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="userId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Staff objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.StaffProviderBaseCore.GetByUserId(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Staffs_Users key.
            	fKStaffsUsers Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="userId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Staff objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.StaffProviderBaseCore.GetByUserId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Staffs_Users key.
            	fKStaffsUsers Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="userId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Staff objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.StaffProviderBaseCore.GetByUserId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Staffs_Users key.
            	FK_Staffs_Users Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="userId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Staff objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.StaffProviderBaseCore.Get(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.StaffKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.StaffProviderBaseCore.GetByStaffId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_Staffs index.
            </summary>
            <param name="staffId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Staff"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.StaffProviderBaseCore.GetByStaffId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Staffs index.
            </summary>
            <param name="staffId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Staff"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.StaffProviderBaseCore.GetByStaffId(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Staffs index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="staffId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Staff"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.StaffProviderBaseCore.GetByStaffId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Staffs index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="staffId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Staff"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.StaffProviderBaseCore.GetByStaffId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Staffs index.
            </summary>
            <param name="staffId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Staff"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.StaffProviderBaseCore.GetByStaffId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Staffs index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="staffId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Staff"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.StaffProviderBaseCore.Fill(System.Data.IDataReader,RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Staff},System.Int32,System.Int32)">
            <summary>
            Fill a RLM.Contruction.Entities.TList&lt;Staff&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:RLM.Contruction.Entities.TList`1"/></returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.StaffProviderBaseCore.RefreshEntity(System.Data.IDataReader,RLM.Contruction.Entities.Staff)">
            <summary>
            Refreshes the <see cref="T:RLM.Contruction.Entities.Staff"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.Staff"/> object to refresh.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.StaffProviderBaseCore.RefreshEntity(System.Data.DataSet,RLM.Contruction.Entities.Staff)">
            <summary>
            Refreshes the <see cref="T:RLM.Contruction.Entities.Staff"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.Staff"/> object.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.StaffProviderBaseCore.DeepLoad(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.Staff,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[],RLM.Contruction.Data.Bases.ChildEntityTypesList)">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.Staff"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">RLM.Contruction.Entities.Staff Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.StaffProviderBaseCore.DeepSave(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.Staff,RLM.Contruction.Data.DeepSaveType,System.Type[],RLM.Contruction.Data.Bases.ChildEntityTypesList)">
            <summary>
            Deep Save the entire object graph of the RLM.Contruction.Entities.Staff object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">RLM.Contruction.Entities.Staff instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">RLM.Contruction.Entities.Staff Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.NetTiersServiceSection">
            <summary>
            The class that hold the configuration section for the NetTiers Service.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.Bases.NetTiersServiceSection.Providers">
            <summary>
            Gets the providers.
            </summary>
            <value>The providers.</value>
        </member>
        <member name="P:RLM.Contruction.Data.Bases.NetTiersServiceSection.DefaultProvider">
            <summary>
            Gets or sets the default provider.
            </summary>
            <value>The default provider.</value>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.ItemInRepositoryProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:RLM.Contruction.Data.Bases.ItemInRepositoryProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInRepositoryProviderBaseCore.Delete(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.ItemInRepositoryKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInRepositoryProviderBaseCore.Delete(System.Int32,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="repositoryId">. Primary Key.</param>
            <param name="itemId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInRepositoryProviderBaseCore.Delete(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="repositoryId">. Primary Key.</param>
            <param name="itemId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInRepositoryProviderBaseCore.GetByItemId(System.Int64)">
            <summary>
            	Gets rows from the datasource based on the FK_ItemInRepositories_Items key.
            	FK_ItemInRepositories_Items Description: 
            </summary>
            <param name="itemId"></param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemInRepository objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInRepositoryProviderBaseCore.GetByItemId(RLM.Contruction.Data.TransactionManager,System.Int64)">
            <summary>
            	Gets rows from the datasource based on the FK_ItemInRepositories_Items key.
            	FK_ItemInRepositories_Items Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="itemId"></param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemInRepository objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInRepositoryProviderBaseCore.GetByItemId(RLM.Contruction.Data.TransactionManager,System.Int64,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ItemInRepositories_Items key.
            	FK_ItemInRepositories_Items Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="itemId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemInRepository objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInRepositoryProviderBaseCore.GetByItemId(System.Int64,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ItemInRepositories_Items key.
            	fKItemInRepositoriesItems Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="itemId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemInRepository objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInRepositoryProviderBaseCore.GetByItemId(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ItemInRepositories_Items key.
            	fKItemInRepositoriesItems Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="itemId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemInRepository objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInRepositoryProviderBaseCore.GetByItemId(RLM.Contruction.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ItemInRepositories_Items key.
            	FK_ItemInRepositories_Items Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="itemId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemInRepository objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInRepositoryProviderBaseCore.GetByRepositoryId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ItemInRepositories_Repositories key.
            	FK_ItemInRepositories_Repositories Description: 
            </summary>
            <param name="repositoryId"></param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemInRepository objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInRepositoryProviderBaseCore.GetByRepositoryId(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ItemInRepositories_Repositories key.
            	FK_ItemInRepositories_Repositories Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="repositoryId"></param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemInRepository objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInRepositoryProviderBaseCore.GetByRepositoryId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ItemInRepositories_Repositories key.
            	FK_ItemInRepositories_Repositories Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="repositoryId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemInRepository objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInRepositoryProviderBaseCore.GetByRepositoryId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ItemInRepositories_Repositories key.
            	fKItemInRepositoriesRepositories Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="repositoryId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemInRepository objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInRepositoryProviderBaseCore.GetByRepositoryId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ItemInRepositories_Repositories key.
            	fKItemInRepositoriesRepositories Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="repositoryId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemInRepository objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInRepositoryProviderBaseCore.GetByRepositoryId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ItemInRepositories_Repositories key.
            	FK_ItemInRepositories_Repositories Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="repositoryId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemInRepository objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInRepositoryProviderBaseCore.Get(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.ItemInRepositoryKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInRepositoryProviderBaseCore.GetByRepositoryIdItemId(System.Int32,System.Int64)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_ItemInRepositories index.
            </summary>
            <param name="repositoryId"></param>
            <param name="itemId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.ItemInRepository"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInRepositoryProviderBaseCore.GetByRepositoryIdItemId(System.Int32,System.Int64,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ItemInRepositories index.
            </summary>
            <param name="repositoryId"></param>
            <param name="itemId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.ItemInRepository"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInRepositoryProviderBaseCore.GetByRepositoryIdItemId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int64)">
            <summary>
            	Gets rows from the datasource based on the PK_ItemInRepositories index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="repositoryId"></param>
            <param name="itemId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.ItemInRepository"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInRepositoryProviderBaseCore.GetByRepositoryIdItemId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int64,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ItemInRepositories index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="repositoryId"></param>
            <param name="itemId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.ItemInRepository"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInRepositoryProviderBaseCore.GetByRepositoryIdItemId(System.Int32,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ItemInRepositories index.
            </summary>
            <param name="repositoryId"></param>
            <param name="itemId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.ItemInRepository"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInRepositoryProviderBaseCore.GetByRepositoryIdItemId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ItemInRepositories index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="repositoryId"></param>
            <param name="itemId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.ItemInRepository"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInRepositoryProviderBaseCore.Fill(System.Data.IDataReader,RLM.Contruction.Entities.TList{RLM.Contruction.Entities.ItemInRepository},System.Int32,System.Int32)">
            <summary>
            Fill a RLM.Contruction.Entities.TList&lt;ItemInRepository&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:RLM.Contruction.Entities.TList`1"/></returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInRepositoryProviderBaseCore.RefreshEntity(System.Data.IDataReader,RLM.Contruction.Entities.ItemInRepository)">
            <summary>
            Refreshes the <see cref="T:RLM.Contruction.Entities.ItemInRepository"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.ItemInRepository"/> object to refresh.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInRepositoryProviderBaseCore.RefreshEntity(System.Data.DataSet,RLM.Contruction.Entities.ItemInRepository)">
            <summary>
            Refreshes the <see cref="T:RLM.Contruction.Entities.ItemInRepository"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.ItemInRepository"/> object.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInRepositoryProviderBaseCore.DeepLoad(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.ItemInRepository,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[],RLM.Contruction.Data.Bases.ChildEntityTypesList)">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.ItemInRepository"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">RLM.Contruction.Entities.ItemInRepository Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInRepositoryProviderBaseCore.DeepSave(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.ItemInRepository,RLM.Contruction.Data.DeepSaveType,System.Type[],RLM.Contruction.Data.Bases.ChildEntityTypesList)">
            <summary>
            Deep Save the entire object graph of the RLM.Contruction.Entities.ItemInRepository object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">RLM.Contruction.Entities.ItemInRepository instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">RLM.Contruction.Entities.ItemInRepository Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.ItemInRepositoryChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>RLM.Contruction.Entities.ItemInRepository</c>
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.Bases.ItemInRepositoryChildEntityTypes.Item">
            <summary>
             Composite Property for <c>Item</c> at ItemIdSource
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.Bases.ItemInRepositoryChildEntityTypes.Repository">
            <summary>
             Composite Property for <c>Repository</c> at RepositoryIdSource
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.ItemInRepositoryFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:RLM.Contruction.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:RLM.Contruction.Entities.ItemInRepository"/> object.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInRepositoryFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ItemInRepositoryFilterBuilder class.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInRepositoryFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ItemInRepositoryFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInRepositoryFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ItemInRepositoryFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.ItemInRepositoryParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:RLM.Contruction.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:RLM.Contruction.Entities.ItemInRepository"/> object.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInRepositoryParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ItemInRepositoryParameterBuilder class.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInRepositoryParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ItemInRepositoryParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInRepositoryParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ItemInRepositoryParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.ItemMovementProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:RLM.Contruction.Data.Bases.ItemMovementProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemMovementProviderBaseCore.Delete(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.ItemMovementKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemMovementProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="repositoryMovementId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemMovementProviderBaseCore.Delete(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="repositoryMovementId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemMovementProviderBaseCore.GetByItemId(System.Nullable{System.Int64})">
            <summary>
            	Gets rows from the datasource based on the FK_ItemMovements_Items key.
            	FK_ItemMovements_Items Description: 
            </summary>
            <param name="itemId"></param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemMovement objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemMovementProviderBaseCore.GetByItemId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int64})">
            <summary>
            	Gets rows from the datasource based on the FK_ItemMovements_Items key.
            	FK_ItemMovements_Items Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="itemId"></param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemMovement objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemMovementProviderBaseCore.GetByItemId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int64},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ItemMovements_Items key.
            	FK_ItemMovements_Items Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="itemId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemMovement objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemMovementProviderBaseCore.GetByItemId(System.Nullable{System.Int64},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ItemMovements_Items key.
            	fKItemMovementsItems Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="itemId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemMovement objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemMovementProviderBaseCore.GetByItemId(System.Nullable{System.Int64},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ItemMovements_Items key.
            	fKItemMovementsItems Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="itemId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemMovement objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemMovementProviderBaseCore.GetByItemId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int64},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ItemMovements_Items key.
            	FK_ItemMovements_Items Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="itemId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemMovement objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemMovementProviderBaseCore.GetByFromRepositoryId(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ItemMovements_Repositories key.
            	FK_ItemMovements_Repositories Description: 
            </summary>
            <param name="fromRepositoryId"></param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemMovement objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemMovementProviderBaseCore.GetByFromRepositoryId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ItemMovements_Repositories key.
            	FK_ItemMovements_Repositories Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="fromRepositoryId"></param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemMovement objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemMovementProviderBaseCore.GetByFromRepositoryId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ItemMovements_Repositories key.
            	FK_ItemMovements_Repositories Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="fromRepositoryId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemMovement objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemMovementProviderBaseCore.GetByFromRepositoryId(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ItemMovements_Repositories key.
            	fKItemMovementsRepositories Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="fromRepositoryId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemMovement objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemMovementProviderBaseCore.GetByFromRepositoryId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ItemMovements_Repositories key.
            	fKItemMovementsRepositories Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="fromRepositoryId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemMovement objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemMovementProviderBaseCore.GetByFromRepositoryId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ItemMovements_Repositories key.
            	FK_ItemMovements_Repositories Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="fromRepositoryId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemMovement objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemMovementProviderBaseCore.GetByToRepositoryId(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ItemMovements_Repositories1 key.
            	FK_ItemMovements_Repositories1 Description: 
            </summary>
            <param name="toRepositoryId"></param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemMovement objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemMovementProviderBaseCore.GetByToRepositoryId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ItemMovements_Repositories1 key.
            	FK_ItemMovements_Repositories1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="toRepositoryId"></param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemMovement objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemMovementProviderBaseCore.GetByToRepositoryId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ItemMovements_Repositories1 key.
            	FK_ItemMovements_Repositories1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="toRepositoryId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemMovement objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemMovementProviderBaseCore.GetByToRepositoryId(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ItemMovements_Repositories1 key.
            	fKItemMovementsRepositories1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="toRepositoryId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemMovement objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemMovementProviderBaseCore.GetByToRepositoryId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ItemMovements_Repositories1 key.
            	fKItemMovementsRepositories1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="toRepositoryId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemMovement objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemMovementProviderBaseCore.GetByToRepositoryId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ItemMovements_Repositories1 key.
            	FK_ItemMovements_Repositories1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="toRepositoryId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.ItemMovement objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemMovementProviderBaseCore.Get(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.ItemMovementKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemMovementProviderBaseCore.GetByRepositoryMovementId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_ItemMovements index.
            </summary>
            <param name="repositoryMovementId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.ItemMovement"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemMovementProviderBaseCore.GetByRepositoryMovementId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ItemMovements index.
            </summary>
            <param name="repositoryMovementId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.ItemMovement"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemMovementProviderBaseCore.GetByRepositoryMovementId(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ItemMovements index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="repositoryMovementId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.ItemMovement"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemMovementProviderBaseCore.GetByRepositoryMovementId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ItemMovements index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="repositoryMovementId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.ItemMovement"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemMovementProviderBaseCore.GetByRepositoryMovementId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ItemMovements index.
            </summary>
            <param name="repositoryMovementId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.ItemMovement"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemMovementProviderBaseCore.GetByRepositoryMovementId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ItemMovements index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="repositoryMovementId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.ItemMovement"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemMovementProviderBaseCore.Fill(System.Data.IDataReader,RLM.Contruction.Entities.TList{RLM.Contruction.Entities.ItemMovement},System.Int32,System.Int32)">
            <summary>
            Fill a RLM.Contruction.Entities.TList&lt;ItemMovement&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:RLM.Contruction.Entities.TList`1"/></returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemMovementProviderBaseCore.RefreshEntity(System.Data.IDataReader,RLM.Contruction.Entities.ItemMovement)">
            <summary>
            Refreshes the <see cref="T:RLM.Contruction.Entities.ItemMovement"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.ItemMovement"/> object to refresh.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemMovementProviderBaseCore.RefreshEntity(System.Data.DataSet,RLM.Contruction.Entities.ItemMovement)">
            <summary>
            Refreshes the <see cref="T:RLM.Contruction.Entities.ItemMovement"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.ItemMovement"/> object.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemMovementProviderBaseCore.DeepLoad(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.ItemMovement,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[],RLM.Contruction.Data.Bases.ChildEntityTypesList)">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.ItemMovement"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">RLM.Contruction.Entities.ItemMovement Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemMovementProviderBaseCore.DeepSave(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.ItemMovement,RLM.Contruction.Data.DeepSaveType,System.Type[],RLM.Contruction.Data.Bases.ChildEntityTypesList)">
            <summary>
            Deep Save the entire object graph of the RLM.Contruction.Entities.ItemMovement object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">RLM.Contruction.Entities.ItemMovement instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">RLM.Contruction.Entities.ItemMovement Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.ItemMovementChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>RLM.Contruction.Entities.ItemMovement</c>
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.Bases.ItemMovementChildEntityTypes.Item">
            <summary>
             Composite Property for <c>Item</c> at ItemIdSource
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.Bases.ItemMovementChildEntityTypes.Repository">
            <summary>
             Composite Property for <c>Repository</c> at FromRepositoryIdSource
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.ItemMovementFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:RLM.Contruction.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:RLM.Contruction.Entities.ItemMovement"/> object.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemMovementFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ItemMovementFilterBuilder class.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemMovementFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ItemMovementFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemMovementFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ItemMovementFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.ItemMovementParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:RLM.Contruction.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:RLM.Contruction.Entities.ItemMovement"/> object.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemMovementParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ItemMovementParameterBuilder class.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemMovementParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ItemMovementParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemMovementParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ItemMovementParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.ItemProviderBase">
            <summary>
             This class is the base class for any <see cref="T:RLM.Contruction.Data.Bases.ItemProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.ItemProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:RLM.Contruction.Data.Bases.ItemProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemProviderBaseCore.GetByRepositoryIdFromItemInRepository(System.Int32)">
            <summary>
            	Gets Item objects from the datasource by RepositoryId in the
            	ItemInRepository table. Table Item is related to table Repository
            	through the (M:N) relationship defined in the ItemInRepository table.
            </summary>
            <param name="repositoryId"></param>
            <returns>Returns a typed collection of Item objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemProviderBaseCore.GetByRepositoryIdFromItemInRepository(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets RLM.Contruction.Entities.Item objects from the datasource by RepositoryId in the
            	ItemInRepository table. Table Item is related to table Repository
            	through the (M:N) relationship defined in the ItemInRepository table.
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="repositoryId"></param>
            <remarks></remarks>
            <returns>Returns a TList of Item objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemProviderBaseCore.GetByRepositoryIdFromItemInRepository(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets Item objects from the datasource by RepositoryId in the
            	ItemInRepository table. Table Item is related to table Repository
            	through the (M:N) relationship defined in the ItemInRepository table.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="repositoryId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of Item objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemProviderBaseCore.GetByRepositoryIdFromItemInRepository(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets Item objects from the datasource by RepositoryId in the
            	ItemInRepository table. Table Item is related to table Repository
            	through the (M:N) relationship defined in the ItemInRepository table.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="repositoryId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Item objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemProviderBaseCore.GetByRepositoryIdFromItemInRepository(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Item objects from the datasource by RepositoryId in the
            	ItemInRepository table. Table Item is related to table Repository
            	through the (M:N) relationship defined in the ItemInRepository table.
            </summary>
            <param name="repositoryId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Item objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemProviderBaseCore.GetByRepositoryIdFromItemInRepository(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Item objects from the datasource by RepositoryId in the
            	ItemInRepository table. Table Item is related to table Repository
            	through the (M:N) relationship defined in the ItemInRepository table.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <param name="repositoryId"></param>
            <remarks></remarks>
            <returns>Returns a TList of Item objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemProviderBaseCore.Delete(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.ItemKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemProviderBaseCore.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="itemId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemProviderBaseCore.Delete(RLM.Contruction.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="itemId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemProviderBaseCore.GetByBaseUnitId(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_Items_Units key.
            	FK_Items_Units Description: 
            </summary>
            <param name="baseUnitId">Base unit of product, It can not be change base in any time</param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Item objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemProviderBaseCore.GetByBaseUnitId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_Items_Units key.
            	FK_Items_Units Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="baseUnitId">Base unit of product, It can not be change base in any time</param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Item objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemProviderBaseCore.GetByBaseUnitId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Items_Units key.
            	FK_Items_Units Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="baseUnitId">Base unit of product, It can not be change base in any time</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Item objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemProviderBaseCore.GetByBaseUnitId(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Items_Units key.
            	fKItemsUnits Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="baseUnitId">Base unit of product, It can not be change base in any time</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Item objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemProviderBaseCore.GetByBaseUnitId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Items_Units key.
            	fKItemsUnits Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="baseUnitId">Base unit of product, It can not be change base in any time</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Item objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemProviderBaseCore.GetByBaseUnitId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Items_Units key.
            	FK_Items_Units Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="baseUnitId">Base unit of product, It can not be change base in any time</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Item objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemProviderBaseCore.GetByUsedUnitId(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_Items_Units1 key.
            	FK_Items_Units1 Description: 
            </summary>
            <param name="usedUnitId">Current unit id, It can be change base on repository</param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Item objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemProviderBaseCore.GetByUsedUnitId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_Items_Units1 key.
            	FK_Items_Units1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="usedUnitId">Current unit id, It can be change base on repository</param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Item objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemProviderBaseCore.GetByUsedUnitId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Items_Units1 key.
            	FK_Items_Units1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="usedUnitId">Current unit id, It can be change base on repository</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Item objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemProviderBaseCore.GetByUsedUnitId(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Items_Units1 key.
            	fKItemsUnits1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="usedUnitId">Current unit id, It can be change base on repository</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Item objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemProviderBaseCore.GetByUsedUnitId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Items_Units1 key.
            	fKItemsUnits1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="usedUnitId">Current unit id, It can be change base on repository</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Item objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemProviderBaseCore.GetByUsedUnitId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Items_Units1 key.
            	FK_Items_Units1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="usedUnitId">Current unit id, It can be change base on repository</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Item objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemProviderBaseCore.GetByGroupId(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_Items_Groups key.
            	FK_Items_Groups Description: 
            </summary>
            <param name="groupId">Item group</param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Item objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemProviderBaseCore.GetByGroupId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_Items_Groups key.
            	FK_Items_Groups Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="groupId">Item group</param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Item objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemProviderBaseCore.GetByGroupId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Items_Groups key.
            	FK_Items_Groups Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="groupId">Item group</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Item objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemProviderBaseCore.GetByGroupId(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Items_Groups key.
            	fKItemsGroups Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="groupId">Item group</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Item objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemProviderBaseCore.GetByGroupId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Items_Groups key.
            	fKItemsGroups Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="groupId">Item group</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Item objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemProviderBaseCore.GetByGroupId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Items_Groups key.
            	FK_Items_Groups Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="groupId">Item group</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Item objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemProviderBaseCore.Get(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.ItemKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemProviderBaseCore.GetByItemId(System.Int64)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_Items index.
            </summary>
            <param name="itemId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Item"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemProviderBaseCore.GetByItemId(System.Int64,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Items index.
            </summary>
            <param name="itemId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Item"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemProviderBaseCore.GetByItemId(RLM.Contruction.Data.TransactionManager,System.Int64)">
            <summary>
            	Gets rows from the datasource based on the PK_Items index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="itemId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Item"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemProviderBaseCore.GetByItemId(RLM.Contruction.Data.TransactionManager,System.Int64,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Items index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="itemId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Item"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemProviderBaseCore.GetByItemId(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Items index.
            </summary>
            <param name="itemId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Item"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemProviderBaseCore.GetByItemId(RLM.Contruction.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Items index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="itemId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Item"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemProviderBaseCore.Fill(System.Data.IDataReader,RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Item},System.Int32,System.Int32)">
            <summary>
            Fill a RLM.Contruction.Entities.TList&lt;Item&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:RLM.Contruction.Entities.TList`1"/></returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemProviderBaseCore.RefreshEntity(System.Data.IDataReader,RLM.Contruction.Entities.Item)">
            <summary>
            Refreshes the <see cref="T:RLM.Contruction.Entities.Item"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.Item"/> object to refresh.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemProviderBaseCore.RefreshEntity(System.Data.DataSet,RLM.Contruction.Entities.Item)">
            <summary>
            Refreshes the <see cref="T:RLM.Contruction.Entities.Item"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.Item"/> object.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemProviderBaseCore.DeepLoad(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.Item,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[],RLM.Contruction.Data.Bases.ChildEntityTypesList)">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.Item"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">RLM.Contruction.Entities.Item Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemProviderBaseCore.DeepSave(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.Item,RLM.Contruction.Data.DeepSaveType,System.Type[],RLM.Contruction.Data.Bases.ChildEntityTypesList)">
            <summary>
            Deep Save the entire object graph of the RLM.Contruction.Entities.Item object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">RLM.Contruction.Entities.Item instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">RLM.Contruction.Entities.Item Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.GroupProviderBase">
            <summary>
             This class is the base class for any <see cref="T:RLM.Contruction.Data.Bases.GroupProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.DeepLoadType">
            <summary>
            DeepLoad options for deep loading entities
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.DeepLoadType.IncludeChildren">
            <summary>
            Will Include a child property collection 1 Level Deep
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.DeepLoadType.ExcludeChildren">
            <summary>
            Will Exclude a child property collection
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.DeepLoadType.Ignore">
            <summary>
            Will ignore the request and return the entity.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.DeepSaveType">
            <summary>
            DeepSave options for deep saving entities
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.DeepSaveType.IncludeChildren">
            <summary>Will Include a child property collection</summary>
        </member>
        <member name="F:RLM.Contruction.Data.DeepSaveType.ExcludeChildren">
            <summary>Will Exclude a child property collection</summary>
        </member>
        <member name="F:RLM.Contruction.Data.DeepSaveType.Ignore">
            <summary>Will ignore the request and return the entity.</summary>
        </member>
        <member name="T:RLM.Contruction.Data.Utility">
            <summary>
            Contains some helper function for SQL.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Utility.GetDefaultByType(System.Data.DbType)">
            <summary>
            Get a default value for a given data type
            </summary>
            <param name="dataType">Data type for which to get the default value</param>
            <returns>An object of the default value.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Utility.GetDataValue(System.Data.IDataParameter)">
            <summary>
            Get Value or Default Value from an IDataParamater
            Based on DbType
            </summary>
            <param name="p">The IDataParameter instance type is used to determine the default value.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.Utility.DefaultToDBNull(System.Object,System.Data.DbType)">
            <summary>
            Checks to see if the Default Value has been set to the parameter.
            If it's the default value, then create.
            </summary>
            <param name="val">The value we want to check.</param>
            <param name="dbtype">The DbType from wich we take the default value.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.Utility.GetParameterValue``1(System.Data.IDataParameter)">
            <summary>
            Generic method to return the value of a nullable parameter
            </summary>
            <typeparam name="T">Type of value to return</typeparam>
            <param name="parameter">Parameter from which to extract the value</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.Utility.ConvertDataReaderToDataSet(System.Data.IDataReader)">
            <summary>
            Converts a IDataReader to a DataSet.  For use when a custom stored procedure returns an <see cref="T:System.Data.IDataReader"/>, it will 
            convert all result sets returned as a DataSet.
            </summary>
            <param name="reader">The reader to convert</param>
            <returns>A dataset with one table per result in the reader</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Utility.DetectSqlInjection(System.String)">
            <summary>
            A helper method to attempt to discover known SqlInjection attacks.  
            For use when using one of the flexible non-parameterized access methods, such as GetPaged()
            </summary>
            <param name="whereClause">string of the whereClause to check</param>
            <returns>true if found, false if not found </returns>
        </member>
        <member name="M:RLM.Contruction.Data.Utility.DetectSqlInjection(System.String,System.String)">
            <summary>
            A helper method to attempt to discover known SqlInjection attacks.  
            For use when using one of the flexible non-parameterized access methods, such as GetPaged()
            </summary>
            <param name="whereClause">string of the whereClause to check</param>
            <param name="orderBy">string of the orderBy clause to check</param>
            <returns>true if found, false if not found </returns>
        </member>
        <member name="M:RLM.Contruction.Data.Utility.ParseSortExpression(System.Type,System.String)">
            <summary>
            Parses the supplied sort expression parameter to verify that it
            matches the specifed column name enumeration.
            </summary>
            <param name="columnEnum"></param>
            <param name="sortExpression"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.Utility.ExecuteReader(RLM.Contruction.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returns an <see cref="T:System.Data.IDataReader"/> through which the result can be read. 
            It is the responsibility of the caller to close the connection and reader when finished. 
            </summary>
            <param name="transactionManager">The transaction to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>An <see cref="T:System.Data.IDataReader"/> object.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.Utility.ExecuteReader(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returns an <see cref="T:System.Data.IDataReader"/> through which the result can be read. 
            It is the responsibility of the caller to close the connection and reader when finished. 
            </summary>
            <param name="database">The database to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>An <see cref="T:System.Data.IDataReader"/> object.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.Utility.ExecuteNonQuery(RLM.Contruction.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returns the number of rows affected. 
            </summary>
            <param name="transactionManager">The transaction to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>The number of rows affected.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.Utility.ExecuteNonQuery(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returns the number of rows affected. 
            </summary>
            <param name="database">The database to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>The number of rows affected.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.Utility.ExecuteDataSet(RLM.Contruction.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returns the results in a new <see cref="T:System.Data.DataSet"/>. 
            </summary>
            <param name="transactionManager">The transaction to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>A <see cref="T:System.Data.DataSet"/> containing the results of the command.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.Utility.ExecuteDataSet(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returns the results in a new <see cref="T:System.Data.DataSet"/>. 
            </summary>
            <param name="database">The database to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>A <see cref="T:System.Data.DataSet"/> containing the results of the command.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.NetTiersProviderCollection">
            <summary>
            Reprensents the strongly typed collection of NetTiersProvider.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.NetTiersProviderCollection.Add(RLM.Contruction.Data.Bases.NetTiersProvider)">
            <summary>
            Adds the specified provider.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="P:RLM.Contruction.Data.Bases.NetTiersProviderCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:NetTiersProvider"/> with the specified name.
            </summary>
            <value></value>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.ItemInRepositoryProviderBase">
            <summary>
             This class is the base class for any <see cref="T:RLM.Contruction.Data.Bases.ItemInRepositoryProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.PartnerProviderBase">
            <summary>
             This class is the base class for any <see cref="T:RLM.Contruction.Data.Bases.PartnerProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.PartnerProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:RLM.Contruction.Data.Bases.PartnerProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.PartnerProviderBaseCore.Delete(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.PartnerKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.PartnerProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="partnerId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.PartnerProviderBaseCore.Delete(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="partnerId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.PartnerProviderBaseCore.Get(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.PartnerKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.PartnerProviderBaseCore.GetByPartnerId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_Departments index.
            </summary>
            <param name="partnerId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Partner"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.PartnerProviderBaseCore.GetByPartnerId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Departments index.
            </summary>
            <param name="partnerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Partner"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.PartnerProviderBaseCore.GetByPartnerId(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Departments index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="partnerId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Partner"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.PartnerProviderBaseCore.GetByPartnerId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Departments index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="partnerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Partner"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.PartnerProviderBaseCore.GetByPartnerId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Departments index.
            </summary>
            <param name="partnerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Partner"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.PartnerProviderBaseCore.GetByPartnerId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Departments index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="partnerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Partner"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.PartnerProviderBaseCore.Fill(System.Data.IDataReader,RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Partner},System.Int32,System.Int32)">
            <summary>
            Fill a RLM.Contruction.Entities.TList&lt;Partner&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:RLM.Contruction.Entities.TList`1"/></returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.PartnerProviderBaseCore.RefreshEntity(System.Data.IDataReader,RLM.Contruction.Entities.Partner)">
            <summary>
            Refreshes the <see cref="T:RLM.Contruction.Entities.Partner"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.Partner"/> object to refresh.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.PartnerProviderBaseCore.RefreshEntity(System.Data.DataSet,RLM.Contruction.Entities.Partner)">
            <summary>
            Refreshes the <see cref="T:RLM.Contruction.Entities.Partner"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.Partner"/> object.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.PartnerProviderBaseCore.DeepLoad(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.Partner,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[],RLM.Contruction.Data.Bases.ChildEntityTypesList)">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.Partner"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">RLM.Contruction.Entities.Partner Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.PartnerProviderBaseCore.DeepSave(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.Partner,RLM.Contruction.Data.DeepSaveType,System.Type[],RLM.Contruction.Data.Bases.ChildEntityTypesList)">
            <summary>
            Deep Save the entire object graph of the RLM.Contruction.Entities.Partner object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">RLM.Contruction.Entities.Partner instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">RLM.Contruction.Entities.Partner Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.RoleOfStaffProviderBase">
            <summary>
             This class is the base class for any <see cref="T:RLM.Contruction.Data.Bases.RoleOfStaffProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.RoleOfStaffProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:RLM.Contruction.Data.Bases.RoleOfStaffProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleOfStaffProviderBaseCore.Delete(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.RoleOfStaffKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleOfStaffProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="roleOfStaffId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleOfStaffProviderBaseCore.Delete(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="roleOfStaffId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleOfStaffProviderBaseCore.GetByRoleId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_RoleOfStaffs_Roles key.
            	FK_RoleOfStaffs_Roles Description: 
            </summary>
            <param name="roleId"></param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.RoleOfStaff objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleOfStaffProviderBaseCore.GetByRoleId(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_RoleOfStaffs_Roles key.
            	FK_RoleOfStaffs_Roles Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="roleId"></param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.RoleOfStaff objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleOfStaffProviderBaseCore.GetByRoleId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_RoleOfStaffs_Roles key.
            	FK_RoleOfStaffs_Roles Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="roleId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.RoleOfStaff objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleOfStaffProviderBaseCore.GetByRoleId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_RoleOfStaffs_Roles key.
            	fKRoleOfStaffsRoles Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="roleId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.RoleOfStaff objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleOfStaffProviderBaseCore.GetByRoleId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_RoleOfStaffs_Roles key.
            	fKRoleOfStaffsRoles Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="roleId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.RoleOfStaff objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleOfStaffProviderBaseCore.GetByRoleId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_RoleOfStaffs_Roles key.
            	FK_RoleOfStaffs_Roles Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="roleId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.RoleOfStaff objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleOfStaffProviderBaseCore.GetByStaffId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_RoleOfStaffs_Staffs key.
            	FK_RoleOfStaffs_Staffs Description: 
            </summary>
            <param name="staffId"></param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.RoleOfStaff objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleOfStaffProviderBaseCore.GetByStaffId(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_RoleOfStaffs_Staffs key.
            	FK_RoleOfStaffs_Staffs Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="staffId"></param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.RoleOfStaff objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleOfStaffProviderBaseCore.GetByStaffId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_RoleOfStaffs_Staffs key.
            	FK_RoleOfStaffs_Staffs Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="staffId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.RoleOfStaff objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleOfStaffProviderBaseCore.GetByStaffId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_RoleOfStaffs_Staffs key.
            	fKRoleOfStaffsStaffs Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="staffId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.RoleOfStaff objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleOfStaffProviderBaseCore.GetByStaffId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_RoleOfStaffs_Staffs key.
            	fKRoleOfStaffsStaffs Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="staffId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.RoleOfStaff objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleOfStaffProviderBaseCore.GetByStaffId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_RoleOfStaffs_Staffs key.
            	FK_RoleOfStaffs_Staffs Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="staffId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.RoleOfStaff objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleOfStaffProviderBaseCore.Get(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.RoleOfStaffKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleOfStaffProviderBaseCore.GetByRoleOfStaffId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_RoleOfStaffs index.
            </summary>
            <param name="roleOfStaffId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.RoleOfStaff"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleOfStaffProviderBaseCore.GetByRoleOfStaffId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_RoleOfStaffs index.
            </summary>
            <param name="roleOfStaffId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.RoleOfStaff"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleOfStaffProviderBaseCore.GetByRoleOfStaffId(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_RoleOfStaffs index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="roleOfStaffId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.RoleOfStaff"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleOfStaffProviderBaseCore.GetByRoleOfStaffId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_RoleOfStaffs index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="roleOfStaffId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.RoleOfStaff"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleOfStaffProviderBaseCore.GetByRoleOfStaffId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_RoleOfStaffs index.
            </summary>
            <param name="roleOfStaffId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.RoleOfStaff"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleOfStaffProviderBaseCore.GetByRoleOfStaffId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_RoleOfStaffs index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="roleOfStaffId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.RoleOfStaff"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleOfStaffProviderBaseCore.Fill(System.Data.IDataReader,RLM.Contruction.Entities.TList{RLM.Contruction.Entities.RoleOfStaff},System.Int32,System.Int32)">
            <summary>
            Fill a RLM.Contruction.Entities.TList&lt;RoleOfStaff&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:RLM.Contruction.Entities.TList`1"/></returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleOfStaffProviderBaseCore.RefreshEntity(System.Data.IDataReader,RLM.Contruction.Entities.RoleOfStaff)">
            <summary>
            Refreshes the <see cref="T:RLM.Contruction.Entities.RoleOfStaff"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.RoleOfStaff"/> object to refresh.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleOfStaffProviderBaseCore.RefreshEntity(System.Data.DataSet,RLM.Contruction.Entities.RoleOfStaff)">
            <summary>
            Refreshes the <see cref="T:RLM.Contruction.Entities.RoleOfStaff"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.RoleOfStaff"/> object.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleOfStaffProviderBaseCore.DeepLoad(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.RoleOfStaff,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[],RLM.Contruction.Data.Bases.ChildEntityTypesList)">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.RoleOfStaff"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">RLM.Contruction.Entities.RoleOfStaff Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleOfStaffProviderBaseCore.DeepSave(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.RoleOfStaff,RLM.Contruction.Data.DeepSaveType,System.Type[],RLM.Contruction.Data.Bases.ChildEntityTypesList)">
            <summary>
            Deep Save the entire object graph of the RLM.Contruction.Entities.RoleOfStaff object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">RLM.Contruction.Entities.RoleOfStaff instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">RLM.Contruction.Entities.RoleOfStaff Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.ChildEntityTypesList">
            <summary>
            Represents a collection of child entity types.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ChildEntityTypesList.#ctor">
            <summary>
            Initializes a new instance of the ChildEntityTypeList class.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ChildEntityTypesList.GetKeys(RLM.Contruction.Entities.IEntity)">
            <summary>
            Gets a collection of key names for the specified entity.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ChildEntityTypesList.GetProperties(RLM.Contruction.Entities.IEntity)">
            <summary>
            Gets a collection of property names for the specified entity.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ChildEntityTypesList.HasProperty(RLM.Contruction.Entities.IEntity,System.String,System.String)">
            <summary>
            Gets a value indicating whether the specified entity property
            has been added to the collection of properties.
            </summary>
            <param name="entity"></param>
            <param name="key"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ChildEntityTypesList.AddProperty(RLM.Contruction.Entities.IEntity,System.String,System.String)">
            <summary>
            Adds the specified entity property to the collection of properties.
            </summary>
            <param name="entity"></param>
            <param name="key"></param>
            <param name="property"></param>
        </member>
        <member name="P:RLM.Contruction.Data.Bases.ChildEntityTypesList.Keys">
            <summary>
            Gets a collection of key names.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.Bases.ChildEntityTypesList.Properties">
            <summary>
            Gets a collection of child entity property names.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.ChildEntityTypeAttribute">
            <summary>
             Attribute used to decorate enumerations with underlying system type.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ChildEntityTypeAttribute.#ctor(System.Type)">
            <summary>
             Marks the underlying type of a child entity property.
             </summary>
             <param name="entityType">Type of the property to load.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ChildEntityTypeAttribute.GetType(System.Enum)">
            <summary>
            Gets the underlying system type for the specified enumeration value.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="P:RLM.Contruction.Data.Bases.ChildEntityTypeAttribute.EntityType">
            <summary>
            The underlying type for the ChildEntityTypes enumerations.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.IChildEntityProperty">
            <summary>
            Provides a common property used to access the child entity type enumeration value.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.Bases.IChildEntityProperty.ChildEntityType">
            <summary>
            Gets the value of the ChildEntityType property.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.ChildEntityProperty`1">
            <summary>
            A generic wrapper for the generated ChildEntityTypes enumerations.
            </summary>
            <typeparam name="ChildEntityTypesEnum"></typeparam>
        </member>
        <member name="F:RLM.Contruction.Data.Bases.ChildEntityProperty`1.name">
            <summary>
            The Name member variable.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.Bases.ChildEntityProperty`1.Name">
            <summary>
            Gets or sets the Name property.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.Bases.ChildEntityProperty`1.ChildEntityType">
            <summary>
            Gets the value of the ChildEntityType property.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.ContactorProviderBase">
            <summary>
             This class is the base class for any <see cref="T:RLM.Contruction.Data.Bases.ContactorProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.ContactorProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:RLM.Contruction.Data.Bases.ContactorProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContactorProviderBaseCore.Delete(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.ContactorKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContactorProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="contractId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContactorProviderBaseCore.Delete(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="contractId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContactorProviderBaseCore.Get(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.ContactorKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContactorProviderBaseCore.GetByContractId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_Contactors index.
            </summary>
            <param name="contractId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Contactor"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContactorProviderBaseCore.GetByContractId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Contactors index.
            </summary>
            <param name="contractId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Contactor"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContactorProviderBaseCore.GetByContractId(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Contactors index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="contractId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Contactor"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContactorProviderBaseCore.GetByContractId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Contactors index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="contractId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Contactor"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContactorProviderBaseCore.GetByContractId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Contactors index.
            </summary>
            <param name="contractId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Contactor"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContactorProviderBaseCore.GetByContractId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Contactors index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="contractId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Contactor"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContactorProviderBaseCore.Fill(System.Data.IDataReader,RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Contactor},System.Int32,System.Int32)">
            <summary>
            Fill a RLM.Contruction.Entities.TList&lt;Contactor&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:RLM.Contruction.Entities.TList`1"/></returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContactorProviderBaseCore.RefreshEntity(System.Data.IDataReader,RLM.Contruction.Entities.Contactor)">
            <summary>
            Refreshes the <see cref="T:RLM.Contruction.Entities.Contactor"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.Contactor"/> object to refresh.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContactorProviderBaseCore.RefreshEntity(System.Data.DataSet,RLM.Contruction.Entities.Contactor)">
            <summary>
            Refreshes the <see cref="T:RLM.Contruction.Entities.Contactor"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.Contactor"/> object.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContactorProviderBaseCore.DeepLoad(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.Contactor,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[],RLM.Contruction.Data.Bases.ChildEntityTypesList)">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.Contactor"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">RLM.Contruction.Entities.Contactor Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContactorProviderBaseCore.DeepSave(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.Contactor,RLM.Contruction.Data.DeepSaveType,System.Type[],RLM.Contruction.Data.Bases.ChildEntityTypesList)">
            <summary>
            Deep Save the entire object graph of the RLM.Contruction.Entities.Contactor object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">RLM.Contruction.Entities.Contactor instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">RLM.Contruction.Entities.Contactor Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.UserGroupProviderBase">
            <summary>
             This class is the base class for any <see cref="T:RLM.Contruction.Data.Bases.UserGroupProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.UserGroupProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:RLM.Contruction.Data.Bases.UserGroupProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UserGroupProviderBaseCore.Delete(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.UserGroupKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UserGroupProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="userGroupId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UserGroupProviderBaseCore.Delete(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="userGroupId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UserGroupProviderBaseCore.Get(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.UserGroupKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UserGroupProviderBaseCore.GetByUserGroupId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_UserGroups index.
            </summary>
            <param name="userGroupId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.UserGroup"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UserGroupProviderBaseCore.GetByUserGroupId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_UserGroups index.
            </summary>
            <param name="userGroupId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.UserGroup"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UserGroupProviderBaseCore.GetByUserGroupId(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_UserGroups index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="userGroupId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.UserGroup"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UserGroupProviderBaseCore.GetByUserGroupId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_UserGroups index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="userGroupId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.UserGroup"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UserGroupProviderBaseCore.GetByUserGroupId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_UserGroups index.
            </summary>
            <param name="userGroupId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.UserGroup"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UserGroupProviderBaseCore.GetByUserGroupId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_UserGroups index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="userGroupId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.UserGroup"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UserGroupProviderBaseCore.Fill(System.Data.IDataReader,RLM.Contruction.Entities.TList{RLM.Contruction.Entities.UserGroup},System.Int32,System.Int32)">
            <summary>
            Fill a RLM.Contruction.Entities.TList&lt;UserGroup&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:RLM.Contruction.Entities.TList`1"/></returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UserGroupProviderBaseCore.RefreshEntity(System.Data.IDataReader,RLM.Contruction.Entities.UserGroup)">
            <summary>
            Refreshes the <see cref="T:RLM.Contruction.Entities.UserGroup"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.UserGroup"/> object to refresh.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UserGroupProviderBaseCore.RefreshEntity(System.Data.DataSet,RLM.Contruction.Entities.UserGroup)">
            <summary>
            Refreshes the <see cref="T:RLM.Contruction.Entities.UserGroup"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.UserGroup"/> object.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UserGroupProviderBaseCore.DeepLoad(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.UserGroup,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[],RLM.Contruction.Data.Bases.ChildEntityTypesList)">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.UserGroup"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">RLM.Contruction.Entities.UserGroup Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UserGroupProviderBaseCore.DeepSave(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.UserGroup,RLM.Contruction.Data.DeepSaveType,System.Type[],RLM.Contruction.Data.Bases.ChildEntityTypesList)">
            <summary>
            Deep Save the entire object graph of the RLM.Contruction.Entities.UserGroup object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">RLM.Contruction.Entities.UserGroup instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">RLM.Contruction.Entities.UserGroup Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.AttachFileProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:RLM.Contruction.Data.Bases.AttachFileProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.AttachFileProviderBaseCore.Delete(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.AttachFileKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.AttachFileProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="attachFileId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.AttachFileProviderBaseCore.Delete(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="attachFileId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.AttachFileProviderBaseCore.Get(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.AttachFileKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.AttachFileProviderBaseCore.GetByAttachFileId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_AttachFiles index.
            </summary>
            <param name="attachFileId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.AttachFile"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.AttachFileProviderBaseCore.GetByAttachFileId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_AttachFiles index.
            </summary>
            <param name="attachFileId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.AttachFile"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.AttachFileProviderBaseCore.GetByAttachFileId(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_AttachFiles index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="attachFileId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.AttachFile"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.AttachFileProviderBaseCore.GetByAttachFileId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_AttachFiles index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="attachFileId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.AttachFile"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.AttachFileProviderBaseCore.GetByAttachFileId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_AttachFiles index.
            </summary>
            <param name="attachFileId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.AttachFile"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.AttachFileProviderBaseCore.GetByAttachFileId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_AttachFiles index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="attachFileId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.AttachFile"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.AttachFileProviderBaseCore.Fill(System.Data.IDataReader,RLM.Contruction.Entities.TList{RLM.Contruction.Entities.AttachFile},System.Int32,System.Int32)">
            <summary>
            Fill a RLM.Contruction.Entities.TList&lt;AttachFile&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:RLM.Contruction.Entities.TList`1"/></returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.AttachFileProviderBaseCore.RefreshEntity(System.Data.IDataReader,RLM.Contruction.Entities.AttachFile)">
            <summary>
            Refreshes the <see cref="T:RLM.Contruction.Entities.AttachFile"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.AttachFile"/> object to refresh.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.AttachFileProviderBaseCore.RefreshEntity(System.Data.DataSet,RLM.Contruction.Entities.AttachFile)">
            <summary>
            Refreshes the <see cref="T:RLM.Contruction.Entities.AttachFile"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.AttachFile"/> object.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.AttachFileProviderBaseCore.DeepLoad(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.AttachFile,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[],RLM.Contruction.Data.Bases.ChildEntityTypesList)">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.AttachFile"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">RLM.Contruction.Entities.AttachFile Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.AttachFileProviderBaseCore.DeepSave(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.AttachFile,RLM.Contruction.Data.DeepSaveType,System.Type[],RLM.Contruction.Data.Bases.ChildEntityTypesList)">
            <summary>
            Deep Save the entire object graph of the RLM.Contruction.Entities.AttachFile object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">RLM.Contruction.Entities.AttachFile instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">RLM.Contruction.Entities.AttachFile Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.AttachFileChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>RLM.Contruction.Entities.AttachFile</c>
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.AttachFileFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:RLM.Contruction.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:RLM.Contruction.Entities.AttachFile"/> object.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.AttachFileFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the AttachFileFilterBuilder class.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.AttachFileFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AttachFileFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.AttachFileFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AttachFileFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.AttachFileParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:RLM.Contruction.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:RLM.Contruction.Entities.AttachFile"/> object.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.AttachFileParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the AttachFileParameterBuilder class.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.AttachFileParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AttachFileParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.AttachFileParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AttachFileParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.EntityViewProviderBaseCore`1">
            <summary>
            Serves as the base class for objects that provide data access functionality.
            Provides a default implementation of the IEntityViewProvider&lt;Entity&gt; interface.
            </summary>
            <typeparam name="Entity">The class of the business object being accessed.</typeparam>
        </member>
        <member name="T:RLM.Contruction.Data.IEntityViewProvider`1">
            <summary>
            Defines the common data access methods that can be used by the
            ReadOnlyDataSource control to interact with the underlying data store.
            </summary>
            <typeparam name="Entity">The class of the business object being accessed.</typeparam>
        </member>
        <member name="M:RLM.Contruction.Data.IEntityViewProvider`1.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.IEntityViewProvider`1.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.IEntityViewProvider`1.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.IEntityViewProvider`1.Find(RLM.Contruction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityViewProviderBaseCore`1.GetAll">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityViewProviderBaseCore`1.GetAll(System.Int32,System.Int32)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks>Uses connection string object was created with.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityViewProviderBaseCore`1.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks>Uses connection string object was created with.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityViewProviderBaseCore`1.GetAll(RLM.Contruction.Data.TransactionManager)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityViewProviderBaseCore`1.GetAll(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityViewProviderBaseCore`1.GetAll(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityViewProviderBaseCore`1.Get">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityViewProviderBaseCore`1.Get(RLM.Contruction.Data.TransactionManager)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityViewProviderBaseCore`1.Get(System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityViewProviderBaseCore`1.Get(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityViewProviderBaseCore`1.Get(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityViewProviderBaseCore`1.Get(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityViewProviderBaseCore`1.Get(System.String,System.String)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityViewProviderBaseCore`1.Get(RLM.Contruction.Data.TransactionManager,System.String,System.String)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityViewProviderBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityViewProviderBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityViewProviderBaseCore`1.Get(RLM.Contruction.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityViewProviderBaseCore`1.Get(RLM.Contruction.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityViewProviderBaseCore`1.GetPaged(System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityViewProviderBaseCore`1.GetPaged(RLM.Contruction.Data.TransactionManager,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityViewProviderBaseCore`1.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityViewProviderBaseCore`1.GetPaged(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityViewProviderBaseCore`1.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityViewProviderBaseCore`1.GetPaged(RLM.Contruction.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityViewProviderBaseCore`1.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityViewProviderBaseCore`1.GetTotalItems(RLM.Contruction.Data.TransactionManager,System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            </summary>
            <param name="mgr">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityViewProviderBaseCore`1.Find(RLM.Contruction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityViewProviderBaseCore`1.Find(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityViewProviderBaseCore`1.Find(RLM.Contruction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityViewProviderBaseCore`1.Find(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityViewProviderBaseCore`1.Find(RLM.Contruction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.EntityViewProviderBaseCore`1.Find(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.ItemInProjectChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>RLM.Contruction.Entities.ItemInProject</c>
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.Bases.ItemInProjectChildEntityTypes.Contract">
            <summary>
             Composite Property for <c>Contract</c> at ContractIdSource
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.Bases.ItemInProjectChildEntityTypes.Project">
            <summary>
             Composite Property for <c>Project</c> at ProjectIdSource
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.Bases.ItemInProjectChildEntityTypes.Item">
            <summary>
             Composite Property for <c>Item</c> at ItemIdSource
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.ItemInProjectFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:RLM.Contruction.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:RLM.Contruction.Entities.ItemInProject"/> object.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInProjectFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ItemInProjectFilterBuilder class.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInProjectFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ItemInProjectFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInProjectFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ItemInProjectFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.ItemInProjectParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:RLM.Contruction.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:RLM.Contruction.Entities.ItemInProject"/> object.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInProjectParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ItemInProjectParameterBuilder class.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInProjectParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ItemInProjectParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemInProjectParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ItemInProjectParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.ItemMovementProviderBase">
            <summary>
             This class is the base class for any <see cref="T:RLM.Contruction.Data.Bases.ItemMovementProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.UserGroupChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>RLM.Contruction.Entities.UserGroup</c>
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.Bases.UserGroupChildEntityTypes.UserCollection">
            <summary>
             Collection of <c>UserGroup</c> as OneToMany for UserCollection
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.UserGroupFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:RLM.Contruction.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:RLM.Contruction.Entities.UserGroup"/> object.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UserGroupFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the UserGroupFilterBuilder class.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UserGroupFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the UserGroupFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UserGroupFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the UserGroupFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.UserGroupParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:RLM.Contruction.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:RLM.Contruction.Entities.UserGroup"/> object.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UserGroupParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the UserGroupParameterBuilder class.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UserGroupParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the UserGroupParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UserGroupParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the UserGroupParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.PartnerChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>RLM.Contruction.Entities.Partner</c>
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.PartnerFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:RLM.Contruction.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:RLM.Contruction.Entities.Partner"/> object.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.PartnerFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the PartnerFilterBuilder class.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.PartnerFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the PartnerFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.PartnerFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the PartnerFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.PartnerParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:RLM.Contruction.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:RLM.Contruction.Entities.Partner"/> object.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.PartnerParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the PartnerParameterBuilder class.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.PartnerParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the PartnerParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.PartnerParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the PartnerParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.ContactorChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>RLM.Contruction.Entities.Contactor</c>
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.ContactorFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:RLM.Contruction.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:RLM.Contruction.Entities.Contactor"/> object.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContactorFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ContactorFilterBuilder class.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContactorFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ContactorFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContactorFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ContactorFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.ContactorParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:RLM.Contruction.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:RLM.Contruction.Entities.Contactor"/> object.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContactorParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ContactorParameterBuilder class.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContactorParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ContactorParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ContactorParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ContactorParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.ItemChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>RLM.Contruction.Entities.Item</c>
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.Bases.ItemChildEntityTypes.Unit">
            <summary>
             Composite Property for <c>Unit</c> at BaseUnitIdSource
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.Bases.ItemChildEntityTypes.Group">
            <summary>
             Composite Property for <c>Group</c> at GroupIdSource
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.Bases.ItemChildEntityTypes.RepositoryCollection_From_ItemInRepository">
            <summary>
             Collection of <c>Item</c> as ManyToMany for RepositoryCollection_From_ItemInRepository
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.Bases.ItemChildEntityTypes.ItemMovementCollection">
            <summary>
             Collection of <c>Item</c> as OneToMany for ItemMovementCollection
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.Bases.ItemChildEntityTypes.ItemInProjectCollection">
            <summary>
             Collection of <c>Item</c> as OneToMany for ItemInProjectCollection
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.Bases.ItemChildEntityTypes.ItemInRepositoryCollection">
            <summary>
             Collection of <c>Item</c> as OneToMany for ItemInRepositoryCollection
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.ItemFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:RLM.Contruction.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:RLM.Contruction.Entities.Item"/> object.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ItemFilterBuilder class.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ItemFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ItemFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.ItemParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:RLM.Contruction.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:RLM.Contruction.Entities.Item"/> object.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ItemParameterBuilder class.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ItemParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ItemParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ItemParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.RepositoryProviderBase">
            <summary>
             This class is the base class for any <see cref="T:RLM.Contruction.Data.Bases.RepositoryProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.RepositoryProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:RLM.Contruction.Data.Bases.RepositoryProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RepositoryProviderBaseCore.GetByItemIdFromItemInRepository(System.Int64)">
            <summary>
            	Gets Repository objects from the datasource by ItemId in the
            	ItemInRepository table. Table Repository is related to table Item
            	through the (M:N) relationship defined in the ItemInRepository table.
            </summary>
            <param name="itemId"></param>
            <returns>Returns a typed collection of Repository objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RepositoryProviderBaseCore.GetByItemIdFromItemInRepository(System.Int64,System.Int32,System.Int32)">
            <summary>
            	Gets RLM.Contruction.Entities.Repository objects from the datasource by ItemId in the
            	ItemInRepository table. Table Repository is related to table Item
            	through the (M:N) relationship defined in the ItemInRepository table.
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="itemId"></param>
            <remarks></remarks>
            <returns>Returns a TList of Repository objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RepositoryProviderBaseCore.GetByItemIdFromItemInRepository(RLM.Contruction.Data.TransactionManager,System.Int64)">
            <summary>
            	Gets Repository objects from the datasource by ItemId in the
            	ItemInRepository table. Table Repository is related to table Item
            	through the (M:N) relationship defined in the ItemInRepository table.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="itemId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of Repository objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RepositoryProviderBaseCore.GetByItemIdFromItemInRepository(RLM.Contruction.Data.TransactionManager,System.Int64,System.Int32,System.Int32)">
            <summary>
            	Gets Repository objects from the datasource by ItemId in the
            	ItemInRepository table. Table Repository is related to table Item
            	through the (M:N) relationship defined in the ItemInRepository table.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="itemId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Repository objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RepositoryProviderBaseCore.GetByItemIdFromItemInRepository(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Repository objects from the datasource by ItemId in the
            	ItemInRepository table. Table Repository is related to table Item
            	through the (M:N) relationship defined in the ItemInRepository table.
            </summary>
            <param name="itemId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Repository objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RepositoryProviderBaseCore.GetByItemIdFromItemInRepository(RLM.Contruction.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Repository objects from the datasource by ItemId in the
            	ItemInRepository table. Table Repository is related to table Item
            	through the (M:N) relationship defined in the ItemInRepository table.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <param name="itemId"></param>
            <remarks></remarks>
            <returns>Returns a TList of Repository objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RepositoryProviderBaseCore.Delete(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.RepositoryKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RepositoryProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="repositoryId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RepositoryProviderBaseCore.Delete(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="repositoryId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RepositoryProviderBaseCore.Get(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.RepositoryKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RepositoryProviderBaseCore.GetByRepositoryId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_RepositoryGroups index.
            </summary>
            <param name="repositoryId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Repository"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RepositoryProviderBaseCore.GetByRepositoryId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_RepositoryGroups index.
            </summary>
            <param name="repositoryId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Repository"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RepositoryProviderBaseCore.GetByRepositoryId(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_RepositoryGroups index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="repositoryId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Repository"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RepositoryProviderBaseCore.GetByRepositoryId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_RepositoryGroups index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="repositoryId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Repository"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RepositoryProviderBaseCore.GetByRepositoryId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_RepositoryGroups index.
            </summary>
            <param name="repositoryId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Repository"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RepositoryProviderBaseCore.GetByRepositoryId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_RepositoryGroups index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="repositoryId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Repository"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RepositoryProviderBaseCore.Fill(System.Data.IDataReader,RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Repository},System.Int32,System.Int32)">
            <summary>
            Fill a RLM.Contruction.Entities.TList&lt;Repository&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:RLM.Contruction.Entities.TList`1"/></returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RepositoryProviderBaseCore.RefreshEntity(System.Data.IDataReader,RLM.Contruction.Entities.Repository)">
            <summary>
            Refreshes the <see cref="T:RLM.Contruction.Entities.Repository"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.Repository"/> object to refresh.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RepositoryProviderBaseCore.RefreshEntity(System.Data.DataSet,RLM.Contruction.Entities.Repository)">
            <summary>
            Refreshes the <see cref="T:RLM.Contruction.Entities.Repository"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.Repository"/> object.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RepositoryProviderBaseCore.DeepLoad(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.Repository,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[],RLM.Contruction.Data.Bases.ChildEntityTypesList)">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.Repository"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">RLM.Contruction.Entities.Repository Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RepositoryProviderBaseCore.DeepSave(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.Repository,RLM.Contruction.Data.DeepSaveType,System.Type[],RLM.Contruction.Data.Bases.ChildEntityTypesList)">
            <summary>
            Deep Save the entire object graph of the RLM.Contruction.Entities.Repository object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">RLM.Contruction.Entities.Repository instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">RLM.Contruction.Entities.Repository Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:RLM.Contruction.Data.SqlFilterParameterCollection">
            <summary>
            A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlFilterParameterCollection.SetCurrentColumn(System.Object)">
            <summary>
            Sets the CurrentColumn property.
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:RLM.Contruction.Data.SqlFilterParameterCollection.GetParameter(System.String)">
            <summary>
            Gets the next parameter name for the specified value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:RLM.Contruction.Data.SqlFilterParameterCollection.currentColumn">
            <summary>
            The CurrentColumn member variable.
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.SqlFilterParameterCollection.filterExpression">
            <summary>
            The FilterExpression member variable.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.SqlFilterParameterCollection.CurrentColumn">
            <summary>
            Gets the CurrentColumn property.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.SqlFilterParameterCollection.FilterExpression">
            <summary>
            Gets or sets the FilterExpression property.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.SqlFilterParameter">
            <summary>
            Represents the information needed for a database command parameter.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlFilterParameter.#ctor(System.Enum,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the SqlFilterParameter class.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="index"></param>
        </member>
        <member name="F:RLM.Contruction.Data.SqlFilterParameter.column">
            <summary>
            The Column member variable.
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.SqlFilterParameter.parameterValue">
            <summary>
            The Value member variable.
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.SqlFilterParameter.parameterIndex">
            <summary>
            The Index member variable.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.SqlFilterParameter.Column">
            <summary>
            Gets or sets the Column property.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.SqlFilterParameter.Value">
            <summary>
            Gets or sets the Value property.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.SqlFilterParameter.Index">
            <summary>
            Gets the parameter index.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.SqlFilterParameter.Name">
            <summary>
            Gets the parameter name.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.SqlFilterParameter.DbType">
            <summary>
            Gets the <see cref="T:System.Data.SqlDbType"/> for
            the current entity column enumeration value.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.ExpressionParserBase">
            <summary>
            Provides the base functionality required to parse search terms.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.ExpressionParserBase.#ctor(System.String,RLM.Contruction.Data.SqlComparisonType,System.Boolean)">
            <summary>
            Initializes a new instance of the ExpressionParserBase class.
            </summary>
            <param name="propertyName"></param>
            <param name="comparisonType"></param>
            <param name="ignoreCase"></param>
        </member>
        <member name="M:RLM.Contruction.Data.ExpressionParserBase.ParseCore(System.String)">
            <summary>
            Appends the specified search text to the current expression.
            </summary>
            <param name="searchText">The search text to append.</param>
        </member>
        <member name="M:RLM.Contruction.Data.ExpressionParserBase.ParseQuotes(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Parses quoted search terms.
            </summary>
            <param name="searchText"></param>
            <param name="quotedValues"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.ExpressionParserBase.IsKeyWord(System.String)">
            <summary>
            Determines whether the specified word is a reserved keyword.
            </summary>
            <param name="word"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.ExpressionParserBase.AppendOr">
            <summary>
            Appends an OR expression.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.ExpressionParserBase.AppendAnd">
            <summary>
            Appends an AND expression.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.ExpressionParserBase.AppendSpace">
            <summary>
            Appends an expression separator.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.ExpressionParserBase.OpenGrouping">
            <summary>
            Appends a group opened expression.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.ExpressionParserBase.CloseGrouping">
            <summary>
            Appends a group closed expression.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.ExpressionParserBase.AppendSearchText(System.String)">
            <summary>
            Appends the specified search text to the expression.
            </summary>
            <param name="searchText">The search text to append.</param>
        </member>
        <member name="F:RLM.Contruction.Data.ExpressionParserBase.ignoreCase">
            <summary>
            The IgnoreCase member variable.
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.ExpressionParserBase.propertyName">
            <summary>
            The PropertyName member variable.
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.ExpressionParserBase.comparisonType">
            <summary>
            The ComparisonType member variable.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.ExpressionParserBase.IgnoreCase">
            <summary>
            Gets or sets the IgnoreCase property.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.ExpressionParserBase.PropertyName">
            <summary>
            Gets or sets the PropertyName property.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.ExpressionParserBase.ComparisonType">
            <summary>
            Gets or sets the ComparisonType property.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.UnitProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:RLM.Contruction.Data.Bases.UnitProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitProviderBaseCore.GetByToUnitIdFromUnitConvertor(System.Int32)">
            <summary>
            	Gets Unit objects from the datasource by ToUnitId in the
            	UnitConvertor table. Table Unit is related to table Unit
            	through the (M:N) relationship defined in the UnitConvertor table.
            </summary>
            <param name="toUnitId"></param>
            <returns>Returns a typed collection of Unit objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitProviderBaseCore.GetByToUnitIdFromUnitConvertor(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets RLM.Contruction.Entities.Unit objects from the datasource by ToUnitId in the
            	UnitConvertor table. Table Unit is related to table Unit
            	through the (M:N) relationship defined in the UnitConvertor table.
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="toUnitId"></param>
            <remarks></remarks>
            <returns>Returns a TList of Unit objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitProviderBaseCore.GetByToUnitIdFromUnitConvertor(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets Unit objects from the datasource by ToUnitId in the
            	UnitConvertor table. Table Unit is related to table Unit
            	through the (M:N) relationship defined in the UnitConvertor table.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="toUnitId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of Unit objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitProviderBaseCore.GetByToUnitIdFromUnitConvertor(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets Unit objects from the datasource by ToUnitId in the
            	UnitConvertor table. Table Unit is related to table Unit
            	through the (M:N) relationship defined in the UnitConvertor table.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="toUnitId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Unit objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitProviderBaseCore.GetByToUnitIdFromUnitConvertor(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Unit objects from the datasource by ToUnitId in the
            	UnitConvertor table. Table Unit is related to table Unit
            	through the (M:N) relationship defined in the UnitConvertor table.
            </summary>
            <param name="toUnitId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Unit objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitProviderBaseCore.GetByToUnitIdFromUnitConvertor(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Unit objects from the datasource by ToUnitId in the
            	UnitConvertor table. Table Unit is related to table Unit
            	through the (M:N) relationship defined in the UnitConvertor table.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <param name="toUnitId"></param>
            <remarks></remarks>
            <returns>Returns a TList of Unit objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitProviderBaseCore.GetByFromUnitIdFromUnitConvertor(System.Int32)">
            <summary>
            	Gets Unit objects from the datasource by FromUnitId in the
            	UnitConvertor table. Table Unit is related to table Unit
            	through the (M:N) relationship defined in the UnitConvertor table.
            </summary>
            <param name="fromUnitId"></param>
            <returns>Returns a typed collection of Unit objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitProviderBaseCore.GetByFromUnitIdFromUnitConvertor(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets RLM.Contruction.Entities.Unit objects from the datasource by FromUnitId in the
            	UnitConvertor table. Table Unit is related to table Unit
            	through the (M:N) relationship defined in the UnitConvertor table.
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="fromUnitId"></param>
            <remarks></remarks>
            <returns>Returns a TList of Unit objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitProviderBaseCore.GetByFromUnitIdFromUnitConvertor(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets Unit objects from the datasource by FromUnitId in the
            	UnitConvertor table. Table Unit is related to table Unit
            	through the (M:N) relationship defined in the UnitConvertor table.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="fromUnitId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of Unit objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitProviderBaseCore.GetByFromUnitIdFromUnitConvertor(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets Unit objects from the datasource by FromUnitId in the
            	UnitConvertor table. Table Unit is related to table Unit
            	through the (M:N) relationship defined in the UnitConvertor table.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="fromUnitId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Unit objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitProviderBaseCore.GetByFromUnitIdFromUnitConvertor(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Unit objects from the datasource by FromUnitId in the
            	UnitConvertor table. Table Unit is related to table Unit
            	through the (M:N) relationship defined in the UnitConvertor table.
            </summary>
            <param name="fromUnitId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Unit objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitProviderBaseCore.GetByFromUnitIdFromUnitConvertor(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Unit objects from the datasource by FromUnitId in the
            	UnitConvertor table. Table Unit is related to table Unit
            	through the (M:N) relationship defined in the UnitConvertor table.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <param name="fromUnitId"></param>
            <remarks></remarks>
            <returns>Returns a TList of Unit objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitProviderBaseCore.Delete(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.UnitKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="unitId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitProviderBaseCore.Delete(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="unitId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitProviderBaseCore.Get(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.UnitKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitProviderBaseCore.GetByUnitId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_Units index.
            </summary>
            <param name="unitId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Unit"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitProviderBaseCore.GetByUnitId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Units index.
            </summary>
            <param name="unitId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Unit"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitProviderBaseCore.GetByUnitId(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Units index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="unitId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Unit"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitProviderBaseCore.GetByUnitId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Units index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="unitId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Unit"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitProviderBaseCore.GetByUnitId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Units index.
            </summary>
            <param name="unitId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Unit"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitProviderBaseCore.GetByUnitId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Units index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="unitId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Unit"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitProviderBaseCore.Fill(System.Data.IDataReader,RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Unit},System.Int32,System.Int32)">
            <summary>
            Fill a RLM.Contruction.Entities.TList&lt;Unit&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:RLM.Contruction.Entities.TList`1"/></returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitProviderBaseCore.RefreshEntity(System.Data.IDataReader,RLM.Contruction.Entities.Unit)">
            <summary>
            Refreshes the <see cref="T:RLM.Contruction.Entities.Unit"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.Unit"/> object to refresh.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitProviderBaseCore.RefreshEntity(System.Data.DataSet,RLM.Contruction.Entities.Unit)">
            <summary>
            Refreshes the <see cref="T:RLM.Contruction.Entities.Unit"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.Unit"/> object.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitProviderBaseCore.DeepLoad(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.Unit,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[],RLM.Contruction.Data.Bases.ChildEntityTypesList)">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.Unit"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">RLM.Contruction.Entities.Unit Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitProviderBaseCore.DeepSave(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.Unit,RLM.Contruction.Data.DeepSaveType,System.Type[],RLM.Contruction.Data.Bases.ChildEntityTypesList)">
            <summary>
            Deep Save the entire object graph of the RLM.Contruction.Entities.Unit object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">RLM.Contruction.Entities.Unit instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">RLM.Contruction.Entities.Unit Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.UnitChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>RLM.Contruction.Entities.Unit</c>
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.Bases.UnitChildEntityTypes.UnitConvertorCollectionByToUnitId">
            <summary>
             Collection of <c>Unit</c> as OneToMany for UnitConvertorCollection
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.Bases.UnitChildEntityTypes.ItemCollectionByUsedUnitId">
            <summary>
             Collection of <c>Unit</c> as OneToMany for ItemCollection
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.Bases.UnitChildEntityTypes.UnitCollection_From_UnitConvertormUnitIdFromUnitConvertor">
            <summary>
             Collection of <c>Unit</c> as ManyToMany for UnitCollection_From_UnitConvertor
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.Bases.UnitChildEntityTypes.UnitCollection_From_UnitConvertornitIdFromUnitConvertor">
            <summary>
             Collection of <c>Unit</c> as ManyToMany for UnitCollection_From_UnitConvertor
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.Bases.UnitChildEntityTypes.ItemCollectionByBaseUnitId">
            <summary>
             Collection of <c>Unit</c> as OneToMany for ItemCollection
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.Bases.UnitChildEntityTypes.UnitConvertorCollectionByFromUnitId">
            <summary>
             Collection of <c>Unit</c> as OneToMany for UnitConvertorCollection
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.UnitFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:RLM.Contruction.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:RLM.Contruction.Entities.Unit"/> object.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the UnitFilterBuilder class.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the UnitFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the UnitFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.UnitParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:RLM.Contruction.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:RLM.Contruction.Entities.Unit"/> object.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the UnitParameterBuilder class.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the UnitParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the UnitParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:RLM.Contruction.Data.SqlUtil">
            <summary>
            Provides utility methods for generating SQL expressions.
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.SqlUtil.AND">
            <summary>
            SQL AND keyword.
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.SqlUtil.OR">
            <summary>
            SQL OR keyword.
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.SqlUtil.ASC">
            <summary>
            SQL ASC keyword.
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.SqlUtil.DESC">
            <summary>
            SQL DESC keyword.
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.SqlUtil.NULL">
            <summary>
            SQL NULL keyword.
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.SqlUtil.TOKEN">
            <summary>
            Used to represent quoted search terms.
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.SqlUtil.QUOTE">
            <summary>
            Delimiter for quoted search terms.
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.SqlUtil.STAR">
            <summary>
            Used as wildcard character within search text.
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.SqlUtil.WILD">
            <summary>
            SQL wildcard character.
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.SqlUtil.LEFT">
            <summary>
            SQL grouping open character.
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.SqlUtil.RIGHT">
            <summary>
            SQL grouping close character.
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.SqlUtil.COMMA">
            <summary>
            Delimiter for optional search terms.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlUtil.Equals(System.String,System.String)">
            <summary>
            Creates an <see cref="F:RLM.Contruction.Data.SqlComparisonType.Equals"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlUtil.Equals(System.String,System.String,System.Boolean)">
            <summary>
            Creates an <see cref="F:RLM.Contruction.Data.SqlComparisonType.Equals"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlUtil.Equals(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates an <see cref="F:RLM.Contruction.Data.SqlComparisonType.Equals"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlUtil.Equals(System.String)">
            <summary>
            Encodes the value for a <see cref="F:RLM.Contruction.Data.SqlComparisonType.Equals"/> expression.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlUtil.Contains(System.String,System.String)">
            <summary>
            Creates a <see cref="F:RLM.Contruction.Data.SqlComparisonType.Contains"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlUtil.Contains(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:RLM.Contruction.Data.SqlComparisonType.Contains"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlUtil.Contains(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="F:RLM.Contruction.Data.SqlComparisonType.Contains"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlUtil.Contains(System.String)">
            <summary>
            Encodes the value for a <see cref="F:RLM.Contruction.Data.SqlComparisonType.Contains"/> expression.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlUtil.StartsWith(System.String,System.String)">
            <summary>
            Creates a <see cref="F:RLM.Contruction.Data.SqlComparisonType.StartsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlUtil.StartsWith(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:RLM.Contruction.Data.SqlComparisonType.StartsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlUtil.StartsWith(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="F:RLM.Contruction.Data.SqlComparisonType.StartsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlUtil.StartsWith(System.String)">
            <summary>
            Encodes the value for a <see cref="F:RLM.Contruction.Data.SqlComparisonType.StartsWith"/> expression.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlUtil.EndsWith(System.String,System.String)">
            <summary>
            Creates a <see cref="F:RLM.Contruction.Data.SqlComparisonType.EndsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlUtil.EndsWith(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:RLM.Contruction.Data.SqlComparisonType.EndsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlUtil.EndsWith(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="F:RLM.Contruction.Data.SqlComparisonType.EndsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlUtil.EndsWith(System.String)">
            <summary>
            Encodes the value for a <see cref="F:RLM.Contruction.Data.SqlComparisonType.EndsWith"/> expression.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlUtil.Like(System.String,System.String)">
            <summary>
            Creates a <see cref="F:RLM.Contruction.Data.SqlComparisonType.Like"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlUtil.Like(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:RLM.Contruction.Data.SqlComparisonType.Like"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlUtil.Like(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="F:RLM.Contruction.Data.SqlComparisonType.Like"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlUtil.Like(System.String)">
            <summary>
            Encodes the value for a <see cref="F:RLM.Contruction.Data.SqlComparisonType.Like"/> expression.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlUtil.IsNull(System.String)">
            <summary>
            Creates an IS NULL expression.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlUtil.IsNotNull(System.String)">
            <summary>
            Creates an IS NOT NULL expression.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlUtil.Encode(System.String)">
            <summary>
            Encodes the specified value for use in SQL expressions.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlUtil.Encode(System.String,System.Boolean)">
            <summary>
            Encodes the specified value for use in SQL expressions and
            optionally surrounds the value with single-quotes.
            </summary>
            <param name="value"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlUtil.Encode(System.String[])">
            <summary>
            Encodes the specified values for use in SQL expressions.
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlUtil.Encode(System.String[],System.Boolean)">
            <summary>
            Encodes the specified values for use in SQL expressions and
            optionally surrounds the value with single-quotes.
            </summary>
            <param name="values"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlUtil.GetLikeFormat(System.Boolean)">
            <summary>
            Gets the like format string.
            </summary>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlUtil.GetLikeFormat(System.Boolean,System.Boolean)">
            <summary>
            Gets the like format string.
            </summary>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlUtil.GetEqualFormat(System.Boolean)">
            <summary>
            Gets the equal format string.
            </summary>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlUtil.GetEqualFormat(System.Boolean,System.Boolean)">
            <summary>
            Gets the equal format string.
            </summary>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="T:RLM.Contruction.Data.SqlComparisonType">
            <summary>
            Enumeration of SQL expression comparison types.
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.SqlComparisonType.Equals">
            <summary>
            Represents = value.
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.SqlComparisonType.StartsWith">
            <summary>
            Represents LIKE value%.
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.SqlComparisonType.EndsWith">
            <summary>
            Represents LIKE %value.
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.SqlComparisonType.Contains">
            <summary>
            Represents LIKE %value%.
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.SqlComparisonType.Like">
            <summary>
            Represents LIKE value.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.EntityViewProviderBase`1">
            <summary>
            Serves as the base class for objects that provide data access functionality.
            Provides a default implementation of the IEntityViewProvider&lt;Entity&gt; interface.
            </summary>
            <typeparam name="Entity">The class of the business object being accessed.</typeparam>
            <remarks>
            This file is generated once and will never be overwritten.
            </remarks>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.RepositoryChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>RLM.Contruction.Entities.Repository</c>
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.Bases.RepositoryChildEntityTypes.ItemMovementCollectionByFromRepositoryId">
            <summary>
             Collection of <c>Repository</c> as OneToMany for ItemMovementCollection
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.Bases.RepositoryChildEntityTypes.ItemMovementCollectionByToRepositoryId">
            <summary>
             Collection of <c>Repository</c> as OneToMany for ItemMovementCollection
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.Bases.RepositoryChildEntityTypes.ItemCollection_From_ItemInRepository">
            <summary>
             Collection of <c>Repository</c> as ManyToMany for ItemCollection_From_ItemInRepository
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.Bases.RepositoryChildEntityTypes.ItemInRepositoryCollection">
            <summary>
             Collection of <c>Repository</c> as OneToMany for ItemInRepositoryCollection
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.RepositoryFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:RLM.Contruction.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:RLM.Contruction.Entities.Repository"/> object.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RepositoryFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the RepositoryFilterBuilder class.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RepositoryFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the RepositoryFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RepositoryFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the RepositoryFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.RepositoryParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:RLM.Contruction.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:RLM.Contruction.Entities.Repository"/> object.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RepositoryParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the RepositoryParameterBuilder class.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RepositoryParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the RepositoryParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RepositoryParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the RepositoryParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.RoleProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:RLM.Contruction.Data.Bases.RoleProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleProviderBaseCore.Delete(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.RoleKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="roleId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleProviderBaseCore.Delete(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="roleId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleProviderBaseCore.Get(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.RoleKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleProviderBaseCore.GetByRoleId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_Roles index.
            </summary>
            <param name="roleId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Role"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleProviderBaseCore.GetByRoleId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Roles index.
            </summary>
            <param name="roleId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Role"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleProviderBaseCore.GetByRoleId(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Roles index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="roleId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Role"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleProviderBaseCore.GetByRoleId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Roles index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="roleId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Role"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleProviderBaseCore.GetByRoleId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Roles index.
            </summary>
            <param name="roleId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Role"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleProviderBaseCore.GetByRoleId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Roles index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="roleId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Role"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleProviderBaseCore.Fill(System.Data.IDataReader,RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Role},System.Int32,System.Int32)">
            <summary>
            Fill a RLM.Contruction.Entities.TList&lt;Role&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:RLM.Contruction.Entities.TList`1"/></returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleProviderBaseCore.RefreshEntity(System.Data.IDataReader,RLM.Contruction.Entities.Role)">
            <summary>
            Refreshes the <see cref="T:RLM.Contruction.Entities.Role"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.Role"/> object to refresh.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleProviderBaseCore.RefreshEntity(System.Data.DataSet,RLM.Contruction.Entities.Role)">
            <summary>
            Refreshes the <see cref="T:RLM.Contruction.Entities.Role"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.Role"/> object.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleProviderBaseCore.DeepLoad(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.Role,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[],RLM.Contruction.Data.Bases.ChildEntityTypesList)">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.Role"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">RLM.Contruction.Entities.Role Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleProviderBaseCore.DeepSave(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.Role,RLM.Contruction.Data.DeepSaveType,System.Type[],RLM.Contruction.Data.Bases.ChildEntityTypesList)">
            <summary>
            Deep Save the entire object graph of the RLM.Contruction.Entities.Role object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">RLM.Contruction.Entities.Role instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">RLM.Contruction.Entities.Role Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.RoleChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>RLM.Contruction.Entities.Role</c>
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.Bases.RoleChildEntityTypes.RoleOfStaffCollection">
            <summary>
             Collection of <c>Role</c> as OneToMany for RoleOfStaffCollection
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.RoleFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:RLM.Contruction.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:RLM.Contruction.Entities.Role"/> object.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the RoleFilterBuilder class.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the RoleFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the RoleFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.RoleParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:RLM.Contruction.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:RLM.Contruction.Entities.Role"/> object.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the RoleParameterBuilder class.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the RoleParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the RoleParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.RoleOfStaffChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>RLM.Contruction.Entities.RoleOfStaff</c>
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.Bases.RoleOfStaffChildEntityTypes.Role">
            <summary>
             Composite Property for <c>Role</c> at RoleIdSource
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.Bases.RoleOfStaffChildEntityTypes.Staff">
            <summary>
             Composite Property for <c>Staff</c> at StaffIdSource
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.RoleOfStaffFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:RLM.Contruction.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:RLM.Contruction.Entities.RoleOfStaff"/> object.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleOfStaffFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the RoleOfStaffFilterBuilder class.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleOfStaffFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the RoleOfStaffFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleOfStaffFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the RoleOfStaffFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.RoleOfStaffParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:RLM.Contruction.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:RLM.Contruction.Entities.RoleOfStaff"/> object.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleOfStaffParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the RoleOfStaffParameterBuilder class.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleOfStaffParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the RoleOfStaffParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.RoleOfStaffParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the RoleOfStaffParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.UnitConvertorProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:RLM.Contruction.Data.Bases.UnitConvertorProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitConvertorProviderBaseCore.Delete(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.UnitConvertorKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitConvertorProviderBaseCore.Delete(System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="fromUnitId">. Primary Key.</param>
            <param name="toUnitId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitConvertorProviderBaseCore.Delete(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="fromUnitId">. Primary Key.</param>
            <param name="toUnitId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitConvertorProviderBaseCore.GetByFromUnitId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_UnitConvertors_Units key.
            	FK_UnitConvertors_Units Description: 
            </summary>
            <param name="fromUnitId"></param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.UnitConvertor objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitConvertorProviderBaseCore.GetByFromUnitId(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_UnitConvertors_Units key.
            	FK_UnitConvertors_Units Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="fromUnitId"></param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.UnitConvertor objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitConvertorProviderBaseCore.GetByFromUnitId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_UnitConvertors_Units key.
            	FK_UnitConvertors_Units Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="fromUnitId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.UnitConvertor objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitConvertorProviderBaseCore.GetByFromUnitId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_UnitConvertors_Units key.
            	fKUnitConvertorsUnits Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="fromUnitId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.UnitConvertor objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitConvertorProviderBaseCore.GetByFromUnitId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_UnitConvertors_Units key.
            	fKUnitConvertorsUnits Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="fromUnitId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.UnitConvertor objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitConvertorProviderBaseCore.GetByFromUnitId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_UnitConvertors_Units key.
            	FK_UnitConvertors_Units Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="fromUnitId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.UnitConvertor objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitConvertorProviderBaseCore.GetByToUnitId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_UnitConvertors_Units1 key.
            	FK_UnitConvertors_Units1 Description: 
            </summary>
            <param name="toUnitId"></param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.UnitConvertor objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitConvertorProviderBaseCore.GetByToUnitId(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_UnitConvertors_Units1 key.
            	FK_UnitConvertors_Units1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="toUnitId"></param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.UnitConvertor objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitConvertorProviderBaseCore.GetByToUnitId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_UnitConvertors_Units1 key.
            	FK_UnitConvertors_Units1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="toUnitId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.UnitConvertor objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitConvertorProviderBaseCore.GetByToUnitId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_UnitConvertors_Units1 key.
            	fKUnitConvertorsUnits1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="toUnitId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.UnitConvertor objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitConvertorProviderBaseCore.GetByToUnitId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_UnitConvertors_Units1 key.
            	fKUnitConvertorsUnits1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="toUnitId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.UnitConvertor objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitConvertorProviderBaseCore.GetByToUnitId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_UnitConvertors_Units1 key.
            	FK_UnitConvertors_Units1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="toUnitId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.UnitConvertor objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitConvertorProviderBaseCore.Get(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.UnitConvertorKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitConvertorProviderBaseCore.GetByFromUnitIdToUnitId(System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_UnitConvertors index.
            </summary>
            <param name="fromUnitId"></param>
            <param name="toUnitId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.UnitConvertor"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitConvertorProviderBaseCore.GetByFromUnitIdToUnitId(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_UnitConvertors index.
            </summary>
            <param name="fromUnitId"></param>
            <param name="toUnitId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.UnitConvertor"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitConvertorProviderBaseCore.GetByFromUnitIdToUnitId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_UnitConvertors index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="fromUnitId"></param>
            <param name="toUnitId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.UnitConvertor"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitConvertorProviderBaseCore.GetByFromUnitIdToUnitId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_UnitConvertors index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="fromUnitId"></param>
            <param name="toUnitId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.UnitConvertor"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitConvertorProviderBaseCore.GetByFromUnitIdToUnitId(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_UnitConvertors index.
            </summary>
            <param name="fromUnitId"></param>
            <param name="toUnitId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.UnitConvertor"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitConvertorProviderBaseCore.GetByFromUnitIdToUnitId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_UnitConvertors index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="fromUnitId"></param>
            <param name="toUnitId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.UnitConvertor"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitConvertorProviderBaseCore.Fill(System.Data.IDataReader,RLM.Contruction.Entities.TList{RLM.Contruction.Entities.UnitConvertor},System.Int32,System.Int32)">
            <summary>
            Fill a RLM.Contruction.Entities.TList&lt;UnitConvertor&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:RLM.Contruction.Entities.TList`1"/></returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitConvertorProviderBaseCore.RefreshEntity(System.Data.IDataReader,RLM.Contruction.Entities.UnitConvertor)">
            <summary>
            Refreshes the <see cref="T:RLM.Contruction.Entities.UnitConvertor"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.UnitConvertor"/> object to refresh.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitConvertorProviderBaseCore.RefreshEntity(System.Data.DataSet,RLM.Contruction.Entities.UnitConvertor)">
            <summary>
            Refreshes the <see cref="T:RLM.Contruction.Entities.UnitConvertor"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.UnitConvertor"/> object.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitConvertorProviderBaseCore.DeepLoad(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.UnitConvertor,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[],RLM.Contruction.Data.Bases.ChildEntityTypesList)">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.UnitConvertor"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">RLM.Contruction.Entities.UnitConvertor Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitConvertorProviderBaseCore.DeepSave(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.UnitConvertor,RLM.Contruction.Data.DeepSaveType,System.Type[],RLM.Contruction.Data.Bases.ChildEntityTypesList)">
            <summary>
            Deep Save the entire object graph of the RLM.Contruction.Entities.UnitConvertor object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">RLM.Contruction.Entities.UnitConvertor instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">RLM.Contruction.Entities.UnitConvertor Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.UnitConvertorChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>RLM.Contruction.Entities.UnitConvertor</c>
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.Bases.UnitConvertorChildEntityTypes.Unit">
            <summary>
             Composite Property for <c>Unit</c> at FromUnitIdSource
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.UnitConvertorFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:RLM.Contruction.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:RLM.Contruction.Entities.UnitConvertor"/> object.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitConvertorFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the UnitConvertorFilterBuilder class.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitConvertorFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the UnitConvertorFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitConvertorFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the UnitConvertorFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.UnitConvertorParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:RLM.Contruction.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:RLM.Contruction.Entities.UnitConvertor"/> object.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitConvertorParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the UnitConvertorParameterBuilder class.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitConvertorParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the UnitConvertorParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UnitConvertorParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the UnitConvertorParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.UnitConvertorProviderBase">
            <summary>
             This class is the base class for any <see cref="T:RLM.Contruction.Data.Bases.UnitConvertorProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.UserProviderBase">
            <summary>
             This class is the base class for any <see cref="T:RLM.Contruction.Data.Bases.UserProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.UserProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:RLM.Contruction.Data.Bases.UserProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UserProviderBaseCore.Delete(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.UserKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UserProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="userId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UserProviderBaseCore.Delete(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="userId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UserProviderBaseCore.GetByUserGroupId(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_Users_UserGroups key.
            	FK_Users_UserGroups Description: 
            </summary>
            <param name="userGroupId"></param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.User objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UserProviderBaseCore.GetByUserGroupId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_Users_UserGroups key.
            	FK_Users_UserGroups Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="userGroupId"></param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.User objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UserProviderBaseCore.GetByUserGroupId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Users_UserGroups key.
            	FK_Users_UserGroups Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="userGroupId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.User objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UserProviderBaseCore.GetByUserGroupId(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Users_UserGroups key.
            	fKUsersUserGroups Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="userGroupId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.User objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UserProviderBaseCore.GetByUserGroupId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Users_UserGroups key.
            	fKUsersUserGroups Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="userGroupId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.User objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UserProviderBaseCore.GetByUserGroupId(RLM.Contruction.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Users_UserGroups key.
            	FK_Users_UserGroups Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="userGroupId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.User objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UserProviderBaseCore.Get(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.UserKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UserProviderBaseCore.GetByUserId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_Users index.
            </summary>
            <param name="userId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.User"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UserProviderBaseCore.GetByUserId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Users index.
            </summary>
            <param name="userId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.User"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UserProviderBaseCore.GetByUserId(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Users index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="userId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.User"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UserProviderBaseCore.GetByUserId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Users index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="userId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.User"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UserProviderBaseCore.GetByUserId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Users index.
            </summary>
            <param name="userId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.User"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UserProviderBaseCore.GetByUserId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Users index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="userId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.User"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UserProviderBaseCore.Fill(System.Data.IDataReader,RLM.Contruction.Entities.TList{RLM.Contruction.Entities.User},System.Int32,System.Int32)">
            <summary>
            Fill a RLM.Contruction.Entities.TList&lt;User&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:RLM.Contruction.Entities.TList`1"/></returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UserProviderBaseCore.RefreshEntity(System.Data.IDataReader,RLM.Contruction.Entities.User)">
            <summary>
            Refreshes the <see cref="T:RLM.Contruction.Entities.User"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.User"/> object to refresh.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UserProviderBaseCore.RefreshEntity(System.Data.DataSet,RLM.Contruction.Entities.User)">
            <summary>
            Refreshes the <see cref="T:RLM.Contruction.Entities.User"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.User"/> object.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UserProviderBaseCore.DeepLoad(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.User,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[],RLM.Contruction.Data.Bases.ChildEntityTypesList)">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.User"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">RLM.Contruction.Entities.User Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UserProviderBaseCore.DeepSave(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.User,RLM.Contruction.Data.DeepSaveType,System.Type[],RLM.Contruction.Data.Bases.ChildEntityTypesList)">
            <summary>
            Deep Save the entire object graph of the RLM.Contruction.Entities.User object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">RLM.Contruction.Entities.User instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">RLM.Contruction.Entities.User Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.RoleProviderBase">
            <summary>
             This class is the base class for any <see cref="T:RLM.Contruction.Data.Bases.RoleProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.StaffChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>RLM.Contruction.Entities.Staff</c>
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.Bases.StaffChildEntityTypes.User">
            <summary>
             Composite Property for <c>User</c> at UserIdSource
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.Bases.StaffChildEntityTypes.RoleOfStaffCollection">
            <summary>
             Collection of <c>Staff</c> as OneToMany for RoleOfStaffCollection
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.StaffFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:RLM.Contruction.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:RLM.Contruction.Entities.Staff"/> object.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.StaffFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the StaffFilterBuilder class.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.StaffFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the StaffFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.StaffFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the StaffFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.StaffParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:RLM.Contruction.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:RLM.Contruction.Entities.Staff"/> object.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.StaffParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the StaffParameterBuilder class.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.StaffParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the StaffParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.StaffParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the StaffParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:RLM.Contruction.Data.TransactionManager">
            <summary>
            TransactionManager is utility class that decorates a <see cref="T:System.Data.IDbTransaction"/> instance.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.TransactionManager.#ctor">
            <summary>
            	Initializes a new instance of the <see cref="T:RLM.Contruction.Data.TransactionManager"/> class.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.TransactionManager.#ctor(System.String)">
            <summary>
            	Initializes a new instance of the <see cref="T:RLM.Contruction.Data.TransactionManager"/> class.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
        </member>
        <member name="M:RLM.Contruction.Data.TransactionManager.BeginTransaction">
            <summary>
            	Begins a transaction.
            </summary>
            <remarks>The default <see cref="T:System.Data.IsolationLevel"/> mode is ReadCommitted</remarks>
            <exception cref="T:System.InvalidOperationException">If a transaction is already open.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.TransactionManager.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            	Begins a transaction.
            </summary>
            <param name="isolationLevel">The <see cref="T:System.Data.IsolationLevel"/> level of the transaction</param>
            <exception cref="T:System.InvalidOperationException">If a transaction is already open.</exception>
            <exception cref="T:System.Data.DataException"></exception>
            <exception cref="T:System.Data.Common.DbException"></exception>
        </member>
        <member name="M:RLM.Contruction.Data.TransactionManager.Commit">
            <summary>
            	Commit the transaction to the datasource.
            </summary>
            <exception cref="T:System.InvalidOperationException">If a transaction is not open.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.TransactionManager.Rollback">
            <summary>
            Rollback the transaction.
            </summary>
            <exception cref="T:System.InvalidOperationException">If a transaction is not open.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.TransactionManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.TransactionManager.ConnectionString">
            <summary>
            	Gets or sets the configuration key for database service.
            </summary>
            <remark>Do not change during a transaction.</remark>
            <exception cref="T:System.InvalidOperationException">
            If an attempt to set when the connection is currently open.
            </exception>
        </member>
        <member name="P:RLM.Contruction.Data.TransactionManager.Database">
            <summary>
            Gets the <see cref="P:RLM.Contruction.Data.TransactionManager.Database"/> instance.
            </summary>
            <value></value>
        </member>
        <member name="P:RLM.Contruction.Data.TransactionManager.TransactionObject">
            <summary>
            Gets the underlying <see cref="T:System.Data.Common.DbTransaction"/> object.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.TransactionManager.IsOpen">
            <summary>
            Gets a value that indicates if a transaction is currently open and operating. 
            </summary>
            <value>Return true if a transaction session is currently open and operating; otherwise false.</value>
        </member>
        <member name="T:RLM.Contruction.Data.StringTokenizer">
            <summary>
            Implements a StringTokenizer class for splitting a string
            into substrings using a set of delimiters.
            </summary>
            <remarks>
            C# version of the java.util.StringTokenizer class.
            Basicly it's a wrapper class around the <c>String.Split</c> method.<pare/>
            It implements all of it's Java equivalent methods apart from those only needed by the Enumeration interface.
            All implemented Java-compilant methods have their C# equivalents in properties. They however differ in names
            since Java uses the (Hungarian-like) notation <c>runMe()</c> while C# uses Camel-cased <c>RunMe()</c> and thus
            Java's <c>nextToken()</c> method is just an alias of the <c>NextToken</c> property.
            </remarks>
        </member>
        <member name="F:RLM.Contruction.Data.StringTokenizer.DefaultDelimiters">
            <summary>
            String conatining the default set of delimiters which are <c>" \t\n\r\f"</c>:
            the space character, the tab character, the newline character, the carriage-return character, and the form-feed character.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.StringTokenizer.#ctor(System.String)">
            <summary>
            Constructs a string tokenizer for the specified string using the <see cref="F:DefaultDelimiters">default delimiters</see>.
            </summary>
            <param name="str">The string to be tokenized.</param>
            <exception cref="T:System.NullReferenceException">Thrown when the passed string is <c>null</c></exception>
        </member>
        <member name="M:RLM.Contruction.Data.StringTokenizer.#ctor(System.String,System.String)">
            <summary>
            Constructs a string tokenizer for the specified string using the given delimiters.
            </summary>
            <param name="str">The string to be tokenized.</param>
            <param name="delims">The delimiters used to tokenize the string (each <see cref="!:char"/> will be used as a delimiter).</param>
            <exception cref="T:System.NullReferenceException">Thrown when the passed string is <c>null</c></exception>
        </member>
        <member name="M:RLM.Contruction.Data.StringTokenizer.#ctor(System.String,System.Char[])">
            <summary>
            Constructs a string tokenizer for the specified string using the given delimiters.
            </summary>
            <param name="str">The string to be tokenized.</param>
            <param name="delims">The delimiters used to tokenize the string.</param>
        </member>
        <member name="M:RLM.Contruction.Data.StringTokenizer.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructs a string tokenizer for the specified string using the given delimiters and optionally returning them as tokens.
            </summary>
            <param name="str">The string to be tokenized.</param>
            <param name="delims">The delimiters used to tokenize the string (each <see cref="!:char"/> will be used as a delimiter).</param>
            <param name="returnDelims">If set to <c>true</c> the encountered delimiters will also be returned as tokens.</param>
            <exception cref="T:System.NullReferenceException">Thrown when the passed string is <c>null</c></exception>
        </member>
        <member name="M:RLM.Contruction.Data.StringTokenizer.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Constructs a string tokenizer for the specified string using the given delimiters,
            optionally returning them as tokens. Also empty tokens may be returned using the <see cref="!:String.Empty"/> string.
            </summary>
            <param name="str">The string to be tokenized.</param>
            <param name="delims">The delimiters used to tokenize the string (each <see cref="!:char"/> will be used as a delimiter).</param>
            <param name="returnDelims">If set to <c>true</c> the encountered delimiters will also be returned as tokens.</param>
            <param name="returnEmpty">If set to <c>true</c> empty tokens will also be returned.</param>
            <exception cref="T:System.NullReferenceException">Thrown when the passed string is <c>null</c></exception>
        </member>
        <member name="M:RLM.Contruction.Data.StringTokenizer.#ctor(System.String,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Constructs a string tokenizer for the specified string using the given delimiters,
            optionally returning them as tokens. Also empty tokens may be returned using the <paramref name="empty"/> string.
            </summary>
            <param name="str">The string to be tokenized.</param>
            <param name="delims">The delimiters used to tokenize the string (each <see cref="!:char"/> will be used as a delimiter).</param>
            <param name="returnDelims">If set to <c>true</c> the encountered delimiters will also be returned as tokens.</param>
            <param name="returnEmpty">If set to <c>true</c> empty tokens will also be returned.</param>
            <param name="empty">The string to be returned as an empty token.</param>
            <exception cref="T:System.NullReferenceException">Thrown when the passed string is <c>null</c></exception>
        </member>
        <member name="M:RLM.Contruction.Data.StringTokenizer.Reset">
            <summary>
            Resets the current position index so that the tokens can be extracted again.
            </summary>
            <remarks><see cref="!:Equivalent not available in Java!"/></remarks>
        </member>
        <member name="M:RLM.Contruction.Data.StringTokenizer.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:RLM.Contruction.Data.StringTokenizer.HasMoreTokens">
            <summary>
            Tests if there are more tokens available from this tokenizer's string.
            If this method returns <c>true</c>, then a subsequent
            use of the <see cref="P:NextToken"/> property will successfully return a token.
            </summary>
            <value>
            	<c>true</c> if more tokens are available; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:RLM.Contruction.Data.StringTokenizer.NextToken">
            <summary>
            Gets the next token.
            </summary>
            <value>The next token.</value>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when trying to get a token which doesn't exist.
            Usually caused by not checking if the <see cref="P:HasMoreTokens"/> property returns <c>true</c> before trying to get the next token.</exception>
        </member>
        <member name="P:RLM.Contruction.Data.StringTokenizer.CountTokens">
            <summary>
            Counts the <see cref="!:remaining"/> tokens - the number of times the
            <see cref="P:NextToken"/> property can be used before it throws an exception.
            </summary>
            <value>The number of remaining tokens.</value>
            <seealso cref="P:Count"/>
        </member>
        <member name="P:RLM.Contruction.Data.StringTokenizer.Count">
            <summary>
            Gets the total number of tokens extracted.
            </summary>
            <remarks>
            <see cref="!:Equivalent not available in Java!"/>
            This property returns the total number of extracted tokens,
            contrary to <see cref="P:CountTokens"/>.
            </remarks>
            <value>The number of tokens extracted.</value>
            <seealso cref="P:StringTokenizer.CountTokens"/>
        </member>
        <member name="P:RLM.Contruction.Data.StringTokenizer.Item(System.Int32)">
            <summary>
            Gets the token with the specified index from the tokenizer without moving the current position index.
            </summary>
            <remarks><see cref="!:Equivalent not available in Java!"/></remarks>
            <param name="index">The index of the token to get.</param>
            <value>The token with the given index</value>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when trying to get a token which doesn't exist, that is when <see cref="!:index"/> is equal or greater then <see cref="!:Count"/> or <see cref="!:index"/> is negative.</exception>
        </member>
        <member name="P:RLM.Contruction.Data.StringTokenizer.EmptyString">
            <summary>
            Gets the currently set string for empty tokens.
            </summary>
            <remarks>Default is <c>System.String.Empty</c></remarks>
            <value>The empty token string.</value>
        </member>
        <member name="T:RLM.Contruction.Data.SqlExpressionParser">
            <summary>
            Parses search text into an expression that can
            be used in a SQL WHERE clause.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlExpressionParser.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:RLM.Contruction.Data.SqlExpressionParser.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the SqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
            <param name="ignoreCase"></param>
        </member>
        <member name="M:RLM.Contruction.Data.SqlExpressionParser.#ctor(System.String,RLM.Contruction.Data.SqlComparisonType)">
            <summary>
            Initializes a new instance of the SqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
            <param name="comparisonType"></param>
        </member>
        <member name="M:RLM.Contruction.Data.SqlExpressionParser.#ctor(System.String,RLM.Contruction.Data.SqlComparisonType,System.Boolean)">
            <summary>
            Initializes a new instance of the SqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
            <param name="comparisonType"></param>
            <param name="ignoreCase"></param>
        </member>
        <member name="M:RLM.Contruction.Data.SqlExpressionParser.AppendOr">
            <summary>
            Appends "OR" to the SQL statement.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlExpressionParser.AppendAnd">
            <summary>
            Appends "AND" to the SQL statement.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlExpressionParser.AppendSpace">
            <summary>
            Appends a space to the SQL statement.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlExpressionParser.OpenGrouping">
            <summary>
            Appends a left parentheses to the SQL statement.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlExpressionParser.CloseGrouping">
            <summary>
            Appends a right parentheses to the SQL statement.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.SqlExpressionParser.AppendSearchText(System.String)">
            <summary>
            Appends the specified search text to the SQL statement.
            </summary>
            <param name="searchText">The search text to append.</param>
        </member>
        <member name="M:RLM.Contruction.Data.SqlExpressionParser.WrapWithSQL(System.String,System.String,System.Boolean)">
            <summary>
            Converts the search text into a valid search expression.
            </summary>
            <param name="propertyName"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlExpressionParser.Contains(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:RLM.Contruction.Data.SqlComparisonType.Contains"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlExpressionParser.StartsWith(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:RLM.Contruction.Data.SqlComparisonType.StartsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlExpressionParser.EndsWith(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:RLM.Contruction.Data.SqlComparisonType.EndsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlExpressionParser.Like(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:RLM.Contruction.Data.SqlComparisonType.Like"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlExpressionParser.Equals(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:RLM.Contruction.Data.SqlComparisonType.Equals"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.SqlExpressionParser.Parse(System.String)">
            <summary>
            Parses the specified value into separate search terms.
            </summary>
            <param name="value">The search text.</param>
            <returns>Returns a parsed search phrase.</returns>
        </member>
        <member name="T:RLM.Contruction.Data.ParameterizedSqlExpressionParser">
            <summary>
            Parses search text into an expression that can
            be used in a parameterized SQL WHERE clause.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.ParameterizedSqlExpressionParser.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ParameterizedSqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:RLM.Contruction.Data.ParameterizedSqlExpressionParser.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the ParameterizedSqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
            <param name="ignoreCase"></param>
        </member>
        <member name="M:RLM.Contruction.Data.ParameterizedSqlExpressionParser.#ctor(System.String,RLM.Contruction.Data.SqlComparisonType)">
            <summary>
            Initializes a new instance of the ParameterizedSqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
            <param name="comparisonType"></param>
        </member>
        <member name="M:RLM.Contruction.Data.ParameterizedSqlExpressionParser.#ctor(System.String,RLM.Contruction.Data.SqlComparisonType,System.Boolean)">
            <summary>
            Initializes a new instance of the ParameterizedSqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
            <param name="comparisonType"></param>
            <param name="ignoreCase"></param>
        </member>
        <member name="M:RLM.Contruction.Data.ParameterizedSqlExpressionParser.Contains(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:RLM.Contruction.Data.SqlComparisonType.Contains"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.ParameterizedSqlExpressionParser.StartsWith(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:RLM.Contruction.Data.SqlComparisonType.StartsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.ParameterizedSqlExpressionParser.EndsWith(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:RLM.Contruction.Data.SqlComparisonType.EndsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.ParameterizedSqlExpressionParser.Like(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:RLM.Contruction.Data.SqlComparisonType.Like"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.ParameterizedSqlExpressionParser.Equals(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:RLM.Contruction.Data.SqlComparisonType.Equals"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="F:RLM.Contruction.Data.ParameterizedSqlExpressionParser.parameters">
            <summary>
            The Parameters member variable.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.ParameterizedSqlExpressionParser.Parameters">
            <summary>
            Gets or sets the Parameters property.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.NetTiersProvider">
            <summary>
             The base class to implements to create a .NetTiers provider.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.NetTiersProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></see> on a provider after the provider has already been initialized.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.NetTiersProvider.CreateTransaction">
            <summary>
            Creates a new <c cref="T:RLM.Contruction.Data.TransactionManager"/> instance from the current datasource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.NetTiersProvider.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.NetTiersProvider.ExecuteNonQuery(RLM.Contruction.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.NetTiersProvider.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.NetTiersProvider.ExecuteNonQuery(RLM.Contruction.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.NetTiersProvider.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.NetTiersProvider.ExecuteNonQuery(RLM.Contruction.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.NetTiersProvider.ExecuteReader(System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.NetTiersProvider.ExecuteReader(RLM.Contruction.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.NetTiersProvider.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.NetTiersProvider.ExecuteReader(RLM.Contruction.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.NetTiersProvider.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.NetTiersProvider.ExecuteReader(RLM.Contruction.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.NetTiersProvider.ExecuteDataSet(System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.NetTiersProvider.ExecuteDataSet(RLM.Contruction.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.NetTiersProvider.ExecuteDataSet(System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.NetTiersProvider.ExecuteDataSet(RLM.Contruction.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.NetTiersProvider.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.NetTiersProvider.ExecuteDataSet(RLM.Contruction.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.NetTiersProvider.ExecuteScalar(System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.NetTiersProvider.ExecuteScalar(RLM.Contruction.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.NetTiersProvider.ExecuteScalar(System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.NetTiersProvider.ExecuteScalar(RLM.Contruction.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.NetTiersProvider.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.NetTiersProvider.ExecuteScalar(RLM.Contruction.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="P:RLM.Contruction.Data.Bases.NetTiersProvider.EntityCreationalFactoryType">
            <summary>
            Gets or sets the Creational Entity Factory Type.
            </summary>
            <value>The entity factory type.</value>
        </member>
        <member name="P:RLM.Contruction.Data.Bases.NetTiersProvider.EnableEntityTracking">
            <summary>
            Gets or sets the ability to track entities.
            </summary>
            <value>true/false.</value>
        </member>
        <member name="P:RLM.Contruction.Data.Bases.NetTiersProvider.EnableListTracking">
            <summary>
            Gets or sets the Entity Factory Type.
            </summary>
            <value>The entity factory type.</value>
        </member>
        <member name="P:RLM.Contruction.Data.Bases.NetTiersProvider.UseEntityFactory">
            <summary>
            Gets or sets the use entity factory property to enable the usage of the EntityFactory and it's type cache.
            </summary>
            <value>bool value</value>
        </member>
        <member name="P:RLM.Contruction.Data.Bases.NetTiersProvider.EnableMethodAuthorization">
            <summary>
            Gets or sets the use Enable Method Authorization to enable the usage of the Microsoft Patterns and Practices 
            IAuthorizationRuleProvider for code level authorization.
            </summary>
            <value>A bool value.</value>
        </member>
        <member name="P:RLM.Contruction.Data.Bases.NetTiersProvider.DefaultCommandTimeout">
            <summary>
            Gets or sets the default timeout for every command
            </summary>
            <value>integer value in seconds.</value>
        </member>
        <member name="P:RLM.Contruction.Data.Bases.NetTiersProvider.IsTransactionSupported">
            <summary>
             Indicates if the current <c cref="T:RLM.Contruction.Data.Bases.NetTiersProvider"/> implementation is supporting Transactions.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.Bases.NetTiersProvider.UserProvider">
            <summary>
             Current UserProviderBase instance.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.Bases.NetTiersProvider.DepartmentProvider">
            <summary>
             Current DepartmentProviderBase instance.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.Bases.NetTiersProvider.AttachFileProvider">
            <summary>
             Current AttachFileProviderBase instance.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.Bases.NetTiersProvider.UnitConvertorProvider">
            <summary>
             Current UnitConvertorProviderBase instance.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.Bases.NetTiersProvider.StaffProvider">
            <summary>
             Current StaffProviderBase instance.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.Bases.NetTiersProvider.ProjectProvider">
            <summary>
             Current ProjectProviderBase instance.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.Bases.NetTiersProvider.RoleOfStaffProvider">
            <summary>
             Current RoleOfStaffProviderBase instance.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.Bases.NetTiersProvider.RoleProvider">
            <summary>
             Current RoleProviderBase instance.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.Bases.NetTiersProvider.UnitProvider">
            <summary>
             Current UnitProviderBase instance.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.Bases.NetTiersProvider.PartnerProvider">
            <summary>
             Current PartnerProviderBase instance.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.Bases.NetTiersProvider.GroupProvider">
            <summary>
             Current GroupProviderBase instance.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.Bases.NetTiersProvider.ItemProvider">
            <summary>
             Current ItemProviderBase instance.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.Bases.NetTiersProvider.UserGroupProvider">
            <summary>
             Current UserGroupProviderBase instance.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.Bases.NetTiersProvider.RepositoryProvider">
            <summary>
             Current RepositoryProviderBase instance.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.Bases.NetTiersProvider.ItemMovementProvider">
            <summary>
             Current ItemMovementProviderBase instance.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.Bases.NetTiersProvider.ContactorProvider">
            <summary>
             Current ContactorProviderBase instance.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.Bases.NetTiersProvider.ItemInRepositoryProvider">
            <summary>
             Current ItemInRepositoryProviderBase instance.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.Bases.NetTiersProvider.ContractProvider">
            <summary>
             Current ContractProviderBase instance.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Data.Bases.NetTiersProvider.ItemInProjectProvider">
            <summary>
             Current ItemInProjectProviderBase instance.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.ProjectProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:RLM.Contruction.Data.Bases.ProjectProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ProjectProviderBaseCore.Delete(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.ProjectKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ProjectProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="projectId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ProjectProviderBaseCore.Delete(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="projectId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ProjectProviderBaseCore.GetByContractId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Projects_Contracts key.
            	FK_Projects_Contracts Description: 
            </summary>
            <param name="contractId"></param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Project objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ProjectProviderBaseCore.GetByContractId(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Projects_Contracts key.
            	FK_Projects_Contracts Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="contractId"></param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Project objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ProjectProviderBaseCore.GetByContractId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Projects_Contracts key.
            	FK_Projects_Contracts Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="contractId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Project objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ProjectProviderBaseCore.GetByContractId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Projects_Contracts key.
            	fKProjectsContracts Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="contractId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Project objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ProjectProviderBaseCore.GetByContractId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Projects_Contracts key.
            	fKProjectsContracts Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="contractId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Project objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ProjectProviderBaseCore.GetByContractId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Projects_Contracts key.
            	FK_Projects_Contracts Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="contractId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Project objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ProjectProviderBaseCore.GetByGroupId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Projects_Groups1 key.
            	FK_Projects_Groups1 Description: 
            </summary>
            <param name="groupId"></param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Project objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ProjectProviderBaseCore.GetByGroupId(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Projects_Groups1 key.
            	FK_Projects_Groups1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="groupId"></param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Project objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ProjectProviderBaseCore.GetByGroupId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Projects_Groups1 key.
            	FK_Projects_Groups1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="groupId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Project objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ProjectProviderBaseCore.GetByGroupId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Projects_Groups1 key.
            	fKProjectsGroups1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="groupId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Project objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ProjectProviderBaseCore.GetByGroupId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Projects_Groups1 key.
            	fKProjectsGroups1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="groupId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Project objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ProjectProviderBaseCore.GetByGroupId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Projects_Groups1 key.
            	FK_Projects_Groups1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="groupId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of RLM.Contruction.Entities.Project objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ProjectProviderBaseCore.Get(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.ProjectKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:RLM.Contruction.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ProjectProviderBaseCore.GetByProjectId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_Projects index.
            </summary>
            <param name="projectId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Project"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ProjectProviderBaseCore.GetByProjectId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Projects index.
            </summary>
            <param name="projectId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Project"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ProjectProviderBaseCore.GetByProjectId(RLM.Contruction.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Projects index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="projectId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Project"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ProjectProviderBaseCore.GetByProjectId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Projects index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="projectId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Project"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ProjectProviderBaseCore.GetByProjectId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Projects index.
            </summary>
            <param name="projectId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Project"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ProjectProviderBaseCore.GetByProjectId(RLM.Contruction.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Projects index.
            </summary>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="projectId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Project"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ProjectProviderBaseCore.Fill(System.Data.IDataReader,RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Project},System.Int32,System.Int32)">
            <summary>
            Fill a RLM.Contruction.Entities.TList&lt;Project&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:RLM.Contruction.Entities.TList`1"/></returns>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ProjectProviderBaseCore.RefreshEntity(System.Data.IDataReader,RLM.Contruction.Entities.Project)">
            <summary>
            Refreshes the <see cref="T:RLM.Contruction.Entities.Project"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.Project"/> object to refresh.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ProjectProviderBaseCore.RefreshEntity(System.Data.DataSet,RLM.Contruction.Entities.Project)">
            <summary>
            Refreshes the <see cref="T:RLM.Contruction.Entities.Project"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.Project"/> object.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ProjectProviderBaseCore.DeepLoad(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.Project,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[],RLM.Contruction.Data.Bases.ChildEntityTypesList)">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:RLM.Contruction.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.Project"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">RLM.Contruction.Entities.Project Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ProjectProviderBaseCore.DeepSave(RLM.Contruction.Data.TransactionManager,RLM.Contruction.Entities.Project,RLM.Contruction.Data.DeepSaveType,System.Type[],RLM.Contruction.Data.Bases.ChildEntityTypesList)">
            <summary>
            Deep Save the entire object graph of the RLM.Contruction.Entities.Project object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">RLM.Contruction.Entities.Project instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">RLM.Contruction.Entities.Project Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.ProjectChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>RLM.Contruction.Entities.Project</c>
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.Bases.ProjectChildEntityTypes.Contract">
            <summary>
             Composite Property for <c>Contract</c> at ContractIdSource
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.Bases.ProjectChildEntityTypes.Group">
            <summary>
             Composite Property for <c>Group</c> at GroupIdSource
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.Bases.ProjectChildEntityTypes.ItemInProjectCollection">
            <summary>
             Collection of <c>Project</c> as OneToMany for ItemInProjectCollection
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.ProjectFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:RLM.Contruction.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:RLM.Contruction.Entities.Project"/> object.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ProjectFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ProjectFilterBuilder class.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ProjectFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProjectFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ProjectFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProjectFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.ProjectParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:RLM.Contruction.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:RLM.Contruction.Entities.Project"/> object.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ProjectParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ProjectParameterBuilder class.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ProjectParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProjectParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.ProjectParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProjectParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.UserChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>RLM.Contruction.Entities.User</c>
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.Bases.UserChildEntityTypes.UserGroup">
            <summary>
             Composite Property for <c>UserGroup</c> at UserGroupIdSource
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.Bases.UserChildEntityTypes.StaffCollection">
            <summary>
             Collection of <c>User</c> as OneToMany for StaffCollection
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.Bases.UserChildEntityTypes.ContractCollectionByLastModificationUserId">
            <summary>
             Collection of <c>User</c> as OneToMany for ContractCollection
            </summary>
        </member>
        <member name="F:RLM.Contruction.Data.Bases.UserChildEntityTypes.ContractCollectionByCreationUserId">
            <summary>
             Collection of <c>User</c> as OneToMany for ContractCollection
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.UserFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:RLM.Contruction.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:RLM.Contruction.Entities.User"/> object.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UserFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the UserFilterBuilder class.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UserFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the UserFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UserFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the UserFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.UserParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:RLM.Contruction.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:RLM.Contruction.Entities.User"/> object.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UserParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the UserParameterBuilder class.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UserParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the UserParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:RLM.Contruction.Data.Bases.UserParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the UserParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.UnitProviderBase">
            <summary>
             This class is the base class for any <see cref="T:RLM.Contruction.Data.Bases.UnitProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.ProjectProviderBase">
            <summary>
             This class is the base class for any <see cref="T:RLM.Contruction.Data.Bases.ProjectProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.AttachFileProviderBase">
            <summary>
             This class is the base class for any <see cref="T:RLM.Contruction.Data.Bases.AttachFileProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Data.Bases.DepartmentProviderBase">
            <summary>
             This class is the base class for any <see cref="T:RLM.Contruction.Data.Bases.DepartmentProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
    </members>
</doc>
