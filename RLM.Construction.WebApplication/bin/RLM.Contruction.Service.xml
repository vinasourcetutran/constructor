<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RLM.Contruction.Service</name>
    </assembly>
    <members>
        <member name="T:RLM.Contruction.Service.ServiceViewBase`1">
            <summary>
            The base class that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Service.ServiceViewBaseCore`1">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Service.IComponentService">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Service.IComponentService.ProcessorList">
             <summary>
            	Provides a List of Processors to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:RLM.Contruction.Service.IComponentService.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:RLM.Contruction.Service.IComponentService.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="E:RLM.Contruction.Service.IComponentService.ProcessStarting">
            <summary>
            Event to indicate that a processor is about to begin.
            </summary>
        </member>
        <member name="E:RLM.Contruction.Service.IComponentService.ProcessEnded">
            <summary>
            Event to indicate that a processor has just ended.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Service.ServiceViewBaseCore`1.Execute">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:RLM.Contruction.Service.ServiceViewBaseCore`1.Execute(System.Boolean)">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:RLM.Contruction.Service.ServiceViewBaseCore`1.OnProcessStarting(RLM.Contruction.Service.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Service.ServiceViewBaseCore`1.OnProcessEnded(RLM.Contruction.Service.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Service.ServiceViewBaseCore`1.Get">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ServiceViewBaseCore`1.Get(System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ServiceViewBaseCore`1.Get(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ServiceViewBaseCore`1.Get(System.String,System.String)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ServiceViewBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ServiceViewBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ServiceViewBaseCore`1.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ServiceViewBaseCore`1.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ServiceViewBaseCore`1.Find(RLM.Contruction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="P:RLM.Contruction.Service.ServiceViewBaseCore`1.ProcessorList">
             <summary>
            	Provides a List of Processors to execute external business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:RLM.Contruction.Service.ServiceViewBaseCore`1.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:RLM.Contruction.Service.ServiceViewBaseCore`1.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="P:RLM.Contruction.Service.ServiceViewBaseCore`1.CurrentProcessor">
            <summary>
            Current Processor being executed
            </summary>
        </member>
        <member name="P:RLM.Contruction.Service.ServiceViewBaseCore`1.ProcessCounter">
            <summary>
            Current Number of Processes completed thus far.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Service.ServiceViewBaseCore`1.CurrentProcessorIndex">
            <summary>
            Current index of the processor currently or last executed 
            </summary>
        </member>
        <member name="P:RLM.Contruction.Service.ServiceViewBaseCore`1.TotalProcesses">
            <summary>
            Total Number of Processes currently enlisted in this service 
            </summary>
        </member>
        <member name="E:RLM.Contruction.Service.ServiceViewBaseCore`1.ProcessStarting">
            <summary>
            Event to indicate that a processor has began.
            </summary>
        </member>
        <member name="E:RLM.Contruction.Service.ServiceViewBaseCore`1.ProcessEnded">
            <summary>
            Event to indicate that a processor has ended.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Service.ContractServiceBase">
            <summary>
             An object representation of the 'Contract' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Contract.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Contruction.Entities.Contract"/> class.
             </remarks>
        </member>
        <member name="T:RLM.Contruction.Service.ServiceBase`2">
            <summary>
            The base class that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Service.ServiceBaseCore`2">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Service.ServiceBaseCore`2.Execute">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:RLM.Contruction.Service.ServiceBaseCore`2.Execute(System.Boolean)">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:RLM.Contruction.Service.ServiceBaseCore`2.OnProcessStarting(RLM.Contruction.Service.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Service.ServiceBaseCore`2.OnProcessEnded(RLM.Contruction.Service.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Service.ServiceBaseCore`2.Get(`1)">
            <summary>
            Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ServiceBaseCore`2.GetAll">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ServiceBaseCore`2.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ServiceBaseCore`2.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ServiceBaseCore`2.Insert(`0)">
            <summary>
            Inserts a row into the DataSource.
            </summary>
            <param name="entity">The Entity object to insert.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ServiceBaseCore`2.BulkInsert(RLM.Contruction.Entities.TList{`0})">
            <summary>
            Efficiently inserts multiple rows into the DataSource.
            </summary>
            <param name="entities">TList of Entity objects to insert.</param>
        </member>
        <member name="M:RLM.Contruction.Service.ServiceBaseCore`2.Update(`0)">
            <summary>
            Updates an existing row in the DataSource.
            </summary>
            <param name="entity">The Entity object to update.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ServiceBaseCore`2.Delete(`0)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="entity">The Entity object to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ServiceBaseCore`2.DeepLoad(`0,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[],RLM.Contruction.Data.Bases.ChildEntityTypesList)">
            <summary>
            Deep Load the entire Entity object with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entity">The Entity object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
            <param name="innerList">A collection of child types for easy access.</param>
        </member>
        <member name="M:RLM.Contruction.Service.ServiceBaseCore`2.DeepLoad(RLM.Contruction.Entities.TList{`0},System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Contruction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entities">TList of Entity objects to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
        </member>
        <member name="M:RLM.Contruction.Service.ServiceBaseCore`2.DeepSave(`0,RLM.Contruction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="M:RLM.Contruction.Service.ServiceBaseCore`2.DeepSave(`0,RLM.Contruction.Data.DeepSaveType,System.Type[],System.Collections.Hashtable)">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <remarks>
            This method should be implemented by sub-classes to provide specific deep save functionality.
            </remarks>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="M:RLM.Contruction.Service.ServiceBaseCore`2.DeepSave(RLM.Contruction.Entities.TList{`0},RLM.Contruction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the Entity objects with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="entities">TList of Entity objects to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="P:RLM.Contruction.Service.ServiceBaseCore`2.ProcessorList">
             <summary>
            	Provides a List of Processors to execute external business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:RLM.Contruction.Service.ServiceBaseCore`2.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:RLM.Contruction.Service.ServiceBaseCore`2.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="P:RLM.Contruction.Service.ServiceBaseCore`2.CurrentProcessor">
            <summary>
            Current Processor being executed
            </summary>
        </member>
        <member name="P:RLM.Contruction.Service.ServiceBaseCore`2.ProcessCounter">
            <summary>
            Current Number of Processes completed thus far.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Service.ServiceBaseCore`2.CurrentProcessorIndex">
            <summary>
            Current index of the processor currently or last executed 
            </summary>
        </member>
        <member name="P:RLM.Contruction.Service.ServiceBaseCore`2.TotalProcesses">
            <summary>
            Total Number of Processes currently enlisted in this service 
            </summary>
        </member>
        <member name="E:RLM.Contruction.Service.ServiceBaseCore`2.ProcessStarting">
            <summary>
            Event to indicate that a processor has began.
            </summary>
        </member>
        <member name="E:RLM.Contruction.Service.ServiceBaseCore`2.ProcessEnded">
            <summary>
            Event to indicate that a processor has ended.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Service.ContractServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Contruction.Entities.Contract"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Contruction.Service.ContractServiceBase.CreateContract(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Contruction.Entities.Contract"/> instance.
            </summary>
            <param name="constructDeptId"></param>
            <param name="designDeptId"></param>
            <param name="groupId"></param>
            <param name="code"></param>
            <param name="number"></param>
            <param name="name"></param>
            <param name="description"></param>
            <param name="initPrice"></param>
            <param name="lastPrice"></param>
            <param name="fromDate"></param>
            <param name="toDate"></param>
            <param name="realFromDate"></param>
            <param name="realToDate"></param>
            <param name="status"></param>
            <param name="isApprove"></param>
            <param name="isActive"></param>
            <param name="isPrinted"></param>
            <param name="creationUserId"></param>
            <param name="creationDate"></param>
            <param name="lastModificationUserId"></param>
            <param name="lastModificationDate"></param>
        </member>
        <member name="M:RLM.Contruction.Service.ContractServiceBase.GetByConstructDeptId(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the FK_Contracts_Departments key.
            	FK_Contracts_Departments Description: 
            </summary>
            <param name="constructDeptId"></param>
            <returns>Returns a generic collection of Contract objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ContractServiceBase.GetByConstructDeptId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the FK_Contracts_Departments key.
            	FK_Contracts_Departments Description: 
            </summary>
            <param name="constructDeptId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Contruction.Entities.TList`1"/> of <c>Contract</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ContractServiceBase.GetByDesignDeptId(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the FK_Contracts_Departments1 key.
            	FK_Contracts_Departments1 Description: 
            </summary>
            <param name="designDeptId"></param>
            <returns>Returns a generic collection of Contract objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ContractServiceBase.GetByDesignDeptId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the FK_Contracts_Departments1 key.
            	FK_Contracts_Departments1 Description: 
            </summary>
            <param name="designDeptId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Contruction.Entities.TList`1"/> of <c>Contract</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ContractServiceBase.GetByGroupId(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the FK_Contracts_Groups key.
            	FK_Contracts_Groups Description: 
            </summary>
            <param name="groupId"></param>
            <returns>Returns a generic collection of Contract objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ContractServiceBase.GetByGroupId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the FK_Contracts_Groups key.
            	FK_Contracts_Groups Description: 
            </summary>
            <param name="groupId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Contruction.Entities.TList`1"/> of <c>Contract</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ContractServiceBase.GetByCreationUserId(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the FK_Contracts_Users key.
            	FK_Contracts_Users Description: 
            </summary>
            <param name="creationUserId"></param>
            <returns>Returns a generic collection of Contract objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ContractServiceBase.GetByCreationUserId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the FK_Contracts_Users key.
            	FK_Contracts_Users Description: 
            </summary>
            <param name="creationUserId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Contruction.Entities.TList`1"/> of <c>Contract</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ContractServiceBase.GetByLastModificationUserId(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the FK_Contracts_Users1 key.
            	FK_Contracts_Users1 Description: 
            </summary>
            <param name="lastModificationUserId"></param>
            <returns>Returns a generic collection of Contract objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ContractServiceBase.GetByLastModificationUserId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the FK_Contracts_Users1 key.
            	FK_Contracts_Users1 Description: 
            </summary>
            <param name="lastModificationUserId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Contruction.Entities.TList`1"/> of <c>Contract</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ContractServiceBase.Get(RLM.Contruction.Entities.ContractKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ContractServiceBase.GetByContractId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the primary key PK_Contracts index.
            </summary>
            <param name="contractId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Contract"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ContractServiceBase.GetByContractId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the primary key PK_Contracts index.
            </summary>
            <param name="contractId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Contract"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ContractServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Contruction.Entities.Contract"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Service.ContractServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Contruction.Entities.Contract"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Contruction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Contruction.Service.ContractServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Contruction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Contract</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ContractServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Contruction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Contract</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ContractServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Contract</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ContractServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ContractServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ContractServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Contract} of <c>Contract</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ContractServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Contract</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ContractServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Contract</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ContractServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Contract</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ContractServiceBase.Insert(RLM.Contruction.Entities.Contract)">
            <summary>
            	public virtualmethod that Inserts a Contract object into the datasource using a transaction.
            </summary>
            <param name="entity">Contract object to Insert.</param>
            <remarks>After Inserting into the datasource, the Contract object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Contract entity = new Contract();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ContractService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.ContractServiceBase.Insert(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Contract})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Contract</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Contract</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Contract.
             <code><![CDATA[
             TList<Contract> list = new TList<Contract>();
             Contract entity = new Contract();
             entity.StringProperty = "foo";
             Contract entity2 = new Contract();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ContractService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.ContractServiceBase.Update(RLM.Contruction.Entities.Contract)">
            <summary>
            	public virtualmethod that Updates a Contract object into the datasource using a transaction.
            </summary>
            <param name="entity">Contract object to Update.</param>
            <remarks>After Updateing into the datasource, the Contract object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Contract entity = ContractService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ContractService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.ContractServiceBase.Update(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Contract})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Contract</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Contract</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Contract.
             <code><![CDATA[
             TList<Contract> list = new TList<Contract>();
             Contract entity = new Contract();
             entity.StringProperty = "foo";
             Contract entity2 = new Contract();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ContractService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.ContractServiceBase.Save(RLM.Contruction.Entities.Contract)">
            <summary>
            	public virtualmethod that Saves a Contract object into the datasource using a transaction.
            </summary>
            <param name="entity">Contract object to Save.</param>
            <remarks>After Saveing into the datasource, the Contract object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Contract entity = ContractService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ContractService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.ContractServiceBase.Save(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Contract})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Contract</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Contract</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Contract.
             <code><![CDATA[
             TList<Contract> list = new TList<Contract>();
             Contract entity = new Contract();
             entity.StringProperty = "foo";
             Contract entity2 = new Contract();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ContractService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.ContractServiceBase.Delete(RLM.Contruction.Entities.Contract)">
            <summary>
            	public virtualmethod that Deletes a Contract object into the datasource using a transaction.
            </summary>
            <param name="entity">Contract object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Contract object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Contract entity = ContractService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ContractService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.ContractServiceBase.Delete(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Contract})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Contract</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Contract</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Contract.
             <code><![CDATA[
             TList<Contract> list = new TList<Contract>();
             Contract entity = new Contract();
             entity.StringProperty = "foo";
             Contract entity2 = new Contract();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ContractService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.ContractServiceBase.Delete(RLM.Contruction.Entities.ContractKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ContractServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 contractId
            </summary>
            <param name="contractId">Contract pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ContractServiceBase.DeepLoadByContractId(System.Int32,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Contruction.Entities.Contract"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <param name="contractId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Contract Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Contract"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ContractServiceBase.DeepLoad(RLM.Contruction.Entities.Contract)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Contract Object</param>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.ContractServiceBase.DeepLoad(RLM.Contruction.Entities.Contract)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Contruction.Service.ContractServiceBase.DeepLoad(RLM.Contruction.Entities.Contract,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.ContractServiceBase.DeepLoad(RLM.Contruction.Entities.Contract)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Contract Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Contruction.Service.ContractServiceBase.DeepLoad(RLM.Contruction.Entities.Contract,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Contruction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.Contract"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Contract Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Contruction.Service.ContractServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Contract})">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.ContractServiceBase.DeepLoad(RLM.Contruction.Entities.Contract)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Contruction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Contruction.Service.ContractServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Contract},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.ContractServiceBase.DeepLoad(RLM.Contruction.Entities.Contract)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Contruction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Contruction.Service.ContractServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Contract},System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Contruction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Contruction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Contruction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Contruction.Entities.Contract"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Contruction.Service.ContractServiceBase.DeepSave(RLM.Contruction.Entities.Contract)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Contruction.Entities.Contract"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Contract Object</param>
        </member>
        <member name="M:RLM.Contruction.Service.ContractServiceBase.DeepSave(RLM.Contruction.Entities.Contract,RLM.Contruction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Contract object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Contract Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Contract</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Contruction.Service.ContractServiceBase.DeepSave(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Contract})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Contruction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Contract} Object</param>
        </member>
        <member name="M:RLM.Contruction.Service.ContractServiceBase.DeepSave(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Contract},RLM.Contruction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Contruction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Contruction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Contract Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Contruction.Service.ContractServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Service.ConnectionScope">
            <summary>
            Provides storage of global database connection information.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Service.ConnectionScope.#ctor">
            <summary>
            Initializes a new instance of the ConnectionScope class.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Service.ConnectionScope.NewThread(System.Threading.ThreadStart)">
            <summary>
            Creates a new <see cref="T:System.Threading.Thread"/> object and copies
            the current <see cref="T:RLM.Contruction.Service.ConnectionScope"/> parameters.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns a new <see cref="T:System.Threading.Thread"/> object.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ConnectionScope.NewThread(System.Threading.ParameterizedThreadStart)">
            <summary>
            Creates a new <see cref="T:System.Threading.Thread"/> object and copies
            the current <see cref="T:RLM.Contruction.Service.ConnectionScope"/> parameters.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns a new <see cref="T:System.Threading.Thread"/> object.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ConnectionScope.EnqueueOnThreadPool(System.Threading.ThreadStart)">
            <summary>
            Queues a method for execution. The method executes
            when a thread pool thread becomes available.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns true if the method is successfully queued.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ConnectionScope.EnqueueOnThreadPool(System.Threading.ParameterizedThreadStart,System.Object)">
            <summary>
            Queues a method for execution. The method executes
            when a thread pool thread becomes available.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <param name="state">An object containing data to be used by the method.</param>
            <returns>Returns true if the method is successfully queued.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ConnectionScope.Copy(RLM.Contruction.Service.ConnectionScope)">
            <summary>
            Copies the values from the specified <paramref name="scope"/> object
            to the <see cref="T:RLM.Contruction.Service.ConnectionScope"/> used by the current thread.
            </summary>
            <param name="scope">A <see cref="T:RLM.Contruction.Service.ConnectionScope"/> object.</param>
        </member>
        <member name="M:RLM.Contruction.Service.ConnectionScope.ValidateOrCreateTransaction">
            <summary>
            Validates an existing <c cref="P:RLM.Contruction.Service.ConnectionScope.TransactionManager"/> if one exists,
            otherwise creates a new <c cref="P:RLM.Contruction.Service.ConnectionScope.TransactionManager"/> to use.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Service.ConnectionScope.ValidateOrCreateTransaction(System.Boolean)">
            <summary>
            Validates an existing <c cref="P:RLM.Contruction.Service.ConnectionScope.TransactionManager"/> if one exists,
            otherwise creates a new <c cref="P:RLM.Contruction.Service.ConnectionScope.TransactionManager"/> to use.
            </summary>
            <param name="createTransaction">determines whether to create a new transaction</param>
        </member>
        <member name="M:RLM.Contruction.Service.ConnectionScope.CreateTransaction">
            <summary>
            Creates a new transaction on the current <c>ConnectionScope</c>.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Service.ConnectionScope.CreateTransaction(System.Data.IsolationLevel)">
            <summary>
            Creates a new transaction on the current <c>ConnectionScope</c>
            with the specified <c cref="T:System.Data.IsolationLevel"/>.
            </summary>
            <param name="level">Determines which <c cref="T:System.Data.IsolationLevel"/> to use for the transaction.</param>
        </member>
        <member name="M:RLM.Contruction.Service.ConnectionScope.Complete">
             <summary>
             Completes this unit of work instance of the current transaction.  
             Commits the transaction,  Cleans up Connection, 
             Disposes of TransactionManager which performs unmanaged cleanup.
             </summary>
             <example>
                 try
                 {
                     using (ConnectionScope.CreateTransaction())
                     {
                         // or use ConnectionScope.ValidateOrCreateTransaction(true) 
                         // if you prefer to dynamically check for an existing transaction
                         AccountService.Save(account);
                         LedgerService.Save(generalEntry);
             
                         //Commit and Cleanup your transaction
                         bool result = ConnectionScope.Complete();
                     }
                 }
                 catch (Exception ex)
                 {
                     // when creating the transaction via the 
                     // using (ConnectionScope.CreateTransaction()) construct, 
                     // there's no need to rollback, handled by 
                     // ConnectionScope Dispose Method.
             
                     Logger.Write(ex.Message);
                 }
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.ConnectionScope.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="F:RLM.Contruction.Service.ConnectionScope.connectionStringKey">
            <summary>
            The ConnectionStringKey member variable.
            </summary>
        </member>
        <member name="F:RLM.Contruction.Service.ConnectionScope.dynamicConnectionString">
            <summary>
            The DynamicConnectionString member variable.
            </summary>
        </member>
        <member name="F:RLM.Contruction.Service.ConnectionScope.transactionManager">
            <summary>
            The TransactionManager member variable.
            </summary>
        </member>
        <member name="F:RLM.Contruction.Service.ConnectionScope.dataProvider">
            <summary>
            The NetTiersProvider member variable.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Service.ConnectionScope.Current">
            <summary>
            Gets a reference to the ConnectionScope object for the current thread.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Service.ConnectionScope.ConnectionStringKey">
            <summary>
            Gets or sets the ConnectionStringKey property.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Service.ConnectionScope.DynamicConnectionString">
            <summary>
            Gets or sets the DynamicConnectionString property.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Service.ConnectionScope.TransactionManager">
            <summary>
            Gets or sets the TransactionManager property.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Service.ConnectionScope.DataProvider">
             <summary>
             Gets or Sets the Current DataProvider property of the <c>ConnectionScope</c> Object.
             </summary>
             <remarks>
             To use a dynamic connection, you must set both the 
             DynamicConnectionString and a unique ConnectionStringKey properties;
            </remarks>
        </member>
        <member name="P:RLM.Contruction.Service.ConnectionScope.HasTransaction">
            <summary>
            Determines if Current Connections is in a Transaction.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Service.ProcessorBase">
            <summary>
            The interface that each complex business unit of work processor will use.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Service.IProcessor">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Service.IProcessor.Process">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:RLM.Contruction.Service.IProcessor.ChangeProcessorState(RLM.Contruction.Service.ProcessorState)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Service.IProcessor.ProcessName">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:RLM.Contruction.Service.IProcessor.CurrentProcessorState">
            <summary>
            Provides the current process state of operation.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Service.ProcessorBase.Process">
             <summary>
            	Provides a List of Processors to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:RLM.Contruction.Service.ProcessorBase.ChangeProcessorState(RLM.Contruction.Service.ProcessorState)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Service.ProcessorBase.OnNotifyProcessorStateChanging(RLM.Contruction.Service.ProcessorState)">
            <summary>
            Raises the ProcessorStateChanging event.
            </summary>
            <param name="newProcessorState"></param>
        </member>
        <member name="P:RLM.Contruction.Service.ProcessorBase.ProcessResult">
            <summary>
            Provides the current process result of it's operation.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Service.ProcessorBase.ProcessName">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>The name of the type of the processors to execute</value>
        </member>
        <member name="P:RLM.Contruction.Service.ProcessorBase.CurrentProcessorState">
            <summary>
            Provides the current process state of operation.
            </summary>
        </member>
        <member name="E:RLM.Contruction.Service.ProcessorBase.ProcessorStateChanging">
            <summary>
            The ProcessorStateChanging event.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Service.ProcessorBase.ProcessorStateChangingEventHandler">
            <summary>
            The ProcessorStateChangingEventHandler event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:RLM.Contruction.Service.ItemMovementServiceBase">
            <summary>
             An object representation of the 'ItemMovement' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ItemMovement.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Contruction.Entities.ItemMovement"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Contruction.Service.ItemMovementServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Contruction.Entities.ItemMovement"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Contruction.Service.ItemMovementServiceBase.CreateItemMovement(System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Decimal},System.Nullable{System.Int64},System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Contruction.Entities.ItemMovement"/> instance.
            </summary>
            <param name="itemId"></param>
            <param name="fromRepositoryId"></param>
            <param name="toRepositoryId"></param>
            <param name="fromRepositoryManagerId"></param>
            <param name="toRepositoryManagerId"></param>
            <param name="stranferUserId"></param>
            <param name="receiverUserId"></param>
            <param name="unitPrice"></param>
            <param name="totalQuantity"></param>
            <param name="totalAmount"></param>
            <param name="status"></param>
            <param name="isActive"></param>
            <param name="isApprove"></param>
            <param name="deliveryDate">Date of delivery items</param>
            <param name="receivedDate">Date that receiver receive items</param>
            <param name="creationDate"></param>
            <param name="creationUserId"></param>
            <param name="lastModificationDate"></param>
            <param name="lastModificationUserId"></param>
        </member>
        <member name="M:RLM.Contruction.Service.ItemMovementServiceBase.GetByItemId(System.Nullable{System.Int64})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the FK_ItemMovements_Items key.
            	FK_ItemMovements_Items Description: 
            </summary>
            <param name="itemId"></param>
            <returns>Returns a generic collection of ItemMovement objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemMovementServiceBase.GetByItemId(System.Nullable{System.Int64},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the FK_ItemMovements_Items key.
            	FK_ItemMovements_Items Description: 
            </summary>
            <param name="itemId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Contruction.Entities.TList`1"/> of <c>ItemMovement</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemMovementServiceBase.GetByFromRepositoryId(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the FK_ItemMovements_Repositories key.
            	FK_ItemMovements_Repositories Description: 
            </summary>
            <param name="fromRepositoryId"></param>
            <returns>Returns a generic collection of ItemMovement objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemMovementServiceBase.GetByFromRepositoryId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the FK_ItemMovements_Repositories key.
            	FK_ItemMovements_Repositories Description: 
            </summary>
            <param name="fromRepositoryId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Contruction.Entities.TList`1"/> of <c>ItemMovement</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemMovementServiceBase.GetByToRepositoryId(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the FK_ItemMovements_Repositories1 key.
            	FK_ItemMovements_Repositories1 Description: 
            </summary>
            <param name="toRepositoryId"></param>
            <returns>Returns a generic collection of ItemMovement objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemMovementServiceBase.GetByToRepositoryId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the FK_ItemMovements_Repositories1 key.
            	FK_ItemMovements_Repositories1 Description: 
            </summary>
            <param name="toRepositoryId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Contruction.Entities.TList`1"/> of <c>ItemMovement</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemMovementServiceBase.Get(RLM.Contruction.Entities.ItemMovementKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemMovementServiceBase.GetByRepositoryMovementId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the primary key PK_ItemMovements index.
            </summary>
            <param name="repositoryMovementId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.ItemMovement"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemMovementServiceBase.GetByRepositoryMovementId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the primary key PK_ItemMovements index.
            </summary>
            <param name="repositoryMovementId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.ItemMovement"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemMovementServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Contruction.Entities.ItemMovement"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemMovementServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Contruction.Entities.ItemMovement"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Contruction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemMovementServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Contruction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ItemMovement</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemMovementServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Contruction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ItemMovement</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemMovementServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ItemMovement</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemMovementServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemMovementServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemMovementServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ItemMovement} of <c>ItemMovement</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemMovementServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ItemMovement</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemMovementServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ItemMovement</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemMovementServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ItemMovement</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemMovementServiceBase.Insert(RLM.Contruction.Entities.ItemMovement)">
            <summary>
            	public virtualmethod that Inserts a ItemMovement object into the datasource using a transaction.
            </summary>
            <param name="entity">ItemMovement object to Insert.</param>
            <remarks>After Inserting into the datasource, the ItemMovement object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ItemMovement entity = new ItemMovement();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ItemMovementService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.ItemMovementServiceBase.Insert(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.ItemMovement})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ItemMovement</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ItemMovement</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ItemMovement.
             <code><![CDATA[
             TList<ItemMovement> list = new TList<ItemMovement>();
             ItemMovement entity = new ItemMovement();
             entity.StringProperty = "foo";
             ItemMovement entity2 = new ItemMovement();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemMovementService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.ItemMovementServiceBase.Update(RLM.Contruction.Entities.ItemMovement)">
            <summary>
            	public virtualmethod that Updates a ItemMovement object into the datasource using a transaction.
            </summary>
            <param name="entity">ItemMovement object to Update.</param>
            <remarks>After Updateing into the datasource, the ItemMovement object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ItemMovement entity = ItemMovementService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ItemMovementService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.ItemMovementServiceBase.Update(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.ItemMovement})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ItemMovement</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ItemMovement</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ItemMovement.
             <code><![CDATA[
             TList<ItemMovement> list = new TList<ItemMovement>();
             ItemMovement entity = new ItemMovement();
             entity.StringProperty = "foo";
             ItemMovement entity2 = new ItemMovement();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemMovementService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.ItemMovementServiceBase.Save(RLM.Contruction.Entities.ItemMovement)">
            <summary>
            	public virtualmethod that Saves a ItemMovement object into the datasource using a transaction.
            </summary>
            <param name="entity">ItemMovement object to Save.</param>
            <remarks>After Saveing into the datasource, the ItemMovement object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ItemMovement entity = ItemMovementService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ItemMovementService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.ItemMovementServiceBase.Save(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.ItemMovement})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ItemMovement</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ItemMovement</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ItemMovement.
             <code><![CDATA[
             TList<ItemMovement> list = new TList<ItemMovement>();
             ItemMovement entity = new ItemMovement();
             entity.StringProperty = "foo";
             ItemMovement entity2 = new ItemMovement();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemMovementService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.ItemMovementServiceBase.Delete(RLM.Contruction.Entities.ItemMovement)">
            <summary>
            	public virtualmethod that Deletes a ItemMovement object into the datasource using a transaction.
            </summary>
            <param name="entity">ItemMovement object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ItemMovement object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ItemMovement entity = ItemMovementService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ItemMovementService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.ItemMovementServiceBase.Delete(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.ItemMovement})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ItemMovement</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ItemMovement</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ItemMovement.
             <code><![CDATA[
             TList<ItemMovement> list = new TList<ItemMovement>();
             ItemMovement entity = new ItemMovement();
             entity.StringProperty = "foo";
             ItemMovement entity2 = new ItemMovement();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemMovementService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.ItemMovementServiceBase.Delete(RLM.Contruction.Entities.ItemMovementKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemMovementServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 repositoryMovementId
            </summary>
            <param name="repositoryMovementId">ItemMovement pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemMovementServiceBase.DeepLoadByRepositoryMovementId(System.Int32,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Contruction.Entities.ItemMovement"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <param name="repositoryMovementId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ItemMovement Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.ItemMovement"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemMovementServiceBase.DeepLoad(RLM.Contruction.Entities.ItemMovement)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ItemMovement Object</param>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.ItemMovementServiceBase.DeepLoad(RLM.Contruction.Entities.ItemMovement)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Contruction.Service.ItemMovementServiceBase.DeepLoad(RLM.Contruction.Entities.ItemMovement,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.ItemMovementServiceBase.DeepLoad(RLM.Contruction.Entities.ItemMovement)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ItemMovement Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Contruction.Service.ItemMovementServiceBase.DeepLoad(RLM.Contruction.Entities.ItemMovement,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Contruction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.ItemMovement"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ItemMovement Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Contruction.Service.ItemMovementServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.ItemMovement})">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.ItemMovementServiceBase.DeepLoad(RLM.Contruction.Entities.ItemMovement)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Contruction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Contruction.Service.ItemMovementServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.ItemMovement},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.ItemMovementServiceBase.DeepLoad(RLM.Contruction.Entities.ItemMovement)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Contruction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Contruction.Service.ItemMovementServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.ItemMovement},System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Contruction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Contruction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Contruction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Contruction.Entities.ItemMovement"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Contruction.Service.ItemMovementServiceBase.DeepSave(RLM.Contruction.Entities.ItemMovement)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Contruction.Entities.ItemMovement"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ItemMovement Object</param>
        </member>
        <member name="M:RLM.Contruction.Service.ItemMovementServiceBase.DeepSave(RLM.Contruction.Entities.ItemMovement,RLM.Contruction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ItemMovement object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ItemMovement Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ItemMovement</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Contruction.Service.ItemMovementServiceBase.DeepSave(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.ItemMovement})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Contruction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ItemMovement} Object</param>
        </member>
        <member name="M:RLM.Contruction.Service.ItemMovementServiceBase.DeepSave(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.ItemMovement},RLM.Contruction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Contruction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Contruction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ItemMovement Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Contruction.Service.ItemMovementServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Service.StaffService">
            <summary>
             An component type implementation of the 'Staff' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:RLM.Contruction.Service.StaffServiceBase">
            <summary>
             An object representation of the 'Staff' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Staff.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Contruction.Entities.Staff"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Contruction.Service.StaffServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Contruction.Entities.Staff"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Contruction.Service.StaffServiceBase.CreateStaff(System.Nullable{System.Int32},System.String,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Contruction.Entities.Staff"/> instance.
            </summary>
            <param name="userId"></param>
            <param name="code"></param>
            <param name="firstName"></param>
            <param name="lastName"></param>
            <param name="middleName"></param>
        </member>
        <member name="M:RLM.Contruction.Service.StaffServiceBase.GetByUserId(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the FK_Staffs_Users key.
            	FK_Staffs_Users Description: 
            </summary>
            <param name="userId"></param>
            <returns>Returns a generic collection of Staff objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.StaffServiceBase.GetByUserId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the FK_Staffs_Users key.
            	FK_Staffs_Users Description: 
            </summary>
            <param name="userId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Contruction.Entities.TList`1"/> of <c>Staff</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.StaffServiceBase.Get(RLM.Contruction.Entities.StaffKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.StaffServiceBase.GetByStaffId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the primary key PK_Staffs index.
            </summary>
            <param name="staffId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Staff"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.StaffServiceBase.GetByStaffId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the primary key PK_Staffs index.
            </summary>
            <param name="staffId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Staff"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.StaffServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Contruction.Entities.Staff"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Service.StaffServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Contruction.Entities.Staff"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Contruction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Contruction.Service.StaffServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Contruction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Staff</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.StaffServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Contruction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Staff</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.StaffServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Staff</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.StaffServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.StaffServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.StaffServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Staff} of <c>Staff</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.StaffServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Staff</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.StaffServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Staff</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.StaffServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Staff</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.StaffServiceBase.Insert(RLM.Contruction.Entities.Staff)">
            <summary>
            	public virtualmethod that Inserts a Staff object into the datasource using a transaction.
            </summary>
            <param name="entity">Staff object to Insert.</param>
            <remarks>After Inserting into the datasource, the Staff object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Staff entity = new Staff();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	StaffService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.StaffServiceBase.Insert(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Staff})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Staff</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Staff</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Staff.
             <code><![CDATA[
             TList<Staff> list = new TList<Staff>();
             Staff entity = new Staff();
             entity.StringProperty = "foo";
             Staff entity2 = new Staff();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StaffService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.StaffServiceBase.Update(RLM.Contruction.Entities.Staff)">
            <summary>
            	public virtualmethod that Updates a Staff object into the datasource using a transaction.
            </summary>
            <param name="entity">Staff object to Update.</param>
            <remarks>After Updateing into the datasource, the Staff object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Staff entity = StaffService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	StaffService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.StaffServiceBase.Update(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Staff})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Staff</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Staff</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Staff.
             <code><![CDATA[
             TList<Staff> list = new TList<Staff>();
             Staff entity = new Staff();
             entity.StringProperty = "foo";
             Staff entity2 = new Staff();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StaffService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.StaffServiceBase.Save(RLM.Contruction.Entities.Staff)">
            <summary>
            	public virtualmethod that Saves a Staff object into the datasource using a transaction.
            </summary>
            <param name="entity">Staff object to Save.</param>
            <remarks>After Saveing into the datasource, the Staff object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Staff entity = StaffService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	StaffService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.StaffServiceBase.Save(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Staff})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Staff</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Staff</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Staff.
             <code><![CDATA[
             TList<Staff> list = new TList<Staff>();
             Staff entity = new Staff();
             entity.StringProperty = "foo";
             Staff entity2 = new Staff();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StaffService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.StaffServiceBase.Delete(RLM.Contruction.Entities.Staff)">
            <summary>
            	public virtualmethod that Deletes a Staff object into the datasource using a transaction.
            </summary>
            <param name="entity">Staff object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Staff object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Staff entity = StaffService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	StaffService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.StaffServiceBase.Delete(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Staff})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Staff</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Staff</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Staff.
             <code><![CDATA[
             TList<Staff> list = new TList<Staff>();
             Staff entity = new Staff();
             entity.StringProperty = "foo";
             Staff entity2 = new Staff();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StaffService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.StaffServiceBase.Delete(RLM.Contruction.Entities.StaffKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.StaffServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 staffId
            </summary>
            <param name="staffId">Staff pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.StaffServiceBase.DeepLoadByStaffId(System.Int32,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Contruction.Entities.Staff"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <param name="staffId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Staff Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Staff"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.StaffServiceBase.DeepLoad(RLM.Contruction.Entities.Staff)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Staff Object</param>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.StaffServiceBase.DeepLoad(RLM.Contruction.Entities.Staff)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Contruction.Service.StaffServiceBase.DeepLoad(RLM.Contruction.Entities.Staff,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.StaffServiceBase.DeepLoad(RLM.Contruction.Entities.Staff)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Staff Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Contruction.Service.StaffServiceBase.DeepLoad(RLM.Contruction.Entities.Staff,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Contruction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.Staff"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Staff Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Contruction.Service.StaffServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Staff})">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.StaffServiceBase.DeepLoad(RLM.Contruction.Entities.Staff)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Contruction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Contruction.Service.StaffServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Staff},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.StaffServiceBase.DeepLoad(RLM.Contruction.Entities.Staff)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Contruction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Contruction.Service.StaffServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Staff},System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Contruction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Contruction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Contruction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Contruction.Entities.Staff"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Contruction.Service.StaffServiceBase.DeepSave(RLM.Contruction.Entities.Staff)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Contruction.Entities.Staff"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Staff Object</param>
        </member>
        <member name="M:RLM.Contruction.Service.StaffServiceBase.DeepSave(RLM.Contruction.Entities.Staff,RLM.Contruction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Staff object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Staff Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Staff</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Contruction.Service.StaffServiceBase.DeepSave(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Staff})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Contruction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Staff} Object</param>
        </member>
        <member name="M:RLM.Contruction.Service.StaffServiceBase.DeepSave(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Staff},RLM.Contruction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Contruction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Contruction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Staff Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Contruction.Service.StaffServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Service.StaffService.#ctor">
            <summary>
            Initializes a new instance of the StaffService class.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Service.UnitServiceBase">
            <summary>
             An object representation of the 'Unit' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Unit.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Contruction.Entities.Unit"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Contruction.Service.UnitServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Contruction.Entities.Unit"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Contruction.Service.UnitServiceBase.CreateUnit(System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Contruction.Entities.Unit"/> instance.
            </summary>
            <param name="name"></param>
            <param name="description"></param>
            <param name="isActive"></param>
            <param name="isDeletable"></param>
            <param name="priority"></param>
            <param name="isBaseUnit">true if it is primary unit, exaple: kg, m, ....</param>
            <param name="creationDate"></param>
            <param name="creationUserId"></param>
            <param name="lastModificationDate"></param>
            <param name="lastModificationUserId"></param>
        </member>
        <member name="M:RLM.Contruction.Service.UnitServiceBase.Get(RLM.Contruction.Entities.UnitKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UnitServiceBase.GetByUnitId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the primary key PK_Units index.
            </summary>
            <param name="unitId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Unit"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UnitServiceBase.GetByUnitId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the primary key PK_Units index.
            </summary>
            <param name="unitId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Unit"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UnitServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Contruction.Entities.Unit"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Service.UnitServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Contruction.Entities.Unit"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Contruction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Contruction.Service.UnitServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Contruction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Unit</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UnitServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Contruction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Unit</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UnitServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Unit</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UnitServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UnitServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UnitServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Unit} of <c>Unit</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UnitServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Unit</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UnitServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Unit</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UnitServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Unit</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UnitServiceBase.Insert(RLM.Contruction.Entities.Unit)">
            <summary>
            	public virtualmethod that Inserts a Unit object into the datasource using a transaction.
            </summary>
            <param name="entity">Unit object to Insert.</param>
            <remarks>After Inserting into the datasource, the Unit object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Unit entity = new Unit();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	UnitService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.UnitServiceBase.Insert(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Unit})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Unit</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Unit</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Unit.
             <code><![CDATA[
             TList<Unit> list = new TList<Unit>();
             Unit entity = new Unit();
             entity.StringProperty = "foo";
             Unit entity2 = new Unit();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UnitService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.UnitServiceBase.Update(RLM.Contruction.Entities.Unit)">
            <summary>
            	public virtualmethod that Updates a Unit object into the datasource using a transaction.
            </summary>
            <param name="entity">Unit object to Update.</param>
            <remarks>After Updateing into the datasource, the Unit object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Unit entity = UnitService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	UnitService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.UnitServiceBase.Update(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Unit})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Unit</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Unit</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Unit.
             <code><![CDATA[
             TList<Unit> list = new TList<Unit>();
             Unit entity = new Unit();
             entity.StringProperty = "foo";
             Unit entity2 = new Unit();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UnitService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.UnitServiceBase.Save(RLM.Contruction.Entities.Unit)">
            <summary>
            	public virtualmethod that Saves a Unit object into the datasource using a transaction.
            </summary>
            <param name="entity">Unit object to Save.</param>
            <remarks>After Saveing into the datasource, the Unit object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Unit entity = UnitService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	UnitService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.UnitServiceBase.Save(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Unit})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Unit</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Unit</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Unit.
             <code><![CDATA[
             TList<Unit> list = new TList<Unit>();
             Unit entity = new Unit();
             entity.StringProperty = "foo";
             Unit entity2 = new Unit();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UnitService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.UnitServiceBase.Delete(RLM.Contruction.Entities.Unit)">
            <summary>
            	public virtualmethod that Deletes a Unit object into the datasource using a transaction.
            </summary>
            <param name="entity">Unit object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Unit object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Unit entity = UnitService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	UnitService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.UnitServiceBase.Delete(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Unit})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Unit</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Unit</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Unit.
             <code><![CDATA[
             TList<Unit> list = new TList<Unit>();
             Unit entity = new Unit();
             entity.StringProperty = "foo";
             Unit entity2 = new Unit();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UnitService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.UnitServiceBase.Delete(RLM.Contruction.Entities.UnitKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UnitServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 unitId
            </summary>
            <param name="unitId">Unit pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UnitServiceBase.GetByToUnitIdFromUnitConvertor(System.Int32)">
            <summary>
            	Gets Unit objects from the datasource by ToUnitId in the
            	UnitConvertor table. Table Unit is related to table Unit
            	through the (M:N) relationship defined in the UnitConvertor table.
            </summary>
            <param name="toUnitId"></param>
            <returns>Returns a typed collection of Unit objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UnitServiceBase.GetByToUnitIdFromUnitConvertor(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Unit objects from the datasource by ToUnitId in the
            	UnitConvertor table. Table Unit is related to table Unit
            	through the (M:N) relationship defined in the UnitConvertor table.
            </summary>
            <param name="toUnitId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Unit objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UnitServiceBase.GetByFromUnitIdFromUnitConvertor(System.Int32)">
            <summary>
            	Gets Unit objects from the datasource by FromUnitId in the
            	UnitConvertor table. Table Unit is related to table Unit
            	through the (M:N) relationship defined in the UnitConvertor table.
            </summary>
            <param name="fromUnitId"></param>
            <returns>Returns a typed collection of Unit objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UnitServiceBase.GetByFromUnitIdFromUnitConvertor(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Unit objects from the datasource by FromUnitId in the
            	UnitConvertor table. Table Unit is related to table Unit
            	through the (M:N) relationship defined in the UnitConvertor table.
            </summary>
            <param name="fromUnitId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Unit objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UnitServiceBase.DeepLoadByUnitId(System.Int32,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Contruction.Entities.Unit"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <param name="unitId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Unit Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Unit"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UnitServiceBase.DeepLoad(RLM.Contruction.Entities.Unit)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Unit Object</param>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.UnitServiceBase.DeepLoad(RLM.Contruction.Entities.Unit)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Contruction.Service.UnitServiceBase.DeepLoad(RLM.Contruction.Entities.Unit,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.UnitServiceBase.DeepLoad(RLM.Contruction.Entities.Unit)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Unit Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Contruction.Service.UnitServiceBase.DeepLoad(RLM.Contruction.Entities.Unit,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Contruction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.Unit"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Unit Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Contruction.Service.UnitServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Unit})">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.UnitServiceBase.DeepLoad(RLM.Contruction.Entities.Unit)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Contruction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Contruction.Service.UnitServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Unit},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.UnitServiceBase.DeepLoad(RLM.Contruction.Entities.Unit)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Contruction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Contruction.Service.UnitServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Unit},System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Contruction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Contruction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Contruction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Contruction.Entities.Unit"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Contruction.Service.UnitServiceBase.DeepSave(RLM.Contruction.Entities.Unit)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Contruction.Entities.Unit"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Unit Object</param>
        </member>
        <member name="M:RLM.Contruction.Service.UnitServiceBase.DeepSave(RLM.Contruction.Entities.Unit,RLM.Contruction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Unit object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Unit Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Unit</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Contruction.Service.UnitServiceBase.DeepSave(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Unit})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Contruction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Unit} Object</param>
        </member>
        <member name="M:RLM.Contruction.Service.UnitServiceBase.DeepSave(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Unit},RLM.Contruction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Contruction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Contruction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Unit Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Contruction.Service.UnitServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Service.RoleOfStaffServiceBase">
            <summary>
             An object representation of the 'RoleOfStaff' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the RoleOfStaff.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Contruction.Entities.RoleOfStaff"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Contruction.Service.RoleOfStaffServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Contruction.Entities.RoleOfStaff"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Contruction.Service.RoleOfStaffServiceBase.CreateRoleOfStaff(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Contruction.Entities.RoleOfStaff"/> instance.
            </summary>
            <param name="roleOfStaffId"></param>
            <param name="staffId"></param>
            <param name="roleId"></param>
            <param name="resourceId"></param>
            <param name="resourceType">Type of entity, It Can be: project, department, ......</param>
            <param name="isApprove"></param>
            <param name="isActive"></param>
            <param name="status"></param>
            <param name="fromDate"></param>
            <param name="toDate"></param>
            <param name="creationDate"></param>
            <param name="creationUserId"></param>
            <param name="lastModificationDate"></param>
            <param name="lastModificationUserId"></param>
        </member>
        <member name="M:RLM.Contruction.Service.RoleOfStaffServiceBase.GetByRoleId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the FK_RoleOfStaffs_Roles key.
            	FK_RoleOfStaffs_Roles Description: 
            </summary>
            <param name="roleId"></param>
            <returns>Returns a generic collection of RoleOfStaff objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.RoleOfStaffServiceBase.GetByRoleId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the FK_RoleOfStaffs_Roles key.
            	FK_RoleOfStaffs_Roles Description: 
            </summary>
            <param name="roleId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Contruction.Entities.TList`1"/> of <c>RoleOfStaff</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.RoleOfStaffServiceBase.GetByStaffId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the FK_RoleOfStaffs_Staffs key.
            	FK_RoleOfStaffs_Staffs Description: 
            </summary>
            <param name="staffId"></param>
            <returns>Returns a generic collection of RoleOfStaff objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.RoleOfStaffServiceBase.GetByStaffId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the FK_RoleOfStaffs_Staffs key.
            	FK_RoleOfStaffs_Staffs Description: 
            </summary>
            <param name="staffId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Contruction.Entities.TList`1"/> of <c>RoleOfStaff</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.RoleOfStaffServiceBase.Get(RLM.Contruction.Entities.RoleOfStaffKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.RoleOfStaffServiceBase.GetByRoleOfStaffId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the primary key PK_RoleOfStaffs index.
            </summary>
            <param name="roleOfStaffId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.RoleOfStaff"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.RoleOfStaffServiceBase.GetByRoleOfStaffId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the primary key PK_RoleOfStaffs index.
            </summary>
            <param name="roleOfStaffId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.RoleOfStaff"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.RoleOfStaffServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Contruction.Entities.RoleOfStaff"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Service.RoleOfStaffServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Contruction.Entities.RoleOfStaff"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Contruction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Contruction.Service.RoleOfStaffServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Contruction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>RoleOfStaff</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.RoleOfStaffServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Contruction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>RoleOfStaff</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.RoleOfStaffServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>RoleOfStaff</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.RoleOfStaffServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.RoleOfStaffServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.RoleOfStaffServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{RoleOfStaff} of <c>RoleOfStaff</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.RoleOfStaffServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>RoleOfStaff</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.RoleOfStaffServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>RoleOfStaff</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.RoleOfStaffServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>RoleOfStaff</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.RoleOfStaffServiceBase.Insert(RLM.Contruction.Entities.RoleOfStaff)">
            <summary>
            	public virtualmethod that Inserts a RoleOfStaff object into the datasource using a transaction.
            </summary>
            <param name="entity">RoleOfStaff object to Insert.</param>
            <remarks>After Inserting into the datasource, the RoleOfStaff object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            RoleOfStaff entity = new RoleOfStaff();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	RoleOfStaffService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.RoleOfStaffServiceBase.Insert(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.RoleOfStaff})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>RoleOfStaff</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>RoleOfStaff</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of RoleOfStaff.
             <code><![CDATA[
             TList<RoleOfStaff> list = new TList<RoleOfStaff>();
             RoleOfStaff entity = new RoleOfStaff();
             entity.StringProperty = "foo";
             RoleOfStaff entity2 = new RoleOfStaff();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	RoleOfStaffService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.RoleOfStaffServiceBase.Update(RLM.Contruction.Entities.RoleOfStaff)">
            <summary>
            	public virtualmethod that Updates a RoleOfStaff object into the datasource using a transaction.
            </summary>
            <param name="entity">RoleOfStaff object to Update.</param>
            <remarks>After Updateing into the datasource, the RoleOfStaff object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            RoleOfStaff entity = RoleOfStaffService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	RoleOfStaffService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.RoleOfStaffServiceBase.Update(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.RoleOfStaff})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>RoleOfStaff</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>RoleOfStaff</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of RoleOfStaff.
             <code><![CDATA[
             TList<RoleOfStaff> list = new TList<RoleOfStaff>();
             RoleOfStaff entity = new RoleOfStaff();
             entity.StringProperty = "foo";
             RoleOfStaff entity2 = new RoleOfStaff();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	RoleOfStaffService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.RoleOfStaffServiceBase.Save(RLM.Contruction.Entities.RoleOfStaff)">
            <summary>
            	public virtualmethod that Saves a RoleOfStaff object into the datasource using a transaction.
            </summary>
            <param name="entity">RoleOfStaff object to Save.</param>
            <remarks>After Saveing into the datasource, the RoleOfStaff object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            RoleOfStaff entity = RoleOfStaffService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	RoleOfStaffService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.RoleOfStaffServiceBase.Save(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.RoleOfStaff})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>RoleOfStaff</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>RoleOfStaff</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of RoleOfStaff.
             <code><![CDATA[
             TList<RoleOfStaff> list = new TList<RoleOfStaff>();
             RoleOfStaff entity = new RoleOfStaff();
             entity.StringProperty = "foo";
             RoleOfStaff entity2 = new RoleOfStaff();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	RoleOfStaffService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.RoleOfStaffServiceBase.Delete(RLM.Contruction.Entities.RoleOfStaff)">
            <summary>
            	public virtualmethod that Deletes a RoleOfStaff object into the datasource using a transaction.
            </summary>
            <param name="entity">RoleOfStaff object to Delete.</param>
            <remarks>After Deleteing into the datasource, the RoleOfStaff object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            RoleOfStaff entity = RoleOfStaffService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	RoleOfStaffService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.RoleOfStaffServiceBase.Delete(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.RoleOfStaff})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>RoleOfStaff</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>RoleOfStaff</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of RoleOfStaff.
             <code><![CDATA[
             TList<RoleOfStaff> list = new TList<RoleOfStaff>();
             RoleOfStaff entity = new RoleOfStaff();
             entity.StringProperty = "foo";
             RoleOfStaff entity2 = new RoleOfStaff();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	RoleOfStaffService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.RoleOfStaffServiceBase.Delete(RLM.Contruction.Entities.RoleOfStaffKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.RoleOfStaffServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 roleOfStaffId
            </summary>
            <param name="roleOfStaffId">RoleOfStaff pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.RoleOfStaffServiceBase.DeepLoadByRoleOfStaffId(System.Int32,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Contruction.Entities.RoleOfStaff"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <param name="roleOfStaffId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">RoleOfStaff Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.RoleOfStaff"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.RoleOfStaffServiceBase.DeepLoad(RLM.Contruction.Entities.RoleOfStaff)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">RoleOfStaff Object</param>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.RoleOfStaffServiceBase.DeepLoad(RLM.Contruction.Entities.RoleOfStaff)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Contruction.Service.RoleOfStaffServiceBase.DeepLoad(RLM.Contruction.Entities.RoleOfStaff,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.RoleOfStaffServiceBase.DeepLoad(RLM.Contruction.Entities.RoleOfStaff)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">RoleOfStaff Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Contruction.Service.RoleOfStaffServiceBase.DeepLoad(RLM.Contruction.Entities.RoleOfStaff,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Contruction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.RoleOfStaff"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">RoleOfStaff Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Contruction.Service.RoleOfStaffServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.RoleOfStaff})">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.RoleOfStaffServiceBase.DeepLoad(RLM.Contruction.Entities.RoleOfStaff)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Contruction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Contruction.Service.RoleOfStaffServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.RoleOfStaff},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.RoleOfStaffServiceBase.DeepLoad(RLM.Contruction.Entities.RoleOfStaff)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Contruction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Contruction.Service.RoleOfStaffServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.RoleOfStaff},System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Contruction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Contruction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Contruction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Contruction.Entities.RoleOfStaff"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Contruction.Service.RoleOfStaffServiceBase.DeepSave(RLM.Contruction.Entities.RoleOfStaff)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Contruction.Entities.RoleOfStaff"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">RoleOfStaff Object</param>
        </member>
        <member name="M:RLM.Contruction.Service.RoleOfStaffServiceBase.DeepSave(RLM.Contruction.Entities.RoleOfStaff,RLM.Contruction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the RoleOfStaff object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">RoleOfStaff Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>RoleOfStaff</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Contruction.Service.RoleOfStaffServiceBase.DeepSave(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.RoleOfStaff})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Contruction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{RoleOfStaff} Object</param>
        </member>
        <member name="M:RLM.Contruction.Service.RoleOfStaffServiceBase.DeepSave(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.RoleOfStaff},RLM.Contruction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Contruction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Contruction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">RoleOfStaff Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Contruction.Service.RoleOfStaffServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Service.IProcessorResult">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Service.IProcessorResult.AddBrokenRulesList(System.Type,RLM.Contruction.Entities.Validation.BrokenRulesList)">
            <summary>
            Provides a method to aggregate BrokenRuleList Collections Based on their Type 
            if they are invalid.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Service.IProcessorResult.Result">
             <summary>
            	Provides a result of the current process.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:RLM.Contruction.Service.IProcessorResult.BrokenRulesLists">
             <summary>
            	Provides a list of broken rules for the entire process.
             </summary>
            <value>A list of rules that were broken in the process</value>
        </member>
        <member name="P:RLM.Contruction.Service.IProcessorResult.FinalProcessorState">
            <summary>
            Provides the final processor state the operation.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Service.ProcessorState">
            <summary>
            ProcessorState enumeration.
            </summary>
        </member>
        <member name="F:RLM.Contruction.Service.ProcessorState.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:RLM.Contruction.Service.ProcessorState.Running">
            <summary>
            Running
            </summary>
        </member>
        <member name="F:RLM.Contruction.Service.ProcessorState.Stopped">
            <summary>
            Stopped
            </summary>
        </member>
        <member name="F:RLM.Contruction.Service.ProcessorState.Completed">
            <summary>
            Completed
            </summary>
        </member>
        <member name="T:RLM.Contruction.Service.ItemInProjectServiceBase">
            <summary>
             An object representation of the 'ItemInProject' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ItemInProject.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Contruction.Entities.ItemInProject"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInProjectServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Contruction.Entities.ItemInProject"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInProjectServiceBase.CreateItemInProject(System.Int64,System.Int32,System.Int32,System.Double,System.Decimal,System.Decimal,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Contruction.Entities.ItemInProject"/> instance.
            </summary>
            <param name="itemId"></param>
            <param name="projectId"></param>
            <param name="contractId"></param>
            <param name="quantity"></param>
            <param name="unitPrice"></param>
            <param name="total"></param>
            <param name="isActive"></param>
            <param name="isApprove"></param>
            <param name="creationDate"></param>
            <param name="creationUserId"></param>
            <param name="lastModificationDate"></param>
            <param name="lastModificationUserId"></param>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInProjectServiceBase.GetByContractId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the FK_ItemInProjects_Contracts key.
            	FK_ItemInProjects_Contracts Description: 
            </summary>
            <param name="contractId"></param>
            <returns>Returns a generic collection of ItemInProject objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInProjectServiceBase.GetByContractId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the FK_ItemInProjects_Contracts key.
            	FK_ItemInProjects_Contracts Description: 
            </summary>
            <param name="contractId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Contruction.Entities.TList`1"/> of <c>ItemInProject</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInProjectServiceBase.GetByProjectId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the FK_ItemInProjects_Projects key.
            	FK_ItemInProjects_Projects Description: 
            </summary>
            <param name="projectId"></param>
            <returns>Returns a generic collection of ItemInProject objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInProjectServiceBase.GetByProjectId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the FK_ItemInProjects_Projects key.
            	FK_ItemInProjects_Projects Description: 
            </summary>
            <param name="projectId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Contruction.Entities.TList`1"/> of <c>ItemInProject</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInProjectServiceBase.GetByItemId(System.Int64)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the FK_ItemInProjects_Items key.
            	FK_ItemInProjects_Items Description: 
            </summary>
            <param name="itemId"></param>
            <returns>Returns a generic collection of ItemInProject objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInProjectServiceBase.GetByItemId(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the FK_ItemInProjects_Items key.
            	FK_ItemInProjects_Items Description: 
            </summary>
            <param name="itemId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Contruction.Entities.TList`1"/> of <c>ItemInProject</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInProjectServiceBase.Get(RLM.Contruction.Entities.ItemInProjectKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInProjectServiceBase.GetByItemInProjectId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the primary key PK_ItemInProjects index.
            </summary>
            <param name="itemInProjectId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.ItemInProject"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInProjectServiceBase.GetByItemInProjectId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the primary key PK_ItemInProjects index.
            </summary>
            <param name="itemInProjectId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.ItemInProject"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInProjectServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Contruction.Entities.ItemInProject"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInProjectServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Contruction.Entities.ItemInProject"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Contruction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInProjectServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Contruction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ItemInProject</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInProjectServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Contruction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ItemInProject</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInProjectServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ItemInProject</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInProjectServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInProjectServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInProjectServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ItemInProject} of <c>ItemInProject</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInProjectServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ItemInProject</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInProjectServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ItemInProject</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInProjectServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ItemInProject</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInProjectServiceBase.Insert(RLM.Contruction.Entities.ItemInProject)">
            <summary>
            	public virtualmethod that Inserts a ItemInProject object into the datasource using a transaction.
            </summary>
            <param name="entity">ItemInProject object to Insert.</param>
            <remarks>After Inserting into the datasource, the ItemInProject object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ItemInProject entity = new ItemInProject();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ItemInProjectService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInProjectServiceBase.Insert(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.ItemInProject})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ItemInProject</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ItemInProject</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ItemInProject.
             <code><![CDATA[
             TList<ItemInProject> list = new TList<ItemInProject>();
             ItemInProject entity = new ItemInProject();
             entity.StringProperty = "foo";
             ItemInProject entity2 = new ItemInProject();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemInProjectService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInProjectServiceBase.Update(RLM.Contruction.Entities.ItemInProject)">
            <summary>
            	public virtualmethod that Updates a ItemInProject object into the datasource using a transaction.
            </summary>
            <param name="entity">ItemInProject object to Update.</param>
            <remarks>After Updateing into the datasource, the ItemInProject object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ItemInProject entity = ItemInProjectService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ItemInProjectService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInProjectServiceBase.Update(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.ItemInProject})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ItemInProject</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ItemInProject</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ItemInProject.
             <code><![CDATA[
             TList<ItemInProject> list = new TList<ItemInProject>();
             ItemInProject entity = new ItemInProject();
             entity.StringProperty = "foo";
             ItemInProject entity2 = new ItemInProject();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemInProjectService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInProjectServiceBase.Save(RLM.Contruction.Entities.ItemInProject)">
            <summary>
            	public virtualmethod that Saves a ItemInProject object into the datasource using a transaction.
            </summary>
            <param name="entity">ItemInProject object to Save.</param>
            <remarks>After Saveing into the datasource, the ItemInProject object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ItemInProject entity = ItemInProjectService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ItemInProjectService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInProjectServiceBase.Save(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.ItemInProject})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ItemInProject</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ItemInProject</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ItemInProject.
             <code><![CDATA[
             TList<ItemInProject> list = new TList<ItemInProject>();
             ItemInProject entity = new ItemInProject();
             entity.StringProperty = "foo";
             ItemInProject entity2 = new ItemInProject();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemInProjectService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInProjectServiceBase.Delete(RLM.Contruction.Entities.ItemInProject)">
            <summary>
            	public virtualmethod that Deletes a ItemInProject object into the datasource using a transaction.
            </summary>
            <param name="entity">ItemInProject object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ItemInProject object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ItemInProject entity = ItemInProjectService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ItemInProjectService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInProjectServiceBase.Delete(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.ItemInProject})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ItemInProject</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ItemInProject</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ItemInProject.
             <code><![CDATA[
             TList<ItemInProject> list = new TList<ItemInProject>();
             ItemInProject entity = new ItemInProject();
             entity.StringProperty = "foo";
             ItemInProject entity2 = new ItemInProject();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemInProjectService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInProjectServiceBase.Delete(RLM.Contruction.Entities.ItemInProjectKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInProjectServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 itemInProjectId
            </summary>
            <param name="itemInProjectId">ItemInProject pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInProjectServiceBase.DeepLoadByItemInProjectId(System.Int32,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Contruction.Entities.ItemInProject"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <param name="itemInProjectId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ItemInProject Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.ItemInProject"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInProjectServiceBase.DeepLoad(RLM.Contruction.Entities.ItemInProject)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ItemInProject Object</param>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.ItemInProjectServiceBase.DeepLoad(RLM.Contruction.Entities.ItemInProject)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInProjectServiceBase.DeepLoad(RLM.Contruction.Entities.ItemInProject,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.ItemInProjectServiceBase.DeepLoad(RLM.Contruction.Entities.ItemInProject)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ItemInProject Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInProjectServiceBase.DeepLoad(RLM.Contruction.Entities.ItemInProject,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Contruction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.ItemInProject"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ItemInProject Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInProjectServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.ItemInProject})">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.ItemInProjectServiceBase.DeepLoad(RLM.Contruction.Entities.ItemInProject)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Contruction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInProjectServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.ItemInProject},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.ItemInProjectServiceBase.DeepLoad(RLM.Contruction.Entities.ItemInProject)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Contruction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInProjectServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.ItemInProject},System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Contruction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Contruction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Contruction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Contruction.Entities.ItemInProject"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInProjectServiceBase.DeepSave(RLM.Contruction.Entities.ItemInProject)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Contruction.Entities.ItemInProject"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ItemInProject Object</param>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInProjectServiceBase.DeepSave(RLM.Contruction.Entities.ItemInProject,RLM.Contruction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ItemInProject object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ItemInProject Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ItemInProject</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInProjectServiceBase.DeepSave(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.ItemInProject})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Contruction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ItemInProject} Object</param>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInProjectServiceBase.DeepSave(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.ItemInProject},RLM.Contruction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Contruction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Contruction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ItemInProject Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Contruction.Service.ItemInProjectServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Service.PartnerServiceBase">
            <summary>
             An object representation of the 'Partner' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Partner.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Contruction.Entities.Partner"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Contruction.Service.PartnerServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Contruction.Entities.Partner"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Contruction.Service.PartnerServiceBase.CreatePartner(System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Contruction.Entities.Partner"/> instance.
            </summary>
            <param name="groupId">Group to classify partner</param>
            <param name="code"></param>
            <param name="name"></param>
            <param name="nameInEng"></param>
            <param name="taxCode"></param>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="phone"></param>
            <param name="fax"></param>
            <param name="email"></param>
            <param name="isDeletable"></param>
            <param name="isActive"></param>
            <param name="comment"></param>
            <param name="creationDate"></param>
            <param name="creationUserId"></param>
            <param name="lastModificationDate"></param>
            <param name="lastModificationUserId"></param>
        </member>
        <member name="M:RLM.Contruction.Service.PartnerServiceBase.Get(RLM.Contruction.Entities.PartnerKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.PartnerServiceBase.GetByPartnerId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the primary key PK_Departments index.
            </summary>
            <param name="partnerId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Partner"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.PartnerServiceBase.GetByPartnerId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the primary key PK_Departments index.
            </summary>
            <param name="partnerId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Partner"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.PartnerServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Contruction.Entities.Partner"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Service.PartnerServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Contruction.Entities.Partner"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Contruction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Contruction.Service.PartnerServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Contruction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Partner</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.PartnerServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Contruction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Partner</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.PartnerServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Partner</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.PartnerServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.PartnerServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.PartnerServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Partner} of <c>Partner</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.PartnerServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Partner</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.PartnerServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Partner</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.PartnerServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Partner</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.PartnerServiceBase.Insert(RLM.Contruction.Entities.Partner)">
            <summary>
            	public virtualmethod that Inserts a Partner object into the datasource using a transaction.
            </summary>
            <param name="entity">Partner object to Insert.</param>
            <remarks>After Inserting into the datasource, the Partner object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Partner entity = new Partner();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	PartnerService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.PartnerServiceBase.Insert(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Partner})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Partner</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Partner</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Partner.
             <code><![CDATA[
             TList<Partner> list = new TList<Partner>();
             Partner entity = new Partner();
             entity.StringProperty = "foo";
             Partner entity2 = new Partner();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PartnerService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.PartnerServiceBase.Update(RLM.Contruction.Entities.Partner)">
            <summary>
            	public virtualmethod that Updates a Partner object into the datasource using a transaction.
            </summary>
            <param name="entity">Partner object to Update.</param>
            <remarks>After Updateing into the datasource, the Partner object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Partner entity = PartnerService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	PartnerService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.PartnerServiceBase.Update(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Partner})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Partner</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Partner</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Partner.
             <code><![CDATA[
             TList<Partner> list = new TList<Partner>();
             Partner entity = new Partner();
             entity.StringProperty = "foo";
             Partner entity2 = new Partner();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PartnerService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.PartnerServiceBase.Save(RLM.Contruction.Entities.Partner)">
            <summary>
            	public virtualmethod that Saves a Partner object into the datasource using a transaction.
            </summary>
            <param name="entity">Partner object to Save.</param>
            <remarks>After Saveing into the datasource, the Partner object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Partner entity = PartnerService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	PartnerService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.PartnerServiceBase.Save(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Partner})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Partner</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Partner</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Partner.
             <code><![CDATA[
             TList<Partner> list = new TList<Partner>();
             Partner entity = new Partner();
             entity.StringProperty = "foo";
             Partner entity2 = new Partner();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PartnerService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.PartnerServiceBase.Delete(RLM.Contruction.Entities.Partner)">
            <summary>
            	public virtualmethod that Deletes a Partner object into the datasource using a transaction.
            </summary>
            <param name="entity">Partner object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Partner object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Partner entity = PartnerService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	PartnerService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.PartnerServiceBase.Delete(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Partner})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Partner</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Partner</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Partner.
             <code><![CDATA[
             TList<Partner> list = new TList<Partner>();
             Partner entity = new Partner();
             entity.StringProperty = "foo";
             Partner entity2 = new Partner();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PartnerService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.PartnerServiceBase.Delete(RLM.Contruction.Entities.PartnerKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.PartnerServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 partnerId
            </summary>
            <param name="partnerId">Partner pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.PartnerServiceBase.DeepLoadByPartnerId(System.Int32,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Contruction.Entities.Partner"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <param name="partnerId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Partner Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Partner"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.PartnerServiceBase.DeepLoad(RLM.Contruction.Entities.Partner)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Partner Object</param>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.PartnerServiceBase.DeepLoad(RLM.Contruction.Entities.Partner)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Contruction.Service.PartnerServiceBase.DeepLoad(RLM.Contruction.Entities.Partner,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.PartnerServiceBase.DeepLoad(RLM.Contruction.Entities.Partner)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Partner Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Contruction.Service.PartnerServiceBase.DeepLoad(RLM.Contruction.Entities.Partner,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Contruction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.Partner"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Partner Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Contruction.Service.PartnerServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Partner})">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.PartnerServiceBase.DeepLoad(RLM.Contruction.Entities.Partner)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Contruction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Contruction.Service.PartnerServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Partner},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.PartnerServiceBase.DeepLoad(RLM.Contruction.Entities.Partner)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Contruction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Contruction.Service.PartnerServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Partner},System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Contruction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Contruction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Contruction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Contruction.Entities.Partner"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Contruction.Service.PartnerServiceBase.DeepSave(RLM.Contruction.Entities.Partner)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Contruction.Entities.Partner"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Partner Object</param>
        </member>
        <member name="M:RLM.Contruction.Service.PartnerServiceBase.DeepSave(RLM.Contruction.Entities.Partner,RLM.Contruction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Partner object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Partner Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Partner</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Contruction.Service.PartnerServiceBase.DeepSave(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Partner})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Contruction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Partner} Object</param>
        </member>
        <member name="M:RLM.Contruction.Service.PartnerServiceBase.DeepSave(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Partner},RLM.Contruction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Contruction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Contruction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Partner Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Contruction.Service.PartnerServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Service.ItemInProjectService">
            <summary>
             An component type implementation of the 'ItemInProject' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInProjectService.#ctor">
            <summary>
            Initializes a new instance of the ItemInProjectService class.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Service.UserGroupService">
            <summary>
             An component type implementation of the 'UserGroup' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:RLM.Contruction.Service.UserGroupServiceBase">
            <summary>
             An object representation of the 'UserGroup' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the UserGroup.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Contruction.Entities.UserGroup"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Contruction.Service.UserGroupServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Contruction.Entities.UserGroup"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Contruction.Service.UserGroupServiceBase.CreateUserGroup(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Contruction.Entities.UserGroup"/> instance.
            </summary>
            <param name="userGroupName"></param>
            <param name="isActive"></param>
            <param name="isDeletable"></param>
            <param name="priority"></param>
            <param name="creationDate"></param>
            <param name="creationUserId"></param>
            <param name="lastModificationDate"></param>
            <param name="lastModificationUserId"></param>
        </member>
        <member name="M:RLM.Contruction.Service.UserGroupServiceBase.Get(RLM.Contruction.Entities.UserGroupKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UserGroupServiceBase.GetByUserGroupId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the primary key PK_UserGroups index.
            </summary>
            <param name="userGroupId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.UserGroup"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UserGroupServiceBase.GetByUserGroupId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the primary key PK_UserGroups index.
            </summary>
            <param name="userGroupId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.UserGroup"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UserGroupServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Contruction.Entities.UserGroup"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Service.UserGroupServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Contruction.Entities.UserGroup"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Contruction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Contruction.Service.UserGroupServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Contruction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>UserGroup</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UserGroupServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Contruction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>UserGroup</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UserGroupServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>UserGroup</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UserGroupServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UserGroupServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UserGroupServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{UserGroup} of <c>UserGroup</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UserGroupServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>UserGroup</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UserGroupServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>UserGroup</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UserGroupServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>UserGroup</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UserGroupServiceBase.Insert(RLM.Contruction.Entities.UserGroup)">
            <summary>
            	public virtualmethod that Inserts a UserGroup object into the datasource using a transaction.
            </summary>
            <param name="entity">UserGroup object to Insert.</param>
            <remarks>After Inserting into the datasource, the UserGroup object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            UserGroup entity = new UserGroup();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	UserGroupService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.UserGroupServiceBase.Insert(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.UserGroup})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>UserGroup</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>UserGroup</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of UserGroup.
             <code><![CDATA[
             TList<UserGroup> list = new TList<UserGroup>();
             UserGroup entity = new UserGroup();
             entity.StringProperty = "foo";
             UserGroup entity2 = new UserGroup();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UserGroupService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.UserGroupServiceBase.Update(RLM.Contruction.Entities.UserGroup)">
            <summary>
            	public virtualmethod that Updates a UserGroup object into the datasource using a transaction.
            </summary>
            <param name="entity">UserGroup object to Update.</param>
            <remarks>After Updateing into the datasource, the UserGroup object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            UserGroup entity = UserGroupService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	UserGroupService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.UserGroupServiceBase.Update(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.UserGroup})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>UserGroup</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>UserGroup</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of UserGroup.
             <code><![CDATA[
             TList<UserGroup> list = new TList<UserGroup>();
             UserGroup entity = new UserGroup();
             entity.StringProperty = "foo";
             UserGroup entity2 = new UserGroup();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UserGroupService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.UserGroupServiceBase.Save(RLM.Contruction.Entities.UserGroup)">
            <summary>
            	public virtualmethod that Saves a UserGroup object into the datasource using a transaction.
            </summary>
            <param name="entity">UserGroup object to Save.</param>
            <remarks>After Saveing into the datasource, the UserGroup object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            UserGroup entity = UserGroupService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	UserGroupService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.UserGroupServiceBase.Save(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.UserGroup})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>UserGroup</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>UserGroup</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of UserGroup.
             <code><![CDATA[
             TList<UserGroup> list = new TList<UserGroup>();
             UserGroup entity = new UserGroup();
             entity.StringProperty = "foo";
             UserGroup entity2 = new UserGroup();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UserGroupService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.UserGroupServiceBase.Delete(RLM.Contruction.Entities.UserGroup)">
            <summary>
            	public virtualmethod that Deletes a UserGroup object into the datasource using a transaction.
            </summary>
            <param name="entity">UserGroup object to Delete.</param>
            <remarks>After Deleteing into the datasource, the UserGroup object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            UserGroup entity = UserGroupService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	UserGroupService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.UserGroupServiceBase.Delete(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.UserGroup})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>UserGroup</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>UserGroup</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of UserGroup.
             <code><![CDATA[
             TList<UserGroup> list = new TList<UserGroup>();
             UserGroup entity = new UserGroup();
             entity.StringProperty = "foo";
             UserGroup entity2 = new UserGroup();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UserGroupService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.UserGroupServiceBase.Delete(RLM.Contruction.Entities.UserGroupKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UserGroupServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 userGroupId
            </summary>
            <param name="userGroupId">UserGroup pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UserGroupServiceBase.DeepLoadByUserGroupId(System.Int32,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Contruction.Entities.UserGroup"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <param name="userGroupId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">UserGroup Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.UserGroup"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UserGroupServiceBase.DeepLoad(RLM.Contruction.Entities.UserGroup)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">UserGroup Object</param>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.UserGroupServiceBase.DeepLoad(RLM.Contruction.Entities.UserGroup)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Contruction.Service.UserGroupServiceBase.DeepLoad(RLM.Contruction.Entities.UserGroup,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.UserGroupServiceBase.DeepLoad(RLM.Contruction.Entities.UserGroup)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">UserGroup Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Contruction.Service.UserGroupServiceBase.DeepLoad(RLM.Contruction.Entities.UserGroup,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Contruction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.UserGroup"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">UserGroup Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Contruction.Service.UserGroupServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.UserGroup})">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.UserGroupServiceBase.DeepLoad(RLM.Contruction.Entities.UserGroup)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Contruction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Contruction.Service.UserGroupServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.UserGroup},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.UserGroupServiceBase.DeepLoad(RLM.Contruction.Entities.UserGroup)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Contruction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Contruction.Service.UserGroupServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.UserGroup},System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Contruction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Contruction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Contruction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Contruction.Entities.UserGroup"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Contruction.Service.UserGroupServiceBase.DeepSave(RLM.Contruction.Entities.UserGroup)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Contruction.Entities.UserGroup"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">UserGroup Object</param>
        </member>
        <member name="M:RLM.Contruction.Service.UserGroupServiceBase.DeepSave(RLM.Contruction.Entities.UserGroup,RLM.Contruction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the UserGroup object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">UserGroup Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>UserGroup</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Contruction.Service.UserGroupServiceBase.DeepSave(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.UserGroup})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Contruction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{UserGroup} Object</param>
        </member>
        <member name="M:RLM.Contruction.Service.UserGroupServiceBase.DeepSave(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.UserGroup},RLM.Contruction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Contruction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Contruction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">UserGroup Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Contruction.Service.UserGroupServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Service.UserGroupService.#ctor">
            <summary>
            Initializes a new instance of the UserGroupService class.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Service.RoleService">
            <summary>
             An component type implementation of the 'Role' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:RLM.Contruction.Service.RoleServiceBase">
            <summary>
             An object representation of the 'Role' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Role.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Contruction.Entities.Role"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Contruction.Service.RoleServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Contruction.Entities.Role"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Contruction.Service.RoleServiceBase.CreateRole(System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Contruction.Entities.Role"/> instance.
            </summary>
            <param name="code"></param>
            <param name="name"></param>
            <param name="isActive"></param>
            <param name="isDeletable"></param>
            <param name="type">Type of roles, example: 1: system roles, 2: permission roles, 3: project roles, 4: department roles, ....</param>
            <param name="creationDate"></param>
            <param name="creationUserId"></param>
            <param name="lastModificationUserId"></param>
            <param name="lastModificationDate"></param>
        </member>
        <member name="M:RLM.Contruction.Service.RoleServiceBase.Get(RLM.Contruction.Entities.RoleKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.RoleServiceBase.GetByRoleId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the primary key PK_Roles index.
            </summary>
            <param name="roleId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Role"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.RoleServiceBase.GetByRoleId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the primary key PK_Roles index.
            </summary>
            <param name="roleId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Role"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.RoleServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Contruction.Entities.Role"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Service.RoleServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Contruction.Entities.Role"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Contruction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Contruction.Service.RoleServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Contruction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Role</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.RoleServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Contruction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Role</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.RoleServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Role</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.RoleServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.RoleServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.RoleServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Role} of <c>Role</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.RoleServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Role</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.RoleServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Role</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.RoleServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Role</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.RoleServiceBase.Insert(RLM.Contruction.Entities.Role)">
            <summary>
            	public virtualmethod that Inserts a Role object into the datasource using a transaction.
            </summary>
            <param name="entity">Role object to Insert.</param>
            <remarks>After Inserting into the datasource, the Role object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Role entity = new Role();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	RoleService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.RoleServiceBase.Insert(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Role})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Role</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Role</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Role.
             <code><![CDATA[
             TList<Role> list = new TList<Role>();
             Role entity = new Role();
             entity.StringProperty = "foo";
             Role entity2 = new Role();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	RoleService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.RoleServiceBase.Update(RLM.Contruction.Entities.Role)">
            <summary>
            	public virtualmethod that Updates a Role object into the datasource using a transaction.
            </summary>
            <param name="entity">Role object to Update.</param>
            <remarks>After Updateing into the datasource, the Role object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Role entity = RoleService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	RoleService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.RoleServiceBase.Update(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Role})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Role</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Role</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Role.
             <code><![CDATA[
             TList<Role> list = new TList<Role>();
             Role entity = new Role();
             entity.StringProperty = "foo";
             Role entity2 = new Role();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	RoleService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.RoleServiceBase.Save(RLM.Contruction.Entities.Role)">
            <summary>
            	public virtualmethod that Saves a Role object into the datasource using a transaction.
            </summary>
            <param name="entity">Role object to Save.</param>
            <remarks>After Saveing into the datasource, the Role object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Role entity = RoleService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	RoleService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.RoleServiceBase.Save(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Role})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Role</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Role</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Role.
             <code><![CDATA[
             TList<Role> list = new TList<Role>();
             Role entity = new Role();
             entity.StringProperty = "foo";
             Role entity2 = new Role();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	RoleService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.RoleServiceBase.Delete(RLM.Contruction.Entities.Role)">
            <summary>
            	public virtualmethod that Deletes a Role object into the datasource using a transaction.
            </summary>
            <param name="entity">Role object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Role object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Role entity = RoleService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	RoleService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.RoleServiceBase.Delete(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Role})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Role</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Role</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Role.
             <code><![CDATA[
             TList<Role> list = new TList<Role>();
             Role entity = new Role();
             entity.StringProperty = "foo";
             Role entity2 = new Role();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	RoleService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.RoleServiceBase.Delete(RLM.Contruction.Entities.RoleKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.RoleServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 roleId
            </summary>
            <param name="roleId">Role pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.RoleServiceBase.DeepLoadByRoleId(System.Int32,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Contruction.Entities.Role"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <param name="roleId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Role Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Role"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.RoleServiceBase.DeepLoad(RLM.Contruction.Entities.Role)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Role Object</param>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.RoleServiceBase.DeepLoad(RLM.Contruction.Entities.Role)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Contruction.Service.RoleServiceBase.DeepLoad(RLM.Contruction.Entities.Role,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.RoleServiceBase.DeepLoad(RLM.Contruction.Entities.Role)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Role Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Contruction.Service.RoleServiceBase.DeepLoad(RLM.Contruction.Entities.Role,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Contruction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.Role"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Role Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Contruction.Service.RoleServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Role})">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.RoleServiceBase.DeepLoad(RLM.Contruction.Entities.Role)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Contruction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Contruction.Service.RoleServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Role},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.RoleServiceBase.DeepLoad(RLM.Contruction.Entities.Role)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Contruction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Contruction.Service.RoleServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Role},System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Contruction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Contruction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Contruction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Contruction.Entities.Role"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Contruction.Service.RoleServiceBase.DeepSave(RLM.Contruction.Entities.Role)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Contruction.Entities.Role"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Role Object</param>
        </member>
        <member name="M:RLM.Contruction.Service.RoleServiceBase.DeepSave(RLM.Contruction.Entities.Role,RLM.Contruction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Role object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Role Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Role</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Contruction.Service.RoleServiceBase.DeepSave(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Role})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Contruction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Role} Object</param>
        </member>
        <member name="M:RLM.Contruction.Service.RoleServiceBase.DeepSave(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Role},RLM.Contruction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Contruction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Contruction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Role Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Contruction.Service.RoleServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Service.RoleService.#ctor">
            <summary>
            Initializes a new instance of the RoleService class.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Service.ProjectServiceBase">
            <summary>
             An object representation of the 'Project' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Project.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Contruction.Entities.Project"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Contruction.Service.ProjectServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Contruction.Entities.Project"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Contruction.Service.ProjectServiceBase.CreateProject(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Contruction.Entities.Project"/> instance.
            </summary>
            <param name="projectId"></param>
            <param name="groupId"></param>
            <param name="contractId"></param>
            <param name="code"></param>
            <param name="name"></param>
            <param name="designedPrice"></param>
            <param name="finalPrice"></param>
            <param name="isActive"></param>
            <param name="isApprove"></param>
            <param name="status"></param>
            <param name="creationDate"></param>
            <param name="creationUserId"></param>
            <param name="lastModificationDate"></param>
            <param name="lastModificationUserId"></param>
        </member>
        <member name="M:RLM.Contruction.Service.ProjectServiceBase.GetByContractId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the FK_Projects_Contracts key.
            	FK_Projects_Contracts Description: 
            </summary>
            <param name="contractId"></param>
            <returns>Returns a generic collection of Project objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ProjectServiceBase.GetByContractId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the FK_Projects_Contracts key.
            	FK_Projects_Contracts Description: 
            </summary>
            <param name="contractId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Contruction.Entities.TList`1"/> of <c>Project</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ProjectServiceBase.GetByGroupId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the FK_Projects_Groups1 key.
            	FK_Projects_Groups1 Description: 
            </summary>
            <param name="groupId"></param>
            <returns>Returns a generic collection of Project objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ProjectServiceBase.GetByGroupId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the FK_Projects_Groups1 key.
            	FK_Projects_Groups1 Description: 
            </summary>
            <param name="groupId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Contruction.Entities.TList`1"/> of <c>Project</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ProjectServiceBase.Get(RLM.Contruction.Entities.ProjectKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ProjectServiceBase.GetByProjectId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the primary key PK_Projects index.
            </summary>
            <param name="projectId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Project"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ProjectServiceBase.GetByProjectId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the primary key PK_Projects index.
            </summary>
            <param name="projectId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Project"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ProjectServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Contruction.Entities.Project"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Service.ProjectServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Contruction.Entities.Project"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Contruction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Contruction.Service.ProjectServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Contruction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Project</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ProjectServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Contruction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Project</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ProjectServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Project</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ProjectServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ProjectServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ProjectServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Project} of <c>Project</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ProjectServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Project</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ProjectServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Project</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ProjectServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Project</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ProjectServiceBase.Insert(RLM.Contruction.Entities.Project)">
            <summary>
            	public virtualmethod that Inserts a Project object into the datasource using a transaction.
            </summary>
            <param name="entity">Project object to Insert.</param>
            <remarks>After Inserting into the datasource, the Project object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Project entity = new Project();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ProjectService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.ProjectServiceBase.Insert(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Project})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Project</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Project</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Project.
             <code><![CDATA[
             TList<Project> list = new TList<Project>();
             Project entity = new Project();
             entity.StringProperty = "foo";
             Project entity2 = new Project();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProjectService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.ProjectServiceBase.Update(RLM.Contruction.Entities.Project)">
            <summary>
            	public virtualmethod that Updates a Project object into the datasource using a transaction.
            </summary>
            <param name="entity">Project object to Update.</param>
            <remarks>After Updateing into the datasource, the Project object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Project entity = ProjectService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ProjectService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.ProjectServiceBase.Update(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Project})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Project</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Project</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Project.
             <code><![CDATA[
             TList<Project> list = new TList<Project>();
             Project entity = new Project();
             entity.StringProperty = "foo";
             Project entity2 = new Project();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProjectService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.ProjectServiceBase.Save(RLM.Contruction.Entities.Project)">
            <summary>
            	public virtualmethod that Saves a Project object into the datasource using a transaction.
            </summary>
            <param name="entity">Project object to Save.</param>
            <remarks>After Saveing into the datasource, the Project object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Project entity = ProjectService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ProjectService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.ProjectServiceBase.Save(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Project})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Project</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Project</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Project.
             <code><![CDATA[
             TList<Project> list = new TList<Project>();
             Project entity = new Project();
             entity.StringProperty = "foo";
             Project entity2 = new Project();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProjectService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.ProjectServiceBase.Delete(RLM.Contruction.Entities.Project)">
            <summary>
            	public virtualmethod that Deletes a Project object into the datasource using a transaction.
            </summary>
            <param name="entity">Project object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Project object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Project entity = ProjectService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ProjectService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.ProjectServiceBase.Delete(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Project})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Project</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Project</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Project.
             <code><![CDATA[
             TList<Project> list = new TList<Project>();
             Project entity = new Project();
             entity.StringProperty = "foo";
             Project entity2 = new Project();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProjectService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.ProjectServiceBase.Delete(RLM.Contruction.Entities.ProjectKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ProjectServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 projectId
            </summary>
            <param name="projectId">Project pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ProjectServiceBase.DeepLoadByProjectId(System.Int32,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Contruction.Entities.Project"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <param name="projectId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Project Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Project"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ProjectServiceBase.DeepLoad(RLM.Contruction.Entities.Project)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Project Object</param>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.ProjectServiceBase.DeepLoad(RLM.Contruction.Entities.Project)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Contruction.Service.ProjectServiceBase.DeepLoad(RLM.Contruction.Entities.Project,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.ProjectServiceBase.DeepLoad(RLM.Contruction.Entities.Project)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Project Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Contruction.Service.ProjectServiceBase.DeepLoad(RLM.Contruction.Entities.Project,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Contruction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.Project"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Project Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Contruction.Service.ProjectServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Project})">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.ProjectServiceBase.DeepLoad(RLM.Contruction.Entities.Project)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Contruction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Contruction.Service.ProjectServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Project},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.ProjectServiceBase.DeepLoad(RLM.Contruction.Entities.Project)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Contruction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Contruction.Service.ProjectServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Project},System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Contruction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Contruction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Contruction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Contruction.Entities.Project"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Contruction.Service.ProjectServiceBase.DeepSave(RLM.Contruction.Entities.Project)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Contruction.Entities.Project"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Project Object</param>
        </member>
        <member name="M:RLM.Contruction.Service.ProjectServiceBase.DeepSave(RLM.Contruction.Entities.Project,RLM.Contruction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Project object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Project Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Project</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Contruction.Service.ProjectServiceBase.DeepSave(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Project})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Contruction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Project} Object</param>
        </member>
        <member name="M:RLM.Contruction.Service.ProjectServiceBase.DeepSave(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Project},RLM.Contruction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Contruction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Contruction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Project Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Contruction.Service.ProjectServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Service.RepositoryService">
            <summary>
             An component type implementation of the 'Repository' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:RLM.Contruction.Service.RepositoryServiceBase">
            <summary>
             An object representation of the 'Repository' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Repository.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Contruction.Entities.Repository"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Contruction.Service.RepositoryServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Contruction.Entities.Repository"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Contruction.Service.RepositoryServiceBase.CreateRepository(System.Int32,System.Nullable{System.Int32},System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Contruction.Entities.Repository"/> instance.
            </summary>
            <param name="repositoryId"></param>
            <param name="repositoryManagerStaffId">Id of staff who manage this store</param>
            <param name="code"></param>
            <param name="name"></param>
            <param name="address">Address of store</param>
            <param name="provinceId">Province of store</param>
            <param name="isActive"></param>
            <param name="priority"></param>
            <param name="creationDate"></param>
            <param name="creationUserId"></param>
            <param name="lastModificationDate"></param>
            <param name="lastModificationUserId"></param>
        </member>
        <member name="M:RLM.Contruction.Service.RepositoryServiceBase.Get(RLM.Contruction.Entities.RepositoryKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.RepositoryServiceBase.GetByRepositoryId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the primary key PK_RepositoryGroups index.
            </summary>
            <param name="repositoryId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Repository"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.RepositoryServiceBase.GetByRepositoryId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the primary key PK_RepositoryGroups index.
            </summary>
            <param name="repositoryId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Repository"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.RepositoryServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Contruction.Entities.Repository"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Service.RepositoryServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Contruction.Entities.Repository"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Contruction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Contruction.Service.RepositoryServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Contruction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Repository</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.RepositoryServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Contruction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Repository</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.RepositoryServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Repository</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.RepositoryServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.RepositoryServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.RepositoryServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Repository} of <c>Repository</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.RepositoryServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Repository</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.RepositoryServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Repository</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.RepositoryServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Repository</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.RepositoryServiceBase.Insert(RLM.Contruction.Entities.Repository)">
            <summary>
            	public virtualmethod that Inserts a Repository object into the datasource using a transaction.
            </summary>
            <param name="entity">Repository object to Insert.</param>
            <remarks>After Inserting into the datasource, the Repository object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Repository entity = new Repository();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	RepositoryService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.RepositoryServiceBase.Insert(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Repository})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Repository</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Repository</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Repository.
             <code><![CDATA[
             TList<Repository> list = new TList<Repository>();
             Repository entity = new Repository();
             entity.StringProperty = "foo";
             Repository entity2 = new Repository();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	RepositoryService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.RepositoryServiceBase.Update(RLM.Contruction.Entities.Repository)">
            <summary>
            	public virtualmethod that Updates a Repository object into the datasource using a transaction.
            </summary>
            <param name="entity">Repository object to Update.</param>
            <remarks>After Updateing into the datasource, the Repository object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Repository entity = RepositoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	RepositoryService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.RepositoryServiceBase.Update(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Repository})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Repository</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Repository</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Repository.
             <code><![CDATA[
             TList<Repository> list = new TList<Repository>();
             Repository entity = new Repository();
             entity.StringProperty = "foo";
             Repository entity2 = new Repository();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	RepositoryService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.RepositoryServiceBase.Save(RLM.Contruction.Entities.Repository)">
            <summary>
            	public virtualmethod that Saves a Repository object into the datasource using a transaction.
            </summary>
            <param name="entity">Repository object to Save.</param>
            <remarks>After Saveing into the datasource, the Repository object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Repository entity = RepositoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	RepositoryService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.RepositoryServiceBase.Save(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Repository})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Repository</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Repository</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Repository.
             <code><![CDATA[
             TList<Repository> list = new TList<Repository>();
             Repository entity = new Repository();
             entity.StringProperty = "foo";
             Repository entity2 = new Repository();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	RepositoryService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.RepositoryServiceBase.Delete(RLM.Contruction.Entities.Repository)">
            <summary>
            	public virtualmethod that Deletes a Repository object into the datasource using a transaction.
            </summary>
            <param name="entity">Repository object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Repository object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Repository entity = RepositoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	RepositoryService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.RepositoryServiceBase.Delete(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Repository})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Repository</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Repository</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Repository.
             <code><![CDATA[
             TList<Repository> list = new TList<Repository>();
             Repository entity = new Repository();
             entity.StringProperty = "foo";
             Repository entity2 = new Repository();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	RepositoryService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.RepositoryServiceBase.Delete(RLM.Contruction.Entities.RepositoryKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.RepositoryServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 repositoryId
            </summary>
            <param name="repositoryId">Repository pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.RepositoryServiceBase.GetByItemIdFromItemInRepository(System.Int64)">
            <summary>
            	Gets Repository objects from the datasource by ItemId in the
            	ItemInRepository table. Table Repository is related to table Item
            	through the (M:N) relationship defined in the ItemInRepository table.
            </summary>
            <param name="itemId"></param>
            <returns>Returns a typed collection of Repository objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.RepositoryServiceBase.GetByItemIdFromItemInRepository(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Repository objects from the datasource by ItemId in the
            	ItemInRepository table. Table Repository is related to table Item
            	through the (M:N) relationship defined in the ItemInRepository table.
            </summary>
            <param name="itemId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Repository objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.RepositoryServiceBase.DeepLoadByRepositoryId(System.Int32,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Contruction.Entities.Repository"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <param name="repositoryId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Repository Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Repository"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.RepositoryServiceBase.DeepLoad(RLM.Contruction.Entities.Repository)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Repository Object</param>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.RepositoryServiceBase.DeepLoad(RLM.Contruction.Entities.Repository)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Contruction.Service.RepositoryServiceBase.DeepLoad(RLM.Contruction.Entities.Repository,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.RepositoryServiceBase.DeepLoad(RLM.Contruction.Entities.Repository)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Repository Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Contruction.Service.RepositoryServiceBase.DeepLoad(RLM.Contruction.Entities.Repository,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Contruction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.Repository"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Repository Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Contruction.Service.RepositoryServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Repository})">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.RepositoryServiceBase.DeepLoad(RLM.Contruction.Entities.Repository)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Contruction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Contruction.Service.RepositoryServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Repository},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.RepositoryServiceBase.DeepLoad(RLM.Contruction.Entities.Repository)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Contruction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Contruction.Service.RepositoryServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Repository},System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Contruction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Contruction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Contruction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Contruction.Entities.Repository"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Contruction.Service.RepositoryServiceBase.DeepSave(RLM.Contruction.Entities.Repository)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Contruction.Entities.Repository"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Repository Object</param>
        </member>
        <member name="M:RLM.Contruction.Service.RepositoryServiceBase.DeepSave(RLM.Contruction.Entities.Repository,RLM.Contruction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Repository object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Repository Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Repository</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Contruction.Service.RepositoryServiceBase.DeepSave(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Repository})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Contruction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Repository} Object</param>
        </member>
        <member name="M:RLM.Contruction.Service.RepositoryServiceBase.DeepSave(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Repository},RLM.Contruction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Contruction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Contruction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Repository Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Contruction.Service.RepositoryServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Service.RepositoryService.#ctor">
            <summary>
            Initializes a new instance of the RepositoryService class.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Service.UnitService">
            <summary>
             An component type implementation of the 'Unit' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:RLM.Contruction.Service.UnitService.#ctor">
            <summary>
            Initializes a new instance of the UnitService class.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Service.ContactorService">
            <summary>
             An component type implementation of the 'Contactor' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:RLM.Contruction.Service.ContactorServiceBase">
            <summary>
             An object representation of the 'Contactor' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Contactor.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Contruction.Entities.Contactor"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Contruction.Service.ContactorServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Contruction.Entities.Contactor"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Contruction.Service.ContactorServiceBase.CreateContactor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.String,System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Contruction.Entities.Contactor"/> instance.
            </summary>
            <param name="partnerId">Id of department, company that this contactor is being belong to</param>
            <param name="groupId">group to classify contactor</param>
            <param name="code"></param>
            <param name="name"></param>
            <param name="jobTitle">Job title of contactor in their company</param>
            <param name="email"></param>
            <param name="mobile"></param>
            <param name="phone"></param>
            <param name="ext"></param>
            <param name="isActive"></param>
            <param name="priority"></param>
            <param name="comment"></param>
            <param name="creationDate"></param>
            <param name="creationUserId"></param>
            <param name="lastModifitionDate"></param>
            <param name="lastModificationUserId"></param>
        </member>
        <member name="M:RLM.Contruction.Service.ContactorServiceBase.Get(RLM.Contruction.Entities.ContactorKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ContactorServiceBase.GetByContractId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the primary key PK_Contactors index.
            </summary>
            <param name="contractId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Contactor"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ContactorServiceBase.GetByContractId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the primary key PK_Contactors index.
            </summary>
            <param name="contractId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Contactor"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ContactorServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Contruction.Entities.Contactor"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Service.ContactorServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Contruction.Entities.Contactor"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Contruction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Contruction.Service.ContactorServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Contruction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Contactor</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ContactorServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Contruction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Contactor</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ContactorServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Contactor</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ContactorServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ContactorServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ContactorServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Contactor} of <c>Contactor</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ContactorServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Contactor</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ContactorServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Contactor</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ContactorServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Contactor</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ContactorServiceBase.Insert(RLM.Contruction.Entities.Contactor)">
            <summary>
            	public virtualmethod that Inserts a Contactor object into the datasource using a transaction.
            </summary>
            <param name="entity">Contactor object to Insert.</param>
            <remarks>After Inserting into the datasource, the Contactor object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Contactor entity = new Contactor();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ContactorService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.ContactorServiceBase.Insert(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Contactor})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Contactor</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Contactor</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Contactor.
             <code><![CDATA[
             TList<Contactor> list = new TList<Contactor>();
             Contactor entity = new Contactor();
             entity.StringProperty = "foo";
             Contactor entity2 = new Contactor();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ContactorService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.ContactorServiceBase.Update(RLM.Contruction.Entities.Contactor)">
            <summary>
            	public virtualmethod that Updates a Contactor object into the datasource using a transaction.
            </summary>
            <param name="entity">Contactor object to Update.</param>
            <remarks>After Updateing into the datasource, the Contactor object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Contactor entity = ContactorService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ContactorService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.ContactorServiceBase.Update(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Contactor})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Contactor</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Contactor</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Contactor.
             <code><![CDATA[
             TList<Contactor> list = new TList<Contactor>();
             Contactor entity = new Contactor();
             entity.StringProperty = "foo";
             Contactor entity2 = new Contactor();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ContactorService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.ContactorServiceBase.Save(RLM.Contruction.Entities.Contactor)">
            <summary>
            	public virtualmethod that Saves a Contactor object into the datasource using a transaction.
            </summary>
            <param name="entity">Contactor object to Save.</param>
            <remarks>After Saveing into the datasource, the Contactor object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Contactor entity = ContactorService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ContactorService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.ContactorServiceBase.Save(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Contactor})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Contactor</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Contactor</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Contactor.
             <code><![CDATA[
             TList<Contactor> list = new TList<Contactor>();
             Contactor entity = new Contactor();
             entity.StringProperty = "foo";
             Contactor entity2 = new Contactor();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ContactorService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.ContactorServiceBase.Delete(RLM.Contruction.Entities.Contactor)">
            <summary>
            	public virtualmethod that Deletes a Contactor object into the datasource using a transaction.
            </summary>
            <param name="entity">Contactor object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Contactor object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Contactor entity = ContactorService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ContactorService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.ContactorServiceBase.Delete(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Contactor})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Contactor</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Contactor</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Contactor.
             <code><![CDATA[
             TList<Contactor> list = new TList<Contactor>();
             Contactor entity = new Contactor();
             entity.StringProperty = "foo";
             Contactor entity2 = new Contactor();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ContactorService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.ContactorServiceBase.Delete(RLM.Contruction.Entities.ContactorKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ContactorServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 contractId
            </summary>
            <param name="contractId">Contactor pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ContactorServiceBase.DeepLoadByContractId(System.Int32,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Contruction.Entities.Contactor"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <param name="contractId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Contactor Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Contactor"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ContactorServiceBase.DeepLoad(RLM.Contruction.Entities.Contactor)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Contactor Object</param>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.ContactorServiceBase.DeepLoad(RLM.Contruction.Entities.Contactor)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Contruction.Service.ContactorServiceBase.DeepLoad(RLM.Contruction.Entities.Contactor,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.ContactorServiceBase.DeepLoad(RLM.Contruction.Entities.Contactor)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Contactor Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Contruction.Service.ContactorServiceBase.DeepLoad(RLM.Contruction.Entities.Contactor,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Contruction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.Contactor"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Contactor Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Contruction.Service.ContactorServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Contactor})">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.ContactorServiceBase.DeepLoad(RLM.Contruction.Entities.Contactor)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Contruction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Contruction.Service.ContactorServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Contactor},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.ContactorServiceBase.DeepLoad(RLM.Contruction.Entities.Contactor)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Contruction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Contruction.Service.ContactorServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Contactor},System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Contruction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Contruction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Contruction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Contruction.Entities.Contactor"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Contruction.Service.ContactorServiceBase.DeepSave(RLM.Contruction.Entities.Contactor)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Contruction.Entities.Contactor"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Contactor Object</param>
        </member>
        <member name="M:RLM.Contruction.Service.ContactorServiceBase.DeepSave(RLM.Contruction.Entities.Contactor,RLM.Contruction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Contactor object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Contactor Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Contactor</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Contruction.Service.ContactorServiceBase.DeepSave(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Contactor})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Contruction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Contactor} Object</param>
        </member>
        <member name="M:RLM.Contruction.Service.ContactorServiceBase.DeepSave(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Contactor},RLM.Contruction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Contruction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Contruction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Contactor Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Contruction.Service.ContactorServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Service.ContactorService.#ctor">
            <summary>
            Initializes a new instance of the ContactorService class.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Service.ItemMovementService">
            <summary>
             An component type implementation of the 'ItemMovement' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:RLM.Contruction.Service.ItemMovementService.#ctor">
            <summary>
            Initializes a new instance of the ItemMovementService class.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Service.ItemServiceBase">
            <summary>
             An object representation of the 'Item' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Item.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Contruction.Entities.Item"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Contruction.Service.ItemServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Contruction.Entities.Item"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Contruction.Service.ItemServiceBase.CreateItem(System.Int64,System.Nullable{System.Int32},System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Contruction.Entities.Item"/> instance.
            </summary>
            <param name="itemId"></param>
            <param name="groupId">Item group</param>
            <param name="code"></param>
            <param name="name"></param>
            <param name="description"></param>
            <param name="baseUnitId">Base unit of product, It can not be change base in any time</param>
            <param name="usedUnitId">Current unit id, It can be change base on repository</param>
            <param name="density">the value of UsedUnitId/BaseUnitId. it is constant</param>
            <param name="totalQuantity">Total of item in all repositories</param>
            <param name="availabelQuantity">Total availabel of all item in all repositories</param>
            <param name="reserveQuantity">Total amount that waiting for approve to do some action (repository movement). ReserveQuantity + AvailabelQuantity + ReturnQuantity=TotalQuantity</param>
            <param name="returnQuantity">Total quantity that have been returned to provider</param>
            <param name="adjustQuantity"></param>
            <param name="status">Status of item</param>
            <param name="isActive">Is false, item can be assigned to any project</param>
            <param name="isDeletable">true if item can be delete</param>
            <param name="priority"></param>
            <param name="creationDate"></param>
            <param name="creationUserId"></param>
            <param name="lastModificationDate"></param>
            <param name="lastModificationUserId"></param>
        </member>
        <member name="M:RLM.Contruction.Service.ItemServiceBase.GetByBaseUnitId(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the FK_Items_Units key.
            	FK_Items_Units Description: 
            </summary>
            <param name="baseUnitId">Base unit of product, It can not be change base in any time</param>
            <returns>Returns a generic collection of Item objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemServiceBase.GetByBaseUnitId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the FK_Items_Units key.
            	FK_Items_Units Description: 
            </summary>
            <param name="baseUnitId">Base unit of product, It can not be change base in any time</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Contruction.Entities.TList`1"/> of <c>Item</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemServiceBase.GetByUsedUnitId(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the FK_Items_Units1 key.
            	FK_Items_Units1 Description: 
            </summary>
            <param name="usedUnitId">Current unit id, It can be change base on repository</param>
            <returns>Returns a generic collection of Item objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemServiceBase.GetByUsedUnitId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the FK_Items_Units1 key.
            	FK_Items_Units1 Description: 
            </summary>
            <param name="usedUnitId">Current unit id, It can be change base on repository</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Contruction.Entities.TList`1"/> of <c>Item</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemServiceBase.GetByGroupId(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the FK_Items_Groups key.
            	FK_Items_Groups Description: 
            </summary>
            <param name="groupId">Item group</param>
            <returns>Returns a generic collection of Item objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemServiceBase.GetByGroupId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the FK_Items_Groups key.
            	FK_Items_Groups Description: 
            </summary>
            <param name="groupId">Item group</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Contruction.Entities.TList`1"/> of <c>Item</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemServiceBase.Get(RLM.Contruction.Entities.ItemKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemServiceBase.GetByItemId(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the primary key PK_Items index.
            </summary>
            <param name="itemId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Item"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemServiceBase.GetByItemId(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the primary key PK_Items index.
            </summary>
            <param name="itemId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Item"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Contruction.Entities.Item"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Contruction.Entities.Item"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Contruction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Contruction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Item</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Contruction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Item</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Item</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Item} of <c>Item</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Item</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Item</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Item</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemServiceBase.Insert(RLM.Contruction.Entities.Item)">
            <summary>
            	public virtualmethod that Inserts a Item object into the datasource using a transaction.
            </summary>
            <param name="entity">Item object to Insert.</param>
            <remarks>After Inserting into the datasource, the Item object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Item entity = new Item();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ItemService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.ItemServiceBase.Insert(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Item})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Item</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Item</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Item.
             <code><![CDATA[
             TList<Item> list = new TList<Item>();
             Item entity = new Item();
             entity.StringProperty = "foo";
             Item entity2 = new Item();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.ItemServiceBase.Update(RLM.Contruction.Entities.Item)">
            <summary>
            	public virtualmethod that Updates a Item object into the datasource using a transaction.
            </summary>
            <param name="entity">Item object to Update.</param>
            <remarks>After Updateing into the datasource, the Item object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Item entity = ItemService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ItemService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.ItemServiceBase.Update(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Item})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Item</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Item</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Item.
             <code><![CDATA[
             TList<Item> list = new TList<Item>();
             Item entity = new Item();
             entity.StringProperty = "foo";
             Item entity2 = new Item();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.ItemServiceBase.Save(RLM.Contruction.Entities.Item)">
            <summary>
            	public virtualmethod that Saves a Item object into the datasource using a transaction.
            </summary>
            <param name="entity">Item object to Save.</param>
            <remarks>After Saveing into the datasource, the Item object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Item entity = ItemService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ItemService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.ItemServiceBase.Save(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Item})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Item</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Item</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Item.
             <code><![CDATA[
             TList<Item> list = new TList<Item>();
             Item entity = new Item();
             entity.StringProperty = "foo";
             Item entity2 = new Item();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.ItemServiceBase.Delete(RLM.Contruction.Entities.Item)">
            <summary>
            	public virtualmethod that Deletes a Item object into the datasource using a transaction.
            </summary>
            <param name="entity">Item object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Item object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Item entity = ItemService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ItemService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.ItemServiceBase.Delete(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Item})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Item</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Item</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Item.
             <code><![CDATA[
             TList<Item> list = new TList<Item>();
             Item entity = new Item();
             entity.StringProperty = "foo";
             Item entity2 = new Item();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.ItemServiceBase.Delete(RLM.Contruction.Entities.ItemKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int64 itemId
            </summary>
            <param name="itemId">Item pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemServiceBase.GetByRepositoryIdFromItemInRepository(System.Int32)">
            <summary>
            	Gets Item objects from the datasource by RepositoryId in the
            	ItemInRepository table. Table Item is related to table Repository
            	through the (M:N) relationship defined in the ItemInRepository table.
            </summary>
            <param name="repositoryId"></param>
            <returns>Returns a typed collection of Item objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemServiceBase.GetByRepositoryIdFromItemInRepository(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Item objects from the datasource by RepositoryId in the
            	ItemInRepository table. Table Item is related to table Repository
            	through the (M:N) relationship defined in the ItemInRepository table.
            </summary>
            <param name="repositoryId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Item objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemServiceBase.DeepLoadByItemId(System.Int64,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Contruction.Entities.Item"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <param name="itemId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Item Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Item"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemServiceBase.DeepLoad(RLM.Contruction.Entities.Item)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Item Object</param>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.ItemServiceBase.DeepLoad(RLM.Contruction.Entities.Item)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Contruction.Service.ItemServiceBase.DeepLoad(RLM.Contruction.Entities.Item,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.ItemServiceBase.DeepLoad(RLM.Contruction.Entities.Item)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Item Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Contruction.Service.ItemServiceBase.DeepLoad(RLM.Contruction.Entities.Item,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Contruction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.Item"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Item Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Contruction.Service.ItemServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Item})">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.ItemServiceBase.DeepLoad(RLM.Contruction.Entities.Item)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Contruction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Contruction.Service.ItemServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Item},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.ItemServiceBase.DeepLoad(RLM.Contruction.Entities.Item)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Contruction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Contruction.Service.ItemServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Item},System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Contruction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Contruction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Contruction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Contruction.Entities.Item"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Contruction.Service.ItemServiceBase.DeepSave(RLM.Contruction.Entities.Item)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Contruction.Entities.Item"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Item Object</param>
        </member>
        <member name="M:RLM.Contruction.Service.ItemServiceBase.DeepSave(RLM.Contruction.Entities.Item,RLM.Contruction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Item object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Item Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Item</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Contruction.Service.ItemServiceBase.DeepSave(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Item})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Contruction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Item} Object</param>
        </member>
        <member name="M:RLM.Contruction.Service.ItemServiceBase.DeepSave(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Item},RLM.Contruction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Contruction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Contruction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Item Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Contruction.Service.ItemServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Service.UserServiceBase">
            <summary>
             An object representation of the 'User' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the User.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Contruction.Entities.User"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Contruction.Service.UserServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Contruction.Entities.User"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Contruction.Service.UserServiceBase.CreateUser(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Contruction.Entities.User"/> instance.
            </summary>
            <param name="userGroupId"></param>
            <param name="email"></param>
            <param name="pwd"></param>
            <param name="pwdFormat">Format of pwd, example: 0: plain text, 1: MD5, 2: 3-DES</param>
            <param name="fullName"></param>
            <param name="phone"></param>
            <param name="isDeletable">true if user can not be deleted (built-in user)</param>
            <param name="isActive">false if user account was deactive. An deactive user account can not logged into the system</param>
            <param name="isFirstLoggedIn">true if user did not logged in</param>
            <param name="isLocked">true if account was locked, example: after 3 times logged-in fail. User account will be locked</param>
            <param name="logInFail">number of login fail</param>
            <param name="lastLoginDate">Last log-in time</param>
            <param name="creationDate"></param>
            <param name="creationUserId"></param>
            <param name="lastModificationDate"></param>
            <param name="lastModificationUserId"></param>
        </member>
        <member name="M:RLM.Contruction.Service.UserServiceBase.GetByUserGroupId(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the FK_Users_UserGroups key.
            	FK_Users_UserGroups Description: 
            </summary>
            <param name="userGroupId"></param>
            <returns>Returns a generic collection of User objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UserServiceBase.GetByUserGroupId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the FK_Users_UserGroups key.
            	FK_Users_UserGroups Description: 
            </summary>
            <param name="userGroupId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Contruction.Entities.TList`1"/> of <c>User</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UserServiceBase.Get(RLM.Contruction.Entities.UserKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UserServiceBase.GetByUserId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the primary key PK_Users index.
            </summary>
            <param name="userId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.User"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UserServiceBase.GetByUserId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the primary key PK_Users index.
            </summary>
            <param name="userId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.User"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UserServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Contruction.Entities.User"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Service.UserServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Contruction.Entities.User"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Contruction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Contruction.Service.UserServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Contruction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>User</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UserServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Contruction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>User</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UserServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>User</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UserServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UserServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UserServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{User} of <c>User</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UserServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>User</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UserServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>User</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UserServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>User</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UserServiceBase.Insert(RLM.Contruction.Entities.User)">
            <summary>
            	public virtualmethod that Inserts a User object into the datasource using a transaction.
            </summary>
            <param name="entity">User object to Insert.</param>
            <remarks>After Inserting into the datasource, the User object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            User entity = new User();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	UserService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.UserServiceBase.Insert(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.User})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>User</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>User</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of User.
             <code><![CDATA[
             TList<User> list = new TList<User>();
             User entity = new User();
             entity.StringProperty = "foo";
             User entity2 = new User();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UserService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.UserServiceBase.Update(RLM.Contruction.Entities.User)">
            <summary>
            	public virtualmethod that Updates a User object into the datasource using a transaction.
            </summary>
            <param name="entity">User object to Update.</param>
            <remarks>After Updateing into the datasource, the User object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            User entity = UserService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	UserService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.UserServiceBase.Update(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.User})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>User</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>User</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of User.
             <code><![CDATA[
             TList<User> list = new TList<User>();
             User entity = new User();
             entity.StringProperty = "foo";
             User entity2 = new User();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UserService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.UserServiceBase.Save(RLM.Contruction.Entities.User)">
            <summary>
            	public virtualmethod that Saves a User object into the datasource using a transaction.
            </summary>
            <param name="entity">User object to Save.</param>
            <remarks>After Saveing into the datasource, the User object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            User entity = UserService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	UserService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.UserServiceBase.Save(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.User})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>User</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>User</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of User.
             <code><![CDATA[
             TList<User> list = new TList<User>();
             User entity = new User();
             entity.StringProperty = "foo";
             User entity2 = new User();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UserService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.UserServiceBase.Delete(RLM.Contruction.Entities.User)">
            <summary>
            	public virtualmethod that Deletes a User object into the datasource using a transaction.
            </summary>
            <param name="entity">User object to Delete.</param>
            <remarks>After Deleteing into the datasource, the User object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            User entity = UserService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	UserService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.UserServiceBase.Delete(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.User})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>User</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>User</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of User.
             <code><![CDATA[
             TList<User> list = new TList<User>();
             User entity = new User();
             entity.StringProperty = "foo";
             User entity2 = new User();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UserService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.UserServiceBase.Delete(RLM.Contruction.Entities.UserKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UserServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 userId
            </summary>
            <param name="userId">User pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UserServiceBase.DeepLoadByUserId(System.Int32,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Contruction.Entities.User"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <param name="userId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">User Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.User"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UserServiceBase.DeepLoad(RLM.Contruction.Entities.User)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">User Object</param>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.UserServiceBase.DeepLoad(RLM.Contruction.Entities.User)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Contruction.Service.UserServiceBase.DeepLoad(RLM.Contruction.Entities.User,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.UserServiceBase.DeepLoad(RLM.Contruction.Entities.User)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">User Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Contruction.Service.UserServiceBase.DeepLoad(RLM.Contruction.Entities.User,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Contruction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.User"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">User Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Contruction.Service.UserServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.User})">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.UserServiceBase.DeepLoad(RLM.Contruction.Entities.User)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Contruction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Contruction.Service.UserServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.User},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.UserServiceBase.DeepLoad(RLM.Contruction.Entities.User)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Contruction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Contruction.Service.UserServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.User},System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Contruction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Contruction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Contruction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Contruction.Entities.User"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Contruction.Service.UserServiceBase.DeepSave(RLM.Contruction.Entities.User)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Contruction.Entities.User"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">User Object</param>
        </member>
        <member name="M:RLM.Contruction.Service.UserServiceBase.DeepSave(RLM.Contruction.Entities.User,RLM.Contruction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the User object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">User Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>User</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Contruction.Service.UserServiceBase.DeepSave(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.User})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Contruction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{User} Object</param>
        </member>
        <member name="M:RLM.Contruction.Service.UserServiceBase.DeepSave(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.User},RLM.Contruction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Contruction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Contruction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">User Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Contruction.Service.UserServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Service.ItemInRepositoryService">
            <summary>
             An component type implementation of the 'ItemInRepository' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:RLM.Contruction.Service.ItemInRepositoryServiceBase">
            <summary>
             An object representation of the 'ItemInRepository' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ItemInRepository.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Contruction.Entities.ItemInRepository"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInRepositoryServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Contruction.Entities.ItemInRepository"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInRepositoryServiceBase.CreateItemInRepository(System.Int32,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Contruction.Entities.ItemInRepository"/> instance.
            </summary>
            <param name="repositoryId"></param>
            <param name="itemId"></param>
            <param name="totalQuantity"></param>
            <param name="availabelQuantity"></param>
            <param name="reserveQuantity"></param>
            <param name="returnQuantity"></param>
            <param name="adjustQuantity">the total number of adjust of this item in this repository</param>
            <param name="isActive"></param>
            <param name="isDeletable"></param>
            <param name="status">the same as item.status</param>
            <param name="priority"></param>
            <param name="baseUnitId"></param>
            <param name="creationDate"></param>
            <param name="creationUserId"></param>
            <param name="lastModificationDate"></param>
            <param name="lastModificationUserId"></param>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInRepositoryServiceBase.GetByItemId(System.Int64)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the FK_ItemInRepositories_Items key.
            	FK_ItemInRepositories_Items Description: 
            </summary>
            <param name="itemId"></param>
            <returns>Returns a generic collection of ItemInRepository objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInRepositoryServiceBase.GetByItemId(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the FK_ItemInRepositories_Items key.
            	FK_ItemInRepositories_Items Description: 
            </summary>
            <param name="itemId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Contruction.Entities.TList`1"/> of <c>ItemInRepository</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInRepositoryServiceBase.GetByRepositoryId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the FK_ItemInRepositories_Repositories key.
            	FK_ItemInRepositories_Repositories Description: 
            </summary>
            <param name="repositoryId"></param>
            <returns>Returns a generic collection of ItemInRepository objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInRepositoryServiceBase.GetByRepositoryId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the FK_ItemInRepositories_Repositories key.
            	FK_ItemInRepositories_Repositories Description: 
            </summary>
            <param name="repositoryId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Contruction.Entities.TList`1"/> of <c>ItemInRepository</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInRepositoryServiceBase.Get(RLM.Contruction.Entities.ItemInRepositoryKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInRepositoryServiceBase.GetByRepositoryIdItemId(System.Int32,System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the primary key PK_ItemInRepositories index.
            </summary>
            <param name="repositoryId"></param>
            <param name="itemId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.ItemInRepository"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInRepositoryServiceBase.GetByRepositoryIdItemId(System.Int32,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the primary key PK_ItemInRepositories index.
            </summary>
            <param name="repositoryId"></param>
            <param name="itemId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.ItemInRepository"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInRepositoryServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Contruction.Entities.ItemInRepository"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInRepositoryServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Contruction.Entities.ItemInRepository"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Contruction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInRepositoryServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Contruction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ItemInRepository</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInRepositoryServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Contruction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ItemInRepository</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInRepositoryServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ItemInRepository</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInRepositoryServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInRepositoryServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInRepositoryServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ItemInRepository} of <c>ItemInRepository</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInRepositoryServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ItemInRepository</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInRepositoryServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ItemInRepository</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInRepositoryServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ItemInRepository</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInRepositoryServiceBase.Insert(RLM.Contruction.Entities.ItemInRepository)">
            <summary>
            	public virtualmethod that Inserts a ItemInRepository object into the datasource using a transaction.
            </summary>
            <param name="entity">ItemInRepository object to Insert.</param>
            <remarks>After Inserting into the datasource, the ItemInRepository object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ItemInRepository entity = new ItemInRepository();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ItemInRepositoryService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInRepositoryServiceBase.Insert(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.ItemInRepository})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ItemInRepository</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ItemInRepository</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ItemInRepository.
             <code><![CDATA[
             TList<ItemInRepository> list = new TList<ItemInRepository>();
             ItemInRepository entity = new ItemInRepository();
             entity.StringProperty = "foo";
             ItemInRepository entity2 = new ItemInRepository();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemInRepositoryService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInRepositoryServiceBase.Update(RLM.Contruction.Entities.ItemInRepository)">
            <summary>
            	public virtualmethod that Updates a ItemInRepository object into the datasource using a transaction.
            </summary>
            <param name="entity">ItemInRepository object to Update.</param>
            <remarks>After Updateing into the datasource, the ItemInRepository object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ItemInRepository entity = ItemInRepositoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ItemInRepositoryService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInRepositoryServiceBase.Update(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.ItemInRepository})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ItemInRepository</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ItemInRepository</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ItemInRepository.
             <code><![CDATA[
             TList<ItemInRepository> list = new TList<ItemInRepository>();
             ItemInRepository entity = new ItemInRepository();
             entity.StringProperty = "foo";
             ItemInRepository entity2 = new ItemInRepository();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemInRepositoryService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInRepositoryServiceBase.Save(RLM.Contruction.Entities.ItemInRepository)">
            <summary>
            	public virtualmethod that Saves a ItemInRepository object into the datasource using a transaction.
            </summary>
            <param name="entity">ItemInRepository object to Save.</param>
            <remarks>After Saveing into the datasource, the ItemInRepository object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ItemInRepository entity = ItemInRepositoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ItemInRepositoryService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInRepositoryServiceBase.Save(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.ItemInRepository})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ItemInRepository</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ItemInRepository</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ItemInRepository.
             <code><![CDATA[
             TList<ItemInRepository> list = new TList<ItemInRepository>();
             ItemInRepository entity = new ItemInRepository();
             entity.StringProperty = "foo";
             ItemInRepository entity2 = new ItemInRepository();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemInRepositoryService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInRepositoryServiceBase.Delete(RLM.Contruction.Entities.ItemInRepository)">
            <summary>
            	public virtualmethod that Deletes a ItemInRepository object into the datasource using a transaction.
            </summary>
            <param name="entity">ItemInRepository object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ItemInRepository object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ItemInRepository entity = ItemInRepositoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ItemInRepositoryService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInRepositoryServiceBase.Delete(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.ItemInRepository})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ItemInRepository</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ItemInRepository</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ItemInRepository.
             <code><![CDATA[
             TList<ItemInRepository> list = new TList<ItemInRepository>();
             ItemInRepository entity = new ItemInRepository();
             entity.StringProperty = "foo";
             ItemInRepository entity2 = new ItemInRepository();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemInRepositoryService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInRepositoryServiceBase.Delete(RLM.Contruction.Entities.ItemInRepositoryKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInRepositoryServiceBase.Delete(System.Int32,System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 repositoryId, System.Int64 itemId
            </summary>
            <param name="repositoryId">ItemInRepository pk id.</param>
            <param name="itemId">ItemInRepository pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInRepositoryServiceBase.DeepLoadByRepositoryIdItemId(System.Int32,System.Int64,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Contruction.Entities.ItemInRepository"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <param name="repositoryId"></param>
            <param name="itemId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ItemInRepository Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.ItemInRepository"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInRepositoryServiceBase.DeepLoad(RLM.Contruction.Entities.ItemInRepository)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ItemInRepository Object</param>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.ItemInRepositoryServiceBase.DeepLoad(RLM.Contruction.Entities.ItemInRepository)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInRepositoryServiceBase.DeepLoad(RLM.Contruction.Entities.ItemInRepository,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.ItemInRepositoryServiceBase.DeepLoad(RLM.Contruction.Entities.ItemInRepository)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ItemInRepository Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInRepositoryServiceBase.DeepLoad(RLM.Contruction.Entities.ItemInRepository,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Contruction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.ItemInRepository"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ItemInRepository Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInRepositoryServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.ItemInRepository})">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.ItemInRepositoryServiceBase.DeepLoad(RLM.Contruction.Entities.ItemInRepository)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Contruction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInRepositoryServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.ItemInRepository},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.ItemInRepositoryServiceBase.DeepLoad(RLM.Contruction.Entities.ItemInRepository)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Contruction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInRepositoryServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.ItemInRepository},System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Contruction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Contruction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Contruction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Contruction.Entities.ItemInRepository"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInRepositoryServiceBase.DeepSave(RLM.Contruction.Entities.ItemInRepository)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Contruction.Entities.ItemInRepository"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ItemInRepository Object</param>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInRepositoryServiceBase.DeepSave(RLM.Contruction.Entities.ItemInRepository,RLM.Contruction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ItemInRepository object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ItemInRepository Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ItemInRepository</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInRepositoryServiceBase.DeepSave(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.ItemInRepository})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Contruction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ItemInRepository} Object</param>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInRepositoryServiceBase.DeepSave(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.ItemInRepository},RLM.Contruction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Contruction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Contruction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ItemInRepository Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Contruction.Service.ItemInRepositoryServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Service.ItemInRepositoryService.#ctor">
            <summary>
            Initializes a new instance of the ItemInRepositoryService class.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Service.UnitConvertorService">
            <summary>
             An component type implementation of the 'UnitConvertor' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:RLM.Contruction.Service.UnitConvertorServiceBase">
            <summary>
             An object representation of the 'UnitConvertor' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the UnitConvertor.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Contruction.Entities.UnitConvertor"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Contruction.Service.UnitConvertorServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Contruction.Entities.UnitConvertor"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Contruction.Service.UnitConvertorServiceBase.CreateUnitConvertor(System.Int32,System.Int32,System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Contruction.Entities.UnitConvertor"/> instance.
            </summary>
            <param name="fromUnitId"></param>
            <param name="toUnitId"></param>
            <param name="quantity"></param>
            <param name="isDeletable"></param>
            <param name="isActive"></param>
            <param name="creationDate"></param>
            <param name="creationUserId"></param>
            <param name="lastModificationDate"></param>
            <param name="lastModificationUserId"></param>
        </member>
        <member name="M:RLM.Contruction.Service.UnitConvertorServiceBase.GetByFromUnitId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the FK_UnitConvertors_Units key.
            	FK_UnitConvertors_Units Description: 
            </summary>
            <param name="fromUnitId"></param>
            <returns>Returns a generic collection of UnitConvertor objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UnitConvertorServiceBase.GetByFromUnitId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the FK_UnitConvertors_Units key.
            	FK_UnitConvertors_Units Description: 
            </summary>
            <param name="fromUnitId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Contruction.Entities.TList`1"/> of <c>UnitConvertor</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UnitConvertorServiceBase.GetByToUnitId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the FK_UnitConvertors_Units1 key.
            	FK_UnitConvertors_Units1 Description: 
            </summary>
            <param name="toUnitId"></param>
            <returns>Returns a generic collection of UnitConvertor objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UnitConvertorServiceBase.GetByToUnitId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the FK_UnitConvertors_Units1 key.
            	FK_UnitConvertors_Units1 Description: 
            </summary>
            <param name="toUnitId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:RLM.Contruction.Entities.TList`1"/> of <c>UnitConvertor</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UnitConvertorServiceBase.Get(RLM.Contruction.Entities.UnitConvertorKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UnitConvertorServiceBase.GetByFromUnitIdToUnitId(System.Int32,System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the primary key PK_UnitConvertors index.
            </summary>
            <param name="fromUnitId"></param>
            <param name="toUnitId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.UnitConvertor"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UnitConvertorServiceBase.GetByFromUnitIdToUnitId(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the primary key PK_UnitConvertors index.
            </summary>
            <param name="fromUnitId"></param>
            <param name="toUnitId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.UnitConvertor"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UnitConvertorServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Contruction.Entities.UnitConvertor"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Service.UnitConvertorServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Contruction.Entities.UnitConvertor"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Contruction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Contruction.Service.UnitConvertorServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Contruction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>UnitConvertor</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UnitConvertorServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Contruction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>UnitConvertor</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UnitConvertorServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>UnitConvertor</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UnitConvertorServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UnitConvertorServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UnitConvertorServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{UnitConvertor} of <c>UnitConvertor</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UnitConvertorServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>UnitConvertor</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UnitConvertorServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>UnitConvertor</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UnitConvertorServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>UnitConvertor</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UnitConvertorServiceBase.Insert(RLM.Contruction.Entities.UnitConvertor)">
            <summary>
            	public virtualmethod that Inserts a UnitConvertor object into the datasource using a transaction.
            </summary>
            <param name="entity">UnitConvertor object to Insert.</param>
            <remarks>After Inserting into the datasource, the UnitConvertor object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            UnitConvertor entity = new UnitConvertor();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	UnitConvertorService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.UnitConvertorServiceBase.Insert(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.UnitConvertor})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>UnitConvertor</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>UnitConvertor</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of UnitConvertor.
             <code><![CDATA[
             TList<UnitConvertor> list = new TList<UnitConvertor>();
             UnitConvertor entity = new UnitConvertor();
             entity.StringProperty = "foo";
             UnitConvertor entity2 = new UnitConvertor();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UnitConvertorService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.UnitConvertorServiceBase.Update(RLM.Contruction.Entities.UnitConvertor)">
            <summary>
            	public virtualmethod that Updates a UnitConvertor object into the datasource using a transaction.
            </summary>
            <param name="entity">UnitConvertor object to Update.</param>
            <remarks>After Updateing into the datasource, the UnitConvertor object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            UnitConvertor entity = UnitConvertorService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	UnitConvertorService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.UnitConvertorServiceBase.Update(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.UnitConvertor})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>UnitConvertor</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>UnitConvertor</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of UnitConvertor.
             <code><![CDATA[
             TList<UnitConvertor> list = new TList<UnitConvertor>();
             UnitConvertor entity = new UnitConvertor();
             entity.StringProperty = "foo";
             UnitConvertor entity2 = new UnitConvertor();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UnitConvertorService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.UnitConvertorServiceBase.Save(RLM.Contruction.Entities.UnitConvertor)">
            <summary>
            	public virtualmethod that Saves a UnitConvertor object into the datasource using a transaction.
            </summary>
            <param name="entity">UnitConvertor object to Save.</param>
            <remarks>After Saveing into the datasource, the UnitConvertor object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            UnitConvertor entity = UnitConvertorService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	UnitConvertorService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.UnitConvertorServiceBase.Save(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.UnitConvertor})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>UnitConvertor</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>UnitConvertor</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of UnitConvertor.
             <code><![CDATA[
             TList<UnitConvertor> list = new TList<UnitConvertor>();
             UnitConvertor entity = new UnitConvertor();
             entity.StringProperty = "foo";
             UnitConvertor entity2 = new UnitConvertor();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UnitConvertorService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.UnitConvertorServiceBase.Delete(RLM.Contruction.Entities.UnitConvertor)">
            <summary>
            	public virtualmethod that Deletes a UnitConvertor object into the datasource using a transaction.
            </summary>
            <param name="entity">UnitConvertor object to Delete.</param>
            <remarks>After Deleteing into the datasource, the UnitConvertor object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            UnitConvertor entity = UnitConvertorService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	UnitConvertorService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.UnitConvertorServiceBase.Delete(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.UnitConvertor})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>UnitConvertor</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>UnitConvertor</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of UnitConvertor.
             <code><![CDATA[
             TList<UnitConvertor> list = new TList<UnitConvertor>();
             UnitConvertor entity = new UnitConvertor();
             entity.StringProperty = "foo";
             UnitConvertor entity2 = new UnitConvertor();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UnitConvertorService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.UnitConvertorServiceBase.Delete(RLM.Contruction.Entities.UnitConvertorKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UnitConvertorServiceBase.Delete(System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 fromUnitId, System.Int32 toUnitId
            </summary>
            <param name="fromUnitId">UnitConvertor pk id.</param>
            <param name="toUnitId">UnitConvertor pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UnitConvertorServiceBase.DeepLoadByFromUnitIdToUnitId(System.Int32,System.Int32,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Contruction.Entities.UnitConvertor"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <param name="fromUnitId"></param>
            <param name="toUnitId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">UnitConvertor Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.UnitConvertor"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.UnitConvertorServiceBase.DeepLoad(RLM.Contruction.Entities.UnitConvertor)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">UnitConvertor Object</param>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.UnitConvertorServiceBase.DeepLoad(RLM.Contruction.Entities.UnitConvertor)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Contruction.Service.UnitConvertorServiceBase.DeepLoad(RLM.Contruction.Entities.UnitConvertor,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.UnitConvertorServiceBase.DeepLoad(RLM.Contruction.Entities.UnitConvertor)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">UnitConvertor Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Contruction.Service.UnitConvertorServiceBase.DeepLoad(RLM.Contruction.Entities.UnitConvertor,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Contruction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.UnitConvertor"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">UnitConvertor Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Contruction.Service.UnitConvertorServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.UnitConvertor})">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.UnitConvertorServiceBase.DeepLoad(RLM.Contruction.Entities.UnitConvertor)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Contruction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Contruction.Service.UnitConvertorServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.UnitConvertor},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.UnitConvertorServiceBase.DeepLoad(RLM.Contruction.Entities.UnitConvertor)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Contruction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Contruction.Service.UnitConvertorServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.UnitConvertor},System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Contruction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Contruction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Contruction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Contruction.Entities.UnitConvertor"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Contruction.Service.UnitConvertorServiceBase.DeepSave(RLM.Contruction.Entities.UnitConvertor)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Contruction.Entities.UnitConvertor"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">UnitConvertor Object</param>
        </member>
        <member name="M:RLM.Contruction.Service.UnitConvertorServiceBase.DeepSave(RLM.Contruction.Entities.UnitConvertor,RLM.Contruction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the UnitConvertor object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">UnitConvertor Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>UnitConvertor</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Contruction.Service.UnitConvertorServiceBase.DeepSave(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.UnitConvertor})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Contruction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{UnitConvertor} Object</param>
        </member>
        <member name="M:RLM.Contruction.Service.UnitConvertorServiceBase.DeepSave(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.UnitConvertor},RLM.Contruction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Contruction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Contruction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">UnitConvertor Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Contruction.Service.UnitConvertorServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Service.UnitConvertorService.#ctor">
            <summary>
            Initializes a new instance of the UnitConvertorService class.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Service.ProcessStartingHandler">
            <summary>
            ProcessStartingHandler
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:RLM.Contruction.Service.ProcessEndedHandler">
            <summary>
            ProcessEndedHandler
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:RLM.Contruction.Service.ProcessorEventArgs">
            <summary>
            ProcessorEventArgs
            </summary>
        </member>
        <member name="M:RLM.Contruction.Service.ProcessorEventArgs.#ctor(RLM.Contruction.Service.ProcessorBase)">
            <summary>
            Initializes a new instance of the ProcessorEventArgs class.
            </summary>
            <param name="processor"></param>
        </member>
        <member name="P:RLM.Contruction.Service.ProcessorEventArgs.Processor">
            <summary>
            Gets or sets the processor.
            </summary>
            <value>The processor.</value>
        </member>
        <member name="T:RLM.Contruction.Service.UserService">
            <summary>
             An component type implementation of the 'User' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:RLM.Contruction.Service.UserService.#ctor">
            <summary>
            Initializes a new instance of the UserService class.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Service.DomainUtil">
            <summary>
            DomainUtil class.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Service.DomainUtil.GetErrorsFromList``1(RLM.Contruction.Entities.TList{``0})">
            <summary>
            Aggregates all the errors in a collection
            </summary>
        </member>
        <member name="M:RLM.Contruction.Service.DomainUtil.HandleException(System.Exception,System.String)">
            <summary>
            Wraps call to tohe <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicy"/> class which handles all exceptions based on the security policy.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Service.DomainUtil.GetDefaultByType(System.Data.DbType)">
            <summary>
            Get a default value for a given data type
            </summary>
            <param name="dataType">Data type for which to get the default value</param>
            <returns>An object of the default value.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.DomainUtil.GetDataValue(System.Data.IDataParameter)">
            <summary>
            Get Value or Default Value from an IDataParamater
            Based on DbType
            </summary>
            <param name="p">The IDataParameter instance type is used to determine the default value.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Service.DomainUtil.DefaultToDBNull(System.Object,System.Data.DbType)">
            <summary>
            Checks to see if the Default Value has been set to the parameter.
            If it's the default value, then create.
            </summary>
            <param name="val">The value we want to check.</param>
            <param name="dbtype">The DbType from wich we take the default value.</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Service.DomainUtil.GetParameterValue``1(System.Data.IDataParameter)">
            <summary>
            Generic method to return the value of a nullable parameter
            </summary>
            <typeparam name="T">Type of value to return</typeparam>
            <param name="parameter">Parameter from which to extract the value</param>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Service.DomainUtil.ConvertDataReaderToDataSet(System.Data.IDataReader)">
            <summary>
            Converts a IDataReader to a DataSet.  For use when a custom stored procedure returns an <see cref="T:System.Data.IDataReader"/>, it will
            convert all result sets returned as a DataSet.
            </summary>
            <param name="reader">The reader to convert</param>
            <returns>A dataset with one table per result in the reader</returns>
        </member>
        <member name="T:RLM.Contruction.Service.ContractService">
            <summary>
             An component type implementation of the 'Contract' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:RLM.Contruction.Service.ContractService.#ctor">
            <summary>
            Initializes a new instance of the ContractService class.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Service.ProjectService">
            <summary>
             An component type implementation of the 'Project' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:RLM.Contruction.Service.ProjectService.#ctor">
            <summary>
            Initializes a new instance of the ProjectService class.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Service.GroupServiceBase">
            <summary>
             An object representation of the 'Group' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Group.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Contruction.Entities.Group"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Contruction.Service.GroupServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Contruction.Entities.Group"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Contruction.Service.GroupServiceBase.CreateGroup(System.Nullable{System.Int32},System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Contruction.Entities.Group"/> instance.
            </summary>
            <param name="parentGroupId"></param>
            <param name="code"></param>
            <param name="name"></param>
            <param name="description"></param>
            <param name="type">Type of group, example: 1: contract group, 2: customer group, cong doan</param>
            <param name="isActive"></param>
            <param name="isDeletable"></param>
            <param name="priority"></param>
            <param name="creationUserId"></param>
            <param name="creationDate"></param>
            <param name="lastModificationDate"></param>
            <param name="lastModificationUserId"></param>
        </member>
        <member name="M:RLM.Contruction.Service.GroupServiceBase.Get(RLM.Contruction.Entities.GroupKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.GroupServiceBase.GetByGroupId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the primary key PK_Groups index.
            </summary>
            <param name="groupId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Group"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.GroupServiceBase.GetByGroupId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the primary key PK_Groups index.
            </summary>
            <param name="groupId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Group"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.GroupServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Contruction.Entities.Group"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Service.GroupServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Contruction.Entities.Group"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Contruction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Contruction.Service.GroupServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Contruction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Group</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.GroupServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Contruction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Group</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.GroupServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Group</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.GroupServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.GroupServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.GroupServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Group} of <c>Group</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.GroupServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Group</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.GroupServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Group</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.GroupServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Group</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.GroupServiceBase.Insert(RLM.Contruction.Entities.Group)">
            <summary>
            	public virtualmethod that Inserts a Group object into the datasource using a transaction.
            </summary>
            <param name="entity">Group object to Insert.</param>
            <remarks>After Inserting into the datasource, the Group object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Group entity = new Group();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	GroupService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.GroupServiceBase.Insert(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Group})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Group</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Group</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Group.
             <code><![CDATA[
             TList<Group> list = new TList<Group>();
             Group entity = new Group();
             entity.StringProperty = "foo";
             Group entity2 = new Group();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	GroupService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.GroupServiceBase.Update(RLM.Contruction.Entities.Group)">
            <summary>
            	public virtualmethod that Updates a Group object into the datasource using a transaction.
            </summary>
            <param name="entity">Group object to Update.</param>
            <remarks>After Updateing into the datasource, the Group object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Group entity = GroupService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	GroupService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.GroupServiceBase.Update(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Group})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Group</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Group</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Group.
             <code><![CDATA[
             TList<Group> list = new TList<Group>();
             Group entity = new Group();
             entity.StringProperty = "foo";
             Group entity2 = new Group();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	GroupService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.GroupServiceBase.Save(RLM.Contruction.Entities.Group)">
            <summary>
            	public virtualmethod that Saves a Group object into the datasource using a transaction.
            </summary>
            <param name="entity">Group object to Save.</param>
            <remarks>After Saveing into the datasource, the Group object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Group entity = GroupService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	GroupService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.GroupServiceBase.Save(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Group})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Group</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Group</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Group.
             <code><![CDATA[
             TList<Group> list = new TList<Group>();
             Group entity = new Group();
             entity.StringProperty = "foo";
             Group entity2 = new Group();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	GroupService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.GroupServiceBase.Delete(RLM.Contruction.Entities.Group)">
            <summary>
            	public virtualmethod that Deletes a Group object into the datasource using a transaction.
            </summary>
            <param name="entity">Group object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Group object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Group entity = GroupService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	GroupService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.GroupServiceBase.Delete(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Group})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Group</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Group</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Group.
             <code><![CDATA[
             TList<Group> list = new TList<Group>();
             Group entity = new Group();
             entity.StringProperty = "foo";
             Group entity2 = new Group();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	GroupService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.GroupServiceBase.Delete(RLM.Contruction.Entities.GroupKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.GroupServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 groupId
            </summary>
            <param name="groupId">Group pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.GroupServiceBase.DeepLoadByGroupId(System.Int32,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Contruction.Entities.Group"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <param name="groupId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Group Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Group"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.GroupServiceBase.DeepLoad(RLM.Contruction.Entities.Group)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Group Object</param>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.GroupServiceBase.DeepLoad(RLM.Contruction.Entities.Group)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Contruction.Service.GroupServiceBase.DeepLoad(RLM.Contruction.Entities.Group,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.GroupServiceBase.DeepLoad(RLM.Contruction.Entities.Group)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Group Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Contruction.Service.GroupServiceBase.DeepLoad(RLM.Contruction.Entities.Group,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Contruction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.Group"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Group Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Contruction.Service.GroupServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Group})">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.GroupServiceBase.DeepLoad(RLM.Contruction.Entities.Group)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Contruction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Contruction.Service.GroupServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Group},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.GroupServiceBase.DeepLoad(RLM.Contruction.Entities.Group)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Contruction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Contruction.Service.GroupServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Group},System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Contruction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Contruction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Contruction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Contruction.Entities.Group"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Contruction.Service.GroupServiceBase.DeepSave(RLM.Contruction.Entities.Group)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Contruction.Entities.Group"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Group Object</param>
        </member>
        <member name="M:RLM.Contruction.Service.GroupServiceBase.DeepSave(RLM.Contruction.Entities.Group,RLM.Contruction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Group object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Group Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Group</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Contruction.Service.GroupServiceBase.DeepSave(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Group})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Contruction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Group} Object</param>
        </member>
        <member name="M:RLM.Contruction.Service.GroupServiceBase.DeepSave(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Group},RLM.Contruction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Contruction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Contruction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Group Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Contruction.Service.GroupServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Service.DepartmentService">
            <summary>
             An component type implementation of the 'Department' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:RLM.Contruction.Service.DepartmentServiceBase">
            <summary>
             An object representation of the 'Department' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Department.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Contruction.Entities.Department"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Contruction.Service.DepartmentServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Contruction.Entities.Department"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Contruction.Service.DepartmentServiceBase.CreateDepartment(System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Contruction.Entities.Department"/> instance.
            </summary>
            <param name="code"></param>
            <param name="name"></param>
            <param name="phone"></param>
            <param name="priority"></param>
            <param name="fax"></param>
            <param name="isActive"></param>
            <param name="isDeletable"></param>
            <param name="creationDate"></param>
            <param name="creationUserId"></param>
            <param name="lastModificationDate"></param>
            <param name="lastModificationUserId"></param>
        </member>
        <member name="M:RLM.Contruction.Service.DepartmentServiceBase.Get(RLM.Contruction.Entities.DepartmentKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.DepartmentServiceBase.GetByDeptId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the primary key PK_Departments_1 index.
            </summary>
            <param name="deptId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Department"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.DepartmentServiceBase.GetByDeptId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the primary key PK_Departments_1 index.
            </summary>
            <param name="deptId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Department"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.DepartmentServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Contruction.Entities.Department"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Service.DepartmentServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Contruction.Entities.Department"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Contruction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Contruction.Service.DepartmentServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Contruction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Department</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.DepartmentServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Contruction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Department</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.DepartmentServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Department</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.DepartmentServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.DepartmentServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.DepartmentServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Department} of <c>Department</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.DepartmentServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Department</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.DepartmentServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Department</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.DepartmentServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Department</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.DepartmentServiceBase.Insert(RLM.Contruction.Entities.Department)">
            <summary>
            	public virtualmethod that Inserts a Department object into the datasource using a transaction.
            </summary>
            <param name="entity">Department object to Insert.</param>
            <remarks>After Inserting into the datasource, the Department object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Department entity = new Department();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	DepartmentService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.DepartmentServiceBase.Insert(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Department})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Department</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Department</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Department.
             <code><![CDATA[
             TList<Department> list = new TList<Department>();
             Department entity = new Department();
             entity.StringProperty = "foo";
             Department entity2 = new Department();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DepartmentService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.DepartmentServiceBase.Update(RLM.Contruction.Entities.Department)">
            <summary>
            	public virtualmethod that Updates a Department object into the datasource using a transaction.
            </summary>
            <param name="entity">Department object to Update.</param>
            <remarks>After Updateing into the datasource, the Department object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Department entity = DepartmentService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	DepartmentService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.DepartmentServiceBase.Update(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Department})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Department</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Department</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Department.
             <code><![CDATA[
             TList<Department> list = new TList<Department>();
             Department entity = new Department();
             entity.StringProperty = "foo";
             Department entity2 = new Department();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DepartmentService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.DepartmentServiceBase.Save(RLM.Contruction.Entities.Department)">
            <summary>
            	public virtualmethod that Saves a Department object into the datasource using a transaction.
            </summary>
            <param name="entity">Department object to Save.</param>
            <remarks>After Saveing into the datasource, the Department object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Department entity = DepartmentService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	DepartmentService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.DepartmentServiceBase.Save(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Department})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Department</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Department</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Department.
             <code><![CDATA[
             TList<Department> list = new TList<Department>();
             Department entity = new Department();
             entity.StringProperty = "foo";
             Department entity2 = new Department();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DepartmentService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.DepartmentServiceBase.Delete(RLM.Contruction.Entities.Department)">
            <summary>
            	public virtualmethod that Deletes a Department object into the datasource using a transaction.
            </summary>
            <param name="entity">Department object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Department object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Department entity = DepartmentService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	DepartmentService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.DepartmentServiceBase.Delete(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Department})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Department</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Department</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Department.
             <code><![CDATA[
             TList<Department> list = new TList<Department>();
             Department entity = new Department();
             entity.StringProperty = "foo";
             Department entity2 = new Department();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DepartmentService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.DepartmentServiceBase.Delete(RLM.Contruction.Entities.DepartmentKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.DepartmentServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 deptId
            </summary>
            <param name="deptId">Department pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.DepartmentServiceBase.DeepLoadByDeptId(System.Int32,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Contruction.Entities.Department"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <param name="deptId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Department Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.Department"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.DepartmentServiceBase.DeepLoad(RLM.Contruction.Entities.Department)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Department Object</param>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.DepartmentServiceBase.DeepLoad(RLM.Contruction.Entities.Department)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Contruction.Service.DepartmentServiceBase.DeepLoad(RLM.Contruction.Entities.Department,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.DepartmentServiceBase.DeepLoad(RLM.Contruction.Entities.Department)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Department Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Contruction.Service.DepartmentServiceBase.DeepLoad(RLM.Contruction.Entities.Department,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Contruction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.Department"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Department Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Contruction.Service.DepartmentServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Department})">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.DepartmentServiceBase.DeepLoad(RLM.Contruction.Entities.Department)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Contruction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Contruction.Service.DepartmentServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Department},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.DepartmentServiceBase.DeepLoad(RLM.Contruction.Entities.Department)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Contruction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Contruction.Service.DepartmentServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Department},System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Contruction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Contruction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Contruction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Contruction.Entities.Department"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Contruction.Service.DepartmentServiceBase.DeepSave(RLM.Contruction.Entities.Department)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Contruction.Entities.Department"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Department Object</param>
        </member>
        <member name="M:RLM.Contruction.Service.DepartmentServiceBase.DeepSave(RLM.Contruction.Entities.Department,RLM.Contruction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Department object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Department Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Department</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Contruction.Service.DepartmentServiceBase.DeepSave(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Department})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Contruction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Department} Object</param>
        </member>
        <member name="M:RLM.Contruction.Service.DepartmentServiceBase.DeepSave(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.Department},RLM.Contruction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Contruction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Contruction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Department Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Contruction.Service.DepartmentServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Service.DepartmentService.#ctor">
            <summary>
            Initializes a new instance of the DepartmentService class.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Service.GroupService">
            <summary>
             An component type implementation of the 'Group' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:RLM.Contruction.Service.GroupService.#ctor">
            <summary>
            Initializes a new instance of the GroupService class.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Service.RoleOfStaffService">
            <summary>
             An component type implementation of the 'RoleOfStaff' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:RLM.Contruction.Service.RoleOfStaffService.#ctor">
            <summary>
            Initializes a new instance of the RoleOfStaffService class.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Service.ServiceResult">
            <summary>
            The class provides a notification pattern for the processor execution.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Service.ServiceResult.HasErrors">
            <summary>
               Determines whethere the containing service, has errors.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Service.ServiceResult.Error">
            <summary>
               Provides a string of errors accumulated with a new line of delimeted errors.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Service.ServiceResult.ProcessBrokenRuleLists">
            <summary>
               Provides an aggregated group of BrokenRuleList for each of the executed processes.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Service.ServiceResult.ProcessorResultList">
            <summary>
               Determines whethere the containing processs results that were enlisted in the service.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Service.ServiceResult.ExceptionList">
             <summary>
            	Provides the List of UnHandled Exceptions that occured during processing.
             </summary>
            <value>A list of rules that were broken in the process</value>		
        </member>
        <member name="T:RLM.Contruction.Service.PartnerService">
            <summary>
             An component type implementation of the 'Partner' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:RLM.Contruction.Service.PartnerService.#ctor">
            <summary>
            Initializes a new instance of the PartnerService class.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Service.AttachFileService">
            <summary>
             An component type implementation of the 'AttachFile' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:RLM.Contruction.Service.AttachFileServiceBase">
            <summary>
             An object representation of the 'AttachFile' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the AttachFile.cs file instead.
             All custom implementations should be done in the <see cref="T:RLM.Contruction.Entities.AttachFile"/> class.
             </remarks>
        </member>
        <member name="M:RLM.Contruction.Service.AttachFileServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RLM.Contruction.Entities.AttachFile"/> instance .
            </summary>
        </member>
        <member name="M:RLM.Contruction.Service.AttachFileServiceBase.CreateAttachFile(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
             A simple factory method to create a new <see cref="T:RLM.Contruction.Entities.AttachFile"/> instance.
            </summary>
            <param name="name"></param>
            <param name="filePath"></param>
            <param name="type">Image, video, text file, ...</param>
            <param name="resourceId"></param>
            <param name="resourceType"></param>
            <param name="isActive"></param>
            <param name="comment"></param>
            <param name="creationUserId"></param>
            <param name="creationDate"></param>
            <param name="lastModificationUserId"></param>
            <param name="lastModificationDate"></param>
        </member>
        <member name="M:RLM.Contruction.Service.AttachFileServiceBase.Get(RLM.Contruction.Entities.AttachFileKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.AttachFileServiceBase.GetByAttachFileId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the primary key PK_AttachFiles index.
            </summary>
            <param name="attachFileId"></param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.AttachFile"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.AttachFileServiceBase.GetByAttachFileId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the datasource based on the primary key PK_AttachFiles index.
            </summary>
            <param name="attachFileId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.AttachFile"/> class.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.AttachFileServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RLM.Contruction.Entities.AttachFile"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RLM.Contruction.Service.AttachFileServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RLM.Contruction.Entities.AttachFile"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RLM.Contruction.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RLM.Contruction.Service.AttachFileServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Contruction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AttachFile</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.AttachFileServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RLM.Contruction.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AttachFile</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.AttachFileServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RLM.Contruction.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AttachFile</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.AttachFileServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.AttachFileServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.AttachFileServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{AttachFile} of <c>AttachFile</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.AttachFileServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>AttachFile</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.AttachFileServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>AttachFile</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.AttachFileServiceBase.Find(RLM.Contruction.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RLM.Contruction.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>AttachFile</c> objects.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.AttachFileServiceBase.Insert(RLM.Contruction.Entities.AttachFile)">
            <summary>
            	public virtualmethod that Inserts a AttachFile object into the datasource using a transaction.
            </summary>
            <param name="entity">AttachFile object to Insert.</param>
            <remarks>After Inserting into the datasource, the AttachFile object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            AttachFile entity = new AttachFile();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	AttachFileService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.AttachFileServiceBase.Insert(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.AttachFile})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AttachFile</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>AttachFile</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of AttachFile.
             <code><![CDATA[
             TList<AttachFile> list = new TList<AttachFile>();
             AttachFile entity = new AttachFile();
             entity.StringProperty = "foo";
             AttachFile entity2 = new AttachFile();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AttachFileService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.AttachFileServiceBase.Update(RLM.Contruction.Entities.AttachFile)">
            <summary>
            	public virtualmethod that Updates a AttachFile object into the datasource using a transaction.
            </summary>
            <param name="entity">AttachFile object to Update.</param>
            <remarks>After Updateing into the datasource, the AttachFile object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            AttachFile entity = AttachFileService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	AttachFileService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.AttachFileServiceBase.Update(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.AttachFile})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AttachFile</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>AttachFile</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of AttachFile.
             <code><![CDATA[
             TList<AttachFile> list = new TList<AttachFile>();
             AttachFile entity = new AttachFile();
             entity.StringProperty = "foo";
             AttachFile entity2 = new AttachFile();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AttachFileService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.AttachFileServiceBase.Save(RLM.Contruction.Entities.AttachFile)">
            <summary>
            	public virtualmethod that Saves a AttachFile object into the datasource using a transaction.
            </summary>
            <param name="entity">AttachFile object to Save.</param>
            <remarks>After Saveing into the datasource, the AttachFile object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            AttachFile entity = AttachFileService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	AttachFileService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.AttachFileServiceBase.Save(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.AttachFile})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AttachFile</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>AttachFile</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of AttachFile.
             <code><![CDATA[
             TList<AttachFile> list = new TList<AttachFile>();
             AttachFile entity = new AttachFile();
             entity.StringProperty = "foo";
             AttachFile entity2 = new AttachFile();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AttachFileService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.AttachFileServiceBase.Delete(RLM.Contruction.Entities.AttachFile)">
            <summary>
            	public virtualmethod that Deletes a AttachFile object into the datasource using a transaction.
            </summary>
            <param name="entity">AttachFile object to Delete.</param>
            <remarks>After Deleteing into the datasource, the AttachFile object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            AttachFile entity = AttachFileService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	AttachFileService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RLM.Contruction.Service.AttachFileServiceBase.Delete(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.AttachFile})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:RLM.Contruction.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AttachFile</c> objects in a <see cref="T:RLM.Contruction.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>AttachFile</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of AttachFile.
             <code><![CDATA[
             TList<AttachFile> list = new TList<AttachFile>();
             AttachFile entity = new AttachFile();
             entity.StringProperty = "foo";
             AttachFile entity2 = new AttachFile();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AttachFileService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RLM.Contruction.Service.AttachFileServiceBase.Delete(RLM.Contruction.Entities.AttachFileKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.AttachFileServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 attachFileId
            </summary>
            <param name="attachFileId">AttachFile pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.AttachFileServiceBase.DeepLoadByAttachFileId(System.Int32,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RLM.Contruction.Entities.AttachFile"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <param name="attachFileId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AttachFile Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RLM.Contruction.Entities.AttachFile"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RLM.Contruction.Service.AttachFileServiceBase.DeepLoad(RLM.Contruction.Entities.AttachFile)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">AttachFile Object</param>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.AttachFileServiceBase.DeepLoad(RLM.Contruction.Entities.AttachFile)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RLM.Contruction.Service.AttachFileServiceBase.DeepLoad(RLM.Contruction.Entities.AttachFile,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.AttachFileServiceBase.DeepLoad(RLM.Contruction.Entities.AttachFile)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">AttachFile Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Contruction.Service.AttachFileServiceBase.DeepLoad(RLM.Contruction.Entities.AttachFile,System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RLM.Contruction.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RLM.Contruction.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RLM.Contruction.Entities.AttachFile"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AttachFile Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Contruction.Service.AttachFileServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.AttachFile})">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.AttachFileServiceBase.DeepLoad(RLM.Contruction.Entities.AttachFile)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Contruction.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RLM.Contruction.Service.AttachFileServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.AttachFile},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RLM.Contruction.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RLM.Contruction.Service.AttachFileServiceBase.DeepLoad(RLM.Contruction.Entities.AttachFile)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RLM.Contruction.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RLM.Contruction.Service.AttachFileServiceBase.DeepLoad(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.AttachFile},System.Boolean,RLM.Contruction.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RLM.Contruction.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RLM.Contruction.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RLM.Contruction.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RLM.Contruction.Entities.AttachFile"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RLM.Contruction.Service.AttachFileServiceBase.DeepSave(RLM.Contruction.Entities.AttachFile)">
            <summary>
            public virtualDeep Saves the <see cref="T:RLM.Contruction.Entities.AttachFile"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">AttachFile Object</param>
        </member>
        <member name="M:RLM.Contruction.Service.AttachFileServiceBase.DeepSave(RLM.Contruction.Entities.AttachFile,RLM.Contruction.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the AttachFile object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">AttachFile Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>AttachFile</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RLM.Contruction.Service.AttachFileServiceBase.DeepSave(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.AttachFile})">
            <summary>
            Deep Save the entire <see cref="T:RLM.Contruction.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{AttachFile} Object</param>
        </member>
        <member name="M:RLM.Contruction.Service.AttachFileServiceBase.DeepSave(RLM.Contruction.Entities.TList{RLM.Contruction.Entities.AttachFile},RLM.Contruction.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RLM.Contruction.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RLM.Contruction.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">AttachFile Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RLM.Contruction.Service.AttachFileServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Service.AttachFileService.#ctor">
            <summary>
            Initializes a new instance of the AttachFileService class.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Service.SecurityContext`1">
            <summary>
            The class that is available in case role based security is required at runtime.  
            It will be made availabe through the entities themselves.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Service.SecurityContext`1.#ctor">
            <summary>
            Initializes a new instance of the SecurityContext class.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Service.SecurityContext`1.IsAuthorized(System.String)">
            <summary>
            Determine whether user is authorized for the rule based on the rule provider
            </summary>
        </member>
        <member name="P:RLM.Contruction.Service.SecurityContext`1.Identity">
            <summary>
            The Current IIdentity .
            </summary>
        </member>
        <member name="P:RLM.Contruction.Service.SecurityContext`1.Profile">
            <summary>
            The Current Profile .
            </summary>
        </member>
        <member name="P:RLM.Contruction.Service.SecurityContext`1.Principal">
            <summary>
             The Current IPrincipal .
            </summary>
        </member>
        <member name="P:RLM.Contruction.Service.SecurityContext`1.RuleProvider">
            <summary>
             The Current Authorization Rule Provider
            </summary>
        </member>
        <member name="T:RLM.Contruction.Service.ContextView`2">
            <summary>
            Used to create a general view of the current context.  
            Useful for firing events and giving the UI a picture of 
            current State of Operation.
            </summary>
            <typeparam name="Entity">The Entity object</typeparam>
            <typeparam name="Domain">Type that holds </typeparam>
        </member>
        <member name="M:RLM.Contruction.Service.ContextView`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RLM.Contruction.Service.ContextView`2"/> class.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Service.ContextView`2.#ctor(`0,RLM.Contruction.Service.SecurityContext{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:RLM.Contruction.Service.ContextView`2"/> class.
            </summary>
            <param name="persistingObject">The persisting object.</param>
            <param name="securityContext">The security context.</param>
        </member>
        <member name="M:RLM.Contruction.Service.ContextView`2.#ctor(`0,RLM.Contruction.Service.SecurityContext{`0},RLM.Contruction.Data.TransactionManager)">
            <summary>
            Initializes a new instance of the <see cref="T:RLM.Contruction.Service.ContextView`2"/> class.
            </summary>
            <param name="persistingObject">The persisting object.</param>
            <param name="securityContext">The security context.</param>
            <param name="transactionManager">The transaction manager.</param>
        </member>
        <member name="P:RLM.Contruction.Service.ContextView`2.PersistingObject">
            <summary>
            Gets or sets the persisting object.
            </summary>
            <value>The persisting object.</value>
        </member>
        <member name="P:RLM.Contruction.Service.ContextView`2.SecurityContext">
            <summary>
            Gets or sets the security context.
            </summary>
            <value>The security context.</value>
        </member>
        <member name="P:RLM.Contruction.Service.ContextView`2.TransactionManager">
            <summary>
            Gets or sets the transaction manager.
            </summary>
            <value>The transaction manager.</value>
        </member>
        <member name="T:RLM.Contruction.Service.GenericProcessorResult">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary> 
        </member>
        <member name="M:RLM.Contruction.Service.GenericProcessorResult.#ctor">
            <summary>
            Initializes a new instance of the GenericProcessorResult class.
            </summary>
        </member>
        <member name="M:RLM.Contruction.Service.GenericProcessorResult.AddBrokenRulesList(System.Type,RLM.Contruction.Entities.Validation.BrokenRulesList)">
            <summary>
            Provides a method to aggregate BrokenRuleList Collections Based on their Type 
            if they are invalid.
            </summary>
        </member>
        <member name="P:RLM.Contruction.Service.GenericProcessorResult.Result">
             <summary>
            	Provides a result of the current process.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:RLM.Contruction.Service.GenericProcessorResult.BrokenRulesLists">
             <summary>
            	Provides a list of broken rules for the entire process.
             </summary>
            <value>A list of rules that were broken in the process</value>
        </member>
        <member name="P:RLM.Contruction.Service.GenericProcessorResult.FinalProcessorState">
            <summary>
            Provides the final processor state the operation. 
            This is set by the processor.
            </summary>
        </member>
        <member name="T:RLM.Contruction.Service.ItemService">
            <summary>
             An component type implementation of the 'Item' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:RLM.Contruction.Service.ItemService.#ctor">
            <summary>
            Initializes a new instance of the ItemService class.
            </summary>
        </member>
    </members>
</doc>
